
LAB1_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f38  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007110  08007110  00017110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007150  08007150  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007150  08007150  00017150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007158  08007158  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007158  08007158  00017158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800715c  0800715c  0001715c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  20000010  08007170  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  08007170  000204f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001774a  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a85  00000000  00000000  000377cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001498  00000000  00000000  0003a258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000101b  00000000  00000000  0003b6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a3a  00000000  00000000  0003c70b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001752a  00000000  00000000  00064145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e9ef  00000000  00000000  0007b66f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005994  00000000  00000000  0018a060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0018f9f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080070f8 	.word	0x080070f8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	080070f8 	.word	0x080070f8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fe6b 	bl	80011f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f836 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 faa2 	bl	8000a68 <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 fa76 	bl	8000a14 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000528:	f000 f916 	bl	8000758 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 800052c:	f000 f95e 	bl	80007ec <MX_TIM2_Init>
  MX_ADC1_Init();
 8000530:	f000 f878 	bl	8000624 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000534:	f000 f9a8 	bl	8000888 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000538:	f000 f9f4 	bl	8000924 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2); //Interrupt
 800053c:	480e      	ldr	r0, [pc, #56]	; (8000578 <main+0x64>)
 800053e:	f004 fc37 	bl	8004db0 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000542:	217f      	movs	r1, #127	; 0x7f
 8000544:	480d      	ldr	r0, [pc, #52]	; (800057c <main+0x68>)
 8000546:	f002 fc5f 	bl	8002e08 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 300);
 800054a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800054e:	490c      	ldr	r1, [pc, #48]	; (8000580 <main+0x6c>)
 8000550:	480a      	ldr	r0, [pc, #40]	; (800057c <main+0x68>)
 8000552:	f001 fae1 	bl	8001b18 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 8000556:	480b      	ldr	r0, [pc, #44]	; (8000584 <main+0x70>)
 8000558:	f004 fbba 	bl	8004cd0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 800055c:	480a      	ldr	r0, [pc, #40]	; (8000588 <main+0x74>)
 800055e:	f004 fbb7 	bl	8004cd0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000562:	2100      	movs	r1, #0
 8000564:	4808      	ldr	r0, [pc, #32]	; (8000588 <main+0x74>)
 8000566:	f004 fcfd 	bl	8004f64 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  micros();
 800056a:	f000 fb03 	bl	8000b74 <micros>
	  avg();
 800056e:	f000 fb47 	bl	8000c00 <avg>
	  pot();
 8000572:	f000 fbad 	bl	8000cd0 <pot>
	  micros();
 8000576:	e7f8      	b.n	800056a <main+0x56>
 8000578:	2000018c 	.word	0x2000018c
 800057c:	2000002c 	.word	0x2000002c
 8000580:	20000278 	.word	0x20000278
 8000584:	200001d8 	.word	0x200001d8
 8000588:	20000224 	.word	0x20000224

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	; 0x50
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0318 	add.w	r3, r7, #24
 8000596:	2238      	movs	r2, #56	; 0x38
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f006 fd80 	bl	80070a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f003 fb06 	bl	8003bc0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b4:	2302      	movs	r3, #2
 80005b6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005be:	2340      	movs	r3, #64	; 0x40
 80005c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c2:	2302      	movs	r3, #2
 80005c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c6:	2302      	movs	r3, #2
 80005c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005ca:	2304      	movs	r3, #4
 80005cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005ce:	2355      	movs	r3, #85	; 0x55
 80005d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005da:	2302      	movs	r3, #2
 80005dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005de:	f107 0318 	add.w	r3, r7, #24
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 fba0 	bl	8003d28 <HAL_RCC_OscConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005ee:	f000 fbcb 	bl	8000d88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f2:	230f      	movs	r3, #15
 80005f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f6:	2303      	movs	r3, #3
 80005f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	2104      	movs	r1, #4
 800060a:	4618      	mov	r0, r3
 800060c:	f003 fe9e 	bl	800434c <HAL_RCC_ClockConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000616:	f000 fbb7 	bl	8000d88 <Error_Handler>
  }
}
 800061a:	bf00      	nop
 800061c:	3750      	adds	r7, #80	; 0x50
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08c      	sub	sp, #48	; 0x30
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800062a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2220      	movs	r2, #32
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f006 fd2f 	bl	80070a0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000642:	4b41      	ldr	r3, [pc, #260]	; (8000748 <MX_ADC1_Init+0x124>)
 8000644:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000648:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800064a:	4b3f      	ldr	r3, [pc, #252]	; (8000748 <MX_ADC1_Init+0x124>)
 800064c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000650:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000652:	4b3d      	ldr	r3, [pc, #244]	; (8000748 <MX_ADC1_Init+0x124>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000658:	4b3b      	ldr	r3, [pc, #236]	; (8000748 <MX_ADC1_Init+0x124>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800065e:	4b3a      	ldr	r3, [pc, #232]	; (8000748 <MX_ADC1_Init+0x124>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000664:	4b38      	ldr	r3, [pc, #224]	; (8000748 <MX_ADC1_Init+0x124>)
 8000666:	2201      	movs	r2, #1
 8000668:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800066a:	4b37      	ldr	r3, [pc, #220]	; (8000748 <MX_ADC1_Init+0x124>)
 800066c:	2204      	movs	r2, #4
 800066e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000670:	4b35      	ldr	r3, [pc, #212]	; (8000748 <MX_ADC1_Init+0x124>)
 8000672:	2200      	movs	r2, #0
 8000674:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000676:	4b34      	ldr	r3, [pc, #208]	; (8000748 <MX_ADC1_Init+0x124>)
 8000678:	2201      	movs	r2, #1
 800067a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 800067c:	4b32      	ldr	r3, [pc, #200]	; (8000748 <MX_ADC1_Init+0x124>)
 800067e:	2203      	movs	r2, #3
 8000680:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000682:	4b31      	ldr	r3, [pc, #196]	; (8000748 <MX_ADC1_Init+0x124>)
 8000684:	2200      	movs	r2, #0
 8000686:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 800068a:	4b2f      	ldr	r3, [pc, #188]	; (8000748 <MX_ADC1_Init+0x124>)
 800068c:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8000690:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000692:	4b2d      	ldr	r3, [pc, #180]	; (8000748 <MX_ADC1_Init+0x124>)
 8000694:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000698:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800069a:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <MX_ADC1_Init+0x124>)
 800069c:	2201      	movs	r2, #1
 800069e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006a2:	4b29      	ldr	r3, [pc, #164]	; (8000748 <MX_ADC1_Init+0x124>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80006a8:	4b27      	ldr	r3, [pc, #156]	; (8000748 <MX_ADC1_Init+0x124>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006b0:	4825      	ldr	r0, [pc, #148]	; (8000748 <MX_ADC1_Init+0x124>)
 80006b2:	f001 f875 	bl	80017a0 <HAL_ADC_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80006bc:	f000 fb64 	bl	8000d88 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006c0:	2300      	movs	r3, #0
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c8:	4619      	mov	r1, r3
 80006ca:	481f      	ldr	r0, [pc, #124]	; (8000748 <MX_ADC1_Init+0x124>)
 80006cc:	f002 fc30 	bl	8002f30 <HAL_ADCEx_MultiModeConfigChannel>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80006d6:	f000 fb57 	bl	8000d88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006da:	4b1c      	ldr	r3, [pc, #112]	; (800074c <MX_ADC1_Init+0x128>)
 80006dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006de:	2306      	movs	r3, #6
 80006e0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80006e2:	2307      	movs	r3, #7
 80006e4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006e6:	237f      	movs	r3, #127	; 0x7f
 80006e8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ea:	2304      	movs	r3, #4
 80006ec:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	4619      	mov	r1, r3
 80006f6:	4814      	ldr	r0, [pc, #80]	; (8000748 <MX_ADC1_Init+0x124>)
 80006f8:	f001 fd6a 	bl	80021d0 <HAL_ADC_ConfigChannel>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000702:	f000 fb41 	bl	8000d88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000706:	4b12      	ldr	r3, [pc, #72]	; (8000750 <MX_ADC1_Init+0x12c>)
 8000708:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800070a:	230c      	movs	r3, #12
 800070c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	4619      	mov	r1, r3
 8000712:	480d      	ldr	r0, [pc, #52]	; (8000748 <MX_ADC1_Init+0x124>)
 8000714:	f001 fd5c 	bl	80021d0 <HAL_ADC_ConfigChannel>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800071e:	f000 fb33 	bl	8000d88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_ADC1_Init+0x130>)
 8000724:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000726:	2312      	movs	r3, #18
 8000728:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	4619      	mov	r1, r3
 800072e:	4806      	ldr	r0, [pc, #24]	; (8000748 <MX_ADC1_Init+0x124>)
 8000730:	f001 fd4e 	bl	80021d0 <HAL_ADC_ConfigChannel>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 800073a:	f000 fb25 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	3730      	adds	r7, #48	; 0x30
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	2000002c 	.word	0x2000002c
 800074c:	04300002 	.word	0x04300002
 8000750:	08600004 	.word	0x08600004
 8000754:	3ef08000 	.word	0x3ef08000

08000758 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800075c:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <MX_LPUART1_UART_Init+0x8c>)
 800075e:	4a22      	ldr	r2, [pc, #136]	; (80007e8 <MX_LPUART1_UART_Init+0x90>)
 8000760:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000762:	4b20      	ldr	r3, [pc, #128]	; (80007e4 <MX_LPUART1_UART_Init+0x8c>)
 8000764:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000768:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <MX_LPUART1_UART_Init+0x8c>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <MX_LPUART1_UART_Init+0x8c>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000776:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <MX_LPUART1_UART_Init+0x8c>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <MX_LPUART1_UART_Init+0x8c>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <MX_LPUART1_UART_Init+0x8c>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000788:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_LPUART1_UART_Init+0x8c>)
 800078a:	2200      	movs	r2, #0
 800078c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800078e:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <MX_LPUART1_UART_Init+0x8c>)
 8000790:	2200      	movs	r2, #0
 8000792:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000794:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <MX_LPUART1_UART_Init+0x8c>)
 8000796:	2200      	movs	r2, #0
 8000798:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800079a:	4812      	ldr	r0, [pc, #72]	; (80007e4 <MX_LPUART1_UART_Init+0x8c>)
 800079c:	f005 fe12 	bl	80063c4 <HAL_UART_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80007a6:	f000 faef 	bl	8000d88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007aa:	2100      	movs	r1, #0
 80007ac:	480d      	ldr	r0, [pc, #52]	; (80007e4 <MX_LPUART1_UART_Init+0x8c>)
 80007ae:	f006 fbad 	bl	8006f0c <HAL_UARTEx_SetTxFifoThreshold>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80007b8:	f000 fae6 	bl	8000d88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007bc:	2100      	movs	r1, #0
 80007be:	4809      	ldr	r0, [pc, #36]	; (80007e4 <MX_LPUART1_UART_Init+0x8c>)
 80007c0:	f006 fbe2 	bl	8006f88 <HAL_UARTEx_SetRxFifoThreshold>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80007ca:	f000 fadd 	bl	8000d88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_LPUART1_UART_Init+0x8c>)
 80007d0:	f006 fb63 	bl	8006e9a <HAL_UARTEx_DisableFifoMode>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80007da:	f000 fad5 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200000f8 	.word	0x200000f8
 80007e8:	40008000 	.word	0x40008000

080007ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b088      	sub	sp, #32
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007f2:	f107 0310 	add.w	r3, r7, #16
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800080a:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <MX_TIM2_Init+0x98>)
 800080c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000810:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <MX_TIM2_Init+0x98>)
 8000814:	22a9      	movs	r2, #169	; 0xa9
 8000816:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000818:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <MX_TIM2_Init+0x98>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 800081e:	4b19      	ldr	r3, [pc, #100]	; (8000884 <MX_TIM2_Init+0x98>)
 8000820:	f04f 32ff 	mov.w	r2, #4294967295
 8000824:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <MX_TIM2_Init+0x98>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082c:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_TIM2_Init+0x98>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000832:	4814      	ldr	r0, [pc, #80]	; (8000884 <MX_TIM2_Init+0x98>)
 8000834:	f004 f9f4 	bl	8004c20 <HAL_TIM_Base_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800083e:	f000 faa3 	bl	8000d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000846:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000848:	f107 0310 	add.w	r3, r7, #16
 800084c:	4619      	mov	r1, r3
 800084e:	480d      	ldr	r0, [pc, #52]	; (8000884 <MX_TIM2_Init+0x98>)
 8000850:	f004 fefe 	bl	8005650 <HAL_TIM_ConfigClockSource>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800085a:	f000 fa95 	bl	8000d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	4619      	mov	r1, r3
 800086a:	4806      	ldr	r0, [pc, #24]	; (8000884 <MX_TIM2_Init+0x98>)
 800086c:	f005 fcce 	bl	800620c <HAL_TIMEx_MasterConfigSynchronization>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000876:	f000 fa87 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	3720      	adds	r7, #32
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	2000018c 	.word	0x2000018c

08000888 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800088e:	f107 0310 	add.w	r3, r7, #16
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008a6:	4b1d      	ldr	r3, [pc, #116]	; (800091c <MX_TIM3_Init+0x94>)
 80008a8:	4a1d      	ldr	r2, [pc, #116]	; (8000920 <MX_TIM3_Init+0x98>)
 80008aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 56666;
 80008ac:	4b1b      	ldr	r3, [pc, #108]	; (800091c <MX_TIM3_Init+0x94>)
 80008ae:	f64d 525a 	movw	r2, #56666	; 0xdd5a
 80008b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b4:	4b19      	ldr	r3, [pc, #100]	; (800091c <MX_TIM3_Init+0x94>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 80008ba:	4b18      	ldr	r3, [pc, #96]	; (800091c <MX_TIM3_Init+0x94>)
 80008bc:	2201      	movs	r2, #1
 80008be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c0:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_TIM3_Init+0x94>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <MX_TIM3_Init+0x94>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008cc:	4813      	ldr	r0, [pc, #76]	; (800091c <MX_TIM3_Init+0x94>)
 80008ce:	f004 f9a7 	bl	8004c20 <HAL_TIM_Base_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80008d8:	f000 fa56 	bl	8000d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008e2:	f107 0310 	add.w	r3, r7, #16
 80008e6:	4619      	mov	r1, r3
 80008e8:	480c      	ldr	r0, [pc, #48]	; (800091c <MX_TIM3_Init+0x94>)
 80008ea:	f004 feb1 	bl	8005650 <HAL_TIM_ConfigClockSource>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80008f4:	f000 fa48 	bl	8000d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008f8:	2320      	movs	r3, #32
 80008fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	4619      	mov	r1, r3
 8000904:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_TIM3_Init+0x94>)
 8000906:	f005 fc81 	bl	800620c <HAL_TIMEx_MasterConfigSynchronization>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000910:	f000 fa3a 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	3720      	adds	r7, #32
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	200001d8 	.word	0x200001d8
 8000920:	40000400 	.word	0x40000400

08000924 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08e      	sub	sp, #56	; 0x38
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800092a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000944:	463b      	mov	r3, r7
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]
 8000952:	615a      	str	r2, [r3, #20]
 8000954:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000956:	4b2d      	ldr	r3, [pc, #180]	; (8000a0c <MX_TIM4_Init+0xe8>)
 8000958:	4a2d      	ldr	r2, [pc, #180]	; (8000a10 <MX_TIM4_Init+0xec>)
 800095a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 800095c:	4b2b      	ldr	r3, [pc, #172]	; (8000a0c <MX_TIM4_Init+0xe8>)
 800095e:	22a9      	movs	r2, #169	; 0xa9
 8000960:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000962:	4b2a      	ldr	r3, [pc, #168]	; (8000a0c <MX_TIM4_Init+0xe8>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8000968:	4b28      	ldr	r3, [pc, #160]	; (8000a0c <MX_TIM4_Init+0xe8>)
 800096a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800096e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000970:	4b26      	ldr	r3, [pc, #152]	; (8000a0c <MX_TIM4_Init+0xe8>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000976:	4b25      	ldr	r3, [pc, #148]	; (8000a0c <MX_TIM4_Init+0xe8>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800097c:	4823      	ldr	r0, [pc, #140]	; (8000a0c <MX_TIM4_Init+0xe8>)
 800097e:	f004 f94f 	bl	8004c20 <HAL_TIM_Base_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000988:	f000 f9fe 	bl	8000d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800098c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000992:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000996:	4619      	mov	r1, r3
 8000998:	481c      	ldr	r0, [pc, #112]	; (8000a0c <MX_TIM4_Init+0xe8>)
 800099a:	f004 fe59 	bl	8005650 <HAL_TIM_ConfigClockSource>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80009a4:	f000 f9f0 	bl	8000d88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009a8:	4818      	ldr	r0, [pc, #96]	; (8000a0c <MX_TIM4_Init+0xe8>)
 80009aa:	f004 fa79 	bl	8004ea0 <HAL_TIM_PWM_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80009b4:	f000 f9e8 	bl	8000d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	4811      	ldr	r0, [pc, #68]	; (8000a0c <MX_TIM4_Init+0xe8>)
 80009c8:	f005 fc20 	bl	800620c <HAL_TIMEx_MasterConfigSynchronization>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80009d2:	f000 f9d9 	bl	8000d88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009d6:	2360      	movs	r3, #96	; 0x60
 80009d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 80009da:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80009de:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009e8:	463b      	mov	r3, r7
 80009ea:	2200      	movs	r2, #0
 80009ec:	4619      	mov	r1, r3
 80009ee:	4807      	ldr	r0, [pc, #28]	; (8000a0c <MX_TIM4_Init+0xe8>)
 80009f0:	f004 fd1a 	bl	8005428 <HAL_TIM_PWM_ConfigChannel>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80009fa:	f000 f9c5 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80009fe:	4803      	ldr	r0, [pc, #12]	; (8000a0c <MX_TIM4_Init+0xe8>)
 8000a00:	f000 fb34 	bl	800106c <HAL_TIM_MspPostInit>

}
 8000a04:	bf00      	nop
 8000a06:	3738      	adds	r7, #56	; 0x38
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000224 	.word	0x20000224
 8000a10:	40000800 	.word	0x40000800

08000a14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a1a:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_DMA_Init+0x50>)
 8000a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a1e:	4a11      	ldr	r2, [pc, #68]	; (8000a64 <MX_DMA_Init+0x50>)
 8000a20:	f043 0304 	orr.w	r3, r3, #4
 8000a24:	6493      	str	r3, [r2, #72]	; 0x48
 8000a26:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_DMA_Init+0x50>)
 8000a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a2a:	f003 0304 	and.w	r3, r3, #4
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_DMA_Init+0x50>)
 8000a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a36:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <MX_DMA_Init+0x50>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6493      	str	r3, [r2, #72]	; 0x48
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_DMA_Init+0x50>)
 8000a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	200b      	movs	r0, #11
 8000a50:	f002 fc51 	bl	80032f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a54:	200b      	movs	r0, #11
 8000a56:	f002 fc68 	bl	800332a <HAL_NVIC_EnableIRQ>

}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40021000 	.word	0x40021000

08000a68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	; 0x28
 8000a6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
 8000a7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7e:	4b2f      	ldr	r3, [pc, #188]	; (8000b3c <MX_GPIO_Init+0xd4>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a82:	4a2e      	ldr	r2, [pc, #184]	; (8000b3c <MX_GPIO_Init+0xd4>)
 8000a84:	f043 0304 	orr.w	r3, r3, #4
 8000a88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8a:	4b2c      	ldr	r3, [pc, #176]	; (8000b3c <MX_GPIO_Init+0xd4>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8e:	f003 0304 	and.w	r3, r3, #4
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a96:	4b29      	ldr	r3, [pc, #164]	; (8000b3c <MX_GPIO_Init+0xd4>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9a:	4a28      	ldr	r2, [pc, #160]	; (8000b3c <MX_GPIO_Init+0xd4>)
 8000a9c:	f043 0320 	orr.w	r3, r3, #32
 8000aa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa2:	4b26      	ldr	r3, [pc, #152]	; (8000b3c <MX_GPIO_Init+0xd4>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa6:	f003 0320 	and.w	r3, r3, #32
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <MX_GPIO_Init+0xd4>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab2:	4a22      	ldr	r2, [pc, #136]	; (8000b3c <MX_GPIO_Init+0xd4>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aba:	4b20      	ldr	r3, [pc, #128]	; (8000b3c <MX_GPIO_Init+0xd4>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac6:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <MX_GPIO_Init+0xd4>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aca:	4a1c      	ldr	r2, [pc, #112]	; (8000b3c <MX_GPIO_Init+0xd4>)
 8000acc:	f043 0302 	orr.w	r3, r3, #2
 8000ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad2:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <MX_GPIO_Init+0xd4>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2120      	movs	r1, #32
 8000ae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae6:	f003 f82f 	bl	8003b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	480f      	ldr	r0, [pc, #60]	; (8000b40 <MX_GPIO_Init+0xd8>)
 8000b02:	f002 fe9f 	bl	8003844 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b06:	2320      	movs	r3, #32
 8000b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2300      	movs	r3, #0
 8000b14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b20:	f002 fe90 	bl	8003844 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2100      	movs	r1, #0
 8000b28:	2028      	movs	r0, #40	; 0x28
 8000b2a:	f002 fbe4 	bl	80032f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b2e:	2028      	movs	r0, #40	; 0x28
 8000b30:	f002 fbfb 	bl	800332a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b34:	bf00      	nop
 8000b36:	3728      	adds	r7, #40	; 0x28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	48000800 	.word	0x48000800

08000b44 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a07      	ldr	r2, [pc, #28]	; (8000b6c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d104      	bne.n	8000b5e <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		counter++;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	4a05      	ldr	r2, [pc, #20]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000b5c:	6013      	str	r3, [r2, #0]
	}
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	2000018c 	.word	0x2000018c
 8000b70:	20000000 	.word	0x20000000

08000b74 <micros>:
void micros()
{
 8000b74:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000b78:	b087      	sub	sp, #28
 8000b7a:	af00      	add	r7, sp, #0
	timestamp = counter*(4294967295) + __HAL_TIM_GET_COUNTER(&htim2);
 8000b7c:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <micros+0x80>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2200      	movs	r2, #0
 8000b82:	4698      	mov	r8, r3
 8000b84:	4691      	mov	r9, r2
 8000b86:	4642      	mov	r2, r8
 8000b88:	464b      	mov	r3, r9
 8000b8a:	f04f 0400 	mov.w	r4, #0
 8000b8e:	f04f 0500 	mov.w	r5, #0
 8000b92:	07dd      	lsls	r5, r3, #31
 8000b94:	ea45 0552 	orr.w	r5, r5, r2, lsr #1
 8000b98:	07d4      	lsls	r4, r2, #31
 8000b9a:	4622      	mov	r2, r4
 8000b9c:	462b      	mov	r3, r5
 8000b9e:	ebb2 0008 	subs.w	r0, r2, r8
 8000ba2:	eb63 0109 	sbc.w	r1, r3, r9
 8000ba6:	1803      	adds	r3, r0, r0
 8000ba8:	603b      	str	r3, [r7, #0]
 8000baa:	eb41 0301 	adc.w	r3, r1, r1
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000bb4:	eb10 0a08 	adds.w	sl, r0, r8
 8000bb8:	eb41 0b09 	adc.w	fp, r1, r9
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <micros+0x84>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	617a      	str	r2, [r7, #20]
 8000bc8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000bcc:	460b      	mov	r3, r1
 8000bce:	eb1a 0303 	adds.w	r3, sl, r3
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	eb4b 0303 	adc.w	r3, fp, r3
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000be0:	4906      	ldr	r1, [pc, #24]	; (8000bfc <micros+0x88>)
 8000be2:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000be6:	bf00      	nop
 8000be8:	371c      	adds	r7, #28
 8000bea:	46bd      	mov	sp, r7
 8000bec:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000000 	.word	0x20000000
 8000bf8:	2000018c 	.word	0x2000018c
 8000bfc:	20000270 	.word	0x20000270

08000c00 <avg>:
void avg()
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
	for (int i = 0; i < 100; i++)
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	e028      	b.n	8000c5e <avg+0x5e>
	{
		sum[0] += ADC_RawRead[(3*i)];
 8000c0c:	4b2c      	ldr	r3, [pc, #176]	; (8000cc0 <avg+0xc0>)
 8000c0e:	6819      	ldr	r1, [r3, #0]
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	4613      	mov	r3, r2
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	4413      	add	r3, r2
 8000c18:	4a2a      	ldr	r2, [pc, #168]	; (8000cc4 <avg+0xc4>)
 8000c1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c1e:	440b      	add	r3, r1
 8000c20:	4a27      	ldr	r2, [pc, #156]	; (8000cc0 <avg+0xc0>)
 8000c22:	6013      	str	r3, [r2, #0]
		sum[1] += ADC_RawRead[(3*i) + 1];
 8000c24:	4b26      	ldr	r3, [pc, #152]	; (8000cc0 <avg+0xc0>)
 8000c26:	6859      	ldr	r1, [r3, #4]
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	4413      	add	r3, r2
 8000c30:	3301      	adds	r3, #1
 8000c32:	4a24      	ldr	r2, [pc, #144]	; (8000cc4 <avg+0xc4>)
 8000c34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c38:	440b      	add	r3, r1
 8000c3a:	4a21      	ldr	r2, [pc, #132]	; (8000cc0 <avg+0xc0>)
 8000c3c:	6053      	str	r3, [r2, #4]
		sum[2] += ADC_RawRead[(3*i) + 2];
 8000c3e:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <avg+0xc0>)
 8000c40:	6899      	ldr	r1, [r3, #8]
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	4613      	mov	r3, r2
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	4413      	add	r3, r2
 8000c4a:	3302      	adds	r3, #2
 8000c4c:	4a1d      	ldr	r2, [pc, #116]	; (8000cc4 <avg+0xc4>)
 8000c4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c52:	440b      	add	r3, r1
 8000c54:	4a1a      	ldr	r2, [pc, #104]	; (8000cc0 <avg+0xc0>)
 8000c56:	6093      	str	r3, [r2, #8]
	for (int i = 0; i < 100; i++)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2b63      	cmp	r3, #99	; 0x63
 8000c62:	ddd3      	ble.n	8000c0c <avg+0xc>
	}
		Avg[0] = sum[0]/100;
 8000c64:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <avg+0xc0>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a17      	ldr	r2, [pc, #92]	; (8000cc8 <avg+0xc8>)
 8000c6a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c6e:	1152      	asrs	r2, r2, #5
 8000c70:	17db      	asrs	r3, r3, #31
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	4a15      	ldr	r2, [pc, #84]	; (8000ccc <avg+0xcc>)
 8000c76:	6013      	str	r3, [r2, #0]
		Avg[1] = sum[1]/100;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <avg+0xc0>)
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	4a12      	ldr	r2, [pc, #72]	; (8000cc8 <avg+0xc8>)
 8000c7e:	fb82 1203 	smull	r1, r2, r2, r3
 8000c82:	1152      	asrs	r2, r2, #5
 8000c84:	17db      	asrs	r3, r3, #31
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	4a10      	ldr	r2, [pc, #64]	; (8000ccc <avg+0xcc>)
 8000c8a:	6053      	str	r3, [r2, #4]
		Avg[2] = sum[2]/100;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <avg+0xc0>)
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	4a0d      	ldr	r2, [pc, #52]	; (8000cc8 <avg+0xc8>)
 8000c92:	fb82 1203 	smull	r1, r2, r2, r3
 8000c96:	1152      	asrs	r2, r2, #5
 8000c98:	17db      	asrs	r3, r3, #31
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	4a0b      	ldr	r2, [pc, #44]	; (8000ccc <avg+0xcc>)
 8000c9e:	6093      	str	r3, [r2, #8]
		//return 0
		sum[0] = 0;
 8000ca0:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <avg+0xc0>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
		sum[1] = 0;
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <avg+0xc0>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	605a      	str	r2, [r3, #4]
		sum[2] = 0;
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <avg+0xc0>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	200004d0 	.word	0x200004d0
 8000cc4:	20000278 	.word	0x20000278
 8000cc8:	51eb851f 	.word	0x51eb851f
 8000ccc:	200004dc 	.word	0x200004dc

08000cd0 <pot>:
void pot()
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
	if (Avg[0] < 1024)
 8000cd4:	4b28      	ldr	r3, [pc, #160]	; (8000d78 <pot+0xa8>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cdc:	da08      	bge.n	8000cf0 <pot+0x20>
	{
		state = 1;
 8000cde:	4b27      	ldr	r3, [pc, #156]	; (8000d7c <pot+0xac>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 500);
 8000ce4:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <pot+0xb0>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000cec:	635a      	str	r2, [r3, #52]	; 0x34
	else
	{
		state = 4;
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 2500);
	}
}
 8000cee:	e03d      	b.n	8000d6c <pot+0x9c>
	else if (Avg[0] < 2048)
 8000cf0:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <pot+0xa8>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cf8:	da15      	bge.n	8000d26 <pot+0x56>
		state = 2;
 8000cfa:	4b20      	ldr	r3, [pc, #128]	; (8000d7c <pot+0xac>)
 8000cfc:	2202      	movs	r2, #2
 8000cfe:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ((Avg[1]  * 2000)/4095) + 500);
 8000d00:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <pot+0xa8>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d08:	fb02 f303 	mul.w	r3, r2, r3
 8000d0c:	4a1d      	ldr	r2, [pc, #116]	; (8000d84 <pot+0xb4>)
 8000d0e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d12:	441a      	add	r2, r3
 8000d14:	12d2      	asrs	r2, r2, #11
 8000d16:	17db      	asrs	r3, r3, #31
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <pot+0xb0>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d24:	e022      	b.n	8000d6c <pot+0x9c>
	else if (Avg[0] < 3072)
 8000d26:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <pot+0xa8>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8000d2e:	da15      	bge.n	8000d5c <pot+0x8c>
		state = 3;
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <pot+0xac>)
 8000d32:	2203      	movs	r2, #3
 8000d34:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ((Avg[2]  * 2000)/4095) + 500);
 8000d36:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <pot+0xa8>)
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d3e:	fb02 f303 	mul.w	r3, r2, r3
 8000d42:	4a10      	ldr	r2, [pc, #64]	; (8000d84 <pot+0xb4>)
 8000d44:	fb82 1203 	smull	r1, r2, r2, r3
 8000d48:	441a      	add	r2, r3
 8000d4a:	12d2      	asrs	r2, r2, #11
 8000d4c:	17db      	asrs	r3, r3, #31
 8000d4e:	1ad3      	subs	r3, r2, r3
 8000d50:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8000d54:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <pot+0xb0>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d5a:	e007      	b.n	8000d6c <pot+0x9c>
		state = 4;
 8000d5c:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <pot+0xac>)
 8000d5e:	2204      	movs	r2, #4
 8000d60:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 2500);
 8000d62:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <pot+0xb0>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000d6a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	200004dc 	.word	0x200004dc
 8000d7c:	200004e8 	.word	0x200004e8
 8000d80:	20000224 	.word	0x20000224
 8000d84:	80080081 	.word	0x80080081

08000d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d8c:	b672      	cpsid	i
}
 8000d8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <Error_Handler+0x8>
	...

08000d94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <HAL_MspInit+0x44>)
 8000d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d9e:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <HAL_MspInit+0x44>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6613      	str	r3, [r2, #96]	; 0x60
 8000da6:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <HAL_MspInit+0x44>)
 8000da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <HAL_MspInit+0x44>)
 8000db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db6:	4a08      	ldr	r2, [pc, #32]	; (8000dd8 <HAL_MspInit+0x44>)
 8000db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dbc:	6593      	str	r3, [r2, #88]	; 0x58
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_MspInit+0x44>)
 8000dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000dca:	f002 ff9d 	bl	8003d08 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40021000 	.word	0x40021000

08000ddc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b0a0      	sub	sp, #128	; 0x80
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df4:	f107 0318 	add.w	r3, r7, #24
 8000df8:	2254      	movs	r2, #84	; 0x54
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f006 f94f 	bl	80070a0 <memset>
  if(hadc->Instance==ADC1)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e0a:	d17f      	bne.n	8000f0c <HAL_ADC_MspInit+0x130>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000e0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e10:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000e12:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000e16:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e18:	f107 0318 	add.w	r3, r7, #24
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f003 fcb1 	bl	8004784 <HAL_RCCEx_PeriphCLKConfig>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000e28:	f7ff ffae 	bl	8000d88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e2c:	4b39      	ldr	r3, [pc, #228]	; (8000f14 <HAL_ADC_MspInit+0x138>)
 8000e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e30:	4a38      	ldr	r2, [pc, #224]	; (8000f14 <HAL_ADC_MspInit+0x138>)
 8000e32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e38:	4b36      	ldr	r3, [pc, #216]	; (8000f14 <HAL_ADC_MspInit+0x138>)
 8000e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e40:	617b      	str	r3, [r7, #20]
 8000e42:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e44:	4b33      	ldr	r3, [pc, #204]	; (8000f14 <HAL_ADC_MspInit+0x138>)
 8000e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e48:	4a32      	ldr	r2, [pc, #200]	; (8000f14 <HAL_ADC_MspInit+0x138>)
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e50:	4b30      	ldr	r3, [pc, #192]	; (8000f14 <HAL_ADC_MspInit+0x138>)
 8000e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5c:	4b2d      	ldr	r3, [pc, #180]	; (8000f14 <HAL_ADC_MspInit+0x138>)
 8000e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e60:	4a2c      	ldr	r2, [pc, #176]	; (8000f14 <HAL_ADC_MspInit+0x138>)
 8000e62:	f043 0302 	orr.w	r3, r3, #2
 8000e66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e68:	4b2a      	ldr	r3, [pc, #168]	; (8000f14 <HAL_ADC_MspInit+0x138>)
 8000e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6c:	f003 0302 	and.w	r3, r3, #2
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e74:	2303      	movs	r3, #3
 8000e76:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e80:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e84:	4619      	mov	r1, r3
 8000e86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8a:	f002 fcdb 	bl	8003844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e92:	2303      	movs	r3, #3
 8000e94:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	481d      	ldr	r0, [pc, #116]	; (8000f18 <HAL_ADC_MspInit+0x13c>)
 8000ea2:	f002 fccf 	bl	8003844 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <HAL_ADC_MspInit+0x140>)
 8000ea8:	4a1d      	ldr	r2, [pc, #116]	; (8000f20 <HAL_ADC_MspInit+0x144>)
 8000eaa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000eac:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <HAL_ADC_MspInit+0x140>)
 8000eae:	2205      	movs	r2, #5
 8000eb0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <HAL_ADC_MspInit+0x140>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eb8:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <HAL_ADC_MspInit+0x140>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ebe:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <HAL_ADC_MspInit+0x140>)
 8000ec0:	2280      	movs	r2, #128	; 0x80
 8000ec2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ec4:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <HAL_ADC_MspInit+0x140>)
 8000ec6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ecc:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <HAL_ADC_MspInit+0x140>)
 8000ece:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ed2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <HAL_ADC_MspInit+0x140>)
 8000ed6:	2220      	movs	r2, #32
 8000ed8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <HAL_ADC_MspInit+0x140>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ee0:	480e      	ldr	r0, [pc, #56]	; (8000f1c <HAL_ADC_MspInit+0x140>)
 8000ee2:	f002 fa3d 	bl	8003360 <HAL_DMA_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8000eec:	f7ff ff4c 	bl	8000d88 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <HAL_ADC_MspInit+0x140>)
 8000ef4:	655a      	str	r2, [r3, #84]	; 0x54
 8000ef6:	4a09      	ldr	r2, [pc, #36]	; (8000f1c <HAL_ADC_MspInit+0x140>)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000efc:	2200      	movs	r2, #0
 8000efe:	2100      	movs	r1, #0
 8000f00:	2012      	movs	r0, #18
 8000f02:	f002 f9f8 	bl	80032f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000f06:	2012      	movs	r0, #18
 8000f08:	f002 fa0f 	bl	800332a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f0c:	bf00      	nop
 8000f0e:	3780      	adds	r7, #128	; 0x80
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40021000 	.word	0x40021000
 8000f18:	48000400 	.word	0x48000400
 8000f1c:	20000098 	.word	0x20000098
 8000f20:	40020008 	.word	0x40020008

08000f24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b09e      	sub	sp, #120	; 0x78
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f3c:	f107 0310 	add.w	r3, r7, #16
 8000f40:	2254      	movs	r2, #84	; 0x54
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f006 f8ab 	bl	80070a0 <memset>
  if(huart->Instance==LPUART1)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a1f      	ldr	r2, [pc, #124]	; (8000fcc <HAL_UART_MspInit+0xa8>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d136      	bne.n	8000fc2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000f54:	2320      	movs	r3, #32
 8000f56:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f5c:	f107 0310 	add.w	r3, r7, #16
 8000f60:	4618      	mov	r0, r3
 8000f62:	f003 fc0f 	bl	8004784 <HAL_RCCEx_PeriphCLKConfig>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f6c:	f7ff ff0c 	bl	8000d88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000f70:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <HAL_UART_MspInit+0xac>)
 8000f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f74:	4a16      	ldr	r2, [pc, #88]	; (8000fd0 <HAL_UART_MspInit+0xac>)
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000f7c:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <HAL_UART_MspInit+0xac>)
 8000f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <HAL_UART_MspInit+0xac>)
 8000f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8c:	4a10      	ldr	r2, [pc, #64]	; (8000fd0 <HAL_UART_MspInit+0xac>)
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_UART_MspInit+0xac>)
 8000f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000fa0:	230c      	movs	r3, #12
 8000fa2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000fb0:	230c      	movs	r3, #12
 8000fb2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fbe:	f002 fc41 	bl	8003844 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000fc2:	bf00      	nop
 8000fc4:	3778      	adds	r7, #120	; 0x78
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40008000 	.word	0x40008000
 8000fd0:	40021000 	.word	0x40021000

08000fd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fe4:	d114      	bne.n	8001010 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <HAL_TIM_Base_MspInit+0x8c>)
 8000fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fea:	4a1d      	ldr	r2, [pc, #116]	; (8001060 <HAL_TIM_Base_MspInit+0x8c>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ff2:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <HAL_TIM_Base_MspInit+0x8c>)
 8000ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2100      	movs	r1, #0
 8001002:	201c      	movs	r0, #28
 8001004:	f002 f977 	bl	80032f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001008:	201c      	movs	r0, #28
 800100a:	f002 f98e 	bl	800332a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800100e:	e022      	b.n	8001056 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a13      	ldr	r2, [pc, #76]	; (8001064 <HAL_TIM_Base_MspInit+0x90>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d10c      	bne.n	8001034 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <HAL_TIM_Base_MspInit+0x8c>)
 800101c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101e:	4a10      	ldr	r2, [pc, #64]	; (8001060 <HAL_TIM_Base_MspInit+0x8c>)
 8001020:	f043 0302 	orr.w	r3, r3, #2
 8001024:	6593      	str	r3, [r2, #88]	; 0x58
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <HAL_TIM_Base_MspInit+0x8c>)
 8001028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]
}
 8001032:	e010      	b.n	8001056 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <HAL_TIM_Base_MspInit+0x94>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d10b      	bne.n	8001056 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <HAL_TIM_Base_MspInit+0x8c>)
 8001040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001042:	4a07      	ldr	r2, [pc, #28]	; (8001060 <HAL_TIM_Base_MspInit+0x8c>)
 8001044:	f043 0304 	orr.w	r3, r3, #4
 8001048:	6593      	str	r3, [r2, #88]	; 0x58
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_TIM_Base_MspInit+0x8c>)
 800104c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104e:	f003 0304 	and.w	r3, r3, #4
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40021000 	.word	0x40021000
 8001064:	40000400 	.word	0x40000400
 8001068:	40000800 	.word	0x40000800

0800106c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <HAL_TIM_MspPostInit+0x68>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d11d      	bne.n	80010ca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_TIM_MspPostInit+0x6c>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001092:	4a11      	ldr	r2, [pc, #68]	; (80010d8 <HAL_TIM_MspPostInit+0x6c>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109a:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <HAL_TIM_MspPostInit+0x6c>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80010b8:	230a      	movs	r3, #10
 80010ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	4619      	mov	r1, r3
 80010c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c6:	f002 fbbd 	bl	8003844 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80010ca:	bf00      	nop
 80010cc:	3720      	adds	r7, #32
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40000800 	.word	0x40000800
 80010d8:	40021000 	.word	0x40021000

080010dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010e0:	e7fe      	b.n	80010e0 <NMI_Handler+0x4>

080010e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e6:	e7fe      	b.n	80010e6 <HardFault_Handler+0x4>

080010e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ec:	e7fe      	b.n	80010ec <MemManage_Handler+0x4>

080010ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f2:	e7fe      	b.n	80010f2 <BusFault_Handler+0x4>

080010f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <UsageFault_Handler+0x4>

080010fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001128:	f000 f8b6 	bl	8001298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}

08001130 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <DMA1_Channel1_IRQHandler+0x10>)
 8001136:	f002 fa36 	bl	80035a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000098 	.word	0x20000098

08001144 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001148:	4802      	ldr	r0, [pc, #8]	; (8001154 <ADC1_2_IRQHandler+0x10>)
 800114a:	f000 fdb9 	bl	8001cc0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	2000002c 	.word	0x2000002c

08001158 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800115c:	4802      	ldr	r0, [pc, #8]	; (8001168 <TIM2_IRQHandler+0x10>)
 800115e:	f004 f813 	bl	8005188 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	2000018c 	.word	0x2000018c

0800116c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001170:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001174:	f002 fd00 	bl	8003b78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}

0800117c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <SystemInit+0x20>)
 8001182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001186:	4a05      	ldr	r2, [pc, #20]	; (800119c <SystemInit+0x20>)
 8001188:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800118c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011a4:	f7ff ffea 	bl	800117c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011a8:	480c      	ldr	r0, [pc, #48]	; (80011dc <LoopForever+0x6>)
  ldr r1, =_edata
 80011aa:	490d      	ldr	r1, [pc, #52]	; (80011e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011ac:	4a0d      	ldr	r2, [pc, #52]	; (80011e4 <LoopForever+0xe>)
  movs r3, #0
 80011ae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80011b0:	e002      	b.n	80011b8 <LoopCopyDataInit>

080011b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b6:	3304      	adds	r3, #4

080011b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011bc:	d3f9      	bcc.n	80011b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011be:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011c0:	4c0a      	ldr	r4, [pc, #40]	; (80011ec <LoopForever+0x16>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c4:	e001      	b.n	80011ca <LoopFillZerobss>

080011c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c8:	3204      	adds	r2, #4

080011ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011cc:	d3fb      	bcc.n	80011c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ce:	f005 ff6f 	bl	80070b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011d2:	f7ff f99f 	bl	8000514 <main>

080011d6 <LoopForever>:

LoopForever:
    b LoopForever
 80011d6:	e7fe      	b.n	80011d6 <LoopForever>
  ldr   r0, =_estack
 80011d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80011e4:	08007160 	.word	0x08007160
  ldr r2, =_sbss
 80011e8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80011ec:	200004f0 	.word	0x200004f0

080011f0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011f0:	e7fe      	b.n	80011f0 <ADC3_IRQHandler>

080011f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011f8:	2300      	movs	r3, #0
 80011fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011fc:	2003      	movs	r0, #3
 80011fe:	f002 f86f 	bl	80032e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001202:	2000      	movs	r0, #0
 8001204:	f000 f80e 	bl	8001224 <HAL_InitTick>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d002      	beq.n	8001214 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	71fb      	strb	r3, [r7, #7]
 8001212:	e001      	b.n	8001218 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001214:	f7ff fdbe 	bl	8000d94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001218:	79fb      	ldrb	r3, [r7, #7]

}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800122c:	2300      	movs	r3, #0
 800122e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001230:	4b16      	ldr	r3, [pc, #88]	; (800128c <HAL_InitTick+0x68>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d022      	beq.n	800127e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <HAL_InitTick+0x6c>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b13      	ldr	r3, [pc, #76]	; (800128c <HAL_InitTick+0x68>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001244:	fbb1 f3f3 	udiv	r3, r1, r3
 8001248:	fbb2 f3f3 	udiv	r3, r2, r3
 800124c:	4618      	mov	r0, r3
 800124e:	f002 f87a 	bl	8003346 <HAL_SYSTICK_Config>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d10f      	bne.n	8001278 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b0f      	cmp	r3, #15
 800125c:	d809      	bhi.n	8001272 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800125e:	2200      	movs	r2, #0
 8001260:	6879      	ldr	r1, [r7, #4]
 8001262:	f04f 30ff 	mov.w	r0, #4294967295
 8001266:	f002 f846 	bl	80032f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800126a:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <HAL_InitTick+0x70>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	e007      	b.n	8001282 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	73fb      	strb	r3, [r7, #15]
 8001276:	e004      	b.n	8001282 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	73fb      	strb	r3, [r7, #15]
 800127c:	e001      	b.n	8001282 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001282:	7bfb      	ldrb	r3, [r7, #15]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	2000000c 	.word	0x2000000c
 8001290:	20000004 	.word	0x20000004
 8001294:	20000008 	.word	0x20000008

08001298 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800129c:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <HAL_IncTick+0x1c>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <HAL_IncTick+0x20>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4413      	add	r3, r2
 80012a6:	4a03      	ldr	r2, [pc, #12]	; (80012b4 <HAL_IncTick+0x1c>)
 80012a8:	6013      	str	r3, [r2, #0]
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	200004ec 	.word	0x200004ec
 80012b8:	2000000c 	.word	0x2000000c

080012bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return uwTick;
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <HAL_GetTick+0x14>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	200004ec 	.word	0x200004ec

080012d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	431a      	orrs	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	609a      	str	r2, [r3, #8]
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	431a      	orrs	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	609a      	str	r2, [r3, #8]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001330:	4618      	mov	r0, r3
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800133c:	b480      	push	{r7}
 800133e:	b087      	sub	sp, #28
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
 8001348:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	3360      	adds	r3, #96	; 0x60
 800134e:	461a      	mov	r2, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4413      	add	r3, r2
 8001356:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <LL_ADC_SetOffset+0x44>)
 800135e:	4013      	ands	r3, r2
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	430a      	orrs	r2, r1
 800136a:	4313      	orrs	r3, r2
 800136c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001374:	bf00      	nop
 8001376:	371c      	adds	r7, #28
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	03fff000 	.word	0x03fff000

08001384 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3360      	adds	r3, #96	; 0x60
 8001392:	461a      	mov	r2, r3
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b087      	sub	sp, #28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	3360      	adds	r3, #96	; 0x60
 80013c0:	461a      	mov	r2, r3
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	431a      	orrs	r2, r3
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80013da:	bf00      	nop
 80013dc:	371c      	adds	r7, #28
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b087      	sub	sp, #28
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	60f8      	str	r0, [r7, #12]
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	3360      	adds	r3, #96	; 0x60
 80013f6:	461a      	mov	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	431a      	orrs	r2, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001410:	bf00      	nop
 8001412:	371c      	adds	r7, #28
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800141c:	b480      	push	{r7}
 800141e:	b087      	sub	sp, #28
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	3360      	adds	r3, #96	; 0x60
 800142c:	461a      	mov	r2, r3
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	431a      	orrs	r2, r3
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001446:	bf00      	nop
 8001448:	371c      	adds	r7, #28
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	695b      	ldr	r3, [r3, #20]
 8001460:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	431a      	orrs	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	615a      	str	r2, [r3, #20]
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800149e:	b480      	push	{r7}
 80014a0:	b087      	sub	sp, #28
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	60f8      	str	r0, [r7, #12]
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	3330      	adds	r3, #48	; 0x30
 80014ae:	461a      	mov	r2, r3
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	0a1b      	lsrs	r3, r3, #8
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	f003 030c 	and.w	r3, r3, #12
 80014ba:	4413      	add	r3, r2
 80014bc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	f003 031f 	and.w	r3, r3, #31
 80014c8:	211f      	movs	r1, #31
 80014ca:	fa01 f303 	lsl.w	r3, r1, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	401a      	ands	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	0e9b      	lsrs	r3, r3, #26
 80014d6:	f003 011f 	and.w	r1, r3, #31
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	f003 031f 	and.w	r3, r3, #31
 80014e0:	fa01 f303 	lsl.w	r3, r1, r3
 80014e4:	431a      	orrs	r2, r3
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80014ea:	bf00      	nop
 80014ec:	371c      	adds	r7, #28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001502:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800150a:	2301      	movs	r3, #1
 800150c:	e000      	b.n	8001510 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800151c:	b480      	push	{r7}
 800151e:	b087      	sub	sp, #28
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	3314      	adds	r3, #20
 800152c:	461a      	mov	r2, r3
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	0e5b      	lsrs	r3, r3, #25
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	4413      	add	r3, r2
 800153a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	0d1b      	lsrs	r3, r3, #20
 8001544:	f003 031f 	and.w	r3, r3, #31
 8001548:	2107      	movs	r1, #7
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	401a      	ands	r2, r3
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	0d1b      	lsrs	r3, r3, #20
 8001556:	f003 031f 	and.w	r3, r3, #31
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	fa01 f303 	lsl.w	r3, r1, r3
 8001560:	431a      	orrs	r2, r3
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001566:	bf00      	nop
 8001568:	371c      	adds	r7, #28
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800158c:	43db      	mvns	r3, r3
 800158e:	401a      	ands	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f003 0318 	and.w	r3, r3, #24
 8001596:	4908      	ldr	r1, [pc, #32]	; (80015b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001598:	40d9      	lsrs	r1, r3
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	400b      	ands	r3, r1
 800159e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015a2:	431a      	orrs	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	0007ffff 	.word	0x0007ffff

080015bc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 031f 	and.w	r3, r3, #31
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001604:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	6093      	str	r3, [r2, #8]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001628:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800162c:	d101      	bne.n	8001632 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800162e:	2301      	movs	r3, #1
 8001630:	e000      	b.n	8001634 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001650:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001654:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001678:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800167c:	d101      	bne.n	8001682 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800167e:	2301      	movs	r3, #1
 8001680:	e000      	b.n	8001684 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80016a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016a4:	f043 0201 	orr.w	r2, r3, #1
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80016c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016cc:	f043 0202 	orr.w	r2, r3, #2
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d101      	bne.n	80016f8 <LL_ADC_IsEnabled+0x18>
 80016f4:	2301      	movs	r3, #1
 80016f6:	e000      	b.n	80016fa <LL_ADC_IsEnabled+0x1a>
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b02      	cmp	r3, #2
 8001718:	d101      	bne.n	800171e <LL_ADC_IsDisableOngoing+0x18>
 800171a:	2301      	movs	r3, #1
 800171c:	e000      	b.n	8001720 <LL_ADC_IsDisableOngoing+0x1a>
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800173c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001740:	f043 0204 	orr.w	r2, r3, #4
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	2b04      	cmp	r3, #4
 8001766:	d101      	bne.n	800176c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001768:	2301      	movs	r3, #1
 800176a:	e000      	b.n	800176e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	2b08      	cmp	r3, #8
 800178c:	d101      	bne.n	8001792 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800178e:	2301      	movs	r3, #1
 8001790:	e000      	b.n	8001794 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b089      	sub	sp, #36	; 0x24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017a8:	2300      	movs	r3, #0
 80017aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e1a9      	b.n	8001b0e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d109      	bne.n	80017dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff fb07 	bl	8000ddc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff19 	bl	8001618 <LL_ADC_IsDeepPowerDownEnabled>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d004      	beq.n	80017f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff feff 	bl	80015f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff ff34 	bl	8001668 <LL_ADC_IsInternalRegulatorEnabled>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d115      	bne.n	8001832 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff ff18 	bl	8001640 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001810:	4b9c      	ldr	r3, [pc, #624]	; (8001a84 <HAL_ADC_Init+0x2e4>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	099b      	lsrs	r3, r3, #6
 8001816:	4a9c      	ldr	r2, [pc, #624]	; (8001a88 <HAL_ADC_Init+0x2e8>)
 8001818:	fba2 2303 	umull	r2, r3, r2, r3
 800181c:	099b      	lsrs	r3, r3, #6
 800181e:	3301      	adds	r3, #1
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001824:	e002      	b.n	800182c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	3b01      	subs	r3, #1
 800182a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f9      	bne.n	8001826 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff ff16 	bl	8001668 <LL_ADC_IsInternalRegulatorEnabled>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10d      	bne.n	800185e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001846:	f043 0210 	orr.w	r2, r3, #16
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001852:	f043 0201 	orr.w	r2, r3, #1
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff ff76 	bl	8001754 <LL_ADC_REG_IsConversionOngoing>
 8001868:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800186e:	f003 0310 	and.w	r3, r3, #16
 8001872:	2b00      	cmp	r3, #0
 8001874:	f040 8142 	bne.w	8001afc <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	2b00      	cmp	r3, #0
 800187c:	f040 813e 	bne.w	8001afc <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001884:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001888:	f043 0202 	orr.w	r2, r3, #2
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff23 	bl	80016e0 <LL_ADC_IsEnabled>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d141      	bne.n	8001924 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018a8:	d004      	beq.n	80018b4 <HAL_ADC_Init+0x114>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a77      	ldr	r2, [pc, #476]	; (8001a8c <HAL_ADC_Init+0x2ec>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d10f      	bne.n	80018d4 <HAL_ADC_Init+0x134>
 80018b4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80018b8:	f7ff ff12 	bl	80016e0 <LL_ADC_IsEnabled>
 80018bc:	4604      	mov	r4, r0
 80018be:	4873      	ldr	r0, [pc, #460]	; (8001a8c <HAL_ADC_Init+0x2ec>)
 80018c0:	f7ff ff0e 	bl	80016e0 <LL_ADC_IsEnabled>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4323      	orrs	r3, r4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	bf0c      	ite	eq
 80018cc:	2301      	moveq	r3, #1
 80018ce:	2300      	movne	r3, #0
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	e012      	b.n	80018fa <HAL_ADC_Init+0x15a>
 80018d4:	486e      	ldr	r0, [pc, #440]	; (8001a90 <HAL_ADC_Init+0x2f0>)
 80018d6:	f7ff ff03 	bl	80016e0 <LL_ADC_IsEnabled>
 80018da:	4604      	mov	r4, r0
 80018dc:	486d      	ldr	r0, [pc, #436]	; (8001a94 <HAL_ADC_Init+0x2f4>)
 80018de:	f7ff feff 	bl	80016e0 <LL_ADC_IsEnabled>
 80018e2:	4603      	mov	r3, r0
 80018e4:	431c      	orrs	r4, r3
 80018e6:	486c      	ldr	r0, [pc, #432]	; (8001a98 <HAL_ADC_Init+0x2f8>)
 80018e8:	f7ff fefa 	bl	80016e0 <LL_ADC_IsEnabled>
 80018ec:	4603      	mov	r3, r0
 80018ee:	4323      	orrs	r3, r4
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	bf0c      	ite	eq
 80018f4:	2301      	moveq	r3, #1
 80018f6:	2300      	movne	r3, #0
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d012      	beq.n	8001924 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001906:	d004      	beq.n	8001912 <HAL_ADC_Init+0x172>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a5f      	ldr	r2, [pc, #380]	; (8001a8c <HAL_ADC_Init+0x2ec>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d101      	bne.n	8001916 <HAL_ADC_Init+0x176>
 8001912:	4a62      	ldr	r2, [pc, #392]	; (8001a9c <HAL_ADC_Init+0x2fc>)
 8001914:	e000      	b.n	8001918 <HAL_ADC_Init+0x178>
 8001916:	4a62      	ldr	r2, [pc, #392]	; (8001aa0 <HAL_ADC_Init+0x300>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	4619      	mov	r1, r3
 800191e:	4610      	mov	r0, r2
 8001920:	f7ff fcd8 	bl	80012d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	7f5b      	ldrb	r3, [r3, #29]
 8001928:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800192e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001934:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800193a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001942:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001944:	4313      	orrs	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800194e:	2b01      	cmp	r3, #1
 8001950:	d106      	bne.n	8001960 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001956:	3b01      	subs	r3, #1
 8001958:	045b      	lsls	r3, r3, #17
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4313      	orrs	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001964:	2b00      	cmp	r3, #0
 8001966:	d009      	beq.n	800197c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001974:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4313      	orrs	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68da      	ldr	r2, [r3, #12]
 8001982:	4b48      	ldr	r3, [pc, #288]	; (8001aa4 <HAL_ADC_Init+0x304>)
 8001984:	4013      	ands	r3, r2
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6812      	ldr	r2, [r2, #0]
 800198a:	69b9      	ldr	r1, [r7, #24]
 800198c:	430b      	orrs	r3, r1
 800198e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fee5 	bl	800177a <LL_ADC_INJ_IsConversionOngoing>
 80019b0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d17f      	bne.n	8001ab8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d17c      	bne.n	8001ab8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019c2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019ca:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019cc:	4313      	orrs	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019da:	f023 0302 	bic.w	r3, r3, #2
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6812      	ldr	r2, [r2, #0]
 80019e2:	69b9      	ldr	r1, [r7, #24]
 80019e4:	430b      	orrs	r3, r1
 80019e6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d017      	beq.n	8001a20 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	691a      	ldr	r2, [r3, #16]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80019fe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001a08:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6911      	ldr	r1, [r2, #16]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	430b      	orrs	r3, r1
 8001a1a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001a1e:	e013      	b.n	8001a48 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	691a      	ldr	r2, [r3, #16]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a2e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6812      	ldr	r2, [r2, #0]
 8001a3c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a44:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d12a      	bne.n	8001aa8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001a5c:	f023 0304 	bic.w	r3, r3, #4
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a68:	4311      	orrs	r1, r2
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001a6e:	4311      	orrs	r1, r2
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a74:	430a      	orrs	r2, r1
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f042 0201 	orr.w	r2, r2, #1
 8001a80:	611a      	str	r2, [r3, #16]
 8001a82:	e019      	b.n	8001ab8 <HAL_ADC_Init+0x318>
 8001a84:	20000004 	.word	0x20000004
 8001a88:	053e2d63 	.word	0x053e2d63
 8001a8c:	50000100 	.word	0x50000100
 8001a90:	50000400 	.word	0x50000400
 8001a94:	50000500 	.word	0x50000500
 8001a98:	50000600 	.word	0x50000600
 8001a9c:	50000300 	.word	0x50000300
 8001aa0:	50000700 	.word	0x50000700
 8001aa4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	691a      	ldr	r2, [r3, #16]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0201 	bic.w	r2, r2, #1
 8001ab6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d10c      	bne.n	8001ada <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f023 010f 	bic.w	r1, r3, #15
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	1e5a      	subs	r2, r3, #1
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ad8:	e007      	b.n	8001aea <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 020f 	bic.w	r2, r2, #15
 8001ae8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aee:	f023 0303 	bic.w	r3, r3, #3
 8001af2:	f043 0201 	orr.w	r2, r3, #1
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001afa:	e007      	b.n	8001b0c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b00:	f043 0210 	orr.w	r2, r3, #16
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3724      	adds	r7, #36	; 0x24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd90      	pop	{r4, r7, pc}
 8001b16:	bf00      	nop

08001b18 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b2c:	d004      	beq.n	8001b38 <HAL_ADC_Start_DMA+0x20>
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a5a      	ldr	r2, [pc, #360]	; (8001c9c <HAL_ADC_Start_DMA+0x184>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d101      	bne.n	8001b3c <HAL_ADC_Start_DMA+0x24>
 8001b38:	4b59      	ldr	r3, [pc, #356]	; (8001ca0 <HAL_ADC_Start_DMA+0x188>)
 8001b3a:	e000      	b.n	8001b3e <HAL_ADC_Start_DMA+0x26>
 8001b3c:	4b59      	ldr	r3, [pc, #356]	; (8001ca4 <HAL_ADC_Start_DMA+0x18c>)
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff fd3c 	bl	80015bc <LL_ADC_GetMultimode>
 8001b44:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fe02 	bl	8001754 <LL_ADC_REG_IsConversionOngoing>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f040 809b 	bne.w	8001c8e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d101      	bne.n	8001b66 <HAL_ADC_Start_DMA+0x4e>
 8001b62:	2302      	movs	r3, #2
 8001b64:	e096      	b.n	8001c94 <HAL_ADC_Start_DMA+0x17c>
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a4d      	ldr	r2, [pc, #308]	; (8001ca8 <HAL_ADC_Start_DMA+0x190>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d008      	beq.n	8001b8a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d005      	beq.n	8001b8a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	2b05      	cmp	r3, #5
 8001b82:	d002      	beq.n	8001b8a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	2b09      	cmp	r3, #9
 8001b88:	d17a      	bne.n	8001c80 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f000 ff60 	bl	8002a50 <ADC_Enable>
 8001b90:	4603      	mov	r3, r0
 8001b92:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001b94:	7dfb      	ldrb	r3, [r7, #23]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d16d      	bne.n	8001c76 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b9e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ba2:	f023 0301 	bic.w	r3, r3, #1
 8001ba6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a3a      	ldr	r2, [pc, #232]	; (8001c9c <HAL_ADC_Start_DMA+0x184>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d009      	beq.n	8001bcc <HAL_ADC_Start_DMA+0xb4>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a3b      	ldr	r2, [pc, #236]	; (8001cac <HAL_ADC_Start_DMA+0x194>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d002      	beq.n	8001bc8 <HAL_ADC_Start_DMA+0xb0>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	e003      	b.n	8001bd0 <HAL_ADC_Start_DMA+0xb8>
 8001bc8:	4b39      	ldr	r3, [pc, #228]	; (8001cb0 <HAL_ADC_Start_DMA+0x198>)
 8001bca:	e001      	b.n	8001bd0 <HAL_ADC_Start_DMA+0xb8>
 8001bcc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d002      	beq.n	8001bde <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d105      	bne.n	8001bea <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d006      	beq.n	8001c04 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bfa:	f023 0206 	bic.w	r2, r3, #6
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	661a      	str	r2, [r3, #96]	; 0x60
 8001c02:	e002      	b.n	8001c0a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0e:	4a29      	ldr	r2, [pc, #164]	; (8001cb4 <HAL_ADC_Start_DMA+0x19c>)
 8001c10:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c16:	4a28      	ldr	r2, [pc, #160]	; (8001cb8 <HAL_ADC_Start_DMA+0x1a0>)
 8001c18:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1e:	4a27      	ldr	r2, [pc, #156]	; (8001cbc <HAL_ADC_Start_DMA+0x1a4>)
 8001c20:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	221c      	movs	r2, #28
 8001c28:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f042 0210 	orr.w	r2, r2, #16
 8001c40:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68da      	ldr	r2, [r3, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f042 0201 	orr.w	r2, r2, #1
 8001c50:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	3340      	adds	r3, #64	; 0x40
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f001 fc25 	bl	80034b0 <HAL_DMA_Start_IT>
 8001c66:	4603      	mov	r3, r0
 8001c68:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fd5c 	bl	800172c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001c74:	e00d      	b.n	8001c92 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001c7e:	e008      	b.n	8001c92 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001c8c:	e001      	b.n	8001c92 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	50000100 	.word	0x50000100
 8001ca0:	50000300 	.word	0x50000300
 8001ca4:	50000700 	.word	0x50000700
 8001ca8:	50000600 	.word	0x50000600
 8001cac:	50000500 	.word	0x50000500
 8001cb0:	50000400 	.word	0x50000400
 8001cb4:	08002c3b 	.word	0x08002c3b
 8001cb8:	08002d13 	.word	0x08002d13
 8001cbc:	08002d2f 	.word	0x08002d2f

08001cc0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	; 0x28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001cc8:	2300      	movs	r3, #0
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ce4:	d004      	beq.n	8001cf0 <HAL_ADC_IRQHandler+0x30>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a8e      	ldr	r2, [pc, #568]	; (8001f24 <HAL_ADC_IRQHandler+0x264>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d101      	bne.n	8001cf4 <HAL_ADC_IRQHandler+0x34>
 8001cf0:	4b8d      	ldr	r3, [pc, #564]	; (8001f28 <HAL_ADC_IRQHandler+0x268>)
 8001cf2:	e000      	b.n	8001cf6 <HAL_ADC_IRQHandler+0x36>
 8001cf4:	4b8d      	ldr	r3, [pc, #564]	; (8001f2c <HAL_ADC_IRQHandler+0x26c>)
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff fc60 	bl	80015bc <LL_ADC_GetMultimode>
 8001cfc:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d017      	beq.n	8001d38 <HAL_ADC_IRQHandler+0x78>
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d012      	beq.n	8001d38 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d16:	f003 0310 	and.w	r3, r3, #16
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d105      	bne.n	8001d2a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d22:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f001 f8f6 	bl	8002f1c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2202      	movs	r2, #2
 8001d36:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d004      	beq.n	8001d4c <HAL_ADC_IRQHandler+0x8c>
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10b      	bne.n	8001d64 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 8094 	beq.w	8001e80 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 808e 	beq.w	8001e80 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d68:	f003 0310 	and.w	r3, r3, #16
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d105      	bne.n	8001d7c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d74:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff fb79 	bl	8001478 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d072      	beq.n	8001e72 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a64      	ldr	r2, [pc, #400]	; (8001f24 <HAL_ADC_IRQHandler+0x264>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d009      	beq.n	8001daa <HAL_ADC_IRQHandler+0xea>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a65      	ldr	r2, [pc, #404]	; (8001f30 <HAL_ADC_IRQHandler+0x270>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d002      	beq.n	8001da6 <HAL_ADC_IRQHandler+0xe6>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	e003      	b.n	8001dae <HAL_ADC_IRQHandler+0xee>
 8001da6:	4b63      	ldr	r3, [pc, #396]	; (8001f34 <HAL_ADC_IRQHandler+0x274>)
 8001da8:	e001      	b.n	8001dae <HAL_ADC_IRQHandler+0xee>
 8001daa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6812      	ldr	r2, [r2, #0]
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d008      	beq.n	8001dc8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d005      	beq.n	8001dc8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	2b05      	cmp	r3, #5
 8001dc0:	d002      	beq.n	8001dc8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	2b09      	cmp	r3, #9
 8001dc6:	d104      	bne.n	8001dd2 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	623b      	str	r3, [r7, #32]
 8001dd0:	e014      	b.n	8001dfc <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a53      	ldr	r2, [pc, #332]	; (8001f24 <HAL_ADC_IRQHandler+0x264>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d009      	beq.n	8001df0 <HAL_ADC_IRQHandler+0x130>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a53      	ldr	r2, [pc, #332]	; (8001f30 <HAL_ADC_IRQHandler+0x270>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d002      	beq.n	8001dec <HAL_ADC_IRQHandler+0x12c>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	e003      	b.n	8001df4 <HAL_ADC_IRQHandler+0x134>
 8001dec:	4b51      	ldr	r3, [pc, #324]	; (8001f34 <HAL_ADC_IRQHandler+0x274>)
 8001dee:	e001      	b.n	8001df4 <HAL_ADC_IRQHandler+0x134>
 8001df0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001df4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
 8001dfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d135      	bne.n	8001e72 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d12e      	bne.n	8001e72 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff fc9b 	bl	8001754 <LL_ADC_REG_IsConversionOngoing>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d11a      	bne.n	8001e5a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 020c 	bic.w	r2, r2, #12
 8001e32:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d112      	bne.n	8001e72 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e50:	f043 0201 	orr.w	r2, r3, #1
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e58:	e00b      	b.n	8001e72 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5e:	f043 0210 	orr.w	r2, r3, #16
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e6a:	f043 0201 	orr.w	r2, r3, #1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f984 	bl	8002180 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	220c      	movs	r2, #12
 8001e7e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f003 0320 	and.w	r3, r3, #32
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d004      	beq.n	8001e94 <HAL_ADC_IRQHandler+0x1d4>
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	f003 0320 	and.w	r3, r3, #32
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10b      	bne.n	8001eac <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 80b3 	beq.w	8002006 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 80ad 	beq.w	8002006 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb0:	f003 0310 	and.w	r3, r3, #16
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d105      	bne.n	8001ec4 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ebc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff fb14 	bl	80014f6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001ece:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff facf 	bl	8001478 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001eda:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a10      	ldr	r2, [pc, #64]	; (8001f24 <HAL_ADC_IRQHandler+0x264>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d009      	beq.n	8001efa <HAL_ADC_IRQHandler+0x23a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a11      	ldr	r2, [pc, #68]	; (8001f30 <HAL_ADC_IRQHandler+0x270>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d002      	beq.n	8001ef6 <HAL_ADC_IRQHandler+0x236>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	e003      	b.n	8001efe <HAL_ADC_IRQHandler+0x23e>
 8001ef6:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <HAL_ADC_IRQHandler+0x274>)
 8001ef8:	e001      	b.n	8001efe <HAL_ADC_IRQHandler+0x23e>
 8001efa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6812      	ldr	r2, [r2, #0]
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d008      	beq.n	8001f18 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d005      	beq.n	8001f18 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	2b06      	cmp	r3, #6
 8001f10:	d002      	beq.n	8001f18 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2b07      	cmp	r3, #7
 8001f16:	d10f      	bne.n	8001f38 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	623b      	str	r3, [r7, #32]
 8001f20:	e01f      	b.n	8001f62 <HAL_ADC_IRQHandler+0x2a2>
 8001f22:	bf00      	nop
 8001f24:	50000100 	.word	0x50000100
 8001f28:	50000300 	.word	0x50000300
 8001f2c:	50000700 	.word	0x50000700
 8001f30:	50000500 	.word	0x50000500
 8001f34:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a8b      	ldr	r2, [pc, #556]	; (800216c <HAL_ADC_IRQHandler+0x4ac>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d009      	beq.n	8001f56 <HAL_ADC_IRQHandler+0x296>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a8a      	ldr	r2, [pc, #552]	; (8002170 <HAL_ADC_IRQHandler+0x4b0>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d002      	beq.n	8001f52 <HAL_ADC_IRQHandler+0x292>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	e003      	b.n	8001f5a <HAL_ADC_IRQHandler+0x29a>
 8001f52:	4b88      	ldr	r3, [pc, #544]	; (8002174 <HAL_ADC_IRQHandler+0x4b4>)
 8001f54:	e001      	b.n	8001f5a <HAL_ADC_IRQHandler+0x29a>
 8001f56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f5a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d047      	beq.n	8001ff8 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001f68:	6a3b      	ldr	r3, [r7, #32]
 8001f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d007      	beq.n	8001f82 <HAL_ADC_IRQHandler+0x2c2>
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d03f      	beq.n	8001ff8 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001f78:	6a3b      	ldr	r3, [r7, #32]
 8001f7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d13a      	bne.n	8001ff8 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8c:	2b40      	cmp	r3, #64	; 0x40
 8001f8e:	d133      	bne.n	8001ff8 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001f90:	6a3b      	ldr	r3, [r7, #32]
 8001f92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d12e      	bne.n	8001ff8 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fbeb 	bl	800177a <LL_ADC_INJ_IsConversionOngoing>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d11a      	bne.n	8001fe0 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001fb8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d112      	bne.n	8001ff8 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd6:	f043 0201 	orr.w	r2, r3, #1
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fde:	e00b      	b.n	8001ff8 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe4:	f043 0210 	orr.w	r2, r3, #16
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff0:	f043 0201 	orr.w	r2, r3, #1
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 ff67 	bl	8002ecc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2260      	movs	r2, #96	; 0x60
 8002004:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200c:	2b00      	cmp	r3, #0
 800200e:	d011      	beq.n	8002034 <HAL_ADC_IRQHandler+0x374>
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00c      	beq.n	8002034 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f8be 	bl	80021a8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2280      	movs	r2, #128	; 0x80
 8002032:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203a:	2b00      	cmp	r3, #0
 800203c:	d012      	beq.n	8002064 <HAL_ADC_IRQHandler+0x3a4>
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00d      	beq.n	8002064 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 ff4d 	bl	8002ef4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002062:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800206a:	2b00      	cmp	r3, #0
 800206c:	d012      	beq.n	8002094 <HAL_ADC_IRQHandler+0x3d4>
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00d      	beq.n	8002094 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 ff3f 	bl	8002f08 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002092:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f003 0310 	and.w	r3, r3, #16
 800209a:	2b00      	cmp	r3, #0
 800209c:	d043      	beq.n	8002126 <HAL_ADC_IRQHandler+0x466>
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	f003 0310 	and.w	r3, r3, #16
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d03e      	beq.n	8002126 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d102      	bne.n	80020b6 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80020b0:	2301      	movs	r3, #1
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
 80020b4:	e021      	b.n	80020fa <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d015      	beq.n	80020e8 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020c4:	d004      	beq.n	80020d0 <HAL_ADC_IRQHandler+0x410>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a28      	ldr	r2, [pc, #160]	; (800216c <HAL_ADC_IRQHandler+0x4ac>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d101      	bne.n	80020d4 <HAL_ADC_IRQHandler+0x414>
 80020d0:	4b29      	ldr	r3, [pc, #164]	; (8002178 <HAL_ADC_IRQHandler+0x4b8>)
 80020d2:	e000      	b.n	80020d6 <HAL_ADC_IRQHandler+0x416>
 80020d4:	4b29      	ldr	r3, [pc, #164]	; (800217c <HAL_ADC_IRQHandler+0x4bc>)
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff fa7e 	bl	80015d8 <LL_ADC_GetMultiDMATransfer>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00b      	beq.n	80020fa <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80020e2:	2301      	movs	r3, #1
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
 80020e6:	e008      	b.n	80020fa <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80020f6:	2301      	movs	r3, #1
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d10e      	bne.n	800211e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002104:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002110:	f043 0202 	orr.w	r2, r3, #2
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f84f 	bl	80021bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2210      	movs	r2, #16
 8002124:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800212c:	2b00      	cmp	r3, #0
 800212e:	d018      	beq.n	8002162 <HAL_ADC_IRQHandler+0x4a2>
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002136:	2b00      	cmp	r3, #0
 8002138:	d013      	beq.n	8002162 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800214a:	f043 0208 	orr.w	r2, r3, #8
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800215a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 febf 	bl	8002ee0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002162:	bf00      	nop
 8002164:	3728      	adds	r7, #40	; 0x28
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	50000100 	.word	0x50000100
 8002170:	50000500 	.word	0x50000500
 8002174:	50000400 	.word	0x50000400
 8002178:	50000300 	.word	0x50000300
 800217c:	50000700 	.word	0x50000700

08002180 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b0b6      	sub	sp, #216	; 0xd8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d102      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x24>
 80021ee:	2302      	movs	r3, #2
 80021f0:	f000 bc13 	b.w	8002a1a <HAL_ADC_ConfigChannel+0x84a>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff faa7 	bl	8001754 <LL_ADC_REG_IsConversionOngoing>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	f040 83f3 	bne.w	80029f4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6818      	ldr	r0, [r3, #0]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	6859      	ldr	r1, [r3, #4]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	f7ff f93f 	bl	800149e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff fa95 	bl	8001754 <LL_ADC_REG_IsConversionOngoing>
 800222a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff faa1 	bl	800177a <LL_ADC_INJ_IsConversionOngoing>
 8002238:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800223c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002240:	2b00      	cmp	r3, #0
 8002242:	f040 81d9 	bne.w	80025f8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002246:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800224a:	2b00      	cmp	r3, #0
 800224c:	f040 81d4 	bne.w	80025f8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002258:	d10f      	bne.n	800227a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2200      	movs	r2, #0
 8002264:	4619      	mov	r1, r3
 8002266:	f7ff f959 	bl	800151c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff f8ed 	bl	8001452 <LL_ADC_SetSamplingTimeCommonConfig>
 8002278:	e00e      	b.n	8002298 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6818      	ldr	r0, [r3, #0]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	6819      	ldr	r1, [r3, #0]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	461a      	mov	r2, r3
 8002288:	f7ff f948 	bl	800151c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2100      	movs	r1, #0
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff f8dd 	bl	8001452 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	695a      	ldr	r2, [r3, #20]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	08db      	lsrs	r3, r3, #3
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d022      	beq.n	8002300 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6818      	ldr	r0, [r3, #0]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	6919      	ldr	r1, [r3, #16]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80022ca:	f7ff f837 	bl	800133c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6818      	ldr	r0, [r3, #0]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	6919      	ldr	r1, [r3, #16]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	461a      	mov	r2, r3
 80022dc:	f7ff f883 	bl	80013e6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6818      	ldr	r0, [r3, #0]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d102      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x126>
 80022f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022f4:	e000      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x128>
 80022f6:	2300      	movs	r3, #0
 80022f8:	461a      	mov	r2, r3
 80022fa:	f7ff f88f 	bl	800141c <LL_ADC_SetOffsetSaturation>
 80022fe:	e17b      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2100      	movs	r1, #0
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff f83c 	bl	8001384 <LL_ADC_GetOffsetChannel>
 800230c:	4603      	mov	r3, r0
 800230e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10a      	bne.n	800232c <HAL_ADC_ConfigChannel+0x15c>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2100      	movs	r1, #0
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff f831 	bl	8001384 <LL_ADC_GetOffsetChannel>
 8002322:	4603      	mov	r3, r0
 8002324:	0e9b      	lsrs	r3, r3, #26
 8002326:	f003 021f 	and.w	r2, r3, #31
 800232a:	e01e      	b.n	800236a <HAL_ADC_ConfigChannel+0x19a>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2100      	movs	r1, #0
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff f826 	bl	8001384 <LL_ADC_GetOffsetChannel>
 8002338:	4603      	mov	r3, r0
 800233a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002342:	fa93 f3a3 	rbit	r3, r3
 8002346:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800234a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800234e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002352:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800235a:	2320      	movs	r3, #32
 800235c:	e004      	b.n	8002368 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800235e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002362:	fab3 f383 	clz	r3, r3
 8002366:	b2db      	uxtb	r3, r3
 8002368:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002372:	2b00      	cmp	r3, #0
 8002374:	d105      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x1b2>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	0e9b      	lsrs	r3, r3, #26
 800237c:	f003 031f 	and.w	r3, r3, #31
 8002380:	e018      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x1e4>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800238e:	fa93 f3a3 	rbit	r3, r3
 8002392:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002396:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800239a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800239e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80023a6:	2320      	movs	r3, #32
 80023a8:	e004      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80023aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023ae:	fab3 f383 	clz	r3, r3
 80023b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d106      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2200      	movs	r2, #0
 80023be:	2100      	movs	r1, #0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe fff5 	bl	80013b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2101      	movs	r1, #1
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe ffd9 	bl	8001384 <LL_ADC_GetOffsetChannel>
 80023d2:	4603      	mov	r3, r0
 80023d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10a      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x222>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2101      	movs	r1, #1
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe ffce 	bl	8001384 <LL_ADC_GetOffsetChannel>
 80023e8:	4603      	mov	r3, r0
 80023ea:	0e9b      	lsrs	r3, r3, #26
 80023ec:	f003 021f 	and.w	r2, r3, #31
 80023f0:	e01e      	b.n	8002430 <HAL_ADC_ConfigChannel+0x260>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2101      	movs	r1, #1
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fe ffc3 	bl	8001384 <LL_ADC_GetOffsetChannel>
 80023fe:	4603      	mov	r3, r0
 8002400:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002404:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002408:	fa93 f3a3 	rbit	r3, r3
 800240c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002410:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002414:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002418:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002420:	2320      	movs	r3, #32
 8002422:	e004      	b.n	800242e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002424:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002428:	fab3 f383 	clz	r3, r3
 800242c:	b2db      	uxtb	r3, r3
 800242e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002438:	2b00      	cmp	r3, #0
 800243a:	d105      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x278>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	0e9b      	lsrs	r3, r3, #26
 8002442:	f003 031f 	and.w	r3, r3, #31
 8002446:	e018      	b.n	800247a <HAL_ADC_ConfigChannel+0x2aa>
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002450:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002454:	fa93 f3a3 	rbit	r3, r3
 8002458:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800245c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002460:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002464:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800246c:	2320      	movs	r3, #32
 800246e:	e004      	b.n	800247a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002470:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002474:	fab3 f383 	clz	r3, r3
 8002478:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800247a:	429a      	cmp	r2, r3
 800247c:	d106      	bne.n	800248c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2200      	movs	r2, #0
 8002484:	2101      	movs	r1, #1
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe ff92 	bl	80013b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2102      	movs	r1, #2
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe ff76 	bl	8001384 <LL_ADC_GetOffsetChannel>
 8002498:	4603      	mov	r3, r0
 800249a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10a      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x2e8>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2102      	movs	r1, #2
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fe ff6b 	bl	8001384 <LL_ADC_GetOffsetChannel>
 80024ae:	4603      	mov	r3, r0
 80024b0:	0e9b      	lsrs	r3, r3, #26
 80024b2:	f003 021f 	and.w	r2, r3, #31
 80024b6:	e01e      	b.n	80024f6 <HAL_ADC_ConfigChannel+0x326>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2102      	movs	r1, #2
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe ff60 	bl	8001384 <LL_ADC_GetOffsetChannel>
 80024c4:	4603      	mov	r3, r0
 80024c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024ce:	fa93 f3a3 	rbit	r3, r3
 80024d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80024d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80024de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80024e6:	2320      	movs	r3, #32
 80024e8:	e004      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80024ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024ee:	fab3 f383 	clz	r3, r3
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d105      	bne.n	800250e <HAL_ADC_ConfigChannel+0x33e>
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	0e9b      	lsrs	r3, r3, #26
 8002508:	f003 031f 	and.w	r3, r3, #31
 800250c:	e016      	b.n	800253c <HAL_ADC_ConfigChannel+0x36c>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002516:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800251a:	fa93 f3a3 	rbit	r3, r3
 800251e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002520:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002522:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002526:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800252e:	2320      	movs	r3, #32
 8002530:	e004      	b.n	800253c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002532:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002536:	fab3 f383 	clz	r3, r3
 800253a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800253c:	429a      	cmp	r2, r3
 800253e:	d106      	bne.n	800254e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2200      	movs	r2, #0
 8002546:	2102      	movs	r1, #2
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe ff31 	bl	80013b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2103      	movs	r1, #3
 8002554:	4618      	mov	r0, r3
 8002556:	f7fe ff15 	bl	8001384 <LL_ADC_GetOffsetChannel>
 800255a:	4603      	mov	r3, r0
 800255c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10a      	bne.n	800257a <HAL_ADC_ConfigChannel+0x3aa>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2103      	movs	r1, #3
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe ff0a 	bl	8001384 <LL_ADC_GetOffsetChannel>
 8002570:	4603      	mov	r3, r0
 8002572:	0e9b      	lsrs	r3, r3, #26
 8002574:	f003 021f 	and.w	r2, r3, #31
 8002578:	e017      	b.n	80025aa <HAL_ADC_ConfigChannel+0x3da>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2103      	movs	r1, #3
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe feff 	bl	8001384 <LL_ADC_GetOffsetChannel>
 8002586:	4603      	mov	r3, r0
 8002588:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800258c:	fa93 f3a3 	rbit	r3, r3
 8002590:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002592:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002594:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002596:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800259c:	2320      	movs	r3, #32
 800259e:	e003      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80025a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025a2:	fab3 f383 	clz	r3, r3
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d105      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x3f2>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	0e9b      	lsrs	r3, r3, #26
 80025bc:	f003 031f 	and.w	r3, r3, #31
 80025c0:	e011      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x416>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025ca:	fa93 f3a3 	rbit	r3, r3
 80025ce:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80025d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80025d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80025da:	2320      	movs	r3, #32
 80025dc:	e003      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80025de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025e0:	fab3 f383 	clz	r3, r3
 80025e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d106      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2200      	movs	r2, #0
 80025f0:	2103      	movs	r1, #3
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fe fedc 	bl	80013b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff f86f 	bl	80016e0 <LL_ADC_IsEnabled>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	f040 813d 	bne.w	8002884 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	6819      	ldr	r1, [r3, #0]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	461a      	mov	r2, r3
 8002618:	f7fe ffac 	bl	8001574 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	4aa2      	ldr	r2, [pc, #648]	; (80028ac <HAL_ADC_ConfigChannel+0x6dc>)
 8002622:	4293      	cmp	r3, r2
 8002624:	f040 812e 	bne.w	8002884 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10b      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x480>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	0e9b      	lsrs	r3, r3, #26
 800263e:	3301      	adds	r3, #1
 8002640:	f003 031f 	and.w	r3, r3, #31
 8002644:	2b09      	cmp	r3, #9
 8002646:	bf94      	ite	ls
 8002648:	2301      	movls	r3, #1
 800264a:	2300      	movhi	r3, #0
 800264c:	b2db      	uxtb	r3, r3
 800264e:	e019      	b.n	8002684 <HAL_ADC_ConfigChannel+0x4b4>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002658:	fa93 f3a3 	rbit	r3, r3
 800265c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800265e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002660:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002662:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002668:	2320      	movs	r3, #32
 800266a:	e003      	b.n	8002674 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800266c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800266e:	fab3 f383 	clz	r3, r3
 8002672:	b2db      	uxtb	r3, r3
 8002674:	3301      	adds	r3, #1
 8002676:	f003 031f 	and.w	r3, r3, #31
 800267a:	2b09      	cmp	r3, #9
 800267c:	bf94      	ite	ls
 800267e:	2301      	movls	r3, #1
 8002680:	2300      	movhi	r3, #0
 8002682:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002684:	2b00      	cmp	r3, #0
 8002686:	d079      	beq.n	800277c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002690:	2b00      	cmp	r3, #0
 8002692:	d107      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x4d4>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	0e9b      	lsrs	r3, r3, #26
 800269a:	3301      	adds	r3, #1
 800269c:	069b      	lsls	r3, r3, #26
 800269e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026a2:	e015      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x500>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ac:	fa93 f3a3 	rbit	r3, r3
 80026b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80026b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80026b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80026bc:	2320      	movs	r3, #32
 80026be:	e003      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80026c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026c2:	fab3 f383 	clz	r3, r3
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	3301      	adds	r3, #1
 80026ca:	069b      	lsls	r3, r3, #26
 80026cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d109      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x520>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	0e9b      	lsrs	r3, r3, #26
 80026e2:	3301      	adds	r3, #1
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	2101      	movs	r1, #1
 80026ea:	fa01 f303 	lsl.w	r3, r1, r3
 80026ee:	e017      	b.n	8002720 <HAL_ADC_ConfigChannel+0x550>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026f8:	fa93 f3a3 	rbit	r3, r3
 80026fc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80026fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002700:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002702:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002708:	2320      	movs	r3, #32
 800270a:	e003      	b.n	8002714 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800270c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800270e:	fab3 f383 	clz	r3, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	3301      	adds	r3, #1
 8002716:	f003 031f 	and.w	r3, r3, #31
 800271a:	2101      	movs	r1, #1
 800271c:	fa01 f303 	lsl.w	r3, r1, r3
 8002720:	ea42 0103 	orr.w	r1, r2, r3
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10a      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x576>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	0e9b      	lsrs	r3, r3, #26
 8002736:	3301      	adds	r3, #1
 8002738:	f003 021f 	and.w	r2, r3, #31
 800273c:	4613      	mov	r3, r2
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4413      	add	r3, r2
 8002742:	051b      	lsls	r3, r3, #20
 8002744:	e018      	b.n	8002778 <HAL_ADC_ConfigChannel+0x5a8>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800274e:	fa93 f3a3 	rbit	r3, r3
 8002752:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002756:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800275e:	2320      	movs	r3, #32
 8002760:	e003      	b.n	800276a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002764:	fab3 f383 	clz	r3, r3
 8002768:	b2db      	uxtb	r3, r3
 800276a:	3301      	adds	r3, #1
 800276c:	f003 021f 	and.w	r2, r3, #31
 8002770:	4613      	mov	r3, r2
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	4413      	add	r3, r2
 8002776:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002778:	430b      	orrs	r3, r1
 800277a:	e07e      	b.n	800287a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002784:	2b00      	cmp	r3, #0
 8002786:	d107      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x5c8>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	0e9b      	lsrs	r3, r3, #26
 800278e:	3301      	adds	r3, #1
 8002790:	069b      	lsls	r3, r3, #26
 8002792:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002796:	e015      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x5f4>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a0:	fa93 f3a3 	rbit	r3, r3
 80027a4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80027a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80027aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80027b0:	2320      	movs	r3, #32
 80027b2:	e003      	b.n	80027bc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80027b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b6:	fab3 f383 	clz	r3, r3
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	3301      	adds	r3, #1
 80027be:	069b      	lsls	r3, r3, #26
 80027c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d109      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x614>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	0e9b      	lsrs	r3, r3, #26
 80027d6:	3301      	adds	r3, #1
 80027d8:	f003 031f 	and.w	r3, r3, #31
 80027dc:	2101      	movs	r1, #1
 80027de:	fa01 f303 	lsl.w	r3, r1, r3
 80027e2:	e017      	b.n	8002814 <HAL_ADC_ConfigChannel+0x644>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	fa93 f3a3 	rbit	r3, r3
 80027f0:	61fb      	str	r3, [r7, #28]
  return result;
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80027fc:	2320      	movs	r3, #32
 80027fe:	e003      	b.n	8002808 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	fab3 f383 	clz	r3, r3
 8002806:	b2db      	uxtb	r3, r3
 8002808:	3301      	adds	r3, #1
 800280a:	f003 031f 	and.w	r3, r3, #31
 800280e:	2101      	movs	r1, #1
 8002810:	fa01 f303 	lsl.w	r3, r1, r3
 8002814:	ea42 0103 	orr.w	r1, r2, r3
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10d      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x670>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	0e9b      	lsrs	r3, r3, #26
 800282a:	3301      	adds	r3, #1
 800282c:	f003 021f 	and.w	r2, r3, #31
 8002830:	4613      	mov	r3, r2
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	4413      	add	r3, r2
 8002836:	3b1e      	subs	r3, #30
 8002838:	051b      	lsls	r3, r3, #20
 800283a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800283e:	e01b      	b.n	8002878 <HAL_ADC_ConfigChannel+0x6a8>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	fa93 f3a3 	rbit	r3, r3
 800284c:	613b      	str	r3, [r7, #16]
  return result;
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002858:	2320      	movs	r3, #32
 800285a:	e003      	b.n	8002864 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	fab3 f383 	clz	r3, r3
 8002862:	b2db      	uxtb	r3, r3
 8002864:	3301      	adds	r3, #1
 8002866:	f003 021f 	and.w	r2, r3, #31
 800286a:	4613      	mov	r3, r2
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	4413      	add	r3, r2
 8002870:	3b1e      	subs	r3, #30
 8002872:	051b      	lsls	r3, r3, #20
 8002874:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002878:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800287e:	4619      	mov	r1, r3
 8002880:	f7fe fe4c 	bl	800151c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <HAL_ADC_ConfigChannel+0x6e0>)
 800288a:	4013      	ands	r3, r2
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 80be 	beq.w	8002a0e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800289a:	d004      	beq.n	80028a6 <HAL_ADC_ConfigChannel+0x6d6>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a04      	ldr	r2, [pc, #16]	; (80028b4 <HAL_ADC_ConfigChannel+0x6e4>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d10a      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x6ec>
 80028a6:	4b04      	ldr	r3, [pc, #16]	; (80028b8 <HAL_ADC_ConfigChannel+0x6e8>)
 80028a8:	e009      	b.n	80028be <HAL_ADC_ConfigChannel+0x6ee>
 80028aa:	bf00      	nop
 80028ac:	407f0000 	.word	0x407f0000
 80028b0:	80080000 	.word	0x80080000
 80028b4:	50000100 	.word	0x50000100
 80028b8:	50000300 	.word	0x50000300
 80028bc:	4b59      	ldr	r3, [pc, #356]	; (8002a24 <HAL_ADC_ConfigChannel+0x854>)
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fe fd2e 	bl	8001320 <LL_ADC_GetCommonPathInternalCh>
 80028c4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a56      	ldr	r2, [pc, #344]	; (8002a28 <HAL_ADC_ConfigChannel+0x858>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d004      	beq.n	80028dc <HAL_ADC_ConfigChannel+0x70c>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a55      	ldr	r2, [pc, #340]	; (8002a2c <HAL_ADC_ConfigChannel+0x85c>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d13a      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d134      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028f0:	d005      	beq.n	80028fe <HAL_ADC_ConfigChannel+0x72e>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a4e      	ldr	r2, [pc, #312]	; (8002a30 <HAL_ADC_ConfigChannel+0x860>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	f040 8085 	bne.w	8002a08 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002906:	d004      	beq.n	8002912 <HAL_ADC_ConfigChannel+0x742>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a49      	ldr	r2, [pc, #292]	; (8002a34 <HAL_ADC_ConfigChannel+0x864>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d101      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x746>
 8002912:	4a49      	ldr	r2, [pc, #292]	; (8002a38 <HAL_ADC_ConfigChannel+0x868>)
 8002914:	e000      	b.n	8002918 <HAL_ADC_ConfigChannel+0x748>
 8002916:	4a43      	ldr	r2, [pc, #268]	; (8002a24 <HAL_ADC_ConfigChannel+0x854>)
 8002918:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800291c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002920:	4619      	mov	r1, r3
 8002922:	4610      	mov	r0, r2
 8002924:	f7fe fce9 	bl	80012fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002928:	4b44      	ldr	r3, [pc, #272]	; (8002a3c <HAL_ADC_ConfigChannel+0x86c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	099b      	lsrs	r3, r3, #6
 800292e:	4a44      	ldr	r2, [pc, #272]	; (8002a40 <HAL_ADC_ConfigChannel+0x870>)
 8002930:	fba2 2303 	umull	r2, r3, r2, r3
 8002934:	099b      	lsrs	r3, r3, #6
 8002936:	1c5a      	adds	r2, r3, #1
 8002938:	4613      	mov	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4413      	add	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002942:	e002      	b.n	800294a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	3b01      	subs	r3, #1
 8002948:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1f9      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002950:	e05a      	b.n	8002a08 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a3b      	ldr	r2, [pc, #236]	; (8002a44 <HAL_ADC_ConfigChannel+0x874>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d125      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800295c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002960:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d11f      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a31      	ldr	r2, [pc, #196]	; (8002a34 <HAL_ADC_ConfigChannel+0x864>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d104      	bne.n	800297c <HAL_ADC_ConfigChannel+0x7ac>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a34      	ldr	r2, [pc, #208]	; (8002a48 <HAL_ADC_ConfigChannel+0x878>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d047      	beq.n	8002a0c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002984:	d004      	beq.n	8002990 <HAL_ADC_ConfigChannel+0x7c0>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a2a      	ldr	r2, [pc, #168]	; (8002a34 <HAL_ADC_ConfigChannel+0x864>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d101      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x7c4>
 8002990:	4a29      	ldr	r2, [pc, #164]	; (8002a38 <HAL_ADC_ConfigChannel+0x868>)
 8002992:	e000      	b.n	8002996 <HAL_ADC_ConfigChannel+0x7c6>
 8002994:	4a23      	ldr	r2, [pc, #140]	; (8002a24 <HAL_ADC_ConfigChannel+0x854>)
 8002996:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800299a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800299e:	4619      	mov	r1, r3
 80029a0:	4610      	mov	r0, r2
 80029a2:	f7fe fcaa 	bl	80012fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029a6:	e031      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a27      	ldr	r2, [pc, #156]	; (8002a4c <HAL_ADC_ConfigChannel+0x87c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d12d      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d127      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a1c      	ldr	r2, [pc, #112]	; (8002a34 <HAL_ADC_ConfigChannel+0x864>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d022      	beq.n	8002a0e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029d0:	d004      	beq.n	80029dc <HAL_ADC_ConfigChannel+0x80c>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a17      	ldr	r2, [pc, #92]	; (8002a34 <HAL_ADC_ConfigChannel+0x864>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d101      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x810>
 80029dc:	4a16      	ldr	r2, [pc, #88]	; (8002a38 <HAL_ADC_ConfigChannel+0x868>)
 80029de:	e000      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x812>
 80029e0:	4a10      	ldr	r2, [pc, #64]	; (8002a24 <HAL_ADC_ConfigChannel+0x854>)
 80029e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029ea:	4619      	mov	r1, r3
 80029ec:	4610      	mov	r0, r2
 80029ee:	f7fe fc84 	bl	80012fa <LL_ADC_SetCommonPathInternalCh>
 80029f2:	e00c      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f8:	f043 0220 	orr.w	r2, r3, #32
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002a06:	e002      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a08:	bf00      	nop
 8002a0a:	e000      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a0c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a16:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	37d8      	adds	r7, #216	; 0xd8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	50000700 	.word	0x50000700
 8002a28:	c3210000 	.word	0xc3210000
 8002a2c:	90c00010 	.word	0x90c00010
 8002a30:	50000600 	.word	0x50000600
 8002a34:	50000100 	.word	0x50000100
 8002a38:	50000300 	.word	0x50000300
 8002a3c:	20000004 	.word	0x20000004
 8002a40:	053e2d63 	.word	0x053e2d63
 8002a44:	c7520000 	.word	0xc7520000
 8002a48:	50000500 	.word	0x50000500
 8002a4c:	cb840000 	.word	0xcb840000

08002a50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fe fe3d 	bl	80016e0 <LL_ADC_IsEnabled>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d176      	bne.n	8002b5a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	4b3c      	ldr	r3, [pc, #240]	; (8002b64 <ADC_Enable+0x114>)
 8002a74:	4013      	ands	r3, r2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00d      	beq.n	8002a96 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7e:	f043 0210 	orr.w	r2, r3, #16
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a8a:	f043 0201 	orr.w	r2, r3, #1
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e062      	b.n	8002b5c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fe fdf8 	bl	8001690 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aa8:	d004      	beq.n	8002ab4 <ADC_Enable+0x64>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a2e      	ldr	r2, [pc, #184]	; (8002b68 <ADC_Enable+0x118>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d101      	bne.n	8002ab8 <ADC_Enable+0x68>
 8002ab4:	4b2d      	ldr	r3, [pc, #180]	; (8002b6c <ADC_Enable+0x11c>)
 8002ab6:	e000      	b.n	8002aba <ADC_Enable+0x6a>
 8002ab8:	4b2d      	ldr	r3, [pc, #180]	; (8002b70 <ADC_Enable+0x120>)
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe fc30 	bl	8001320 <LL_ADC_GetCommonPathInternalCh>
 8002ac0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002ac2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d013      	beq.n	8002af2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002aca:	4b2a      	ldr	r3, [pc, #168]	; (8002b74 <ADC_Enable+0x124>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	099b      	lsrs	r3, r3, #6
 8002ad0:	4a29      	ldr	r2, [pc, #164]	; (8002b78 <ADC_Enable+0x128>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	099b      	lsrs	r3, r3, #6
 8002ad8:	1c5a      	adds	r2, r3, #1
 8002ada:	4613      	mov	r3, r2
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	4413      	add	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ae4:	e002      	b.n	8002aec <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f9      	bne.n	8002ae6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002af2:	f7fe fbe3 	bl	80012bc <HAL_GetTick>
 8002af6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002af8:	e028      	b.n	8002b4c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fe fdee 	bl	80016e0 <LL_ADC_IsEnabled>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d104      	bne.n	8002b14 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fe fdbe 	bl	8001690 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b14:	f7fe fbd2 	bl	80012bc <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d914      	bls.n	8002b4c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d00d      	beq.n	8002b4c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b34:	f043 0210 	orr.w	r2, r3, #16
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b40:	f043 0201 	orr.w	r2, r3, #1
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e007      	b.n	8002b5c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d1cf      	bne.n	8002afa <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	8000003f 	.word	0x8000003f
 8002b68:	50000100 	.word	0x50000100
 8002b6c:	50000300 	.word	0x50000300
 8002b70:	50000700 	.word	0x50000700
 8002b74:	20000004 	.word	0x20000004
 8002b78:	053e2d63 	.word	0x053e2d63

08002b7c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fe fdbc 	bl	8001706 <LL_ADC_IsDisableOngoing>
 8002b8e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fe fda3 	bl	80016e0 <LL_ADC_IsEnabled>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d047      	beq.n	8002c30 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d144      	bne.n	8002c30 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 030d 	and.w	r3, r3, #13
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d10c      	bne.n	8002bce <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7fe fd7d 	bl	80016b8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bc6:	f7fe fb79 	bl	80012bc <HAL_GetTick>
 8002bca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002bcc:	e029      	b.n	8002c22 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd2:	f043 0210 	orr.w	r2, r3, #16
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bde:	f043 0201 	orr.w	r2, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e023      	b.n	8002c32 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bea:	f7fe fb67 	bl	80012bc <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d914      	bls.n	8002c22 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00d      	beq.n	8002c22 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0a:	f043 0210 	orr.w	r2, r3, #16
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c16:	f043 0201 	orr.w	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e007      	b.n	8002c32 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1dc      	bne.n	8002bea <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b084      	sub	sp, #16
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c46:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d14b      	bne.n	8002cec <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c58:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d021      	beq.n	8002cb2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fe fc00 	bl	8001478 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d032      	beq.n	8002ce4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d12b      	bne.n	8002ce4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d11f      	bne.n	8002ce4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca8:	f043 0201 	orr.w	r2, r3, #1
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cb0:	e018      	b.n	8002ce4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d111      	bne.n	8002ce4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d105      	bne.n	8002ce4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cdc:	f043 0201 	orr.w	r2, r3, #1
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f7ff fa4b 	bl	8002180 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002cea:	e00e      	b.n	8002d0a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf0:	f003 0310 	and.w	r3, r3, #16
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f7ff fa5f 	bl	80021bc <HAL_ADC_ErrorCallback>
}
 8002cfe:	e004      	b.n	8002d0a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	4798      	blx	r3
}
 8002d0a:	bf00      	nop
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b084      	sub	sp, #16
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f7ff fa37 	bl	8002194 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d26:	bf00      	nop
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b084      	sub	sp, #16
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d4c:	f043 0204 	orr.w	r2, r3, #4
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f7ff fa31 	bl	80021bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d5a:	bf00      	nop
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <LL_ADC_IsEnabled>:
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d101      	bne.n	8002d7a <LL_ADC_IsEnabled+0x18>
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <LL_ADC_IsEnabled+0x1a>
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <LL_ADC_StartCalibration>:
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002d9a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	609a      	str	r2, [r3, #8]
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <LL_ADC_IsCalibrationOnGoing>:
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002dce:	d101      	bne.n	8002dd4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e000      	b.n	8002dd6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <LL_ADC_REG_IsConversionOngoing>:
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 0304 	and.w	r3, r3, #4
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d101      	bne.n	8002dfa <LL_ADC_REG_IsConversionOngoing+0x18>
 8002df6:	2301      	movs	r3, #1
 8002df8:	e000      	b.n	8002dfc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d101      	bne.n	8002e24 <HAL_ADCEx_Calibration_Start+0x1c>
 8002e20:	2302      	movs	r3, #2
 8002e22:	e04d      	b.n	8002ec0 <HAL_ADCEx_Calibration_Start+0xb8>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7ff fea5 	bl	8002b7c <ADC_Disable>
 8002e32:	4603      	mov	r3, r0
 8002e34:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002e36:	7bfb      	ldrb	r3, [r7, #15]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d136      	bne.n	8002eaa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e40:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e44:	f023 0302 	bic.w	r3, r3, #2
 8002e48:	f043 0202 	orr.w	r2, r3, #2
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6839      	ldr	r1, [r7, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff ff96 	bl	8002d88 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002e5c:	e014      	b.n	8002e88 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	3301      	adds	r3, #1
 8002e62:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	4a18      	ldr	r2, [pc, #96]	; (8002ec8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d90d      	bls.n	8002e88 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e70:	f023 0312 	bic.w	r3, r3, #18
 8002e74:	f043 0210 	orr.w	r2, r3, #16
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e01b      	b.n	8002ec0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff ff94 	bl	8002dba <LL_ADC_IsCalibrationOnGoing>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1e2      	bne.n	8002e5e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9c:	f023 0303 	bic.w	r3, r3, #3
 8002ea0:	f043 0201 	orr.w	r2, r3, #1
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ea8:	e005      	b.n	8002eb6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eae:	f043 0210 	orr.w	r2, r3, #16
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	0004de01 	.word	0x0004de01

08002ecc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002f30:	b590      	push	{r4, r7, lr}
 8002f32:	b0a1      	sub	sp, #132	; 0x84
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e0e7      	b.n	800311e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002f56:	2300      	movs	r3, #0
 8002f58:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f66:	d102      	bne.n	8002f6e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002f68:	4b6f      	ldr	r3, [pc, #444]	; (8003128 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f6a:	60bb      	str	r3, [r7, #8]
 8002f6c:	e009      	b.n	8002f82 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a6e      	ldr	r2, [pc, #440]	; (800312c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d102      	bne.n	8002f7e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002f78:	4b6d      	ldr	r3, [pc, #436]	; (8003130 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002f7a:	60bb      	str	r3, [r7, #8]
 8002f7c:	e001      	b.n	8002f82 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10b      	bne.n	8002fa0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8c:	f043 0220 	orr.w	r2, r3, #32
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0be      	b.n	800311e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff ff1d 	bl	8002de2 <LL_ADC_REG_IsConversionOngoing>
 8002fa8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff ff17 	bl	8002de2 <LL_ADC_REG_IsConversionOngoing>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f040 80a0 	bne.w	80030fc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002fbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f040 809c 	bne.w	80030fc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fcc:	d004      	beq.n	8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a55      	ldr	r2, [pc, #340]	; (8003128 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d101      	bne.n	8002fdc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002fd8:	4b56      	ldr	r3, [pc, #344]	; (8003134 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002fda:	e000      	b.n	8002fde <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002fdc:	4b56      	ldr	r3, [pc, #344]	; (8003138 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002fde:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d04b      	beq.n	8003080 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002fe8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	6859      	ldr	r1, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ffa:	035b      	lsls	r3, r3, #13
 8002ffc:	430b      	orrs	r3, r1
 8002ffe:	431a      	orrs	r2, r3
 8003000:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003002:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800300c:	d004      	beq.n	8003018 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a45      	ldr	r2, [pc, #276]	; (8003128 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d10f      	bne.n	8003038 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003018:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800301c:	f7ff fea1 	bl	8002d62 <LL_ADC_IsEnabled>
 8003020:	4604      	mov	r4, r0
 8003022:	4841      	ldr	r0, [pc, #260]	; (8003128 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003024:	f7ff fe9d 	bl	8002d62 <LL_ADC_IsEnabled>
 8003028:	4603      	mov	r3, r0
 800302a:	4323      	orrs	r3, r4
 800302c:	2b00      	cmp	r3, #0
 800302e:	bf0c      	ite	eq
 8003030:	2301      	moveq	r3, #1
 8003032:	2300      	movne	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	e012      	b.n	800305e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003038:	483c      	ldr	r0, [pc, #240]	; (800312c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800303a:	f7ff fe92 	bl	8002d62 <LL_ADC_IsEnabled>
 800303e:	4604      	mov	r4, r0
 8003040:	483b      	ldr	r0, [pc, #236]	; (8003130 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003042:	f7ff fe8e 	bl	8002d62 <LL_ADC_IsEnabled>
 8003046:	4603      	mov	r3, r0
 8003048:	431c      	orrs	r4, r3
 800304a:	483c      	ldr	r0, [pc, #240]	; (800313c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800304c:	f7ff fe89 	bl	8002d62 <LL_ADC_IsEnabled>
 8003050:	4603      	mov	r3, r0
 8003052:	4323      	orrs	r3, r4
 8003054:	2b00      	cmp	r3, #0
 8003056:	bf0c      	ite	eq
 8003058:	2301      	moveq	r3, #1
 800305a:	2300      	movne	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d056      	beq.n	8003110 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800306a:	f023 030f 	bic.w	r3, r3, #15
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	6811      	ldr	r1, [r2, #0]
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	6892      	ldr	r2, [r2, #8]
 8003076:	430a      	orrs	r2, r1
 8003078:	431a      	orrs	r2, r3
 800307a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800307c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800307e:	e047      	b.n	8003110 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003080:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003088:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800308a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003094:	d004      	beq.n	80030a0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a23      	ldr	r2, [pc, #140]	; (8003128 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d10f      	bne.n	80030c0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80030a0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80030a4:	f7ff fe5d 	bl	8002d62 <LL_ADC_IsEnabled>
 80030a8:	4604      	mov	r4, r0
 80030aa:	481f      	ldr	r0, [pc, #124]	; (8003128 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80030ac:	f7ff fe59 	bl	8002d62 <LL_ADC_IsEnabled>
 80030b0:	4603      	mov	r3, r0
 80030b2:	4323      	orrs	r3, r4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	bf0c      	ite	eq
 80030b8:	2301      	moveq	r3, #1
 80030ba:	2300      	movne	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	e012      	b.n	80030e6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80030c0:	481a      	ldr	r0, [pc, #104]	; (800312c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80030c2:	f7ff fe4e 	bl	8002d62 <LL_ADC_IsEnabled>
 80030c6:	4604      	mov	r4, r0
 80030c8:	4819      	ldr	r0, [pc, #100]	; (8003130 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80030ca:	f7ff fe4a 	bl	8002d62 <LL_ADC_IsEnabled>
 80030ce:	4603      	mov	r3, r0
 80030d0:	431c      	orrs	r4, r3
 80030d2:	481a      	ldr	r0, [pc, #104]	; (800313c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80030d4:	f7ff fe45 	bl	8002d62 <LL_ADC_IsEnabled>
 80030d8:	4603      	mov	r3, r0
 80030da:	4323      	orrs	r3, r4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	bf0c      	ite	eq
 80030e0:	2301      	moveq	r3, #1
 80030e2:	2300      	movne	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d012      	beq.n	8003110 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80030ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80030f2:	f023 030f 	bic.w	r3, r3, #15
 80030f6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80030f8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030fa:	e009      	b.n	8003110 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003100:	f043 0220 	orr.w	r2, r3, #32
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800310e:	e000      	b.n	8003112 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003110:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800311a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800311e:	4618      	mov	r0, r3
 8003120:	3784      	adds	r7, #132	; 0x84
 8003122:	46bd      	mov	sp, r7
 8003124:	bd90      	pop	{r4, r7, pc}
 8003126:	bf00      	nop
 8003128:	50000100 	.word	0x50000100
 800312c:	50000400 	.word	0x50000400
 8003130:	50000500 	.word	0x50000500
 8003134:	50000300 	.word	0x50000300
 8003138:	50000700 	.word	0x50000700
 800313c:	50000600 	.word	0x50000600

08003140 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003150:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <__NVIC_SetPriorityGrouping+0x44>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800315c:	4013      	ands	r3, r2
 800315e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003168:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800316c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003172:	4a04      	ldr	r2, [pc, #16]	; (8003184 <__NVIC_SetPriorityGrouping+0x44>)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	60d3      	str	r3, [r2, #12]
}
 8003178:	bf00      	nop
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	e000ed00 	.word	0xe000ed00

08003188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800318c:	4b04      	ldr	r3, [pc, #16]	; (80031a0 <__NVIC_GetPriorityGrouping+0x18>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	0a1b      	lsrs	r3, r3, #8
 8003192:	f003 0307 	and.w	r3, r3, #7
}
 8003196:	4618      	mov	r0, r3
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	e000ed00 	.word	0xe000ed00

080031a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	db0b      	blt.n	80031ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	f003 021f 	and.w	r2, r3, #31
 80031bc:	4907      	ldr	r1, [pc, #28]	; (80031dc <__NVIC_EnableIRQ+0x38>)
 80031be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c2:	095b      	lsrs	r3, r3, #5
 80031c4:	2001      	movs	r0, #1
 80031c6:	fa00 f202 	lsl.w	r2, r0, r2
 80031ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	e000e100 	.word	0xe000e100

080031e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	4603      	mov	r3, r0
 80031e8:	6039      	str	r1, [r7, #0]
 80031ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	db0a      	blt.n	800320a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	b2da      	uxtb	r2, r3
 80031f8:	490c      	ldr	r1, [pc, #48]	; (800322c <__NVIC_SetPriority+0x4c>)
 80031fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fe:	0112      	lsls	r2, r2, #4
 8003200:	b2d2      	uxtb	r2, r2
 8003202:	440b      	add	r3, r1
 8003204:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003208:	e00a      	b.n	8003220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	b2da      	uxtb	r2, r3
 800320e:	4908      	ldr	r1, [pc, #32]	; (8003230 <__NVIC_SetPriority+0x50>)
 8003210:	79fb      	ldrb	r3, [r7, #7]
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	3b04      	subs	r3, #4
 8003218:	0112      	lsls	r2, r2, #4
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	440b      	add	r3, r1
 800321e:	761a      	strb	r2, [r3, #24]
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	e000e100 	.word	0xe000e100
 8003230:	e000ed00 	.word	0xe000ed00

08003234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003234:	b480      	push	{r7}
 8003236:	b089      	sub	sp, #36	; 0x24
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f1c3 0307 	rsb	r3, r3, #7
 800324e:	2b04      	cmp	r3, #4
 8003250:	bf28      	it	cs
 8003252:	2304      	movcs	r3, #4
 8003254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	3304      	adds	r3, #4
 800325a:	2b06      	cmp	r3, #6
 800325c:	d902      	bls.n	8003264 <NVIC_EncodePriority+0x30>
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	3b03      	subs	r3, #3
 8003262:	e000      	b.n	8003266 <NVIC_EncodePriority+0x32>
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003268:	f04f 32ff 	mov.w	r2, #4294967295
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	43da      	mvns	r2, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	401a      	ands	r2, r3
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800327c:	f04f 31ff 	mov.w	r1, #4294967295
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	fa01 f303 	lsl.w	r3, r1, r3
 8003286:	43d9      	mvns	r1, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800328c:	4313      	orrs	r3, r2
         );
}
 800328e:	4618      	mov	r0, r3
 8003290:	3724      	adds	r7, #36	; 0x24
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
	...

0800329c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032ac:	d301      	bcc.n	80032b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032ae:	2301      	movs	r3, #1
 80032b0:	e00f      	b.n	80032d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032b2:	4a0a      	ldr	r2, [pc, #40]	; (80032dc <SysTick_Config+0x40>)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032ba:	210f      	movs	r1, #15
 80032bc:	f04f 30ff 	mov.w	r0, #4294967295
 80032c0:	f7ff ff8e 	bl	80031e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032c4:	4b05      	ldr	r3, [pc, #20]	; (80032dc <SysTick_Config+0x40>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ca:	4b04      	ldr	r3, [pc, #16]	; (80032dc <SysTick_Config+0x40>)
 80032cc:	2207      	movs	r2, #7
 80032ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	e000e010 	.word	0xe000e010

080032e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f7ff ff29 	bl	8003140 <__NVIC_SetPriorityGrouping>
}
 80032ee:	bf00      	nop
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b086      	sub	sp, #24
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	4603      	mov	r3, r0
 80032fe:	60b9      	str	r1, [r7, #8]
 8003300:	607a      	str	r2, [r7, #4]
 8003302:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003304:	f7ff ff40 	bl	8003188 <__NVIC_GetPriorityGrouping>
 8003308:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	68b9      	ldr	r1, [r7, #8]
 800330e:	6978      	ldr	r0, [r7, #20]
 8003310:	f7ff ff90 	bl	8003234 <NVIC_EncodePriority>
 8003314:	4602      	mov	r2, r0
 8003316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800331a:	4611      	mov	r1, r2
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff ff5f 	bl	80031e0 <__NVIC_SetPriority>
}
 8003322:	bf00      	nop
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b082      	sub	sp, #8
 800332e:	af00      	add	r7, sp, #0
 8003330:	4603      	mov	r3, r0
 8003332:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff ff33 	bl	80031a4 <__NVIC_EnableIRQ>
}
 800333e:	bf00      	nop
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b082      	sub	sp, #8
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff ffa4 	bl	800329c <SysTick_Config>
 8003354:	4603      	mov	r3, r0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e08d      	b.n	800348e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	461a      	mov	r2, r3
 8003378:	4b47      	ldr	r3, [pc, #284]	; (8003498 <HAL_DMA_Init+0x138>)
 800337a:	429a      	cmp	r2, r3
 800337c:	d80f      	bhi.n	800339e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	461a      	mov	r2, r3
 8003384:	4b45      	ldr	r3, [pc, #276]	; (800349c <HAL_DMA_Init+0x13c>)
 8003386:	4413      	add	r3, r2
 8003388:	4a45      	ldr	r2, [pc, #276]	; (80034a0 <HAL_DMA_Init+0x140>)
 800338a:	fba2 2303 	umull	r2, r3, r2, r3
 800338e:	091b      	lsrs	r3, r3, #4
 8003390:	009a      	lsls	r2, r3, #2
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a42      	ldr	r2, [pc, #264]	; (80034a4 <HAL_DMA_Init+0x144>)
 800339a:	641a      	str	r2, [r3, #64]	; 0x40
 800339c:	e00e      	b.n	80033bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	461a      	mov	r2, r3
 80033a4:	4b40      	ldr	r3, [pc, #256]	; (80034a8 <HAL_DMA_Init+0x148>)
 80033a6:	4413      	add	r3, r2
 80033a8:	4a3d      	ldr	r2, [pc, #244]	; (80034a0 <HAL_DMA_Init+0x140>)
 80033aa:	fba2 2303 	umull	r2, r3, r2, r3
 80033ae:	091b      	lsrs	r3, r3, #4
 80033b0:	009a      	lsls	r2, r3, #2
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a3c      	ldr	r2, [pc, #240]	; (80034ac <HAL_DMA_Init+0x14c>)
 80033ba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2202      	movs	r2, #2
 80033c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80033d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80033e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4313      	orrs	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f9b6 	bl	8003780 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800341c:	d102      	bne.n	8003424 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800342c:	b2d2      	uxtb	r2, r2
 800342e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003438:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d010      	beq.n	8003464 <HAL_DMA_Init+0x104>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b04      	cmp	r3, #4
 8003448:	d80c      	bhi.n	8003464 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f9d6 	bl	80037fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	e008      	b.n	8003476 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40020407 	.word	0x40020407
 800349c:	bffdfff8 	.word	0xbffdfff8
 80034a0:	cccccccd 	.word	0xcccccccd
 80034a4:	40020000 	.word	0x40020000
 80034a8:	bffdfbf8 	.word	0xbffdfbf8
 80034ac:	40020400 	.word	0x40020400

080034b0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
 80034bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034be:	2300      	movs	r3, #0
 80034c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_DMA_Start_IT+0x20>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e066      	b.n	800359e <HAL_DMA_Start_IT+0xee>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d155      	bne.n	8003590 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2202      	movs	r2, #2
 80034e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0201 	bic.w	r2, r2, #1
 8003500:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	68b9      	ldr	r1, [r7, #8]
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 f8fb 	bl	8003704 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	2b00      	cmp	r3, #0
 8003514:	d008      	beq.n	8003528 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f042 020e 	orr.w	r2, r2, #14
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	e00f      	b.n	8003548 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0204 	bic.w	r2, r2, #4
 8003536:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 020a 	orr.w	r2, r2, #10
 8003546:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d007      	beq.n	8003566 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003560:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003564:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356a:	2b00      	cmp	r3, #0
 800356c:	d007      	beq.n	800357e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003578:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800357c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f042 0201 	orr.w	r2, r2, #1
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	e005      	b.n	800359c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003598:	2302      	movs	r3, #2
 800359a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800359c:	7dfb      	ldrb	r3, [r7, #23]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b084      	sub	sp, #16
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c2:	f003 031f 	and.w	r3, r3, #31
 80035c6:	2204      	movs	r2, #4
 80035c8:	409a      	lsls	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4013      	ands	r3, r2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d026      	beq.n	8003620 <HAL_DMA_IRQHandler+0x7a>
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d021      	beq.n	8003620 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d107      	bne.n	80035fa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0204 	bic.w	r2, r2, #4
 80035f8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fe:	f003 021f 	and.w	r2, r3, #31
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	2104      	movs	r1, #4
 8003608:	fa01 f202 	lsl.w	r2, r1, r2
 800360c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	2b00      	cmp	r3, #0
 8003614:	d071      	beq.n	80036fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800361e:	e06c      	b.n	80036fa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003624:	f003 031f 	and.w	r3, r3, #31
 8003628:	2202      	movs	r2, #2
 800362a:	409a      	lsls	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4013      	ands	r3, r2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d02e      	beq.n	8003692 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d029      	beq.n	8003692 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0320 	and.w	r3, r3, #32
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10b      	bne.n	8003664 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 020a 	bic.w	r2, r2, #10
 800365a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003668:	f003 021f 	and.w	r2, r3, #31
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003670:	2102      	movs	r1, #2
 8003672:	fa01 f202 	lsl.w	r2, r1, r2
 8003676:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	2b00      	cmp	r3, #0
 8003686:	d038      	beq.n	80036fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003690:	e033      	b.n	80036fa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003696:	f003 031f 	and.w	r3, r3, #31
 800369a:	2208      	movs	r2, #8
 800369c:	409a      	lsls	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d02a      	beq.n	80036fc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	f003 0308 	and.w	r3, r3, #8
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d025      	beq.n	80036fc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 020e 	bic.w	r2, r2, #14
 80036be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c4:	f003 021f 	and.w	r2, r3, #31
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	2101      	movs	r1, #1
 80036ce:	fa01 f202 	lsl.w	r2, r1, r2
 80036d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d004      	beq.n	80036fc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80036fa:	bf00      	nop
 80036fc:	bf00      	nop
}
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
 8003710:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800371a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003720:	2b00      	cmp	r3, #0
 8003722:	d004      	beq.n	800372e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800372c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003732:	f003 021f 	and.w	r2, r3, #31
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	2101      	movs	r1, #1
 800373c:	fa01 f202 	lsl.w	r2, r1, r2
 8003740:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	2b10      	cmp	r3, #16
 8003750:	d108      	bne.n	8003764 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003762:	e007      	b.n	8003774 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	60da      	str	r2, [r3, #12]
}
 8003774:	bf00      	nop
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003780:	b480      	push	{r7}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	461a      	mov	r2, r3
 800378e:	4b16      	ldr	r3, [pc, #88]	; (80037e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003790:	429a      	cmp	r2, r3
 8003792:	d802      	bhi.n	800379a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003794:	4b15      	ldr	r3, [pc, #84]	; (80037ec <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	e001      	b.n	800379e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800379a:	4b15      	ldr	r3, [pc, #84]	; (80037f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800379c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	3b08      	subs	r3, #8
 80037aa:	4a12      	ldr	r2, [pc, #72]	; (80037f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80037ac:	fba2 2303 	umull	r2, r3, r2, r3
 80037b0:	091b      	lsrs	r3, r3, #4
 80037b2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b8:	089b      	lsrs	r3, r3, #2
 80037ba:	009a      	lsls	r2, r3, #2
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	4413      	add	r3, r2
 80037c0:	461a      	mov	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a0b      	ldr	r2, [pc, #44]	; (80037f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80037ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f003 031f 	and.w	r3, r3, #31
 80037d2:	2201      	movs	r2, #1
 80037d4:	409a      	lsls	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80037da:	bf00      	nop
 80037dc:	371c      	adds	r7, #28
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	40020407 	.word	0x40020407
 80037ec:	40020800 	.word	0x40020800
 80037f0:	40020820 	.word	0x40020820
 80037f4:	cccccccd 	.word	0xcccccccd
 80037f8:	40020880 	.word	0x40020880

080037fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	4b0b      	ldr	r3, [pc, #44]	; (800383c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003810:	4413      	add	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	461a      	mov	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a08      	ldr	r2, [pc, #32]	; (8003840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800381e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	3b01      	subs	r3, #1
 8003824:	f003 031f 	and.w	r3, r3, #31
 8003828:	2201      	movs	r2, #1
 800382a:	409a      	lsls	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003830:	bf00      	nop
 8003832:	3714      	adds	r7, #20
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	1000823f 	.word	0x1000823f
 8003840:	40020940 	.word	0x40020940

08003844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003844:	b480      	push	{r7}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800384e:	2300      	movs	r3, #0
 8003850:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003852:	e15a      	b.n	8003b0a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	2101      	movs	r1, #1
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	fa01 f303 	lsl.w	r3, r1, r3
 8003860:	4013      	ands	r3, r2
 8003862:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 814c 	beq.w	8003b04 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f003 0303 	and.w	r3, r3, #3
 8003874:	2b01      	cmp	r3, #1
 8003876:	d005      	beq.n	8003884 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003880:	2b02      	cmp	r3, #2
 8003882:	d130      	bne.n	80038e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	2203      	movs	r2, #3
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	43db      	mvns	r3, r3
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4013      	ands	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038ba:	2201      	movs	r2, #1
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	43db      	mvns	r3, r3
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4013      	ands	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	091b      	lsrs	r3, r3, #4
 80038d0:	f003 0201 	and.w	r2, r3, #1
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	4313      	orrs	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	2b03      	cmp	r3, #3
 80038f0:	d017      	beq.n	8003922 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	2203      	movs	r2, #3
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	43db      	mvns	r3, r3
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	4013      	ands	r3, r2
 8003908:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	4313      	orrs	r3, r2
 800391a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d123      	bne.n	8003976 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	08da      	lsrs	r2, r3, #3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	3208      	adds	r2, #8
 8003936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800393a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f003 0307 	and.w	r3, r3, #7
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	220f      	movs	r2, #15
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	43db      	mvns	r3, r3
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	4013      	ands	r3, r2
 8003950:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	691a      	ldr	r2, [r3, #16]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	08da      	lsrs	r2, r3, #3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3208      	adds	r2, #8
 8003970:	6939      	ldr	r1, [r7, #16]
 8003972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	2203      	movs	r2, #3
 8003982:	fa02 f303 	lsl.w	r3, r2, r3
 8003986:	43db      	mvns	r3, r3
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4013      	ands	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f003 0203 	and.w	r2, r3, #3
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 80a6 	beq.w	8003b04 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039b8:	4b5b      	ldr	r3, [pc, #364]	; (8003b28 <HAL_GPIO_Init+0x2e4>)
 80039ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039bc:	4a5a      	ldr	r2, [pc, #360]	; (8003b28 <HAL_GPIO_Init+0x2e4>)
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	6613      	str	r3, [r2, #96]	; 0x60
 80039c4:	4b58      	ldr	r3, [pc, #352]	; (8003b28 <HAL_GPIO_Init+0x2e4>)
 80039c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	60bb      	str	r3, [r7, #8]
 80039ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039d0:	4a56      	ldr	r2, [pc, #344]	; (8003b2c <HAL_GPIO_Init+0x2e8>)
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	089b      	lsrs	r3, r3, #2
 80039d6:	3302      	adds	r3, #2
 80039d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f003 0303 	and.w	r3, r3, #3
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	220f      	movs	r2, #15
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	43db      	mvns	r3, r3
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	4013      	ands	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80039fa:	d01f      	beq.n	8003a3c <HAL_GPIO_Init+0x1f8>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a4c      	ldr	r2, [pc, #304]	; (8003b30 <HAL_GPIO_Init+0x2ec>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d019      	beq.n	8003a38 <HAL_GPIO_Init+0x1f4>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a4b      	ldr	r2, [pc, #300]	; (8003b34 <HAL_GPIO_Init+0x2f0>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d013      	beq.n	8003a34 <HAL_GPIO_Init+0x1f0>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a4a      	ldr	r2, [pc, #296]	; (8003b38 <HAL_GPIO_Init+0x2f4>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d00d      	beq.n	8003a30 <HAL_GPIO_Init+0x1ec>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a49      	ldr	r2, [pc, #292]	; (8003b3c <HAL_GPIO_Init+0x2f8>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d007      	beq.n	8003a2c <HAL_GPIO_Init+0x1e8>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a48      	ldr	r2, [pc, #288]	; (8003b40 <HAL_GPIO_Init+0x2fc>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d101      	bne.n	8003a28 <HAL_GPIO_Init+0x1e4>
 8003a24:	2305      	movs	r3, #5
 8003a26:	e00a      	b.n	8003a3e <HAL_GPIO_Init+0x1fa>
 8003a28:	2306      	movs	r3, #6
 8003a2a:	e008      	b.n	8003a3e <HAL_GPIO_Init+0x1fa>
 8003a2c:	2304      	movs	r3, #4
 8003a2e:	e006      	b.n	8003a3e <HAL_GPIO_Init+0x1fa>
 8003a30:	2303      	movs	r3, #3
 8003a32:	e004      	b.n	8003a3e <HAL_GPIO_Init+0x1fa>
 8003a34:	2302      	movs	r3, #2
 8003a36:	e002      	b.n	8003a3e <HAL_GPIO_Init+0x1fa>
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e000      	b.n	8003a3e <HAL_GPIO_Init+0x1fa>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	f002 0203 	and.w	r2, r2, #3
 8003a44:	0092      	lsls	r2, r2, #2
 8003a46:	4093      	lsls	r3, r2
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a4e:	4937      	ldr	r1, [pc, #220]	; (8003b2c <HAL_GPIO_Init+0x2e8>)
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	089b      	lsrs	r3, r3, #2
 8003a54:	3302      	adds	r3, #2
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a5c:	4b39      	ldr	r3, [pc, #228]	; (8003b44 <HAL_GPIO_Init+0x300>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	43db      	mvns	r3, r3
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d003      	beq.n	8003a80 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a80:	4a30      	ldr	r2, [pc, #192]	; (8003b44 <HAL_GPIO_Init+0x300>)
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a86:	4b2f      	ldr	r3, [pc, #188]	; (8003b44 <HAL_GPIO_Init+0x300>)
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	4013      	ands	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003aaa:	4a26      	ldr	r2, [pc, #152]	; (8003b44 <HAL_GPIO_Init+0x300>)
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003ab0:	4b24      	ldr	r3, [pc, #144]	; (8003b44 <HAL_GPIO_Init+0x300>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	4013      	ands	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ad4:	4a1b      	ldr	r2, [pc, #108]	; (8003b44 <HAL_GPIO_Init+0x300>)
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003ada:	4b1a      	ldr	r3, [pc, #104]	; (8003b44 <HAL_GPIO_Init+0x300>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003afe:	4a11      	ldr	r2, [pc, #68]	; (8003b44 <HAL_GPIO_Init+0x300>)
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	3301      	adds	r3, #1
 8003b08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	fa22 f303 	lsr.w	r3, r2, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f47f ae9d 	bne.w	8003854 <HAL_GPIO_Init+0x10>
  }
}
 8003b1a:	bf00      	nop
 8003b1c:	bf00      	nop
 8003b1e:	371c      	adds	r7, #28
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	40010000 	.word	0x40010000
 8003b30:	48000400 	.word	0x48000400
 8003b34:	48000800 	.word	0x48000800
 8003b38:	48000c00 	.word	0x48000c00
 8003b3c:	48001000 	.word	0x48001000
 8003b40:	48001400 	.word	0x48001400
 8003b44:	40010400 	.word	0x40010400

08003b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	460b      	mov	r3, r1
 8003b52:	807b      	strh	r3, [r7, #2]
 8003b54:	4613      	mov	r3, r2
 8003b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b58:	787b      	ldrb	r3, [r7, #1]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b5e:	887a      	ldrh	r2, [r7, #2]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b64:	e002      	b.n	8003b6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b66:	887a      	ldrh	r2, [r7, #2]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b82:	4b08      	ldr	r3, [pc, #32]	; (8003ba4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b84:	695a      	ldr	r2, [r3, #20]
 8003b86:	88fb      	ldrh	r3, [r7, #6]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d006      	beq.n	8003b9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b8e:	4a05      	ldr	r2, [pc, #20]	; (8003ba4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b90:	88fb      	ldrh	r3, [r7, #6]
 8003b92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b94:	88fb      	ldrh	r3, [r7, #6]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 f806 	bl	8003ba8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b9c:	bf00      	nop
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40010400 	.word	0x40010400

08003ba8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	4603      	mov	r3, r0
 8003bb0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
	...

08003bc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d141      	bne.n	8003c52 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bce:	4b4b      	ldr	r3, [pc, #300]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bda:	d131      	bne.n	8003c40 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bdc:	4b47      	ldr	r3, [pc, #284]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003be2:	4a46      	ldr	r2, [pc, #280]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003be4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003be8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bec:	4b43      	ldr	r3, [pc, #268]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bf4:	4a41      	ldr	r2, [pc, #260]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bfa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003bfc:	4b40      	ldr	r3, [pc, #256]	; (8003d00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2232      	movs	r2, #50	; 0x32
 8003c02:	fb02 f303 	mul.w	r3, r2, r3
 8003c06:	4a3f      	ldr	r2, [pc, #252]	; (8003d04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c08:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0c:	0c9b      	lsrs	r3, r3, #18
 8003c0e:	3301      	adds	r3, #1
 8003c10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c12:	e002      	b.n	8003c1a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c1a:	4b38      	ldr	r3, [pc, #224]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c26:	d102      	bne.n	8003c2e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1f2      	bne.n	8003c14 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c2e:	4b33      	ldr	r3, [pc, #204]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c3a:	d158      	bne.n	8003cee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e057      	b.n	8003cf0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c40:	4b2e      	ldr	r3, [pc, #184]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c46:	4a2d      	ldr	r2, [pc, #180]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003c50:	e04d      	b.n	8003cee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c58:	d141      	bne.n	8003cde <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c5a:	4b28      	ldr	r3, [pc, #160]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c66:	d131      	bne.n	8003ccc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c68:	4b24      	ldr	r3, [pc, #144]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c6e:	4a23      	ldr	r2, [pc, #140]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c78:	4b20      	ldr	r3, [pc, #128]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c80:	4a1e      	ldr	r2, [pc, #120]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c88:	4b1d      	ldr	r3, [pc, #116]	; (8003d00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2232      	movs	r2, #50	; 0x32
 8003c8e:	fb02 f303 	mul.w	r3, r2, r3
 8003c92:	4a1c      	ldr	r2, [pc, #112]	; (8003d04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c94:	fba2 2303 	umull	r2, r3, r2, r3
 8003c98:	0c9b      	lsrs	r3, r3, #18
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c9e:	e002      	b.n	8003ca6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ca6:	4b15      	ldr	r3, [pc, #84]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cb2:	d102      	bne.n	8003cba <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1f2      	bne.n	8003ca0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cba:	4b10      	ldr	r3, [pc, #64]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cc6:	d112      	bne.n	8003cee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e011      	b.n	8003cf0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ccc:	4b0b      	ldr	r3, [pc, #44]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cd2:	4a0a      	ldr	r2, [pc, #40]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003cdc:	e007      	b.n	8003cee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003cde:	4b07      	ldr	r3, [pc, #28]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ce6:	4a05      	ldr	r2, [pc, #20]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ce8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	40007000 	.word	0x40007000
 8003d00:	20000004 	.word	0x20000004
 8003d04:	431bde83 	.word	0x431bde83

08003d08 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003d0c:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	4a04      	ldr	r2, [pc, #16]	; (8003d24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003d12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d16:	6093      	str	r3, [r2, #8]
}
 8003d18:	bf00      	nop
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	40007000 	.word	0x40007000

08003d28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e2fe      	b.n	8004338 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d075      	beq.n	8003e32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d46:	4b97      	ldr	r3, [pc, #604]	; (8003fa4 <HAL_RCC_OscConfig+0x27c>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 030c 	and.w	r3, r3, #12
 8003d4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d50:	4b94      	ldr	r3, [pc, #592]	; (8003fa4 <HAL_RCC_OscConfig+0x27c>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f003 0303 	and.w	r3, r3, #3
 8003d58:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	2b0c      	cmp	r3, #12
 8003d5e:	d102      	bne.n	8003d66 <HAL_RCC_OscConfig+0x3e>
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	2b03      	cmp	r3, #3
 8003d64:	d002      	beq.n	8003d6c <HAL_RCC_OscConfig+0x44>
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	2b08      	cmp	r3, #8
 8003d6a:	d10b      	bne.n	8003d84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d6c:	4b8d      	ldr	r3, [pc, #564]	; (8003fa4 <HAL_RCC_OscConfig+0x27c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d05b      	beq.n	8003e30 <HAL_RCC_OscConfig+0x108>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d157      	bne.n	8003e30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e2d9      	b.n	8004338 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d8c:	d106      	bne.n	8003d9c <HAL_RCC_OscConfig+0x74>
 8003d8e:	4b85      	ldr	r3, [pc, #532]	; (8003fa4 <HAL_RCC_OscConfig+0x27c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a84      	ldr	r2, [pc, #528]	; (8003fa4 <HAL_RCC_OscConfig+0x27c>)
 8003d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d98:	6013      	str	r3, [r2, #0]
 8003d9a:	e01d      	b.n	8003dd8 <HAL_RCC_OscConfig+0xb0>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003da4:	d10c      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x98>
 8003da6:	4b7f      	ldr	r3, [pc, #508]	; (8003fa4 <HAL_RCC_OscConfig+0x27c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a7e      	ldr	r2, [pc, #504]	; (8003fa4 <HAL_RCC_OscConfig+0x27c>)
 8003dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003db0:	6013      	str	r3, [r2, #0]
 8003db2:	4b7c      	ldr	r3, [pc, #496]	; (8003fa4 <HAL_RCC_OscConfig+0x27c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a7b      	ldr	r2, [pc, #492]	; (8003fa4 <HAL_RCC_OscConfig+0x27c>)
 8003db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	e00b      	b.n	8003dd8 <HAL_RCC_OscConfig+0xb0>
 8003dc0:	4b78      	ldr	r3, [pc, #480]	; (8003fa4 <HAL_RCC_OscConfig+0x27c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a77      	ldr	r2, [pc, #476]	; (8003fa4 <HAL_RCC_OscConfig+0x27c>)
 8003dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dca:	6013      	str	r3, [r2, #0]
 8003dcc:	4b75      	ldr	r3, [pc, #468]	; (8003fa4 <HAL_RCC_OscConfig+0x27c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a74      	ldr	r2, [pc, #464]	; (8003fa4 <HAL_RCC_OscConfig+0x27c>)
 8003dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d013      	beq.n	8003e08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de0:	f7fd fa6c 	bl	80012bc <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003de8:	f7fd fa68 	bl	80012bc <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b64      	cmp	r3, #100	; 0x64
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e29e      	b.n	8004338 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dfa:	4b6a      	ldr	r3, [pc, #424]	; (8003fa4 <HAL_RCC_OscConfig+0x27c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0f0      	beq.n	8003de8 <HAL_RCC_OscConfig+0xc0>
 8003e06:	e014      	b.n	8003e32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e08:	f7fd fa58 	bl	80012bc <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e10:	f7fd fa54 	bl	80012bc <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b64      	cmp	r3, #100	; 0x64
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e28a      	b.n	8004338 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e22:	4b60      	ldr	r3, [pc, #384]	; (8003fa4 <HAL_RCC_OscConfig+0x27c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1f0      	bne.n	8003e10 <HAL_RCC_OscConfig+0xe8>
 8003e2e:	e000      	b.n	8003e32 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d075      	beq.n	8003f2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e3e:	4b59      	ldr	r3, [pc, #356]	; (8003fa4 <HAL_RCC_OscConfig+0x27c>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 030c 	and.w	r3, r3, #12
 8003e46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e48:	4b56      	ldr	r3, [pc, #344]	; (8003fa4 <HAL_RCC_OscConfig+0x27c>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f003 0303 	and.w	r3, r3, #3
 8003e50:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	2b0c      	cmp	r3, #12
 8003e56:	d102      	bne.n	8003e5e <HAL_RCC_OscConfig+0x136>
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d002      	beq.n	8003e64 <HAL_RCC_OscConfig+0x13c>
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	2b04      	cmp	r3, #4
 8003e62:	d11f      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e64:	4b4f      	ldr	r3, [pc, #316]	; (8003fa4 <HAL_RCC_OscConfig+0x27c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <HAL_RCC_OscConfig+0x154>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e25d      	b.n	8004338 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e7c:	4b49      	ldr	r3, [pc, #292]	; (8003fa4 <HAL_RCC_OscConfig+0x27c>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	061b      	lsls	r3, r3, #24
 8003e8a:	4946      	ldr	r1, [pc, #280]	; (8003fa4 <HAL_RCC_OscConfig+0x27c>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e90:	4b45      	ldr	r3, [pc, #276]	; (8003fa8 <HAL_RCC_OscConfig+0x280>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7fd f9c5 	bl	8001224 <HAL_InitTick>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d043      	beq.n	8003f28 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e249      	b.n	8004338 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d023      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eac:	4b3d      	ldr	r3, [pc, #244]	; (8003fa4 <HAL_RCC_OscConfig+0x27c>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a3c      	ldr	r2, [pc, #240]	; (8003fa4 <HAL_RCC_OscConfig+0x27c>)
 8003eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb8:	f7fd fa00 	bl	80012bc <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ec0:	f7fd f9fc 	bl	80012bc <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e232      	b.n	8004338 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ed2:	4b34      	ldr	r3, [pc, #208]	; (8003fa4 <HAL_RCC_OscConfig+0x27c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0f0      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ede:	4b31      	ldr	r3, [pc, #196]	; (8003fa4 <HAL_RCC_OscConfig+0x27c>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	061b      	lsls	r3, r3, #24
 8003eec:	492d      	ldr	r1, [pc, #180]	; (8003fa4 <HAL_RCC_OscConfig+0x27c>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	604b      	str	r3, [r1, #4]
 8003ef2:	e01a      	b.n	8003f2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ef4:	4b2b      	ldr	r3, [pc, #172]	; (8003fa4 <HAL_RCC_OscConfig+0x27c>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a2a      	ldr	r2, [pc, #168]	; (8003fa4 <HAL_RCC_OscConfig+0x27c>)
 8003efa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f00:	f7fd f9dc 	bl	80012bc <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f08:	f7fd f9d8 	bl	80012bc <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e20e      	b.n	8004338 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f1a:	4b22      	ldr	r3, [pc, #136]	; (8003fa4 <HAL_RCC_OscConfig+0x27c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1f0      	bne.n	8003f08 <HAL_RCC_OscConfig+0x1e0>
 8003f26:	e000      	b.n	8003f2a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d041      	beq.n	8003fba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d01c      	beq.n	8003f78 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f3e:	4b19      	ldr	r3, [pc, #100]	; (8003fa4 <HAL_RCC_OscConfig+0x27c>)
 8003f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f44:	4a17      	ldr	r2, [pc, #92]	; (8003fa4 <HAL_RCC_OscConfig+0x27c>)
 8003f46:	f043 0301 	orr.w	r3, r3, #1
 8003f4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4e:	f7fd f9b5 	bl	80012bc <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f54:	e008      	b.n	8003f68 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f56:	f7fd f9b1 	bl	80012bc <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e1e7      	b.n	8004338 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f68:	4b0e      	ldr	r3, [pc, #56]	; (8003fa4 <HAL_RCC_OscConfig+0x27c>)
 8003f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0ef      	beq.n	8003f56 <HAL_RCC_OscConfig+0x22e>
 8003f76:	e020      	b.n	8003fba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f78:	4b0a      	ldr	r3, [pc, #40]	; (8003fa4 <HAL_RCC_OscConfig+0x27c>)
 8003f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f7e:	4a09      	ldr	r2, [pc, #36]	; (8003fa4 <HAL_RCC_OscConfig+0x27c>)
 8003f80:	f023 0301 	bic.w	r3, r3, #1
 8003f84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f88:	f7fd f998 	bl	80012bc <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f8e:	e00d      	b.n	8003fac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f90:	f7fd f994 	bl	80012bc <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d906      	bls.n	8003fac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e1ca      	b.n	8004338 <HAL_RCC_OscConfig+0x610>
 8003fa2:	bf00      	nop
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fac:	4b8c      	ldr	r3, [pc, #560]	; (80041e0 <HAL_RCC_OscConfig+0x4b8>)
 8003fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1ea      	bne.n	8003f90 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0304 	and.w	r3, r3, #4
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 80a6 	beq.w	8004114 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fcc:	4b84      	ldr	r3, [pc, #528]	; (80041e0 <HAL_RCC_OscConfig+0x4b8>)
 8003fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d101      	bne.n	8003fdc <HAL_RCC_OscConfig+0x2b4>
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e000      	b.n	8003fde <HAL_RCC_OscConfig+0x2b6>
 8003fdc:	2300      	movs	r3, #0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00d      	beq.n	8003ffe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fe2:	4b7f      	ldr	r3, [pc, #508]	; (80041e0 <HAL_RCC_OscConfig+0x4b8>)
 8003fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe6:	4a7e      	ldr	r2, [pc, #504]	; (80041e0 <HAL_RCC_OscConfig+0x4b8>)
 8003fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fec:	6593      	str	r3, [r2, #88]	; 0x58
 8003fee:	4b7c      	ldr	r3, [pc, #496]	; (80041e0 <HAL_RCC_OscConfig+0x4b8>)
 8003ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ffe:	4b79      	ldr	r3, [pc, #484]	; (80041e4 <HAL_RCC_OscConfig+0x4bc>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004006:	2b00      	cmp	r3, #0
 8004008:	d118      	bne.n	800403c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800400a:	4b76      	ldr	r3, [pc, #472]	; (80041e4 <HAL_RCC_OscConfig+0x4bc>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a75      	ldr	r2, [pc, #468]	; (80041e4 <HAL_RCC_OscConfig+0x4bc>)
 8004010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004016:	f7fd f951 	bl	80012bc <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800401e:	f7fd f94d 	bl	80012bc <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e183      	b.n	8004338 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004030:	4b6c      	ldr	r3, [pc, #432]	; (80041e4 <HAL_RCC_OscConfig+0x4bc>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0f0      	beq.n	800401e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d108      	bne.n	8004056 <HAL_RCC_OscConfig+0x32e>
 8004044:	4b66      	ldr	r3, [pc, #408]	; (80041e0 <HAL_RCC_OscConfig+0x4b8>)
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404a:	4a65      	ldr	r2, [pc, #404]	; (80041e0 <HAL_RCC_OscConfig+0x4b8>)
 800404c:	f043 0301 	orr.w	r3, r3, #1
 8004050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004054:	e024      	b.n	80040a0 <HAL_RCC_OscConfig+0x378>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	2b05      	cmp	r3, #5
 800405c:	d110      	bne.n	8004080 <HAL_RCC_OscConfig+0x358>
 800405e:	4b60      	ldr	r3, [pc, #384]	; (80041e0 <HAL_RCC_OscConfig+0x4b8>)
 8004060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004064:	4a5e      	ldr	r2, [pc, #376]	; (80041e0 <HAL_RCC_OscConfig+0x4b8>)
 8004066:	f043 0304 	orr.w	r3, r3, #4
 800406a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800406e:	4b5c      	ldr	r3, [pc, #368]	; (80041e0 <HAL_RCC_OscConfig+0x4b8>)
 8004070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004074:	4a5a      	ldr	r2, [pc, #360]	; (80041e0 <HAL_RCC_OscConfig+0x4b8>)
 8004076:	f043 0301 	orr.w	r3, r3, #1
 800407a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800407e:	e00f      	b.n	80040a0 <HAL_RCC_OscConfig+0x378>
 8004080:	4b57      	ldr	r3, [pc, #348]	; (80041e0 <HAL_RCC_OscConfig+0x4b8>)
 8004082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004086:	4a56      	ldr	r2, [pc, #344]	; (80041e0 <HAL_RCC_OscConfig+0x4b8>)
 8004088:	f023 0301 	bic.w	r3, r3, #1
 800408c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004090:	4b53      	ldr	r3, [pc, #332]	; (80041e0 <HAL_RCC_OscConfig+0x4b8>)
 8004092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004096:	4a52      	ldr	r2, [pc, #328]	; (80041e0 <HAL_RCC_OscConfig+0x4b8>)
 8004098:	f023 0304 	bic.w	r3, r3, #4
 800409c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d016      	beq.n	80040d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a8:	f7fd f908 	bl	80012bc <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040ae:	e00a      	b.n	80040c6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040b0:	f7fd f904 	bl	80012bc <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80040be:	4293      	cmp	r3, r2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e138      	b.n	8004338 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040c6:	4b46      	ldr	r3, [pc, #280]	; (80041e0 <HAL_RCC_OscConfig+0x4b8>)
 80040c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d0ed      	beq.n	80040b0 <HAL_RCC_OscConfig+0x388>
 80040d4:	e015      	b.n	8004102 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d6:	f7fd f8f1 	bl	80012bc <HAL_GetTick>
 80040da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040dc:	e00a      	b.n	80040f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040de:	f7fd f8ed 	bl	80012bc <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e121      	b.n	8004338 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040f4:	4b3a      	ldr	r3, [pc, #232]	; (80041e0 <HAL_RCC_OscConfig+0x4b8>)
 80040f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1ed      	bne.n	80040de <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004102:	7ffb      	ldrb	r3, [r7, #31]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d105      	bne.n	8004114 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004108:	4b35      	ldr	r3, [pc, #212]	; (80041e0 <HAL_RCC_OscConfig+0x4b8>)
 800410a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410c:	4a34      	ldr	r2, [pc, #208]	; (80041e0 <HAL_RCC_OscConfig+0x4b8>)
 800410e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004112:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0320 	and.w	r3, r3, #32
 800411c:	2b00      	cmp	r3, #0
 800411e:	d03c      	beq.n	800419a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d01c      	beq.n	8004162 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004128:	4b2d      	ldr	r3, [pc, #180]	; (80041e0 <HAL_RCC_OscConfig+0x4b8>)
 800412a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800412e:	4a2c      	ldr	r2, [pc, #176]	; (80041e0 <HAL_RCC_OscConfig+0x4b8>)
 8004130:	f043 0301 	orr.w	r3, r3, #1
 8004134:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004138:	f7fd f8c0 	bl	80012bc <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004140:	f7fd f8bc 	bl	80012bc <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e0f2      	b.n	8004338 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004152:	4b23      	ldr	r3, [pc, #140]	; (80041e0 <HAL_RCC_OscConfig+0x4b8>)
 8004154:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0ef      	beq.n	8004140 <HAL_RCC_OscConfig+0x418>
 8004160:	e01b      	b.n	800419a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004162:	4b1f      	ldr	r3, [pc, #124]	; (80041e0 <HAL_RCC_OscConfig+0x4b8>)
 8004164:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004168:	4a1d      	ldr	r2, [pc, #116]	; (80041e0 <HAL_RCC_OscConfig+0x4b8>)
 800416a:	f023 0301 	bic.w	r3, r3, #1
 800416e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004172:	f7fd f8a3 	bl	80012bc <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004178:	e008      	b.n	800418c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800417a:	f7fd f89f 	bl	80012bc <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e0d5      	b.n	8004338 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800418c:	4b14      	ldr	r3, [pc, #80]	; (80041e0 <HAL_RCC_OscConfig+0x4b8>)
 800418e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1ef      	bne.n	800417a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 80c9 	beq.w	8004336 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041a4:	4b0e      	ldr	r3, [pc, #56]	; (80041e0 <HAL_RCC_OscConfig+0x4b8>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 030c 	and.w	r3, r3, #12
 80041ac:	2b0c      	cmp	r3, #12
 80041ae:	f000 8083 	beq.w	80042b8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d15e      	bne.n	8004278 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ba:	4b09      	ldr	r3, [pc, #36]	; (80041e0 <HAL_RCC_OscConfig+0x4b8>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a08      	ldr	r2, [pc, #32]	; (80041e0 <HAL_RCC_OscConfig+0x4b8>)
 80041c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c6:	f7fd f879 	bl	80012bc <HAL_GetTick>
 80041ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041cc:	e00c      	b.n	80041e8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ce:	f7fd f875 	bl	80012bc <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d905      	bls.n	80041e8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e0ab      	b.n	8004338 <HAL_RCC_OscConfig+0x610>
 80041e0:	40021000 	.word	0x40021000
 80041e4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041e8:	4b55      	ldr	r3, [pc, #340]	; (8004340 <HAL_RCC_OscConfig+0x618>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1ec      	bne.n	80041ce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041f4:	4b52      	ldr	r3, [pc, #328]	; (8004340 <HAL_RCC_OscConfig+0x618>)
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	4b52      	ldr	r3, [pc, #328]	; (8004344 <HAL_RCC_OscConfig+0x61c>)
 80041fa:	4013      	ands	r3, r2
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6a11      	ldr	r1, [r2, #32]
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004204:	3a01      	subs	r2, #1
 8004206:	0112      	lsls	r2, r2, #4
 8004208:	4311      	orrs	r1, r2
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800420e:	0212      	lsls	r2, r2, #8
 8004210:	4311      	orrs	r1, r2
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004216:	0852      	lsrs	r2, r2, #1
 8004218:	3a01      	subs	r2, #1
 800421a:	0552      	lsls	r2, r2, #21
 800421c:	4311      	orrs	r1, r2
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004222:	0852      	lsrs	r2, r2, #1
 8004224:	3a01      	subs	r2, #1
 8004226:	0652      	lsls	r2, r2, #25
 8004228:	4311      	orrs	r1, r2
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800422e:	06d2      	lsls	r2, r2, #27
 8004230:	430a      	orrs	r2, r1
 8004232:	4943      	ldr	r1, [pc, #268]	; (8004340 <HAL_RCC_OscConfig+0x618>)
 8004234:	4313      	orrs	r3, r2
 8004236:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004238:	4b41      	ldr	r3, [pc, #260]	; (8004340 <HAL_RCC_OscConfig+0x618>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a40      	ldr	r2, [pc, #256]	; (8004340 <HAL_RCC_OscConfig+0x618>)
 800423e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004242:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004244:	4b3e      	ldr	r3, [pc, #248]	; (8004340 <HAL_RCC_OscConfig+0x618>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	4a3d      	ldr	r2, [pc, #244]	; (8004340 <HAL_RCC_OscConfig+0x618>)
 800424a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800424e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004250:	f7fd f834 	bl	80012bc <HAL_GetTick>
 8004254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004256:	e008      	b.n	800426a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004258:	f7fd f830 	bl	80012bc <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e066      	b.n	8004338 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800426a:	4b35      	ldr	r3, [pc, #212]	; (8004340 <HAL_RCC_OscConfig+0x618>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0f0      	beq.n	8004258 <HAL_RCC_OscConfig+0x530>
 8004276:	e05e      	b.n	8004336 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004278:	4b31      	ldr	r3, [pc, #196]	; (8004340 <HAL_RCC_OscConfig+0x618>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a30      	ldr	r2, [pc, #192]	; (8004340 <HAL_RCC_OscConfig+0x618>)
 800427e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004284:	f7fd f81a 	bl	80012bc <HAL_GetTick>
 8004288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800428c:	f7fd f816 	bl	80012bc <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b02      	cmp	r3, #2
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e04c      	b.n	8004338 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800429e:	4b28      	ldr	r3, [pc, #160]	; (8004340 <HAL_RCC_OscConfig+0x618>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1f0      	bne.n	800428c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80042aa:	4b25      	ldr	r3, [pc, #148]	; (8004340 <HAL_RCC_OscConfig+0x618>)
 80042ac:	68da      	ldr	r2, [r3, #12]
 80042ae:	4924      	ldr	r1, [pc, #144]	; (8004340 <HAL_RCC_OscConfig+0x618>)
 80042b0:	4b25      	ldr	r3, [pc, #148]	; (8004348 <HAL_RCC_OscConfig+0x620>)
 80042b2:	4013      	ands	r3, r2
 80042b4:	60cb      	str	r3, [r1, #12]
 80042b6:	e03e      	b.n	8004336 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d101      	bne.n	80042c4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e039      	b.n	8004338 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80042c4:	4b1e      	ldr	r3, [pc, #120]	; (8004340 <HAL_RCC_OscConfig+0x618>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f003 0203 	and.w	r2, r3, #3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d12c      	bne.n	8004332 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	3b01      	subs	r3, #1
 80042e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d123      	bne.n	8004332 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d11b      	bne.n	8004332 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004306:	429a      	cmp	r2, r3
 8004308:	d113      	bne.n	8004332 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004314:	085b      	lsrs	r3, r3, #1
 8004316:	3b01      	subs	r3, #1
 8004318:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800431a:	429a      	cmp	r2, r3
 800431c:	d109      	bne.n	8004332 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004328:	085b      	lsrs	r3, r3, #1
 800432a:	3b01      	subs	r3, #1
 800432c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800432e:	429a      	cmp	r2, r3
 8004330:	d001      	beq.n	8004336 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e000      	b.n	8004338 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3720      	adds	r7, #32
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	40021000 	.word	0x40021000
 8004344:	019f800c 	.word	0x019f800c
 8004348:	feeefffc 	.word	0xfeeefffc

0800434c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004356:	2300      	movs	r3, #0
 8004358:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e11e      	b.n	80045a2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004364:	4b91      	ldr	r3, [pc, #580]	; (80045ac <HAL_RCC_ClockConfig+0x260>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 030f 	and.w	r3, r3, #15
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	429a      	cmp	r2, r3
 8004370:	d910      	bls.n	8004394 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004372:	4b8e      	ldr	r3, [pc, #568]	; (80045ac <HAL_RCC_ClockConfig+0x260>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f023 020f 	bic.w	r2, r3, #15
 800437a:	498c      	ldr	r1, [pc, #560]	; (80045ac <HAL_RCC_ClockConfig+0x260>)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	4313      	orrs	r3, r2
 8004380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004382:	4b8a      	ldr	r3, [pc, #552]	; (80045ac <HAL_RCC_ClockConfig+0x260>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	429a      	cmp	r2, r3
 800438e:	d001      	beq.n	8004394 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e106      	b.n	80045a2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b00      	cmp	r3, #0
 800439e:	d073      	beq.n	8004488 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	2b03      	cmp	r3, #3
 80043a6:	d129      	bne.n	80043fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043a8:	4b81      	ldr	r3, [pc, #516]	; (80045b0 <HAL_RCC_ClockConfig+0x264>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e0f4      	b.n	80045a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80043b8:	f000 f99e 	bl	80046f8 <RCC_GetSysClockFreqFromPLLSource>
 80043bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	4a7c      	ldr	r2, [pc, #496]	; (80045b4 <HAL_RCC_ClockConfig+0x268>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d93f      	bls.n	8004446 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80043c6:	4b7a      	ldr	r3, [pc, #488]	; (80045b0 <HAL_RCC_ClockConfig+0x264>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d009      	beq.n	80043e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d033      	beq.n	8004446 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d12f      	bne.n	8004446 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80043e6:	4b72      	ldr	r3, [pc, #456]	; (80045b0 <HAL_RCC_ClockConfig+0x264>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043ee:	4a70      	ldr	r2, [pc, #448]	; (80045b0 <HAL_RCC_ClockConfig+0x264>)
 80043f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80043f6:	2380      	movs	r3, #128	; 0x80
 80043f8:	617b      	str	r3, [r7, #20]
 80043fa:	e024      	b.n	8004446 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	2b02      	cmp	r3, #2
 8004402:	d107      	bne.n	8004414 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004404:	4b6a      	ldr	r3, [pc, #424]	; (80045b0 <HAL_RCC_ClockConfig+0x264>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d109      	bne.n	8004424 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e0c6      	b.n	80045a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004414:	4b66      	ldr	r3, [pc, #408]	; (80045b0 <HAL_RCC_ClockConfig+0x264>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e0be      	b.n	80045a2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004424:	f000 f8ce 	bl	80045c4 <HAL_RCC_GetSysClockFreq>
 8004428:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	4a61      	ldr	r2, [pc, #388]	; (80045b4 <HAL_RCC_ClockConfig+0x268>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d909      	bls.n	8004446 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004432:	4b5f      	ldr	r3, [pc, #380]	; (80045b0 <HAL_RCC_ClockConfig+0x264>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800443a:	4a5d      	ldr	r2, [pc, #372]	; (80045b0 <HAL_RCC_ClockConfig+0x264>)
 800443c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004440:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004442:	2380      	movs	r3, #128	; 0x80
 8004444:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004446:	4b5a      	ldr	r3, [pc, #360]	; (80045b0 <HAL_RCC_ClockConfig+0x264>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f023 0203 	bic.w	r2, r3, #3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	4957      	ldr	r1, [pc, #348]	; (80045b0 <HAL_RCC_ClockConfig+0x264>)
 8004454:	4313      	orrs	r3, r2
 8004456:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004458:	f7fc ff30 	bl	80012bc <HAL_GetTick>
 800445c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800445e:	e00a      	b.n	8004476 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004460:	f7fc ff2c 	bl	80012bc <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	f241 3288 	movw	r2, #5000	; 0x1388
 800446e:	4293      	cmp	r3, r2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e095      	b.n	80045a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004476:	4b4e      	ldr	r3, [pc, #312]	; (80045b0 <HAL_RCC_ClockConfig+0x264>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 020c 	and.w	r2, r3, #12
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	429a      	cmp	r2, r3
 8004486:	d1eb      	bne.n	8004460 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d023      	beq.n	80044dc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	2b00      	cmp	r3, #0
 800449e:	d005      	beq.n	80044ac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044a0:	4b43      	ldr	r3, [pc, #268]	; (80045b0 <HAL_RCC_ClockConfig+0x264>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	4a42      	ldr	r2, [pc, #264]	; (80045b0 <HAL_RCC_ClockConfig+0x264>)
 80044a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80044aa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0308 	and.w	r3, r3, #8
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d007      	beq.n	80044c8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80044b8:	4b3d      	ldr	r3, [pc, #244]	; (80045b0 <HAL_RCC_ClockConfig+0x264>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80044c0:	4a3b      	ldr	r2, [pc, #236]	; (80045b0 <HAL_RCC_ClockConfig+0x264>)
 80044c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80044c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044c8:	4b39      	ldr	r3, [pc, #228]	; (80045b0 <HAL_RCC_ClockConfig+0x264>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	4936      	ldr	r1, [pc, #216]	; (80045b0 <HAL_RCC_ClockConfig+0x264>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	608b      	str	r3, [r1, #8]
 80044da:	e008      	b.n	80044ee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	2b80      	cmp	r3, #128	; 0x80
 80044e0:	d105      	bne.n	80044ee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80044e2:	4b33      	ldr	r3, [pc, #204]	; (80045b0 <HAL_RCC_ClockConfig+0x264>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	4a32      	ldr	r2, [pc, #200]	; (80045b0 <HAL_RCC_ClockConfig+0x264>)
 80044e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044ec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044ee:	4b2f      	ldr	r3, [pc, #188]	; (80045ac <HAL_RCC_ClockConfig+0x260>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d21d      	bcs.n	8004538 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044fc:	4b2b      	ldr	r3, [pc, #172]	; (80045ac <HAL_RCC_ClockConfig+0x260>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f023 020f 	bic.w	r2, r3, #15
 8004504:	4929      	ldr	r1, [pc, #164]	; (80045ac <HAL_RCC_ClockConfig+0x260>)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	4313      	orrs	r3, r2
 800450a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800450c:	f7fc fed6 	bl	80012bc <HAL_GetTick>
 8004510:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004512:	e00a      	b.n	800452a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004514:	f7fc fed2 	bl	80012bc <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004522:	4293      	cmp	r3, r2
 8004524:	d901      	bls.n	800452a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e03b      	b.n	80045a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800452a:	4b20      	ldr	r3, [pc, #128]	; (80045ac <HAL_RCC_ClockConfig+0x260>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 030f 	and.w	r3, r3, #15
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	429a      	cmp	r2, r3
 8004536:	d1ed      	bne.n	8004514 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b00      	cmp	r3, #0
 8004542:	d008      	beq.n	8004556 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004544:	4b1a      	ldr	r3, [pc, #104]	; (80045b0 <HAL_RCC_ClockConfig+0x264>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	4917      	ldr	r1, [pc, #92]	; (80045b0 <HAL_RCC_ClockConfig+0x264>)
 8004552:	4313      	orrs	r3, r2
 8004554:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	2b00      	cmp	r3, #0
 8004560:	d009      	beq.n	8004576 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004562:	4b13      	ldr	r3, [pc, #76]	; (80045b0 <HAL_RCC_ClockConfig+0x264>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	490f      	ldr	r1, [pc, #60]	; (80045b0 <HAL_RCC_ClockConfig+0x264>)
 8004572:	4313      	orrs	r3, r2
 8004574:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004576:	f000 f825 	bl	80045c4 <HAL_RCC_GetSysClockFreq>
 800457a:	4602      	mov	r2, r0
 800457c:	4b0c      	ldr	r3, [pc, #48]	; (80045b0 <HAL_RCC_ClockConfig+0x264>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	091b      	lsrs	r3, r3, #4
 8004582:	f003 030f 	and.w	r3, r3, #15
 8004586:	490c      	ldr	r1, [pc, #48]	; (80045b8 <HAL_RCC_ClockConfig+0x26c>)
 8004588:	5ccb      	ldrb	r3, [r1, r3]
 800458a:	f003 031f 	and.w	r3, r3, #31
 800458e:	fa22 f303 	lsr.w	r3, r2, r3
 8004592:	4a0a      	ldr	r2, [pc, #40]	; (80045bc <HAL_RCC_ClockConfig+0x270>)
 8004594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004596:	4b0a      	ldr	r3, [pc, #40]	; (80045c0 <HAL_RCC_ClockConfig+0x274>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4618      	mov	r0, r3
 800459c:	f7fc fe42 	bl	8001224 <HAL_InitTick>
 80045a0:	4603      	mov	r3, r0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3718      	adds	r7, #24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	40022000 	.word	0x40022000
 80045b0:	40021000 	.word	0x40021000
 80045b4:	04c4b400 	.word	0x04c4b400
 80045b8:	08007110 	.word	0x08007110
 80045bc:	20000004 	.word	0x20000004
 80045c0:	20000008 	.word	0x20000008

080045c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b087      	sub	sp, #28
 80045c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80045ca:	4b2c      	ldr	r3, [pc, #176]	; (800467c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 030c 	and.w	r3, r3, #12
 80045d2:	2b04      	cmp	r3, #4
 80045d4:	d102      	bne.n	80045dc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045d6:	4b2a      	ldr	r3, [pc, #168]	; (8004680 <HAL_RCC_GetSysClockFreq+0xbc>)
 80045d8:	613b      	str	r3, [r7, #16]
 80045da:	e047      	b.n	800466c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80045dc:	4b27      	ldr	r3, [pc, #156]	; (800467c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 030c 	and.w	r3, r3, #12
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d102      	bne.n	80045ee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045e8:	4b26      	ldr	r3, [pc, #152]	; (8004684 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045ea:	613b      	str	r3, [r7, #16]
 80045ec:	e03e      	b.n	800466c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80045ee:	4b23      	ldr	r3, [pc, #140]	; (800467c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 030c 	and.w	r3, r3, #12
 80045f6:	2b0c      	cmp	r3, #12
 80045f8:	d136      	bne.n	8004668 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045fa:	4b20      	ldr	r3, [pc, #128]	; (800467c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f003 0303 	and.w	r3, r3, #3
 8004602:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004604:	4b1d      	ldr	r3, [pc, #116]	; (800467c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	091b      	lsrs	r3, r3, #4
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	3301      	adds	r3, #1
 8004610:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2b03      	cmp	r3, #3
 8004616:	d10c      	bne.n	8004632 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004618:	4a1a      	ldr	r2, [pc, #104]	; (8004684 <HAL_RCC_GetSysClockFreq+0xc0>)
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004620:	4a16      	ldr	r2, [pc, #88]	; (800467c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004622:	68d2      	ldr	r2, [r2, #12]
 8004624:	0a12      	lsrs	r2, r2, #8
 8004626:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800462a:	fb02 f303 	mul.w	r3, r2, r3
 800462e:	617b      	str	r3, [r7, #20]
      break;
 8004630:	e00c      	b.n	800464c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004632:	4a13      	ldr	r2, [pc, #76]	; (8004680 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	fbb2 f3f3 	udiv	r3, r2, r3
 800463a:	4a10      	ldr	r2, [pc, #64]	; (800467c <HAL_RCC_GetSysClockFreq+0xb8>)
 800463c:	68d2      	ldr	r2, [r2, #12]
 800463e:	0a12      	lsrs	r2, r2, #8
 8004640:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004644:	fb02 f303 	mul.w	r3, r2, r3
 8004648:	617b      	str	r3, [r7, #20]
      break;
 800464a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800464c:	4b0b      	ldr	r3, [pc, #44]	; (800467c <HAL_RCC_GetSysClockFreq+0xb8>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	0e5b      	lsrs	r3, r3, #25
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	3301      	adds	r3, #1
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	fbb2 f3f3 	udiv	r3, r2, r3
 8004664:	613b      	str	r3, [r7, #16]
 8004666:	e001      	b.n	800466c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800466c:	693b      	ldr	r3, [r7, #16]
}
 800466e:	4618      	mov	r0, r3
 8004670:	371c      	adds	r7, #28
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	40021000 	.word	0x40021000
 8004680:	00f42400 	.word	0x00f42400
 8004684:	016e3600 	.word	0x016e3600

08004688 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800468c:	4b03      	ldr	r3, [pc, #12]	; (800469c <HAL_RCC_GetHCLKFreq+0x14>)
 800468e:	681b      	ldr	r3, [r3, #0]
}
 8004690:	4618      	mov	r0, r3
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	20000004 	.word	0x20000004

080046a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80046a4:	f7ff fff0 	bl	8004688 <HAL_RCC_GetHCLKFreq>
 80046a8:	4602      	mov	r2, r0
 80046aa:	4b06      	ldr	r3, [pc, #24]	; (80046c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	0a1b      	lsrs	r3, r3, #8
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	4904      	ldr	r1, [pc, #16]	; (80046c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046b6:	5ccb      	ldrb	r3, [r1, r3]
 80046b8:	f003 031f 	and.w	r3, r3, #31
 80046bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	40021000 	.word	0x40021000
 80046c8:	08007120 	.word	0x08007120

080046cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80046d0:	f7ff ffda 	bl	8004688 <HAL_RCC_GetHCLKFreq>
 80046d4:	4602      	mov	r2, r0
 80046d6:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	0adb      	lsrs	r3, r3, #11
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	4904      	ldr	r1, [pc, #16]	; (80046f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80046e2:	5ccb      	ldrb	r3, [r1, r3]
 80046e4:	f003 031f 	and.w	r3, r3, #31
 80046e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40021000 	.word	0x40021000
 80046f4:	08007120 	.word	0x08007120

080046f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b087      	sub	sp, #28
 80046fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046fe:	4b1e      	ldr	r3, [pc, #120]	; (8004778 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f003 0303 	and.w	r3, r3, #3
 8004706:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004708:	4b1b      	ldr	r3, [pc, #108]	; (8004778 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	091b      	lsrs	r3, r3, #4
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	3301      	adds	r3, #1
 8004714:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	2b03      	cmp	r3, #3
 800471a:	d10c      	bne.n	8004736 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800471c:	4a17      	ldr	r2, [pc, #92]	; (800477c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	fbb2 f3f3 	udiv	r3, r2, r3
 8004724:	4a14      	ldr	r2, [pc, #80]	; (8004778 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004726:	68d2      	ldr	r2, [r2, #12]
 8004728:	0a12      	lsrs	r2, r2, #8
 800472a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800472e:	fb02 f303 	mul.w	r3, r2, r3
 8004732:	617b      	str	r3, [r7, #20]
    break;
 8004734:	e00c      	b.n	8004750 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004736:	4a12      	ldr	r2, [pc, #72]	; (8004780 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	fbb2 f3f3 	udiv	r3, r2, r3
 800473e:	4a0e      	ldr	r2, [pc, #56]	; (8004778 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004740:	68d2      	ldr	r2, [r2, #12]
 8004742:	0a12      	lsrs	r2, r2, #8
 8004744:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004748:	fb02 f303 	mul.w	r3, r2, r3
 800474c:	617b      	str	r3, [r7, #20]
    break;
 800474e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004750:	4b09      	ldr	r3, [pc, #36]	; (8004778 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	0e5b      	lsrs	r3, r3, #25
 8004756:	f003 0303 	and.w	r3, r3, #3
 800475a:	3301      	adds	r3, #1
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	fbb2 f3f3 	udiv	r3, r2, r3
 8004768:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800476a:	687b      	ldr	r3, [r7, #4]
}
 800476c:	4618      	mov	r0, r3
 800476e:	371c      	adds	r7, #28
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	40021000 	.word	0x40021000
 800477c:	016e3600 	.word	0x016e3600
 8004780:	00f42400 	.word	0x00f42400

08004784 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800478c:	2300      	movs	r3, #0
 800478e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004790:	2300      	movs	r3, #0
 8004792:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 8098 	beq.w	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047a2:	2300      	movs	r3, #0
 80047a4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047a6:	4b43      	ldr	r3, [pc, #268]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10d      	bne.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047b2:	4b40      	ldr	r3, [pc, #256]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b6:	4a3f      	ldr	r2, [pc, #252]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047bc:	6593      	str	r3, [r2, #88]	; 0x58
 80047be:	4b3d      	ldr	r3, [pc, #244]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c6:	60bb      	str	r3, [r7, #8]
 80047c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047ca:	2301      	movs	r3, #1
 80047cc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047ce:	4b3a      	ldr	r3, [pc, #232]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a39      	ldr	r2, [pc, #228]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047da:	f7fc fd6f 	bl	80012bc <HAL_GetTick>
 80047de:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047e0:	e009      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e2:	f7fc fd6b 	bl	80012bc <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d902      	bls.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	74fb      	strb	r3, [r7, #19]
        break;
 80047f4:	e005      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047f6:	4b30      	ldr	r3, [pc, #192]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d0ef      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004802:	7cfb      	ldrb	r3, [r7, #19]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d159      	bne.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004808:	4b2a      	ldr	r3, [pc, #168]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800480a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004812:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d01e      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	429a      	cmp	r2, r3
 8004822:	d019      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004824:	4b23      	ldr	r3, [pc, #140]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800482a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800482e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004830:	4b20      	ldr	r3, [pc, #128]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004836:	4a1f      	ldr	r2, [pc, #124]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800483c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004840:	4b1c      	ldr	r3, [pc, #112]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004846:	4a1b      	ldr	r2, [pc, #108]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800484c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004850:	4a18      	ldr	r2, [pc, #96]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d016      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004862:	f7fc fd2b 	bl	80012bc <HAL_GetTick>
 8004866:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004868:	e00b      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800486a:	f7fc fd27 	bl	80012bc <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	f241 3288 	movw	r2, #5000	; 0x1388
 8004878:	4293      	cmp	r3, r2
 800487a:	d902      	bls.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	74fb      	strb	r3, [r7, #19]
            break;
 8004880:	e006      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004882:	4b0c      	ldr	r3, [pc, #48]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0ec      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004890:	7cfb      	ldrb	r3, [r7, #19]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10b      	bne.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004896:	4b07      	ldr	r3, [pc, #28]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800489c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048a4:	4903      	ldr	r1, [pc, #12]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80048ac:	e008      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048ae:	7cfb      	ldrb	r3, [r7, #19]
 80048b0:	74bb      	strb	r3, [r7, #18]
 80048b2:	e005      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80048b4:	40021000 	.word	0x40021000
 80048b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048bc:	7cfb      	ldrb	r3, [r7, #19]
 80048be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048c0:	7c7b      	ldrb	r3, [r7, #17]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d105      	bne.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048c6:	4ba7      	ldr	r3, [pc, #668]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ca:	4aa6      	ldr	r2, [pc, #664]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00a      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048de:	4ba1      	ldr	r3, [pc, #644]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e4:	f023 0203 	bic.w	r2, r3, #3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	499d      	ldr	r1, [pc, #628]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00a      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004900:	4b98      	ldr	r3, [pc, #608]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004906:	f023 020c 	bic.w	r2, r3, #12
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	4995      	ldr	r1, [pc, #596]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004910:	4313      	orrs	r3, r2
 8004912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0304 	and.w	r3, r3, #4
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004922:	4b90      	ldr	r3, [pc, #576]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004928:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	498c      	ldr	r1, [pc, #560]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004932:	4313      	orrs	r3, r2
 8004934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0308 	and.w	r3, r3, #8
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00a      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004944:	4b87      	ldr	r3, [pc, #540]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	4984      	ldr	r1, [pc, #528]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004954:	4313      	orrs	r3, r2
 8004956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0310 	and.w	r3, r3, #16
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00a      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004966:	4b7f      	ldr	r3, [pc, #508]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	497b      	ldr	r1, [pc, #492]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004976:	4313      	orrs	r3, r2
 8004978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0320 	and.w	r3, r3, #32
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00a      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004988:	4b76      	ldr	r3, [pc, #472]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800498a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	4973      	ldr	r1, [pc, #460]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004998:	4313      	orrs	r3, r2
 800499a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00a      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049aa:	4b6e      	ldr	r3, [pc, #440]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	69db      	ldr	r3, [r3, #28]
 80049b8:	496a      	ldr	r1, [pc, #424]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00a      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049cc:	4b65      	ldr	r3, [pc, #404]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	4962      	ldr	r1, [pc, #392]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00a      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049ee:	4b5d      	ldr	r3, [pc, #372]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	4959      	ldr	r1, [pc, #356]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00a      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a10:	4b54      	ldr	r3, [pc, #336]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a16:	f023 0203 	bic.w	r2, r3, #3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1e:	4951      	ldr	r1, [pc, #324]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a32:	4b4c      	ldr	r3, [pc, #304]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a40:	4948      	ldr	r1, [pc, #288]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d015      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a54:	4b43      	ldr	r3, [pc, #268]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a62:	4940      	ldr	r1, [pc, #256]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a72:	d105      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a74:	4b3b      	ldr	r3, [pc, #236]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	4a3a      	ldr	r2, [pc, #232]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a7e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d015      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a8c:	4b35      	ldr	r3, [pc, #212]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a9a:	4932      	ldr	r1, [pc, #200]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004aaa:	d105      	bne.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aac:	4b2d      	ldr	r3, [pc, #180]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	4a2c      	ldr	r2, [pc, #176]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ab2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ab6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d015      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ac4:	4b27      	ldr	r3, [pc, #156]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad2:	4924      	ldr	r1, [pc, #144]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ae2:	d105      	bne.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ae4:	4b1f      	ldr	r3, [pc, #124]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	4a1e      	ldr	r2, [pc, #120]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d015      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004afc:	4b19      	ldr	r3, [pc, #100]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0a:	4916      	ldr	r1, [pc, #88]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b1a:	d105      	bne.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b1c:	4b11      	ldr	r3, [pc, #68]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	4a10      	ldr	r2, [pc, #64]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b26:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d019      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b34:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	4908      	ldr	r1, [pc, #32]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b52:	d109      	bne.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b54:	4b03      	ldr	r3, [pc, #12]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	4a02      	ldr	r2, [pc, #8]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b5e:	60d3      	str	r3, [r2, #12]
 8004b60:	e002      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004b62:	bf00      	nop
 8004b64:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d015      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b74:	4b29      	ldr	r3, [pc, #164]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b82:	4926      	ldr	r1, [pc, #152]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b92:	d105      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004b94:	4b21      	ldr	r3, [pc, #132]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	4a20      	ldr	r2, [pc, #128]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b9e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d015      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004bac:	4b1b      	ldr	r3, [pc, #108]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bba:	4918      	ldr	r1, [pc, #96]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bca:	d105      	bne.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004bcc:	4b13      	ldr	r3, [pc, #76]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	4a12      	ldr	r2, [pc, #72]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bd6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d015      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004be4:	4b0d      	ldr	r3, [pc, #52]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004be6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf2:	490a      	ldr	r1, [pc, #40]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c02:	d105      	bne.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c04:	4b05      	ldr	r3, [pc, #20]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	4a04      	ldr	r2, [pc, #16]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c0e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004c10:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3718      	adds	r7, #24
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	40021000 	.word	0x40021000

08004c20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e049      	b.n	8004cc6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7fc f9c4 	bl	8000fd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2202      	movs	r2, #2
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	3304      	adds	r3, #4
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	4610      	mov	r0, r2
 8004c60:	f000 fe34 	bl	80058cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
	...

08004cd0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d001      	beq.n	8004ce8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e04c      	b.n	8004d82 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2202      	movs	r2, #2
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a26      	ldr	r2, [pc, #152]	; (8004d90 <HAL_TIM_Base_Start+0xc0>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d022      	beq.n	8004d40 <HAL_TIM_Base_Start+0x70>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d02:	d01d      	beq.n	8004d40 <HAL_TIM_Base_Start+0x70>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a22      	ldr	r2, [pc, #136]	; (8004d94 <HAL_TIM_Base_Start+0xc4>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d018      	beq.n	8004d40 <HAL_TIM_Base_Start+0x70>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a21      	ldr	r2, [pc, #132]	; (8004d98 <HAL_TIM_Base_Start+0xc8>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d013      	beq.n	8004d40 <HAL_TIM_Base_Start+0x70>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a1f      	ldr	r2, [pc, #124]	; (8004d9c <HAL_TIM_Base_Start+0xcc>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d00e      	beq.n	8004d40 <HAL_TIM_Base_Start+0x70>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a1e      	ldr	r2, [pc, #120]	; (8004da0 <HAL_TIM_Base_Start+0xd0>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d009      	beq.n	8004d40 <HAL_TIM_Base_Start+0x70>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a1c      	ldr	r2, [pc, #112]	; (8004da4 <HAL_TIM_Base_Start+0xd4>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d004      	beq.n	8004d40 <HAL_TIM_Base_Start+0x70>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a1b      	ldr	r2, [pc, #108]	; (8004da8 <HAL_TIM_Base_Start+0xd8>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d115      	bne.n	8004d6c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689a      	ldr	r2, [r3, #8]
 8004d46:	4b19      	ldr	r3, [pc, #100]	; (8004dac <HAL_TIM_Base_Start+0xdc>)
 8004d48:	4013      	ands	r3, r2
 8004d4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2b06      	cmp	r3, #6
 8004d50:	d015      	beq.n	8004d7e <HAL_TIM_Base_Start+0xae>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d58:	d011      	beq.n	8004d7e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f042 0201 	orr.w	r2, r2, #1
 8004d68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d6a:	e008      	b.n	8004d7e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f042 0201 	orr.w	r2, r2, #1
 8004d7a:	601a      	str	r2, [r3, #0]
 8004d7c:	e000      	b.n	8004d80 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	40012c00 	.word	0x40012c00
 8004d94:	40000400 	.word	0x40000400
 8004d98:	40000800 	.word	0x40000800
 8004d9c:	40000c00 	.word	0x40000c00
 8004da0:	40013400 	.word	0x40013400
 8004da4:	40014000 	.word	0x40014000
 8004da8:	40015000 	.word	0x40015000
 8004dac:	00010007 	.word	0x00010007

08004db0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d001      	beq.n	8004dc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e054      	b.n	8004e72 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68da      	ldr	r2, [r3, #12]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f042 0201 	orr.w	r2, r2, #1
 8004dde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a26      	ldr	r2, [pc, #152]	; (8004e80 <HAL_TIM_Base_Start_IT+0xd0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d022      	beq.n	8004e30 <HAL_TIM_Base_Start_IT+0x80>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df2:	d01d      	beq.n	8004e30 <HAL_TIM_Base_Start_IT+0x80>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a22      	ldr	r2, [pc, #136]	; (8004e84 <HAL_TIM_Base_Start_IT+0xd4>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d018      	beq.n	8004e30 <HAL_TIM_Base_Start_IT+0x80>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a21      	ldr	r2, [pc, #132]	; (8004e88 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d013      	beq.n	8004e30 <HAL_TIM_Base_Start_IT+0x80>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a1f      	ldr	r2, [pc, #124]	; (8004e8c <HAL_TIM_Base_Start_IT+0xdc>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d00e      	beq.n	8004e30 <HAL_TIM_Base_Start_IT+0x80>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a1e      	ldr	r2, [pc, #120]	; (8004e90 <HAL_TIM_Base_Start_IT+0xe0>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d009      	beq.n	8004e30 <HAL_TIM_Base_Start_IT+0x80>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a1c      	ldr	r2, [pc, #112]	; (8004e94 <HAL_TIM_Base_Start_IT+0xe4>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d004      	beq.n	8004e30 <HAL_TIM_Base_Start_IT+0x80>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a1b      	ldr	r2, [pc, #108]	; (8004e98 <HAL_TIM_Base_Start_IT+0xe8>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d115      	bne.n	8004e5c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689a      	ldr	r2, [r3, #8]
 8004e36:	4b19      	ldr	r3, [pc, #100]	; (8004e9c <HAL_TIM_Base_Start_IT+0xec>)
 8004e38:	4013      	ands	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2b06      	cmp	r3, #6
 8004e40:	d015      	beq.n	8004e6e <HAL_TIM_Base_Start_IT+0xbe>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e48:	d011      	beq.n	8004e6e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f042 0201 	orr.w	r2, r2, #1
 8004e58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e5a:	e008      	b.n	8004e6e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0201 	orr.w	r2, r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	e000      	b.n	8004e70 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40012c00 	.word	0x40012c00
 8004e84:	40000400 	.word	0x40000400
 8004e88:	40000800 	.word	0x40000800
 8004e8c:	40000c00 	.word	0x40000c00
 8004e90:	40013400 	.word	0x40013400
 8004e94:	40014000 	.word	0x40014000
 8004e98:	40015000 	.word	0x40015000
 8004e9c:	00010007 	.word	0x00010007

08004ea0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e049      	b.n	8004f46 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d106      	bne.n	8004ecc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f841 	bl	8004f4e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3304      	adds	r3, #4
 8004edc:	4619      	mov	r1, r3
 8004ede:	4610      	mov	r0, r2
 8004ee0:	f000 fcf4 	bl	80058cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
	...

08004f64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d109      	bne.n	8004f88 <HAL_TIM_PWM_Start+0x24>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	bf14      	ite	ne
 8004f80:	2301      	movne	r3, #1
 8004f82:	2300      	moveq	r3, #0
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	e03c      	b.n	8005002 <HAL_TIM_PWM_Start+0x9e>
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	2b04      	cmp	r3, #4
 8004f8c:	d109      	bne.n	8004fa2 <HAL_TIM_PWM_Start+0x3e>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	bf14      	ite	ne
 8004f9a:	2301      	movne	r3, #1
 8004f9c:	2300      	moveq	r3, #0
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	e02f      	b.n	8005002 <HAL_TIM_PWM_Start+0x9e>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b08      	cmp	r3, #8
 8004fa6:	d109      	bne.n	8004fbc <HAL_TIM_PWM_Start+0x58>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	bf14      	ite	ne
 8004fb4:	2301      	movne	r3, #1
 8004fb6:	2300      	moveq	r3, #0
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	e022      	b.n	8005002 <HAL_TIM_PWM_Start+0x9e>
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2b0c      	cmp	r3, #12
 8004fc0:	d109      	bne.n	8004fd6 <HAL_TIM_PWM_Start+0x72>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	bf14      	ite	ne
 8004fce:	2301      	movne	r3, #1
 8004fd0:	2300      	moveq	r3, #0
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	e015      	b.n	8005002 <HAL_TIM_PWM_Start+0x9e>
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b10      	cmp	r3, #16
 8004fda:	d109      	bne.n	8004ff0 <HAL_TIM_PWM_Start+0x8c>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	bf14      	ite	ne
 8004fe8:	2301      	movne	r3, #1
 8004fea:	2300      	moveq	r3, #0
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	e008      	b.n	8005002 <HAL_TIM_PWM_Start+0x9e>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	bf14      	ite	ne
 8004ffc:	2301      	movne	r3, #1
 8004ffe:	2300      	moveq	r3, #0
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e0a6      	b.n	8005158 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d104      	bne.n	800501a <HAL_TIM_PWM_Start+0xb6>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005018:	e023      	b.n	8005062 <HAL_TIM_PWM_Start+0xfe>
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b04      	cmp	r3, #4
 800501e:	d104      	bne.n	800502a <HAL_TIM_PWM_Start+0xc6>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2202      	movs	r2, #2
 8005024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005028:	e01b      	b.n	8005062 <HAL_TIM_PWM_Start+0xfe>
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2b08      	cmp	r3, #8
 800502e:	d104      	bne.n	800503a <HAL_TIM_PWM_Start+0xd6>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005038:	e013      	b.n	8005062 <HAL_TIM_PWM_Start+0xfe>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b0c      	cmp	r3, #12
 800503e:	d104      	bne.n	800504a <HAL_TIM_PWM_Start+0xe6>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2202      	movs	r2, #2
 8005044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005048:	e00b      	b.n	8005062 <HAL_TIM_PWM_Start+0xfe>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b10      	cmp	r3, #16
 800504e:	d104      	bne.n	800505a <HAL_TIM_PWM_Start+0xf6>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2202      	movs	r2, #2
 8005054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005058:	e003      	b.n	8005062 <HAL_TIM_PWM_Start+0xfe>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2202      	movs	r2, #2
 800505e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2201      	movs	r2, #1
 8005068:	6839      	ldr	r1, [r7, #0]
 800506a:	4618      	mov	r0, r3
 800506c:	f001 f8a8 	bl	80061c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a3a      	ldr	r2, [pc, #232]	; (8005160 <HAL_TIM_PWM_Start+0x1fc>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d018      	beq.n	80050ac <HAL_TIM_PWM_Start+0x148>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a39      	ldr	r2, [pc, #228]	; (8005164 <HAL_TIM_PWM_Start+0x200>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d013      	beq.n	80050ac <HAL_TIM_PWM_Start+0x148>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a37      	ldr	r2, [pc, #220]	; (8005168 <HAL_TIM_PWM_Start+0x204>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d00e      	beq.n	80050ac <HAL_TIM_PWM_Start+0x148>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a36      	ldr	r2, [pc, #216]	; (800516c <HAL_TIM_PWM_Start+0x208>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d009      	beq.n	80050ac <HAL_TIM_PWM_Start+0x148>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a34      	ldr	r2, [pc, #208]	; (8005170 <HAL_TIM_PWM_Start+0x20c>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d004      	beq.n	80050ac <HAL_TIM_PWM_Start+0x148>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a33      	ldr	r2, [pc, #204]	; (8005174 <HAL_TIM_PWM_Start+0x210>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d101      	bne.n	80050b0 <HAL_TIM_PWM_Start+0x14c>
 80050ac:	2301      	movs	r3, #1
 80050ae:	e000      	b.n	80050b2 <HAL_TIM_PWM_Start+0x14e>
 80050b0:	2300      	movs	r3, #0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d007      	beq.n	80050c6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a25      	ldr	r2, [pc, #148]	; (8005160 <HAL_TIM_PWM_Start+0x1fc>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d022      	beq.n	8005116 <HAL_TIM_PWM_Start+0x1b2>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d8:	d01d      	beq.n	8005116 <HAL_TIM_PWM_Start+0x1b2>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a26      	ldr	r2, [pc, #152]	; (8005178 <HAL_TIM_PWM_Start+0x214>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d018      	beq.n	8005116 <HAL_TIM_PWM_Start+0x1b2>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a24      	ldr	r2, [pc, #144]	; (800517c <HAL_TIM_PWM_Start+0x218>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d013      	beq.n	8005116 <HAL_TIM_PWM_Start+0x1b2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a23      	ldr	r2, [pc, #140]	; (8005180 <HAL_TIM_PWM_Start+0x21c>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d00e      	beq.n	8005116 <HAL_TIM_PWM_Start+0x1b2>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a19      	ldr	r2, [pc, #100]	; (8005164 <HAL_TIM_PWM_Start+0x200>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d009      	beq.n	8005116 <HAL_TIM_PWM_Start+0x1b2>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a18      	ldr	r2, [pc, #96]	; (8005168 <HAL_TIM_PWM_Start+0x204>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d004      	beq.n	8005116 <HAL_TIM_PWM_Start+0x1b2>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a18      	ldr	r2, [pc, #96]	; (8005174 <HAL_TIM_PWM_Start+0x210>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d115      	bne.n	8005142 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	689a      	ldr	r2, [r3, #8]
 800511c:	4b19      	ldr	r3, [pc, #100]	; (8005184 <HAL_TIM_PWM_Start+0x220>)
 800511e:	4013      	ands	r3, r2
 8005120:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2b06      	cmp	r3, #6
 8005126:	d015      	beq.n	8005154 <HAL_TIM_PWM_Start+0x1f0>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800512e:	d011      	beq.n	8005154 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0201 	orr.w	r2, r2, #1
 800513e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005140:	e008      	b.n	8005154 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f042 0201 	orr.w	r2, r2, #1
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	e000      	b.n	8005156 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005154:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	40012c00 	.word	0x40012c00
 8005164:	40013400 	.word	0x40013400
 8005168:	40014000 	.word	0x40014000
 800516c:	40014400 	.word	0x40014400
 8005170:	40014800 	.word	0x40014800
 8005174:	40015000 	.word	0x40015000
 8005178:	40000400 	.word	0x40000400
 800517c:	40000800 	.word	0x40000800
 8005180:	40000c00 	.word	0x40000c00
 8005184:	00010007 	.word	0x00010007

08005188 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d020      	beq.n	80051ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d01b      	beq.n	80051ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f06f 0202 	mvn.w	r2, #2
 80051bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	f003 0303 	and.w	r3, r3, #3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 fb5c 	bl	8005890 <HAL_TIM_IC_CaptureCallback>
 80051d8:	e005      	b.n	80051e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 fb4e 	bl	800587c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 fb5f 	bl	80058a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f003 0304 	and.w	r3, r3, #4
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d020      	beq.n	8005238 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f003 0304 	and.w	r3, r3, #4
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d01b      	beq.n	8005238 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f06f 0204 	mvn.w	r2, #4
 8005208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2202      	movs	r2, #2
 800520e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 fb36 	bl	8005890 <HAL_TIM_IC_CaptureCallback>
 8005224:	e005      	b.n	8005232 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 fb28 	bl	800587c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 fb39 	bl	80058a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	f003 0308 	and.w	r3, r3, #8
 800523e:	2b00      	cmp	r3, #0
 8005240:	d020      	beq.n	8005284 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f003 0308 	and.w	r3, r3, #8
 8005248:	2b00      	cmp	r3, #0
 800524a:	d01b      	beq.n	8005284 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f06f 0208 	mvn.w	r2, #8
 8005254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2204      	movs	r2, #4
 800525a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	f003 0303 	and.w	r3, r3, #3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 fb10 	bl	8005890 <HAL_TIM_IC_CaptureCallback>
 8005270:	e005      	b.n	800527e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 fb02 	bl	800587c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 fb13 	bl	80058a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	f003 0310 	and.w	r3, r3, #16
 800528a:	2b00      	cmp	r3, #0
 800528c:	d020      	beq.n	80052d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f003 0310 	and.w	r3, r3, #16
 8005294:	2b00      	cmp	r3, #0
 8005296:	d01b      	beq.n	80052d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f06f 0210 	mvn.w	r2, #16
 80052a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2208      	movs	r2, #8
 80052a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 faea 	bl	8005890 <HAL_TIM_IC_CaptureCallback>
 80052bc:	e005      	b.n	80052ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 fadc 	bl	800587c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 faed 	bl	80058a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00c      	beq.n	80052f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d007      	beq.n	80052f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f06f 0201 	mvn.w	r2, #1
 80052ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7fb fc28 	bl	8000b44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d104      	bne.n	8005308 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00c      	beq.n	8005322 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800530e:	2b00      	cmp	r3, #0
 8005310:	d007      	beq.n	8005322 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800531a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f001 f815 	bl	800634c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00c      	beq.n	8005346 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005332:	2b00      	cmp	r3, #0
 8005334:	d007      	beq.n	8005346 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800533e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f001 f80d 	bl	8006360 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00c      	beq.n	800536a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005356:	2b00      	cmp	r3, #0
 8005358:	d007      	beq.n	800536a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 faa7 	bl	80058b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	f003 0320 	and.w	r3, r3, #32
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00c      	beq.n	800538e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f003 0320 	and.w	r3, r3, #32
 800537a:	2b00      	cmp	r3, #0
 800537c:	d007      	beq.n	800538e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f06f 0220 	mvn.w	r2, #32
 8005386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 ffd5 	bl	8006338 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00c      	beq.n	80053b2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d007      	beq.n	80053b2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80053aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 ffe1 	bl	8006374 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00c      	beq.n	80053d6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d007      	beq.n	80053d6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80053ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 ffd9 	bl	8006388 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00c      	beq.n	80053fa <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d007      	beq.n	80053fa <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80053f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 ffd1 	bl	800639c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00c      	beq.n	800541e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d007      	beq.n	800541e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 ffc9 	bl	80063b0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800541e:	bf00      	nop
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005434:	2300      	movs	r3, #0
 8005436:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800543e:	2b01      	cmp	r3, #1
 8005440:	d101      	bne.n	8005446 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005442:	2302      	movs	r3, #2
 8005444:	e0ff      	b.n	8005646 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2b14      	cmp	r3, #20
 8005452:	f200 80f0 	bhi.w	8005636 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005456:	a201      	add	r2, pc, #4	; (adr r2, 800545c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545c:	080054b1 	.word	0x080054b1
 8005460:	08005637 	.word	0x08005637
 8005464:	08005637 	.word	0x08005637
 8005468:	08005637 	.word	0x08005637
 800546c:	080054f1 	.word	0x080054f1
 8005470:	08005637 	.word	0x08005637
 8005474:	08005637 	.word	0x08005637
 8005478:	08005637 	.word	0x08005637
 800547c:	08005533 	.word	0x08005533
 8005480:	08005637 	.word	0x08005637
 8005484:	08005637 	.word	0x08005637
 8005488:	08005637 	.word	0x08005637
 800548c:	08005573 	.word	0x08005573
 8005490:	08005637 	.word	0x08005637
 8005494:	08005637 	.word	0x08005637
 8005498:	08005637 	.word	0x08005637
 800549c:	080055b5 	.word	0x080055b5
 80054a0:	08005637 	.word	0x08005637
 80054a4:	08005637 	.word	0x08005637
 80054a8:	08005637 	.word	0x08005637
 80054ac:	080055f5 	.word	0x080055f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68b9      	ldr	r1, [r7, #8]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 fabc 	bl	8005a34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699a      	ldr	r2, [r3, #24]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f042 0208 	orr.w	r2, r2, #8
 80054ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699a      	ldr	r2, [r3, #24]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f022 0204 	bic.w	r2, r2, #4
 80054da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6999      	ldr	r1, [r3, #24]
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	691a      	ldr	r2, [r3, #16]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	619a      	str	r2, [r3, #24]
      break;
 80054ee:	e0a5      	b.n	800563c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68b9      	ldr	r1, [r7, #8]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 fb36 	bl	8005b68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	699a      	ldr	r2, [r3, #24]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800550a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	699a      	ldr	r2, [r3, #24]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800551a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6999      	ldr	r1, [r3, #24]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	021a      	lsls	r2, r3, #8
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	430a      	orrs	r2, r1
 800552e:	619a      	str	r2, [r3, #24]
      break;
 8005530:	e084      	b.n	800563c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68b9      	ldr	r1, [r7, #8]
 8005538:	4618      	mov	r0, r3
 800553a:	f000 fba9 	bl	8005c90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	69da      	ldr	r2, [r3, #28]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f042 0208 	orr.w	r2, r2, #8
 800554c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	69da      	ldr	r2, [r3, #28]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f022 0204 	bic.w	r2, r2, #4
 800555c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	69d9      	ldr	r1, [r3, #28]
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	691a      	ldr	r2, [r3, #16]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	430a      	orrs	r2, r1
 800556e:	61da      	str	r2, [r3, #28]
      break;
 8005570:	e064      	b.n	800563c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68b9      	ldr	r1, [r7, #8]
 8005578:	4618      	mov	r0, r3
 800557a:	f000 fc1b 	bl	8005db4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	69da      	ldr	r2, [r3, #28]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800558c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	69da      	ldr	r2, [r3, #28]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800559c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	69d9      	ldr	r1, [r3, #28]
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	021a      	lsls	r2, r3, #8
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	61da      	str	r2, [r3, #28]
      break;
 80055b2:	e043      	b.n	800563c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68b9      	ldr	r1, [r7, #8]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 fc8e 	bl	8005edc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f042 0208 	orr.w	r2, r2, #8
 80055ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 0204 	bic.w	r2, r2, #4
 80055de:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	691a      	ldr	r2, [r3, #16]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80055f2:	e023      	b.n	800563c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68b9      	ldr	r1, [r7, #8]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 fcd8 	bl	8005fb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800560e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800561e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	021a      	lsls	r2, r3, #8
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005634:	e002      	b.n	800563c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	75fb      	strb	r3, [r7, #23]
      break;
 800563a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005644:	7dfb      	ldrb	r3, [r7, #23]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3718      	adds	r7, #24
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop

08005650 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800565a:	2300      	movs	r3, #0
 800565c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005664:	2b01      	cmp	r3, #1
 8005666:	d101      	bne.n	800566c <HAL_TIM_ConfigClockSource+0x1c>
 8005668:	2302      	movs	r3, #2
 800566a:	e0f6      	b.n	800585a <HAL_TIM_ConfigClockSource+0x20a>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800568a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800568e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005696:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a6f      	ldr	r2, [pc, #444]	; (8005864 <HAL_TIM_ConfigClockSource+0x214>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	f000 80c1 	beq.w	800582e <HAL_TIM_ConfigClockSource+0x1de>
 80056ac:	4a6d      	ldr	r2, [pc, #436]	; (8005864 <HAL_TIM_ConfigClockSource+0x214>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	f200 80c6 	bhi.w	8005840 <HAL_TIM_ConfigClockSource+0x1f0>
 80056b4:	4a6c      	ldr	r2, [pc, #432]	; (8005868 <HAL_TIM_ConfigClockSource+0x218>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	f000 80b9 	beq.w	800582e <HAL_TIM_ConfigClockSource+0x1de>
 80056bc:	4a6a      	ldr	r2, [pc, #424]	; (8005868 <HAL_TIM_ConfigClockSource+0x218>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	f200 80be 	bhi.w	8005840 <HAL_TIM_ConfigClockSource+0x1f0>
 80056c4:	4a69      	ldr	r2, [pc, #420]	; (800586c <HAL_TIM_ConfigClockSource+0x21c>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	f000 80b1 	beq.w	800582e <HAL_TIM_ConfigClockSource+0x1de>
 80056cc:	4a67      	ldr	r2, [pc, #412]	; (800586c <HAL_TIM_ConfigClockSource+0x21c>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	f200 80b6 	bhi.w	8005840 <HAL_TIM_ConfigClockSource+0x1f0>
 80056d4:	4a66      	ldr	r2, [pc, #408]	; (8005870 <HAL_TIM_ConfigClockSource+0x220>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	f000 80a9 	beq.w	800582e <HAL_TIM_ConfigClockSource+0x1de>
 80056dc:	4a64      	ldr	r2, [pc, #400]	; (8005870 <HAL_TIM_ConfigClockSource+0x220>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	f200 80ae 	bhi.w	8005840 <HAL_TIM_ConfigClockSource+0x1f0>
 80056e4:	4a63      	ldr	r2, [pc, #396]	; (8005874 <HAL_TIM_ConfigClockSource+0x224>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	f000 80a1 	beq.w	800582e <HAL_TIM_ConfigClockSource+0x1de>
 80056ec:	4a61      	ldr	r2, [pc, #388]	; (8005874 <HAL_TIM_ConfigClockSource+0x224>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	f200 80a6 	bhi.w	8005840 <HAL_TIM_ConfigClockSource+0x1f0>
 80056f4:	4a60      	ldr	r2, [pc, #384]	; (8005878 <HAL_TIM_ConfigClockSource+0x228>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	f000 8099 	beq.w	800582e <HAL_TIM_ConfigClockSource+0x1de>
 80056fc:	4a5e      	ldr	r2, [pc, #376]	; (8005878 <HAL_TIM_ConfigClockSource+0x228>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	f200 809e 	bhi.w	8005840 <HAL_TIM_ConfigClockSource+0x1f0>
 8005704:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005708:	f000 8091 	beq.w	800582e <HAL_TIM_ConfigClockSource+0x1de>
 800570c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005710:	f200 8096 	bhi.w	8005840 <HAL_TIM_ConfigClockSource+0x1f0>
 8005714:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005718:	f000 8089 	beq.w	800582e <HAL_TIM_ConfigClockSource+0x1de>
 800571c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005720:	f200 808e 	bhi.w	8005840 <HAL_TIM_ConfigClockSource+0x1f0>
 8005724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005728:	d03e      	beq.n	80057a8 <HAL_TIM_ConfigClockSource+0x158>
 800572a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800572e:	f200 8087 	bhi.w	8005840 <HAL_TIM_ConfigClockSource+0x1f0>
 8005732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005736:	f000 8086 	beq.w	8005846 <HAL_TIM_ConfigClockSource+0x1f6>
 800573a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800573e:	d87f      	bhi.n	8005840 <HAL_TIM_ConfigClockSource+0x1f0>
 8005740:	2b70      	cmp	r3, #112	; 0x70
 8005742:	d01a      	beq.n	800577a <HAL_TIM_ConfigClockSource+0x12a>
 8005744:	2b70      	cmp	r3, #112	; 0x70
 8005746:	d87b      	bhi.n	8005840 <HAL_TIM_ConfigClockSource+0x1f0>
 8005748:	2b60      	cmp	r3, #96	; 0x60
 800574a:	d050      	beq.n	80057ee <HAL_TIM_ConfigClockSource+0x19e>
 800574c:	2b60      	cmp	r3, #96	; 0x60
 800574e:	d877      	bhi.n	8005840 <HAL_TIM_ConfigClockSource+0x1f0>
 8005750:	2b50      	cmp	r3, #80	; 0x50
 8005752:	d03c      	beq.n	80057ce <HAL_TIM_ConfigClockSource+0x17e>
 8005754:	2b50      	cmp	r3, #80	; 0x50
 8005756:	d873      	bhi.n	8005840 <HAL_TIM_ConfigClockSource+0x1f0>
 8005758:	2b40      	cmp	r3, #64	; 0x40
 800575a:	d058      	beq.n	800580e <HAL_TIM_ConfigClockSource+0x1be>
 800575c:	2b40      	cmp	r3, #64	; 0x40
 800575e:	d86f      	bhi.n	8005840 <HAL_TIM_ConfigClockSource+0x1f0>
 8005760:	2b30      	cmp	r3, #48	; 0x30
 8005762:	d064      	beq.n	800582e <HAL_TIM_ConfigClockSource+0x1de>
 8005764:	2b30      	cmp	r3, #48	; 0x30
 8005766:	d86b      	bhi.n	8005840 <HAL_TIM_ConfigClockSource+0x1f0>
 8005768:	2b20      	cmp	r3, #32
 800576a:	d060      	beq.n	800582e <HAL_TIM_ConfigClockSource+0x1de>
 800576c:	2b20      	cmp	r3, #32
 800576e:	d867      	bhi.n	8005840 <HAL_TIM_ConfigClockSource+0x1f0>
 8005770:	2b00      	cmp	r3, #0
 8005772:	d05c      	beq.n	800582e <HAL_TIM_ConfigClockSource+0x1de>
 8005774:	2b10      	cmp	r3, #16
 8005776:	d05a      	beq.n	800582e <HAL_TIM_ConfigClockSource+0x1de>
 8005778:	e062      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800578a:	f000 fcf9 	bl	8006180 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800579c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	609a      	str	r2, [r3, #8]
      break;
 80057a6:	e04f      	b.n	8005848 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057b8:	f000 fce2 	bl	8006180 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689a      	ldr	r2, [r3, #8]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057ca:	609a      	str	r2, [r3, #8]
      break;
 80057cc:	e03c      	b.n	8005848 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057da:	461a      	mov	r2, r3
 80057dc:	f000 fc54 	bl	8006088 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2150      	movs	r1, #80	; 0x50
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 fcad 	bl	8006146 <TIM_ITRx_SetConfig>
      break;
 80057ec:	e02c      	b.n	8005848 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057fa:	461a      	mov	r2, r3
 80057fc:	f000 fc73 	bl	80060e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2160      	movs	r1, #96	; 0x60
 8005806:	4618      	mov	r0, r3
 8005808:	f000 fc9d 	bl	8006146 <TIM_ITRx_SetConfig>
      break;
 800580c:	e01c      	b.n	8005848 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800581a:	461a      	mov	r2, r3
 800581c:	f000 fc34 	bl	8006088 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2140      	movs	r1, #64	; 0x40
 8005826:	4618      	mov	r0, r3
 8005828:	f000 fc8d 	bl	8006146 <TIM_ITRx_SetConfig>
      break;
 800582c:	e00c      	b.n	8005848 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4619      	mov	r1, r3
 8005838:	4610      	mov	r0, r2
 800583a:	f000 fc84 	bl	8006146 <TIM_ITRx_SetConfig>
      break;
 800583e:	e003      	b.n	8005848 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	73fb      	strb	r3, [r7, #15]
      break;
 8005844:	e000      	b.n	8005848 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005846:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005858:	7bfb      	ldrb	r3, [r7, #15]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	00100070 	.word	0x00100070
 8005868:	00100060 	.word	0x00100060
 800586c:	00100050 	.word	0x00100050
 8005870:	00100040 	.word	0x00100040
 8005874:	00100030 	.word	0x00100030
 8005878:	00100020 	.word	0x00100020

0800587c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a4c      	ldr	r2, [pc, #304]	; (8005a10 <TIM_Base_SetConfig+0x144>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d017      	beq.n	8005914 <TIM_Base_SetConfig+0x48>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ea:	d013      	beq.n	8005914 <TIM_Base_SetConfig+0x48>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a49      	ldr	r2, [pc, #292]	; (8005a14 <TIM_Base_SetConfig+0x148>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d00f      	beq.n	8005914 <TIM_Base_SetConfig+0x48>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a48      	ldr	r2, [pc, #288]	; (8005a18 <TIM_Base_SetConfig+0x14c>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d00b      	beq.n	8005914 <TIM_Base_SetConfig+0x48>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a47      	ldr	r2, [pc, #284]	; (8005a1c <TIM_Base_SetConfig+0x150>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d007      	beq.n	8005914 <TIM_Base_SetConfig+0x48>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a46      	ldr	r2, [pc, #280]	; (8005a20 <TIM_Base_SetConfig+0x154>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d003      	beq.n	8005914 <TIM_Base_SetConfig+0x48>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a45      	ldr	r2, [pc, #276]	; (8005a24 <TIM_Base_SetConfig+0x158>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d108      	bne.n	8005926 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800591a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	4313      	orrs	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a39      	ldr	r2, [pc, #228]	; (8005a10 <TIM_Base_SetConfig+0x144>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d023      	beq.n	8005976 <TIM_Base_SetConfig+0xaa>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005934:	d01f      	beq.n	8005976 <TIM_Base_SetConfig+0xaa>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a36      	ldr	r2, [pc, #216]	; (8005a14 <TIM_Base_SetConfig+0x148>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d01b      	beq.n	8005976 <TIM_Base_SetConfig+0xaa>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a35      	ldr	r2, [pc, #212]	; (8005a18 <TIM_Base_SetConfig+0x14c>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d017      	beq.n	8005976 <TIM_Base_SetConfig+0xaa>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a34      	ldr	r2, [pc, #208]	; (8005a1c <TIM_Base_SetConfig+0x150>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d013      	beq.n	8005976 <TIM_Base_SetConfig+0xaa>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a33      	ldr	r2, [pc, #204]	; (8005a20 <TIM_Base_SetConfig+0x154>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d00f      	beq.n	8005976 <TIM_Base_SetConfig+0xaa>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a33      	ldr	r2, [pc, #204]	; (8005a28 <TIM_Base_SetConfig+0x15c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d00b      	beq.n	8005976 <TIM_Base_SetConfig+0xaa>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a32      	ldr	r2, [pc, #200]	; (8005a2c <TIM_Base_SetConfig+0x160>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d007      	beq.n	8005976 <TIM_Base_SetConfig+0xaa>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a31      	ldr	r2, [pc, #196]	; (8005a30 <TIM_Base_SetConfig+0x164>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d003      	beq.n	8005976 <TIM_Base_SetConfig+0xaa>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a2c      	ldr	r2, [pc, #176]	; (8005a24 <TIM_Base_SetConfig+0x158>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d108      	bne.n	8005988 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800597c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	4313      	orrs	r3, r2
 8005986:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	4313      	orrs	r3, r2
 8005994:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	689a      	ldr	r2, [r3, #8]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a18      	ldr	r2, [pc, #96]	; (8005a10 <TIM_Base_SetConfig+0x144>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d013      	beq.n	80059dc <TIM_Base_SetConfig+0x110>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a1a      	ldr	r2, [pc, #104]	; (8005a20 <TIM_Base_SetConfig+0x154>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d00f      	beq.n	80059dc <TIM_Base_SetConfig+0x110>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a1a      	ldr	r2, [pc, #104]	; (8005a28 <TIM_Base_SetConfig+0x15c>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d00b      	beq.n	80059dc <TIM_Base_SetConfig+0x110>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a19      	ldr	r2, [pc, #100]	; (8005a2c <TIM_Base_SetConfig+0x160>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d007      	beq.n	80059dc <TIM_Base_SetConfig+0x110>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a18      	ldr	r2, [pc, #96]	; (8005a30 <TIM_Base_SetConfig+0x164>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d003      	beq.n	80059dc <TIM_Base_SetConfig+0x110>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a13      	ldr	r2, [pc, #76]	; (8005a24 <TIM_Base_SetConfig+0x158>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d103      	bne.n	80059e4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	691a      	ldr	r2, [r3, #16]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d105      	bne.n	8005a02 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	f023 0201 	bic.w	r2, r3, #1
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	611a      	str	r2, [r3, #16]
  }
}
 8005a02:	bf00      	nop
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	40012c00 	.word	0x40012c00
 8005a14:	40000400 	.word	0x40000400
 8005a18:	40000800 	.word	0x40000800
 8005a1c:	40000c00 	.word	0x40000c00
 8005a20:	40013400 	.word	0x40013400
 8005a24:	40015000 	.word	0x40015000
 8005a28:	40014000 	.word	0x40014000
 8005a2c:	40014400 	.word	0x40014400
 8005a30:	40014800 	.word	0x40014800

08005a34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b087      	sub	sp, #28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	f023 0201 	bic.w	r2, r3, #1
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0303 	bic.w	r3, r3, #3
 8005a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f023 0302 	bic.w	r3, r3, #2
 8005a80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a30      	ldr	r2, [pc, #192]	; (8005b50 <TIM_OC1_SetConfig+0x11c>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d013      	beq.n	8005abc <TIM_OC1_SetConfig+0x88>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a2f      	ldr	r2, [pc, #188]	; (8005b54 <TIM_OC1_SetConfig+0x120>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d00f      	beq.n	8005abc <TIM_OC1_SetConfig+0x88>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a2e      	ldr	r2, [pc, #184]	; (8005b58 <TIM_OC1_SetConfig+0x124>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d00b      	beq.n	8005abc <TIM_OC1_SetConfig+0x88>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a2d      	ldr	r2, [pc, #180]	; (8005b5c <TIM_OC1_SetConfig+0x128>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d007      	beq.n	8005abc <TIM_OC1_SetConfig+0x88>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a2c      	ldr	r2, [pc, #176]	; (8005b60 <TIM_OC1_SetConfig+0x12c>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d003      	beq.n	8005abc <TIM_OC1_SetConfig+0x88>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a2b      	ldr	r2, [pc, #172]	; (8005b64 <TIM_OC1_SetConfig+0x130>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d10c      	bne.n	8005ad6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f023 0308 	bic.w	r3, r3, #8
 8005ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f023 0304 	bic.w	r3, r3, #4
 8005ad4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a1d      	ldr	r2, [pc, #116]	; (8005b50 <TIM_OC1_SetConfig+0x11c>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d013      	beq.n	8005b06 <TIM_OC1_SetConfig+0xd2>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a1c      	ldr	r2, [pc, #112]	; (8005b54 <TIM_OC1_SetConfig+0x120>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d00f      	beq.n	8005b06 <TIM_OC1_SetConfig+0xd2>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a1b      	ldr	r2, [pc, #108]	; (8005b58 <TIM_OC1_SetConfig+0x124>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d00b      	beq.n	8005b06 <TIM_OC1_SetConfig+0xd2>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a1a      	ldr	r2, [pc, #104]	; (8005b5c <TIM_OC1_SetConfig+0x128>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d007      	beq.n	8005b06 <TIM_OC1_SetConfig+0xd2>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a19      	ldr	r2, [pc, #100]	; (8005b60 <TIM_OC1_SetConfig+0x12c>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d003      	beq.n	8005b06 <TIM_OC1_SetConfig+0xd2>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a18      	ldr	r2, [pc, #96]	; (8005b64 <TIM_OC1_SetConfig+0x130>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d111      	bne.n	8005b2a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	685a      	ldr	r2, [r3, #4]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	621a      	str	r2, [r3, #32]
}
 8005b44:	bf00      	nop
 8005b46:	371c      	adds	r7, #28
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr
 8005b50:	40012c00 	.word	0x40012c00
 8005b54:	40013400 	.word	0x40013400
 8005b58:	40014000 	.word	0x40014000
 8005b5c:	40014400 	.word	0x40014400
 8005b60:	40014800 	.word	0x40014800
 8005b64:	40015000 	.word	0x40015000

08005b68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b087      	sub	sp, #28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a1b      	ldr	r3, [r3, #32]
 8005b7c:	f023 0210 	bic.w	r2, r3, #16
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	021b      	lsls	r3, r3, #8
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	f023 0320 	bic.w	r3, r3, #32
 8005bb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	011b      	lsls	r3, r3, #4
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a2c      	ldr	r2, [pc, #176]	; (8005c78 <TIM_OC2_SetConfig+0x110>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d007      	beq.n	8005bdc <TIM_OC2_SetConfig+0x74>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a2b      	ldr	r2, [pc, #172]	; (8005c7c <TIM_OC2_SetConfig+0x114>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d003      	beq.n	8005bdc <TIM_OC2_SetConfig+0x74>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a2a      	ldr	r2, [pc, #168]	; (8005c80 <TIM_OC2_SetConfig+0x118>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d10d      	bne.n	8005bf8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005be2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	011b      	lsls	r3, r3, #4
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bf6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a1f      	ldr	r2, [pc, #124]	; (8005c78 <TIM_OC2_SetConfig+0x110>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d013      	beq.n	8005c28 <TIM_OC2_SetConfig+0xc0>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a1e      	ldr	r2, [pc, #120]	; (8005c7c <TIM_OC2_SetConfig+0x114>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d00f      	beq.n	8005c28 <TIM_OC2_SetConfig+0xc0>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a1e      	ldr	r2, [pc, #120]	; (8005c84 <TIM_OC2_SetConfig+0x11c>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d00b      	beq.n	8005c28 <TIM_OC2_SetConfig+0xc0>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a1d      	ldr	r2, [pc, #116]	; (8005c88 <TIM_OC2_SetConfig+0x120>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d007      	beq.n	8005c28 <TIM_OC2_SetConfig+0xc0>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a1c      	ldr	r2, [pc, #112]	; (8005c8c <TIM_OC2_SetConfig+0x124>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d003      	beq.n	8005c28 <TIM_OC2_SetConfig+0xc0>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a17      	ldr	r2, [pc, #92]	; (8005c80 <TIM_OC2_SetConfig+0x118>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d113      	bne.n	8005c50 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	695b      	ldr	r3, [r3, #20]
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	621a      	str	r2, [r3, #32]
}
 8005c6a:	bf00      	nop
 8005c6c:	371c      	adds	r7, #28
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	40012c00 	.word	0x40012c00
 8005c7c:	40013400 	.word	0x40013400
 8005c80:	40015000 	.word	0x40015000
 8005c84:	40014000 	.word	0x40014000
 8005c88:	40014400 	.word	0x40014400
 8005c8c:	40014800 	.word	0x40014800

08005c90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b087      	sub	sp, #28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f023 0303 	bic.w	r3, r3, #3
 8005cca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	021b      	lsls	r3, r3, #8
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a2b      	ldr	r2, [pc, #172]	; (8005d9c <TIM_OC3_SetConfig+0x10c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d007      	beq.n	8005d02 <TIM_OC3_SetConfig+0x72>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a2a      	ldr	r2, [pc, #168]	; (8005da0 <TIM_OC3_SetConfig+0x110>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d003      	beq.n	8005d02 <TIM_OC3_SetConfig+0x72>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a29      	ldr	r2, [pc, #164]	; (8005da4 <TIM_OC3_SetConfig+0x114>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d10d      	bne.n	8005d1e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	021b      	lsls	r3, r3, #8
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a1e      	ldr	r2, [pc, #120]	; (8005d9c <TIM_OC3_SetConfig+0x10c>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d013      	beq.n	8005d4e <TIM_OC3_SetConfig+0xbe>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a1d      	ldr	r2, [pc, #116]	; (8005da0 <TIM_OC3_SetConfig+0x110>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d00f      	beq.n	8005d4e <TIM_OC3_SetConfig+0xbe>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a1d      	ldr	r2, [pc, #116]	; (8005da8 <TIM_OC3_SetConfig+0x118>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d00b      	beq.n	8005d4e <TIM_OC3_SetConfig+0xbe>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a1c      	ldr	r2, [pc, #112]	; (8005dac <TIM_OC3_SetConfig+0x11c>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d007      	beq.n	8005d4e <TIM_OC3_SetConfig+0xbe>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a1b      	ldr	r2, [pc, #108]	; (8005db0 <TIM_OC3_SetConfig+0x120>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d003      	beq.n	8005d4e <TIM_OC3_SetConfig+0xbe>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a16      	ldr	r2, [pc, #88]	; (8005da4 <TIM_OC3_SetConfig+0x114>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d113      	bne.n	8005d76 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	011b      	lsls	r3, r3, #4
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	011b      	lsls	r3, r3, #4
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	685a      	ldr	r2, [r3, #4]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	621a      	str	r2, [r3, #32]
}
 8005d90:	bf00      	nop
 8005d92:	371c      	adds	r7, #28
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr
 8005d9c:	40012c00 	.word	0x40012c00
 8005da0:	40013400 	.word	0x40013400
 8005da4:	40015000 	.word	0x40015000
 8005da8:	40014000 	.word	0x40014000
 8005dac:	40014400 	.word	0x40014400
 8005db0:	40014800 	.word	0x40014800

08005db4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b087      	sub	sp, #28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	021b      	lsls	r3, r3, #8
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	031b      	lsls	r3, r3, #12
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a2c      	ldr	r2, [pc, #176]	; (8005ec4 <TIM_OC4_SetConfig+0x110>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d007      	beq.n	8005e28 <TIM_OC4_SetConfig+0x74>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a2b      	ldr	r2, [pc, #172]	; (8005ec8 <TIM_OC4_SetConfig+0x114>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d003      	beq.n	8005e28 <TIM_OC4_SetConfig+0x74>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a2a      	ldr	r2, [pc, #168]	; (8005ecc <TIM_OC4_SetConfig+0x118>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d10d      	bne.n	8005e44 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	031b      	lsls	r3, r3, #12
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a1f      	ldr	r2, [pc, #124]	; (8005ec4 <TIM_OC4_SetConfig+0x110>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d013      	beq.n	8005e74 <TIM_OC4_SetConfig+0xc0>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a1e      	ldr	r2, [pc, #120]	; (8005ec8 <TIM_OC4_SetConfig+0x114>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d00f      	beq.n	8005e74 <TIM_OC4_SetConfig+0xc0>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a1e      	ldr	r2, [pc, #120]	; (8005ed0 <TIM_OC4_SetConfig+0x11c>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d00b      	beq.n	8005e74 <TIM_OC4_SetConfig+0xc0>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a1d      	ldr	r2, [pc, #116]	; (8005ed4 <TIM_OC4_SetConfig+0x120>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d007      	beq.n	8005e74 <TIM_OC4_SetConfig+0xc0>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a1c      	ldr	r2, [pc, #112]	; (8005ed8 <TIM_OC4_SetConfig+0x124>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d003      	beq.n	8005e74 <TIM_OC4_SetConfig+0xc0>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a17      	ldr	r2, [pc, #92]	; (8005ecc <TIM_OC4_SetConfig+0x118>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d113      	bne.n	8005e9c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e7a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e82:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	019b      	lsls	r3, r3, #6
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	019b      	lsls	r3, r3, #6
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	621a      	str	r2, [r3, #32]
}
 8005eb6:	bf00      	nop
 8005eb8:	371c      	adds	r7, #28
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	40012c00 	.word	0x40012c00
 8005ec8:	40013400 	.word	0x40013400
 8005ecc:	40015000 	.word	0x40015000
 8005ed0:	40014000 	.word	0x40014000
 8005ed4:	40014400 	.word	0x40014400
 8005ed8:	40014800 	.word	0x40014800

08005edc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b087      	sub	sp, #28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	041b      	lsls	r3, r3, #16
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a19      	ldr	r2, [pc, #100]	; (8005f98 <TIM_OC5_SetConfig+0xbc>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d013      	beq.n	8005f5e <TIM_OC5_SetConfig+0x82>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a18      	ldr	r2, [pc, #96]	; (8005f9c <TIM_OC5_SetConfig+0xc0>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d00f      	beq.n	8005f5e <TIM_OC5_SetConfig+0x82>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a17      	ldr	r2, [pc, #92]	; (8005fa0 <TIM_OC5_SetConfig+0xc4>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d00b      	beq.n	8005f5e <TIM_OC5_SetConfig+0x82>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a16      	ldr	r2, [pc, #88]	; (8005fa4 <TIM_OC5_SetConfig+0xc8>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d007      	beq.n	8005f5e <TIM_OC5_SetConfig+0x82>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a15      	ldr	r2, [pc, #84]	; (8005fa8 <TIM_OC5_SetConfig+0xcc>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d003      	beq.n	8005f5e <TIM_OC5_SetConfig+0x82>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a14      	ldr	r2, [pc, #80]	; (8005fac <TIM_OC5_SetConfig+0xd0>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d109      	bne.n	8005f72 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	021b      	lsls	r3, r3, #8
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	685a      	ldr	r2, [r3, #4]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	621a      	str	r2, [r3, #32]
}
 8005f8c:	bf00      	nop
 8005f8e:	371c      	adds	r7, #28
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr
 8005f98:	40012c00 	.word	0x40012c00
 8005f9c:	40013400 	.word	0x40013400
 8005fa0:	40014000 	.word	0x40014000
 8005fa4:	40014400 	.word	0x40014400
 8005fa8:	40014800 	.word	0x40014800
 8005fac:	40015000 	.word	0x40015000

08005fb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b087      	sub	sp, #28
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	021b      	lsls	r3, r3, #8
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	051b      	lsls	r3, r3, #20
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	4313      	orrs	r3, r2
 8006002:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a1a      	ldr	r2, [pc, #104]	; (8006070 <TIM_OC6_SetConfig+0xc0>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d013      	beq.n	8006034 <TIM_OC6_SetConfig+0x84>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a19      	ldr	r2, [pc, #100]	; (8006074 <TIM_OC6_SetConfig+0xc4>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d00f      	beq.n	8006034 <TIM_OC6_SetConfig+0x84>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a18      	ldr	r2, [pc, #96]	; (8006078 <TIM_OC6_SetConfig+0xc8>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d00b      	beq.n	8006034 <TIM_OC6_SetConfig+0x84>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a17      	ldr	r2, [pc, #92]	; (800607c <TIM_OC6_SetConfig+0xcc>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d007      	beq.n	8006034 <TIM_OC6_SetConfig+0x84>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a16      	ldr	r2, [pc, #88]	; (8006080 <TIM_OC6_SetConfig+0xd0>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d003      	beq.n	8006034 <TIM_OC6_SetConfig+0x84>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a15      	ldr	r2, [pc, #84]	; (8006084 <TIM_OC6_SetConfig+0xd4>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d109      	bne.n	8006048 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800603a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	029b      	lsls	r3, r3, #10
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	4313      	orrs	r3, r2
 8006046:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	685a      	ldr	r2, [r3, #4]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	621a      	str	r2, [r3, #32]
}
 8006062:	bf00      	nop
 8006064:	371c      	adds	r7, #28
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	40012c00 	.word	0x40012c00
 8006074:	40013400 	.word	0x40013400
 8006078:	40014000 	.word	0x40014000
 800607c:	40014400 	.word	0x40014400
 8006080:	40014800 	.word	0x40014800
 8006084:	40015000 	.word	0x40015000

08006088 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006088:	b480      	push	{r7}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	f023 0201 	bic.w	r2, r3, #1
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	011b      	lsls	r3, r3, #4
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f023 030a 	bic.w	r3, r3, #10
 80060c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	621a      	str	r2, [r3, #32]
}
 80060da:	bf00      	nop
 80060dc:	371c      	adds	r7, #28
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b087      	sub	sp, #28
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	60f8      	str	r0, [r7, #12]
 80060ee:	60b9      	str	r1, [r7, #8]
 80060f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	f023 0210 	bic.w	r2, r3, #16
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006110:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	031b      	lsls	r3, r3, #12
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	4313      	orrs	r3, r2
 800611a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006122:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	011b      	lsls	r3, r3, #4
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	4313      	orrs	r3, r2
 800612c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	621a      	str	r2, [r3, #32]
}
 800613a:	bf00      	nop
 800613c:	371c      	adds	r7, #28
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006146:	b480      	push	{r7}
 8006148:	b085      	sub	sp, #20
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
 800614e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800615c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006160:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006162:	683a      	ldr	r2, [r7, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	4313      	orrs	r3, r2
 8006168:	f043 0307 	orr.w	r3, r3, #7
 800616c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	609a      	str	r2, [r3, #8]
}
 8006174:	bf00      	nop
 8006176:	3714      	adds	r7, #20
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006180:	b480      	push	{r7}
 8006182:	b087      	sub	sp, #28
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
 800618c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800619a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	021a      	lsls	r2, r3, #8
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	431a      	orrs	r2, r3
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	609a      	str	r2, [r3, #8]
}
 80061b4:	bf00      	nop
 80061b6:	371c      	adds	r7, #28
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	f003 031f 	and.w	r3, r3, #31
 80061d2:	2201      	movs	r2, #1
 80061d4:	fa02 f303 	lsl.w	r3, r2, r3
 80061d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6a1a      	ldr	r2, [r3, #32]
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	43db      	mvns	r3, r3
 80061e2:	401a      	ands	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6a1a      	ldr	r2, [r3, #32]
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	f003 031f 	and.w	r3, r3, #31
 80061f2:	6879      	ldr	r1, [r7, #4]
 80061f4:	fa01 f303 	lsl.w	r3, r1, r3
 80061f8:	431a      	orrs	r2, r3
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	621a      	str	r2, [r3, #32]
}
 80061fe:	bf00      	nop
 8006200:	371c      	adds	r7, #28
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
	...

0800620c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800621c:	2b01      	cmp	r3, #1
 800621e:	d101      	bne.n	8006224 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006220:	2302      	movs	r3, #2
 8006222:	e074      	b.n	800630e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2202      	movs	r2, #2
 8006230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a34      	ldr	r2, [pc, #208]	; (800631c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d009      	beq.n	8006262 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a33      	ldr	r2, [pc, #204]	; (8006320 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d004      	beq.n	8006262 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a31      	ldr	r2, [pc, #196]	; (8006324 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d108      	bne.n	8006274 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006268:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	4313      	orrs	r3, r2
 8006272:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800627a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800627e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	4313      	orrs	r3, r2
 8006288:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a21      	ldr	r2, [pc, #132]	; (800631c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d022      	beq.n	80062e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a4:	d01d      	beq.n	80062e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a1f      	ldr	r2, [pc, #124]	; (8006328 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d018      	beq.n	80062e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a1d      	ldr	r2, [pc, #116]	; (800632c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d013      	beq.n	80062e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a1c      	ldr	r2, [pc, #112]	; (8006330 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d00e      	beq.n	80062e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a15      	ldr	r2, [pc, #84]	; (8006320 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d009      	beq.n	80062e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a18      	ldr	r2, [pc, #96]	; (8006334 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d004      	beq.n	80062e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a11      	ldr	r2, [pc, #68]	; (8006324 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d10c      	bne.n	80062fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	40012c00 	.word	0x40012c00
 8006320:	40013400 	.word	0x40013400
 8006324:	40015000 	.word	0x40015000
 8006328:	40000400 	.word	0x40000400
 800632c:	40000800 	.word	0x40000800
 8006330:	40000c00 	.word	0x40000c00
 8006334:	40014000 	.word	0x40014000

08006338 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d101      	bne.n	80063d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e042      	b.n	800645c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d106      	bne.n	80063ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f7fa fd9b 	bl	8000f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2224      	movs	r2, #36	; 0x24
 80063f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 0201 	bic.w	r2, r2, #1
 8006404:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640a:	2b00      	cmp	r3, #0
 800640c:	d002      	beq.n	8006414 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 fb24 	bl	8006a5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 f825 	bl	8006464 <UART_SetConfig>
 800641a:	4603      	mov	r3, r0
 800641c:	2b01      	cmp	r3, #1
 800641e:	d101      	bne.n	8006424 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e01b      	b.n	800645c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685a      	ldr	r2, [r3, #4]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006432:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	689a      	ldr	r2, [r3, #8]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006442:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f042 0201 	orr.w	r2, r2, #1
 8006452:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 fba3 	bl	8006ba0 <UART_CheckIdleState>
 800645a:	4603      	mov	r3, r0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3708      	adds	r7, #8
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006464:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006468:	b08c      	sub	sp, #48	; 0x30
 800646a:	af00      	add	r7, sp, #0
 800646c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800646e:	2300      	movs	r3, #0
 8006470:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	689a      	ldr	r2, [r3, #8]
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	431a      	orrs	r2, r3
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	431a      	orrs	r2, r3
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	4313      	orrs	r3, r2
 800648a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	4baa      	ldr	r3, [pc, #680]	; (800673c <UART_SetConfig+0x2d8>)
 8006494:	4013      	ands	r3, r2
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	6812      	ldr	r2, [r2, #0]
 800649a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800649c:	430b      	orrs	r3, r1
 800649e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a9f      	ldr	r2, [pc, #636]	; (8006740 <UART_SetConfig+0x2dc>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d004      	beq.n	80064d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064cc:	4313      	orrs	r3, r2
 80064ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80064da:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	6812      	ldr	r2, [r2, #0]
 80064e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064e4:	430b      	orrs	r3, r1
 80064e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ee:	f023 010f 	bic.w	r1, r3, #15
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a90      	ldr	r2, [pc, #576]	; (8006744 <UART_SetConfig+0x2e0>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d125      	bne.n	8006554 <UART_SetConfig+0xf0>
 8006508:	4b8f      	ldr	r3, [pc, #572]	; (8006748 <UART_SetConfig+0x2e4>)
 800650a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800650e:	f003 0303 	and.w	r3, r3, #3
 8006512:	2b03      	cmp	r3, #3
 8006514:	d81a      	bhi.n	800654c <UART_SetConfig+0xe8>
 8006516:	a201      	add	r2, pc, #4	; (adr r2, 800651c <UART_SetConfig+0xb8>)
 8006518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651c:	0800652d 	.word	0x0800652d
 8006520:	0800653d 	.word	0x0800653d
 8006524:	08006535 	.word	0x08006535
 8006528:	08006545 	.word	0x08006545
 800652c:	2301      	movs	r3, #1
 800652e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006532:	e116      	b.n	8006762 <UART_SetConfig+0x2fe>
 8006534:	2302      	movs	r3, #2
 8006536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800653a:	e112      	b.n	8006762 <UART_SetConfig+0x2fe>
 800653c:	2304      	movs	r3, #4
 800653e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006542:	e10e      	b.n	8006762 <UART_SetConfig+0x2fe>
 8006544:	2308      	movs	r3, #8
 8006546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800654a:	e10a      	b.n	8006762 <UART_SetConfig+0x2fe>
 800654c:	2310      	movs	r3, #16
 800654e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006552:	e106      	b.n	8006762 <UART_SetConfig+0x2fe>
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a7c      	ldr	r2, [pc, #496]	; (800674c <UART_SetConfig+0x2e8>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d138      	bne.n	80065d0 <UART_SetConfig+0x16c>
 800655e:	4b7a      	ldr	r3, [pc, #488]	; (8006748 <UART_SetConfig+0x2e4>)
 8006560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006564:	f003 030c 	and.w	r3, r3, #12
 8006568:	2b0c      	cmp	r3, #12
 800656a:	d82d      	bhi.n	80065c8 <UART_SetConfig+0x164>
 800656c:	a201      	add	r2, pc, #4	; (adr r2, 8006574 <UART_SetConfig+0x110>)
 800656e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006572:	bf00      	nop
 8006574:	080065a9 	.word	0x080065a9
 8006578:	080065c9 	.word	0x080065c9
 800657c:	080065c9 	.word	0x080065c9
 8006580:	080065c9 	.word	0x080065c9
 8006584:	080065b9 	.word	0x080065b9
 8006588:	080065c9 	.word	0x080065c9
 800658c:	080065c9 	.word	0x080065c9
 8006590:	080065c9 	.word	0x080065c9
 8006594:	080065b1 	.word	0x080065b1
 8006598:	080065c9 	.word	0x080065c9
 800659c:	080065c9 	.word	0x080065c9
 80065a0:	080065c9 	.word	0x080065c9
 80065a4:	080065c1 	.word	0x080065c1
 80065a8:	2300      	movs	r3, #0
 80065aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ae:	e0d8      	b.n	8006762 <UART_SetConfig+0x2fe>
 80065b0:	2302      	movs	r3, #2
 80065b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065b6:	e0d4      	b.n	8006762 <UART_SetConfig+0x2fe>
 80065b8:	2304      	movs	r3, #4
 80065ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065be:	e0d0      	b.n	8006762 <UART_SetConfig+0x2fe>
 80065c0:	2308      	movs	r3, #8
 80065c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065c6:	e0cc      	b.n	8006762 <UART_SetConfig+0x2fe>
 80065c8:	2310      	movs	r3, #16
 80065ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ce:	e0c8      	b.n	8006762 <UART_SetConfig+0x2fe>
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a5e      	ldr	r2, [pc, #376]	; (8006750 <UART_SetConfig+0x2ec>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d125      	bne.n	8006626 <UART_SetConfig+0x1c2>
 80065da:	4b5b      	ldr	r3, [pc, #364]	; (8006748 <UART_SetConfig+0x2e4>)
 80065dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80065e4:	2b30      	cmp	r3, #48	; 0x30
 80065e6:	d016      	beq.n	8006616 <UART_SetConfig+0x1b2>
 80065e8:	2b30      	cmp	r3, #48	; 0x30
 80065ea:	d818      	bhi.n	800661e <UART_SetConfig+0x1ba>
 80065ec:	2b20      	cmp	r3, #32
 80065ee:	d00a      	beq.n	8006606 <UART_SetConfig+0x1a2>
 80065f0:	2b20      	cmp	r3, #32
 80065f2:	d814      	bhi.n	800661e <UART_SetConfig+0x1ba>
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d002      	beq.n	80065fe <UART_SetConfig+0x19a>
 80065f8:	2b10      	cmp	r3, #16
 80065fa:	d008      	beq.n	800660e <UART_SetConfig+0x1aa>
 80065fc:	e00f      	b.n	800661e <UART_SetConfig+0x1ba>
 80065fe:	2300      	movs	r3, #0
 8006600:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006604:	e0ad      	b.n	8006762 <UART_SetConfig+0x2fe>
 8006606:	2302      	movs	r3, #2
 8006608:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800660c:	e0a9      	b.n	8006762 <UART_SetConfig+0x2fe>
 800660e:	2304      	movs	r3, #4
 8006610:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006614:	e0a5      	b.n	8006762 <UART_SetConfig+0x2fe>
 8006616:	2308      	movs	r3, #8
 8006618:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800661c:	e0a1      	b.n	8006762 <UART_SetConfig+0x2fe>
 800661e:	2310      	movs	r3, #16
 8006620:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006624:	e09d      	b.n	8006762 <UART_SetConfig+0x2fe>
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a4a      	ldr	r2, [pc, #296]	; (8006754 <UART_SetConfig+0x2f0>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d125      	bne.n	800667c <UART_SetConfig+0x218>
 8006630:	4b45      	ldr	r3, [pc, #276]	; (8006748 <UART_SetConfig+0x2e4>)
 8006632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006636:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800663a:	2bc0      	cmp	r3, #192	; 0xc0
 800663c:	d016      	beq.n	800666c <UART_SetConfig+0x208>
 800663e:	2bc0      	cmp	r3, #192	; 0xc0
 8006640:	d818      	bhi.n	8006674 <UART_SetConfig+0x210>
 8006642:	2b80      	cmp	r3, #128	; 0x80
 8006644:	d00a      	beq.n	800665c <UART_SetConfig+0x1f8>
 8006646:	2b80      	cmp	r3, #128	; 0x80
 8006648:	d814      	bhi.n	8006674 <UART_SetConfig+0x210>
 800664a:	2b00      	cmp	r3, #0
 800664c:	d002      	beq.n	8006654 <UART_SetConfig+0x1f0>
 800664e:	2b40      	cmp	r3, #64	; 0x40
 8006650:	d008      	beq.n	8006664 <UART_SetConfig+0x200>
 8006652:	e00f      	b.n	8006674 <UART_SetConfig+0x210>
 8006654:	2300      	movs	r3, #0
 8006656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800665a:	e082      	b.n	8006762 <UART_SetConfig+0x2fe>
 800665c:	2302      	movs	r3, #2
 800665e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006662:	e07e      	b.n	8006762 <UART_SetConfig+0x2fe>
 8006664:	2304      	movs	r3, #4
 8006666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800666a:	e07a      	b.n	8006762 <UART_SetConfig+0x2fe>
 800666c:	2308      	movs	r3, #8
 800666e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006672:	e076      	b.n	8006762 <UART_SetConfig+0x2fe>
 8006674:	2310      	movs	r3, #16
 8006676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800667a:	e072      	b.n	8006762 <UART_SetConfig+0x2fe>
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a35      	ldr	r2, [pc, #212]	; (8006758 <UART_SetConfig+0x2f4>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d12a      	bne.n	80066dc <UART_SetConfig+0x278>
 8006686:	4b30      	ldr	r3, [pc, #192]	; (8006748 <UART_SetConfig+0x2e4>)
 8006688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800668c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006690:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006694:	d01a      	beq.n	80066cc <UART_SetConfig+0x268>
 8006696:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800669a:	d81b      	bhi.n	80066d4 <UART_SetConfig+0x270>
 800669c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066a0:	d00c      	beq.n	80066bc <UART_SetConfig+0x258>
 80066a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066a6:	d815      	bhi.n	80066d4 <UART_SetConfig+0x270>
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d003      	beq.n	80066b4 <UART_SetConfig+0x250>
 80066ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066b0:	d008      	beq.n	80066c4 <UART_SetConfig+0x260>
 80066b2:	e00f      	b.n	80066d4 <UART_SetConfig+0x270>
 80066b4:	2300      	movs	r3, #0
 80066b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ba:	e052      	b.n	8006762 <UART_SetConfig+0x2fe>
 80066bc:	2302      	movs	r3, #2
 80066be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066c2:	e04e      	b.n	8006762 <UART_SetConfig+0x2fe>
 80066c4:	2304      	movs	r3, #4
 80066c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ca:	e04a      	b.n	8006762 <UART_SetConfig+0x2fe>
 80066cc:	2308      	movs	r3, #8
 80066ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066d2:	e046      	b.n	8006762 <UART_SetConfig+0x2fe>
 80066d4:	2310      	movs	r3, #16
 80066d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066da:	e042      	b.n	8006762 <UART_SetConfig+0x2fe>
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a17      	ldr	r2, [pc, #92]	; (8006740 <UART_SetConfig+0x2dc>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d13a      	bne.n	800675c <UART_SetConfig+0x2f8>
 80066e6:	4b18      	ldr	r3, [pc, #96]	; (8006748 <UART_SetConfig+0x2e4>)
 80066e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80066f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066f4:	d01a      	beq.n	800672c <UART_SetConfig+0x2c8>
 80066f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066fa:	d81b      	bhi.n	8006734 <UART_SetConfig+0x2d0>
 80066fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006700:	d00c      	beq.n	800671c <UART_SetConfig+0x2b8>
 8006702:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006706:	d815      	bhi.n	8006734 <UART_SetConfig+0x2d0>
 8006708:	2b00      	cmp	r3, #0
 800670a:	d003      	beq.n	8006714 <UART_SetConfig+0x2b0>
 800670c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006710:	d008      	beq.n	8006724 <UART_SetConfig+0x2c0>
 8006712:	e00f      	b.n	8006734 <UART_SetConfig+0x2d0>
 8006714:	2300      	movs	r3, #0
 8006716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800671a:	e022      	b.n	8006762 <UART_SetConfig+0x2fe>
 800671c:	2302      	movs	r3, #2
 800671e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006722:	e01e      	b.n	8006762 <UART_SetConfig+0x2fe>
 8006724:	2304      	movs	r3, #4
 8006726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800672a:	e01a      	b.n	8006762 <UART_SetConfig+0x2fe>
 800672c:	2308      	movs	r3, #8
 800672e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006732:	e016      	b.n	8006762 <UART_SetConfig+0x2fe>
 8006734:	2310      	movs	r3, #16
 8006736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800673a:	e012      	b.n	8006762 <UART_SetConfig+0x2fe>
 800673c:	cfff69f3 	.word	0xcfff69f3
 8006740:	40008000 	.word	0x40008000
 8006744:	40013800 	.word	0x40013800
 8006748:	40021000 	.word	0x40021000
 800674c:	40004400 	.word	0x40004400
 8006750:	40004800 	.word	0x40004800
 8006754:	40004c00 	.word	0x40004c00
 8006758:	40005000 	.word	0x40005000
 800675c:	2310      	movs	r3, #16
 800675e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4aae      	ldr	r2, [pc, #696]	; (8006a20 <UART_SetConfig+0x5bc>)
 8006768:	4293      	cmp	r3, r2
 800676a:	f040 8097 	bne.w	800689c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800676e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006772:	2b08      	cmp	r3, #8
 8006774:	d823      	bhi.n	80067be <UART_SetConfig+0x35a>
 8006776:	a201      	add	r2, pc, #4	; (adr r2, 800677c <UART_SetConfig+0x318>)
 8006778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677c:	080067a1 	.word	0x080067a1
 8006780:	080067bf 	.word	0x080067bf
 8006784:	080067a9 	.word	0x080067a9
 8006788:	080067bf 	.word	0x080067bf
 800678c:	080067af 	.word	0x080067af
 8006790:	080067bf 	.word	0x080067bf
 8006794:	080067bf 	.word	0x080067bf
 8006798:	080067bf 	.word	0x080067bf
 800679c:	080067b7 	.word	0x080067b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067a0:	f7fd ff7e 	bl	80046a0 <HAL_RCC_GetPCLK1Freq>
 80067a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067a6:	e010      	b.n	80067ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067a8:	4b9e      	ldr	r3, [pc, #632]	; (8006a24 <UART_SetConfig+0x5c0>)
 80067aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80067ac:	e00d      	b.n	80067ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067ae:	f7fd ff09 	bl	80045c4 <HAL_RCC_GetSysClockFreq>
 80067b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067b4:	e009      	b.n	80067ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80067bc:	e005      	b.n	80067ca <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80067be:	2300      	movs	r3, #0
 80067c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80067c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f000 8130 	beq.w	8006a32 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d6:	4a94      	ldr	r2, [pc, #592]	; (8006a28 <UART_SetConfig+0x5c4>)
 80067d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067dc:	461a      	mov	r2, r3
 80067de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80067e4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	4613      	mov	r3, r2
 80067ec:	005b      	lsls	r3, r3, #1
 80067ee:	4413      	add	r3, r2
 80067f0:	69ba      	ldr	r2, [r7, #24]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d305      	bcc.n	8006802 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067fc:	69ba      	ldr	r2, [r7, #24]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d903      	bls.n	800680a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006808:	e113      	b.n	8006a32 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680c:	2200      	movs	r2, #0
 800680e:	60bb      	str	r3, [r7, #8]
 8006810:	60fa      	str	r2, [r7, #12]
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006816:	4a84      	ldr	r2, [pc, #528]	; (8006a28 <UART_SetConfig+0x5c4>)
 8006818:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800681c:	b29b      	uxth	r3, r3
 800681e:	2200      	movs	r2, #0
 8006820:	603b      	str	r3, [r7, #0]
 8006822:	607a      	str	r2, [r7, #4]
 8006824:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006828:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800682c:	f7f9 fcf4 	bl	8000218 <__aeabi_uldivmod>
 8006830:	4602      	mov	r2, r0
 8006832:	460b      	mov	r3, r1
 8006834:	4610      	mov	r0, r2
 8006836:	4619      	mov	r1, r3
 8006838:	f04f 0200 	mov.w	r2, #0
 800683c:	f04f 0300 	mov.w	r3, #0
 8006840:	020b      	lsls	r3, r1, #8
 8006842:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006846:	0202      	lsls	r2, r0, #8
 8006848:	6979      	ldr	r1, [r7, #20]
 800684a:	6849      	ldr	r1, [r1, #4]
 800684c:	0849      	lsrs	r1, r1, #1
 800684e:	2000      	movs	r0, #0
 8006850:	460c      	mov	r4, r1
 8006852:	4605      	mov	r5, r0
 8006854:	eb12 0804 	adds.w	r8, r2, r4
 8006858:	eb43 0905 	adc.w	r9, r3, r5
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	469a      	mov	sl, r3
 8006864:	4693      	mov	fp, r2
 8006866:	4652      	mov	r2, sl
 8006868:	465b      	mov	r3, fp
 800686a:	4640      	mov	r0, r8
 800686c:	4649      	mov	r1, r9
 800686e:	f7f9 fcd3 	bl	8000218 <__aeabi_uldivmod>
 8006872:	4602      	mov	r2, r0
 8006874:	460b      	mov	r3, r1
 8006876:	4613      	mov	r3, r2
 8006878:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800687a:	6a3b      	ldr	r3, [r7, #32]
 800687c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006880:	d308      	bcc.n	8006894 <UART_SetConfig+0x430>
 8006882:	6a3b      	ldr	r3, [r7, #32]
 8006884:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006888:	d204      	bcs.n	8006894 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6a3a      	ldr	r2, [r7, #32]
 8006890:	60da      	str	r2, [r3, #12]
 8006892:	e0ce      	b.n	8006a32 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800689a:	e0ca      	b.n	8006a32 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	69db      	ldr	r3, [r3, #28]
 80068a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068a4:	d166      	bne.n	8006974 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80068a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80068aa:	2b08      	cmp	r3, #8
 80068ac:	d827      	bhi.n	80068fe <UART_SetConfig+0x49a>
 80068ae:	a201      	add	r2, pc, #4	; (adr r2, 80068b4 <UART_SetConfig+0x450>)
 80068b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b4:	080068d9 	.word	0x080068d9
 80068b8:	080068e1 	.word	0x080068e1
 80068bc:	080068e9 	.word	0x080068e9
 80068c0:	080068ff 	.word	0x080068ff
 80068c4:	080068ef 	.word	0x080068ef
 80068c8:	080068ff 	.word	0x080068ff
 80068cc:	080068ff 	.word	0x080068ff
 80068d0:	080068ff 	.word	0x080068ff
 80068d4:	080068f7 	.word	0x080068f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068d8:	f7fd fee2 	bl	80046a0 <HAL_RCC_GetPCLK1Freq>
 80068dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80068de:	e014      	b.n	800690a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068e0:	f7fd fef4 	bl	80046cc <HAL_RCC_GetPCLK2Freq>
 80068e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80068e6:	e010      	b.n	800690a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068e8:	4b4e      	ldr	r3, [pc, #312]	; (8006a24 <UART_SetConfig+0x5c0>)
 80068ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80068ec:	e00d      	b.n	800690a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068ee:	f7fd fe69 	bl	80045c4 <HAL_RCC_GetSysClockFreq>
 80068f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80068f4:	e009      	b.n	800690a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80068fc:	e005      	b.n	800690a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80068fe:	2300      	movs	r3, #0
 8006900:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006908:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800690a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 8090 	beq.w	8006a32 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006916:	4a44      	ldr	r2, [pc, #272]	; (8006a28 <UART_SetConfig+0x5c4>)
 8006918:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800691c:	461a      	mov	r2, r3
 800691e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006920:	fbb3 f3f2 	udiv	r3, r3, r2
 8006924:	005a      	lsls	r2, r3, #1
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	085b      	lsrs	r3, r3, #1
 800692c:	441a      	add	r2, r3
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	fbb2 f3f3 	udiv	r3, r2, r3
 8006936:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006938:	6a3b      	ldr	r3, [r7, #32]
 800693a:	2b0f      	cmp	r3, #15
 800693c:	d916      	bls.n	800696c <UART_SetConfig+0x508>
 800693e:	6a3b      	ldr	r3, [r7, #32]
 8006940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006944:	d212      	bcs.n	800696c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	b29b      	uxth	r3, r3
 800694a:	f023 030f 	bic.w	r3, r3, #15
 800694e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006950:	6a3b      	ldr	r3, [r7, #32]
 8006952:	085b      	lsrs	r3, r3, #1
 8006954:	b29b      	uxth	r3, r3
 8006956:	f003 0307 	and.w	r3, r3, #7
 800695a:	b29a      	uxth	r2, r3
 800695c:	8bfb      	ldrh	r3, [r7, #30]
 800695e:	4313      	orrs	r3, r2
 8006960:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	8bfa      	ldrh	r2, [r7, #30]
 8006968:	60da      	str	r2, [r3, #12]
 800696a:	e062      	b.n	8006a32 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006972:	e05e      	b.n	8006a32 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006974:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006978:	2b08      	cmp	r3, #8
 800697a:	d828      	bhi.n	80069ce <UART_SetConfig+0x56a>
 800697c:	a201      	add	r2, pc, #4	; (adr r2, 8006984 <UART_SetConfig+0x520>)
 800697e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006982:	bf00      	nop
 8006984:	080069a9 	.word	0x080069a9
 8006988:	080069b1 	.word	0x080069b1
 800698c:	080069b9 	.word	0x080069b9
 8006990:	080069cf 	.word	0x080069cf
 8006994:	080069bf 	.word	0x080069bf
 8006998:	080069cf 	.word	0x080069cf
 800699c:	080069cf 	.word	0x080069cf
 80069a0:	080069cf 	.word	0x080069cf
 80069a4:	080069c7 	.word	0x080069c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069a8:	f7fd fe7a 	bl	80046a0 <HAL_RCC_GetPCLK1Freq>
 80069ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069ae:	e014      	b.n	80069da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069b0:	f7fd fe8c 	bl	80046cc <HAL_RCC_GetPCLK2Freq>
 80069b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069b6:	e010      	b.n	80069da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069b8:	4b1a      	ldr	r3, [pc, #104]	; (8006a24 <UART_SetConfig+0x5c0>)
 80069ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80069bc:	e00d      	b.n	80069da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069be:	f7fd fe01 	bl	80045c4 <HAL_RCC_GetSysClockFreq>
 80069c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069c4:	e009      	b.n	80069da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80069cc:	e005      	b.n	80069da <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80069ce:	2300      	movs	r3, #0
 80069d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80069d8:	bf00      	nop
    }

    if (pclk != 0U)
 80069da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d028      	beq.n	8006a32 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e4:	4a10      	ldr	r2, [pc, #64]	; (8006a28 <UART_SetConfig+0x5c4>)
 80069e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069ea:	461a      	mov	r2, r3
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	085b      	lsrs	r3, r3, #1
 80069f8:	441a      	add	r2, r3
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a02:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	2b0f      	cmp	r3, #15
 8006a08:	d910      	bls.n	8006a2c <UART_SetConfig+0x5c8>
 8006a0a:	6a3b      	ldr	r3, [r7, #32]
 8006a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a10:	d20c      	bcs.n	8006a2c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a12:	6a3b      	ldr	r3, [r7, #32]
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	60da      	str	r2, [r3, #12]
 8006a1c:	e009      	b.n	8006a32 <UART_SetConfig+0x5ce>
 8006a1e:	bf00      	nop
 8006a20:	40008000 	.word	0x40008000
 8006a24:	00f42400 	.word	0x00f42400
 8006a28:	08007128 	.word	0x08007128
      }
      else
      {
        ret = HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	2200      	movs	r2, #0
 8006a46:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006a4e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3730      	adds	r7, #48	; 0x30
 8006a56:	46bd      	mov	sp, r7
 8006a58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006a5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a68:	f003 0308 	and.w	r3, r3, #8
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00a      	beq.n	8006a86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	430a      	orrs	r2, r1
 8006a84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00a      	beq.n	8006aa8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	430a      	orrs	r2, r1
 8006aa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aac:	f003 0302 	and.w	r3, r3, #2
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00a      	beq.n	8006aca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ace:	f003 0304 	and.w	r3, r3, #4
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00a      	beq.n	8006aec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af0:	f003 0310 	and.w	r3, r3, #16
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00a      	beq.n	8006b0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	430a      	orrs	r2, r1
 8006b0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b12:	f003 0320 	and.w	r3, r3, #32
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00a      	beq.n	8006b30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	430a      	orrs	r2, r1
 8006b2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d01a      	beq.n	8006b72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	430a      	orrs	r2, r1
 8006b50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b5a:	d10a      	bne.n	8006b72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00a      	beq.n	8006b94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	430a      	orrs	r2, r1
 8006b92:	605a      	str	r2, [r3, #4]
  }
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b098      	sub	sp, #96	; 0x60
 8006ba4:	af02      	add	r7, sp, #8
 8006ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006bb0:	f7fa fb84 	bl	80012bc <HAL_GetTick>
 8006bb4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 0308 	and.w	r3, r3, #8
 8006bc0:	2b08      	cmp	r3, #8
 8006bc2:	d12f      	bne.n	8006c24 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f88e 	bl	8006cf4 <UART_WaitOnFlagUntilTimeout>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d022      	beq.n	8006c24 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be6:	e853 3f00 	ldrex	r3, [r3]
 8006bea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bf2:	653b      	str	r3, [r7, #80]	; 0x50
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bfc:	647b      	str	r3, [r7, #68]	; 0x44
 8006bfe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c04:	e841 2300 	strex	r3, r2, [r1]
 8006c08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1e6      	bne.n	8006bde <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2220      	movs	r2, #32
 8006c14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e063      	b.n	8006cec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0304 	and.w	r3, r3, #4
 8006c2e:	2b04      	cmp	r3, #4
 8006c30:	d149      	bne.n	8006cc6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c32:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 f857 	bl	8006cf4 <UART_WaitOnFlagUntilTimeout>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d03c      	beq.n	8006cc6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c54:	e853 3f00 	ldrex	r3, [r3]
 8006c58:	623b      	str	r3, [r7, #32]
   return(result);
 8006c5a:	6a3b      	ldr	r3, [r7, #32]
 8006c5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	461a      	mov	r2, r3
 8006c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c6a:	633b      	str	r3, [r7, #48]	; 0x30
 8006c6c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c72:	e841 2300 	strex	r3, r2, [r1]
 8006c76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1e6      	bne.n	8006c4c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	3308      	adds	r3, #8
 8006c84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	e853 3f00 	ldrex	r3, [r3]
 8006c8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f023 0301 	bic.w	r3, r3, #1
 8006c94:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	3308      	adds	r3, #8
 8006c9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c9e:	61fa      	str	r2, [r7, #28]
 8006ca0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca2:	69b9      	ldr	r1, [r7, #24]
 8006ca4:	69fa      	ldr	r2, [r7, #28]
 8006ca6:	e841 2300 	strex	r3, r2, [r1]
 8006caa:	617b      	str	r3, [r7, #20]
   return(result);
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1e5      	bne.n	8006c7e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e012      	b.n	8006cec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2220      	movs	r2, #32
 8006cca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2220      	movs	r2, #32
 8006cd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3758      	adds	r7, #88	; 0x58
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	603b      	str	r3, [r7, #0]
 8006d00:	4613      	mov	r3, r2
 8006d02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d04:	e04f      	b.n	8006da6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d0c:	d04b      	beq.n	8006da6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d0e:	f7fa fad5 	bl	80012bc <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	69ba      	ldr	r2, [r7, #24]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d302      	bcc.n	8006d24 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d101      	bne.n	8006d28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d24:	2303      	movs	r3, #3
 8006d26:	e04e      	b.n	8006dc6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0304 	and.w	r3, r3, #4
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d037      	beq.n	8006da6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	2b80      	cmp	r3, #128	; 0x80
 8006d3a:	d034      	beq.n	8006da6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	2b40      	cmp	r3, #64	; 0x40
 8006d40:	d031      	beq.n	8006da6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	69db      	ldr	r3, [r3, #28]
 8006d48:	f003 0308 	and.w	r3, r3, #8
 8006d4c:	2b08      	cmp	r3, #8
 8006d4e:	d110      	bne.n	8006d72 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2208      	movs	r2, #8
 8006d56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f000 f838 	bl	8006dce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2208      	movs	r2, #8
 8006d62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e029      	b.n	8006dc6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	69db      	ldr	r3, [r3, #28]
 8006d78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d80:	d111      	bne.n	8006da6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f000 f81e 	bl	8006dce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2220      	movs	r2, #32
 8006d96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e00f      	b.n	8006dc6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	69da      	ldr	r2, [r3, #28]
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	4013      	ands	r3, r2
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	bf0c      	ite	eq
 8006db6:	2301      	moveq	r3, #1
 8006db8:	2300      	movne	r3, #0
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	79fb      	ldrb	r3, [r7, #7]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d0a0      	beq.n	8006d06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b095      	sub	sp, #84	; 0x54
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dde:	e853 3f00 	ldrex	r3, [r3]
 8006de2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	461a      	mov	r2, r3
 8006df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006df4:	643b      	str	r3, [r7, #64]	; 0x40
 8006df6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006dfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006dfc:	e841 2300 	strex	r3, r2, [r1]
 8006e00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1e6      	bne.n	8006dd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	3308      	adds	r3, #8
 8006e0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e10:	6a3b      	ldr	r3, [r7, #32]
 8006e12:	e853 3f00 	ldrex	r3, [r3]
 8006e16:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e1e:	f023 0301 	bic.w	r3, r3, #1
 8006e22:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	3308      	adds	r3, #8
 8006e2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e34:	e841 2300 	strex	r3, r2, [r1]
 8006e38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1e3      	bne.n	8006e08 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d118      	bne.n	8006e7a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	e853 3f00 	ldrex	r3, [r3]
 8006e54:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	f023 0310 	bic.w	r3, r3, #16
 8006e5c:	647b      	str	r3, [r7, #68]	; 0x44
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	461a      	mov	r2, r3
 8006e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e66:	61bb      	str	r3, [r7, #24]
 8006e68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6a:	6979      	ldr	r1, [r7, #20]
 8006e6c:	69ba      	ldr	r2, [r7, #24]
 8006e6e:	e841 2300 	strex	r3, r2, [r1]
 8006e72:	613b      	str	r3, [r7, #16]
   return(result);
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1e6      	bne.n	8006e48 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2220      	movs	r2, #32
 8006e7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006e8e:	bf00      	nop
 8006e90:	3754      	adds	r7, #84	; 0x54
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b085      	sub	sp, #20
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d101      	bne.n	8006eb0 <HAL_UARTEx_DisableFifoMode+0x16>
 8006eac:	2302      	movs	r3, #2
 8006eae:	e027      	b.n	8006f00 <HAL_UARTEx_DisableFifoMode+0x66>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2224      	movs	r2, #36	; 0x24
 8006ebc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f022 0201 	bic.w	r2, r2, #1
 8006ed6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006ede:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2220      	movs	r2, #32
 8006ef2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d101      	bne.n	8006f24 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006f20:	2302      	movs	r3, #2
 8006f22:	e02d      	b.n	8006f80 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2224      	movs	r2, #36	; 0x24
 8006f30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f022 0201 	bic.w	r2, r2, #1
 8006f4a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	683a      	ldr	r2, [r7, #0]
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f84f 	bl	8007004 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2220      	movs	r2, #32
 8006f72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d101      	bne.n	8006fa0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	e02d      	b.n	8006ffc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2224      	movs	r2, #36	; 0x24
 8006fac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 0201 	bic.w	r2, r2, #1
 8006fc6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	683a      	ldr	r2, [r7, #0]
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 f811 	bl	8007004 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2220      	movs	r2, #32
 8006fee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007010:	2b00      	cmp	r3, #0
 8007012:	d108      	bne.n	8007026 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007024:	e031      	b.n	800708a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007026:	2308      	movs	r3, #8
 8007028:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800702a:	2308      	movs	r3, #8
 800702c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	0e5b      	lsrs	r3, r3, #25
 8007036:	b2db      	uxtb	r3, r3
 8007038:	f003 0307 	and.w	r3, r3, #7
 800703c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	0f5b      	lsrs	r3, r3, #29
 8007046:	b2db      	uxtb	r3, r3
 8007048:	f003 0307 	and.w	r3, r3, #7
 800704c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800704e:	7bbb      	ldrb	r3, [r7, #14]
 8007050:	7b3a      	ldrb	r2, [r7, #12]
 8007052:	4911      	ldr	r1, [pc, #68]	; (8007098 <UARTEx_SetNbDataToProcess+0x94>)
 8007054:	5c8a      	ldrb	r2, [r1, r2]
 8007056:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800705a:	7b3a      	ldrb	r2, [r7, #12]
 800705c:	490f      	ldr	r1, [pc, #60]	; (800709c <UARTEx_SetNbDataToProcess+0x98>)
 800705e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007060:	fb93 f3f2 	sdiv	r3, r3, r2
 8007064:	b29a      	uxth	r2, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800706c:	7bfb      	ldrb	r3, [r7, #15]
 800706e:	7b7a      	ldrb	r2, [r7, #13]
 8007070:	4909      	ldr	r1, [pc, #36]	; (8007098 <UARTEx_SetNbDataToProcess+0x94>)
 8007072:	5c8a      	ldrb	r2, [r1, r2]
 8007074:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007078:	7b7a      	ldrb	r2, [r7, #13]
 800707a:	4908      	ldr	r1, [pc, #32]	; (800709c <UARTEx_SetNbDataToProcess+0x98>)
 800707c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800707e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007082:	b29a      	uxth	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800708a:	bf00      	nop
 800708c:	3714      	adds	r7, #20
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	08007140 	.word	0x08007140
 800709c:	08007148 	.word	0x08007148

080070a0 <memset>:
 80070a0:	4402      	add	r2, r0
 80070a2:	4603      	mov	r3, r0
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d100      	bne.n	80070aa <memset+0xa>
 80070a8:	4770      	bx	lr
 80070aa:	f803 1b01 	strb.w	r1, [r3], #1
 80070ae:	e7f9      	b.n	80070a4 <memset+0x4>

080070b0 <__libc_init_array>:
 80070b0:	b570      	push	{r4, r5, r6, lr}
 80070b2:	4d0d      	ldr	r5, [pc, #52]	; (80070e8 <__libc_init_array+0x38>)
 80070b4:	4c0d      	ldr	r4, [pc, #52]	; (80070ec <__libc_init_array+0x3c>)
 80070b6:	1b64      	subs	r4, r4, r5
 80070b8:	10a4      	asrs	r4, r4, #2
 80070ba:	2600      	movs	r6, #0
 80070bc:	42a6      	cmp	r6, r4
 80070be:	d109      	bne.n	80070d4 <__libc_init_array+0x24>
 80070c0:	4d0b      	ldr	r5, [pc, #44]	; (80070f0 <__libc_init_array+0x40>)
 80070c2:	4c0c      	ldr	r4, [pc, #48]	; (80070f4 <__libc_init_array+0x44>)
 80070c4:	f000 f818 	bl	80070f8 <_init>
 80070c8:	1b64      	subs	r4, r4, r5
 80070ca:	10a4      	asrs	r4, r4, #2
 80070cc:	2600      	movs	r6, #0
 80070ce:	42a6      	cmp	r6, r4
 80070d0:	d105      	bne.n	80070de <__libc_init_array+0x2e>
 80070d2:	bd70      	pop	{r4, r5, r6, pc}
 80070d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80070d8:	4798      	blx	r3
 80070da:	3601      	adds	r6, #1
 80070dc:	e7ee      	b.n	80070bc <__libc_init_array+0xc>
 80070de:	f855 3b04 	ldr.w	r3, [r5], #4
 80070e2:	4798      	blx	r3
 80070e4:	3601      	adds	r6, #1
 80070e6:	e7f2      	b.n	80070ce <__libc_init_array+0x1e>
 80070e8:	08007158 	.word	0x08007158
 80070ec:	08007158 	.word	0x08007158
 80070f0:	08007158 	.word	0x08007158
 80070f4:	0800715c 	.word	0x0800715c

080070f8 <_init>:
 80070f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070fa:	bf00      	nop
 80070fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070fe:	bc08      	pop	{r3}
 8007100:	469e      	mov	lr, r3
 8007102:	4770      	bx	lr

08007104 <_fini>:
 8007104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007106:	bf00      	nop
 8007108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800710a:	bc08      	pop	{r3}
 800710c:	469e      	mov	lr, r3
 800710e:	4770      	bx	lr
