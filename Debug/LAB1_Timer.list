
LAB1_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ea4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800607c  0800607c  0001607c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060bc  080060bc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080060bc  080060bc  000160bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060c4  080060c4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060c4  080060c4  000160c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060c8  080060c8  000160c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080060cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  20000010  080060dc  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  080060dc  0002043c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000174b0  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a19  00000000  00000000  00037533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001470  00000000  00000000  00039f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ff8  00000000  00000000  0003b3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a3a  00000000  00000000  0003c3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000172ec  00000000  00000000  00063df2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e9ab  00000000  00000000  0007b0de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000058e0  00000000  00000000  00189a8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0018f36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006064 	.word	0x08006064

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08006064 	.word	0x08006064

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fc69 	bl	8000dee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f820 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f9c4 	bl	80008ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 f998 	bl	8000858 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000528:	f000 f8fe 	bl	8000728 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 800052c:	f000 f946 	bl	80007bc <MX_TIM2_Init>
  MX_ADC1_Init();
 8000530:	f000 f862 	bl	80005f8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2); //Interrupt
 8000534:	4807      	ldr	r0, [pc, #28]	; (8000554 <main+0x40>)
 8000536:	f004 f9c9 	bl	80048cc <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800053a:	217f      	movs	r1, #127	; 0x7f
 800053c:	4806      	ldr	r0, [pc, #24]	; (8000558 <main+0x44>)
 800053e:	f002 fa61 	bl	8002a04 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 300);
 8000542:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000546:	4905      	ldr	r1, [pc, #20]	; (800055c <main+0x48>)
 8000548:	4803      	ldr	r0, [pc, #12]	; (8000558 <main+0x44>)
 800054a:	f001 f8e3 	bl	8001714 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  micros();
 800054e:	f000 fa33 	bl	80009b8 <micros>
 8000552:	e7fc      	b.n	800054e <main+0x3a>
 8000554:	2000018c 	.word	0x2000018c
 8000558:	2000002c 	.word	0x2000002c
 800055c:	200001e0 	.word	0x200001e0

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	; 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0318 	add.w	r3, r7, #24
 800056a:	2238      	movs	r2, #56	; 0x38
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f005 fd4c 	bl	800600c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000582:	2000      	movs	r0, #0
 8000584:	f003 f91a 	bl	80037bc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000588:	2302      	movs	r3, #2
 800058a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000590:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000592:	2340      	movs	r3, #64	; 0x40
 8000594:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800059a:	2302      	movs	r3, #2
 800059c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800059e:	2304      	movs	r3, #4
 80005a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005a2:	2355      	movs	r3, #85	; 0x55
 80005a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	f107 0318 	add.w	r3, r7, #24
 80005b6:	4618      	mov	r0, r3
 80005b8:	f003 f9b4 	bl	8003924 <HAL_RCC_OscConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005c2:	f000 fa3f 	bl	8000a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c6:	230f      	movs	r3, #15
 80005c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ca:	2303      	movs	r3, #3
 80005cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2104      	movs	r1, #4
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 fcb2 	bl	8003f48 <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005ea:	f000 fa2b 	bl	8000a44 <Error_Handler>
  }
}
 80005ee:	bf00      	nop
 80005f0:	3750      	adds	r7, #80	; 0x50
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08c      	sub	sp, #48	; 0x30
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2220      	movs	r2, #32
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f005 fcfb 	bl	800600c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000616:	4b40      	ldr	r3, [pc, #256]	; (8000718 <MX_ADC1_Init+0x120>)
 8000618:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800061c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800061e:	4b3e      	ldr	r3, [pc, #248]	; (8000718 <MX_ADC1_Init+0x120>)
 8000620:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000624:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000626:	4b3c      	ldr	r3, [pc, #240]	; (8000718 <MX_ADC1_Init+0x120>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800062c:	4b3a      	ldr	r3, [pc, #232]	; (8000718 <MX_ADC1_Init+0x120>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000632:	4b39      	ldr	r3, [pc, #228]	; (8000718 <MX_ADC1_Init+0x120>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000638:	4b37      	ldr	r3, [pc, #220]	; (8000718 <MX_ADC1_Init+0x120>)
 800063a:	2201      	movs	r2, #1
 800063c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800063e:	4b36      	ldr	r3, [pc, #216]	; (8000718 <MX_ADC1_Init+0x120>)
 8000640:	2204      	movs	r2, #4
 8000642:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000644:	4b34      	ldr	r3, [pc, #208]	; (8000718 <MX_ADC1_Init+0x120>)
 8000646:	2200      	movs	r2, #0
 8000648:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800064a:	4b33      	ldr	r3, [pc, #204]	; (8000718 <MX_ADC1_Init+0x120>)
 800064c:	2201      	movs	r2, #1
 800064e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8000650:	4b31      	ldr	r3, [pc, #196]	; (8000718 <MX_ADC1_Init+0x120>)
 8000652:	2203      	movs	r2, #3
 8000654:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000656:	4b30      	ldr	r3, [pc, #192]	; (8000718 <MX_ADC1_Init+0x120>)
 8000658:	2200      	movs	r2, #0
 800065a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800065e:	4b2e      	ldr	r3, [pc, #184]	; (8000718 <MX_ADC1_Init+0x120>)
 8000660:	2200      	movs	r2, #0
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000664:	4b2c      	ldr	r3, [pc, #176]	; (8000718 <MX_ADC1_Init+0x120>)
 8000666:	2200      	movs	r2, #0
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800066a:	4b2b      	ldr	r3, [pc, #172]	; (8000718 <MX_ADC1_Init+0x120>)
 800066c:	2201      	movs	r2, #1
 800066e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000672:	4b29      	ldr	r3, [pc, #164]	; (8000718 <MX_ADC1_Init+0x120>)
 8000674:	2200      	movs	r2, #0
 8000676:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000678:	4b27      	ldr	r3, [pc, #156]	; (8000718 <MX_ADC1_Init+0x120>)
 800067a:	2200      	movs	r2, #0
 800067c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000680:	4825      	ldr	r0, [pc, #148]	; (8000718 <MX_ADC1_Init+0x120>)
 8000682:	f000 fe8b 	bl	800139c <HAL_ADC_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800068c:	f000 f9da 	bl	8000a44 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000690:	2300      	movs	r3, #0
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000698:	4619      	mov	r1, r3
 800069a:	481f      	ldr	r0, [pc, #124]	; (8000718 <MX_ADC1_Init+0x120>)
 800069c:	f002 fa46 	bl	8002b2c <HAL_ADCEx_MultiModeConfigChannel>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80006a6:	f000 f9cd 	bl	8000a44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006aa:	4b1c      	ldr	r3, [pc, #112]	; (800071c <MX_ADC1_Init+0x124>)
 80006ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006ae:	2306      	movs	r3, #6
 80006b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80006b2:	2307      	movs	r3, #7
 80006b4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006b6:	237f      	movs	r3, #127	; 0x7f
 80006b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ba:	2304      	movs	r3, #4
 80006bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	4619      	mov	r1, r3
 80006c6:	4814      	ldr	r0, [pc, #80]	; (8000718 <MX_ADC1_Init+0x120>)
 80006c8:	f001 fb80 	bl	8001dcc <HAL_ADC_ConfigChannel>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006d2:	f000 f9b7 	bl	8000a44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_ADC1_Init+0x128>)
 80006d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006da:	230c      	movs	r3, #12
 80006dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	4619      	mov	r1, r3
 80006e2:	480d      	ldr	r0, [pc, #52]	; (8000718 <MX_ADC1_Init+0x120>)
 80006e4:	f001 fb72 	bl	8001dcc <HAL_ADC_ConfigChannel>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80006ee:	f000 f9a9 	bl	8000a44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_ADC1_Init+0x12c>)
 80006f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006f6:	2312      	movs	r3, #18
 80006f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	4619      	mov	r1, r3
 80006fe:	4806      	ldr	r0, [pc, #24]	; (8000718 <MX_ADC1_Init+0x120>)
 8000700:	f001 fb64 	bl	8001dcc <HAL_ADC_ConfigChannel>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800070a:	f000 f99b 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	3730      	adds	r7, #48	; 0x30
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	2000002c 	.word	0x2000002c
 800071c:	04300002 	.word	0x04300002
 8000720:	08600004 	.word	0x08600004
 8000724:	3ef08000 	.word	0x3ef08000

08000728 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800072c:	4b21      	ldr	r3, [pc, #132]	; (80007b4 <MX_LPUART1_UART_Init+0x8c>)
 800072e:	4a22      	ldr	r2, [pc, #136]	; (80007b8 <MX_LPUART1_UART_Init+0x90>)
 8000730:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000732:	4b20      	ldr	r3, [pc, #128]	; (80007b4 <MX_LPUART1_UART_Init+0x8c>)
 8000734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000738:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b1e      	ldr	r3, [pc, #120]	; (80007b4 <MX_LPUART1_UART_Init+0x8c>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <MX_LPUART1_UART_Init+0x8c>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000746:	4b1b      	ldr	r3, [pc, #108]	; (80007b4 <MX_LPUART1_UART_Init+0x8c>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <MX_LPUART1_UART_Init+0x8c>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <MX_LPUART1_UART_Init+0x8c>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000758:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <MX_LPUART1_UART_Init+0x8c>)
 800075a:	2200      	movs	r2, #0
 800075c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <MX_LPUART1_UART_Init+0x8c>)
 8000760:	2200      	movs	r2, #0
 8000762:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000764:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <MX_LPUART1_UART_Init+0x8c>)
 8000766:	2200      	movs	r2, #0
 8000768:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800076a:	4812      	ldr	r0, [pc, #72]	; (80007b4 <MX_LPUART1_UART_Init+0x8c>)
 800076c:	f004 fde0 	bl	8005330 <HAL_UART_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000776:	f000 f965 	bl	8000a44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800077a:	2100      	movs	r1, #0
 800077c:	480d      	ldr	r0, [pc, #52]	; (80007b4 <MX_LPUART1_UART_Init+0x8c>)
 800077e:	f005 fb7b 	bl	8005e78 <HAL_UARTEx_SetTxFifoThreshold>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000788:	f000 f95c 	bl	8000a44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800078c:	2100      	movs	r1, #0
 800078e:	4809      	ldr	r0, [pc, #36]	; (80007b4 <MX_LPUART1_UART_Init+0x8c>)
 8000790:	f005 fbb0 	bl	8005ef4 <HAL_UARTEx_SetRxFifoThreshold>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800079a:	f000 f953 	bl	8000a44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_LPUART1_UART_Init+0x8c>)
 80007a0:	f005 fb31 	bl	8005e06 <HAL_UARTEx_DisableFifoMode>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80007aa:	f000 f94b 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200000f8 	.word	0x200000f8
 80007b8:	40008000 	.word	0x40008000

080007bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c2:	f107 0310 	add.w	r3, r7, #16
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007da:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <MX_TIM2_Init+0x98>)
 80007dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80007e2:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <MX_TIM2_Init+0x98>)
 80007e4:	22a9      	movs	r2, #169	; 0xa9
 80007e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e8:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <MX_TIM2_Init+0x98>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80007ee:	4b19      	ldr	r3, [pc, #100]	; (8000854 <MX_TIM2_Init+0x98>)
 80007f0:	f04f 32ff 	mov.w	r2, #4294967295
 80007f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f6:	4b17      	ldr	r3, [pc, #92]	; (8000854 <MX_TIM2_Init+0x98>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <MX_TIM2_Init+0x98>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000802:	4814      	ldr	r0, [pc, #80]	; (8000854 <MX_TIM2_Init+0x98>)
 8000804:	f004 f80a 	bl	800481c <HAL_TIM_Base_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800080e:	f000 f919 	bl	8000a44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000816:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000818:	f107 0310 	add.w	r3, r7, #16
 800081c:	4619      	mov	r1, r3
 800081e:	480d      	ldr	r0, [pc, #52]	; (8000854 <MX_TIM2_Init+0x98>)
 8000820:	f004 fa1c 	bl	8004c5c <HAL_TIM_ConfigClockSource>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800082a:	f000 f90b 	bl	8000a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	4619      	mov	r1, r3
 800083a:	4806      	ldr	r0, [pc, #24]	; (8000854 <MX_TIM2_Init+0x98>)
 800083c:	f004 fc9c 	bl	8005178 <HAL_TIMEx_MasterConfigSynchronization>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000846:	f000 f8fd 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	3720      	adds	r7, #32
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	2000018c 	.word	0x2000018c

08000858 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_DMA_Init+0x50>)
 8000860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000862:	4a11      	ldr	r2, [pc, #68]	; (80008a8 <MX_DMA_Init+0x50>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	6493      	str	r3, [r2, #72]	; 0x48
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_DMA_Init+0x50>)
 800086c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_DMA_Init+0x50>)
 8000878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800087a:	4a0b      	ldr	r2, [pc, #44]	; (80008a8 <MX_DMA_Init+0x50>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6493      	str	r3, [r2, #72]	; 0x48
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_DMA_Init+0x50>)
 8000884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2100      	movs	r1, #0
 8000892:	200b      	movs	r0, #11
 8000894:	f002 fb2d 	bl	8002ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000898:	200b      	movs	r0, #11
 800089a:	f002 fb44 	bl	8002f26 <HAL_NVIC_EnableIRQ>

}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40021000 	.word	0x40021000

080008ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	; 0x28
 80008b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c2:	4b2f      	ldr	r3, [pc, #188]	; (8000980 <MX_GPIO_Init+0xd4>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	4a2e      	ldr	r2, [pc, #184]	; (8000980 <MX_GPIO_Init+0xd4>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ce:	4b2c      	ldr	r3, [pc, #176]	; (8000980 <MX_GPIO_Init+0xd4>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008da:	4b29      	ldr	r3, [pc, #164]	; (8000980 <MX_GPIO_Init+0xd4>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	4a28      	ldr	r2, [pc, #160]	; (8000980 <MX_GPIO_Init+0xd4>)
 80008e0:	f043 0320 	orr.w	r3, r3, #32
 80008e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e6:	4b26      	ldr	r3, [pc, #152]	; (8000980 <MX_GPIO_Init+0xd4>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	f003 0320 	and.w	r3, r3, #32
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	4b23      	ldr	r3, [pc, #140]	; (8000980 <MX_GPIO_Init+0xd4>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	4a22      	ldr	r2, [pc, #136]	; (8000980 <MX_GPIO_Init+0xd4>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fe:	4b20      	ldr	r3, [pc, #128]	; (8000980 <MX_GPIO_Init+0xd4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	4b1d      	ldr	r3, [pc, #116]	; (8000980 <MX_GPIO_Init+0xd4>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	4a1c      	ldr	r2, [pc, #112]	; (8000980 <MX_GPIO_Init+0xd4>)
 8000910:	f043 0302 	orr.w	r3, r3, #2
 8000914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000916:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <MX_GPIO_Init+0xd4>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2120      	movs	r1, #32
 8000926:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092a:	f002 ff0b 	bl	8003744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800092e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000934:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4619      	mov	r1, r3
 8000944:	480f      	ldr	r0, [pc, #60]	; (8000984 <MX_GPIO_Init+0xd8>)
 8000946:	f002 fd7b 	bl	8003440 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800094a:	2320      	movs	r3, #32
 800094c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	2301      	movs	r3, #1
 8000950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4619      	mov	r1, r3
 8000960:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000964:	f002 fd6c 	bl	8003440 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000968:	2200      	movs	r2, #0
 800096a:	2100      	movs	r1, #0
 800096c:	2028      	movs	r0, #40	; 0x28
 800096e:	f002 fac0 	bl	8002ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000972:	2028      	movs	r0, #40	; 0x28
 8000974:	f002 fad7 	bl	8002f26 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000978:	bf00      	nop
 800097a:	3728      	adds	r7, #40	; 0x28
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40021000 	.word	0x40021000
 8000984:	48000800 	.word	0x48000800

08000988 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a07      	ldr	r2, [pc, #28]	; (80009b0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d104      	bne.n	80009a2 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		counter++;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	3301      	adds	r3, #1
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80009a0:	6013      	str	r3, [r2, #0]
	}
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	2000018c 	.word	0x2000018c
 80009b4:	20000000 	.word	0x20000000

080009b8 <micros>:
void micros()
{
 80009b8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80009bc:	b087      	sub	sp, #28
 80009be:	af00      	add	r7, sp, #0
	timestamp = counter*(4294967295) + __HAL_TIM_GET_COUNTER(&htim2);
 80009c0:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <micros+0x80>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2200      	movs	r2, #0
 80009c6:	4698      	mov	r8, r3
 80009c8:	4691      	mov	r9, r2
 80009ca:	4642      	mov	r2, r8
 80009cc:	464b      	mov	r3, r9
 80009ce:	f04f 0400 	mov.w	r4, #0
 80009d2:	f04f 0500 	mov.w	r5, #0
 80009d6:	07dd      	lsls	r5, r3, #31
 80009d8:	ea45 0552 	orr.w	r5, r5, r2, lsr #1
 80009dc:	07d4      	lsls	r4, r2, #31
 80009de:	4622      	mov	r2, r4
 80009e0:	462b      	mov	r3, r5
 80009e2:	ebb2 0008 	subs.w	r0, r2, r8
 80009e6:	eb63 0109 	sbc.w	r1, r3, r9
 80009ea:	1803      	adds	r3, r0, r0
 80009ec:	603b      	str	r3, [r7, #0]
 80009ee:	eb41 0301 	adc.w	r3, r1, r1
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80009f8:	eb10 0a08 	adds.w	sl, r0, r8
 80009fc:	eb41 0b09 	adc.w	fp, r1, r9
 8000a00:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <micros+0x84>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a06:	2200      	movs	r2, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	617a      	str	r2, [r7, #20]
 8000a0c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000a10:	460b      	mov	r3, r1
 8000a12:	eb1a 0303 	adds.w	r3, sl, r3
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	4613      	mov	r3, r2
 8000a1a:	eb4b 0303 	adc.w	r3, fp, r3
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000a24:	4906      	ldr	r1, [pc, #24]	; (8000a40 <micros+0x88>)
 8000a26:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000a2a:	bf00      	nop
 8000a2c:	371c      	adds	r7, #28
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	20000000 	.word	0x20000000
 8000a3c:	2000018c 	.word	0x2000018c
 8000a40:	200001d8 	.word	0x200001d8

08000a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a48:	b672      	cpsid	i
}
 8000a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <Error_Handler+0x8>
	...

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <HAL_MspInit+0x44>)
 8000a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a5a:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <HAL_MspInit+0x44>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6613      	str	r3, [r2, #96]	; 0x60
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <HAL_MspInit+0x44>)
 8000a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <HAL_MspInit+0x44>)
 8000a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a72:	4a08      	ldr	r2, [pc, #32]	; (8000a94 <HAL_MspInit+0x44>)
 8000a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a78:	6593      	str	r3, [r2, #88]	; 0x58
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_MspInit+0x44>)
 8000a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a86:	f002 ff3d 	bl	8003904 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40021000 	.word	0x40021000

08000a98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b0a0      	sub	sp, #128	; 0x80
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ab0:	f107 0318 	add.w	r3, r7, #24
 8000ab4:	2254      	movs	r2, #84	; 0x54
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f005 faa7 	bl	800600c <memset>
  if(hadc->Instance==ADC1)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ac6:	d17f      	bne.n	8000bc8 <HAL_ADC_MspInit+0x130>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000ac8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000acc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000ace:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000ad2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ad4:	f107 0318 	add.w	r3, r7, #24
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f003 fc51 	bl	8004380 <HAL_RCCEx_PeriphCLKConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000ae4:	f7ff ffae 	bl	8000a44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000ae8:	4b39      	ldr	r3, [pc, #228]	; (8000bd0 <HAL_ADC_MspInit+0x138>)
 8000aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aec:	4a38      	ldr	r2, [pc, #224]	; (8000bd0 <HAL_ADC_MspInit+0x138>)
 8000aee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000af2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af4:	4b36      	ldr	r3, [pc, #216]	; (8000bd0 <HAL_ADC_MspInit+0x138>)
 8000af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b00:	4b33      	ldr	r3, [pc, #204]	; (8000bd0 <HAL_ADC_MspInit+0x138>)
 8000b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b04:	4a32      	ldr	r2, [pc, #200]	; (8000bd0 <HAL_ADC_MspInit+0x138>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0c:	4b30      	ldr	r3, [pc, #192]	; (8000bd0 <HAL_ADC_MspInit+0x138>)
 8000b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b10:	f003 0301 	and.w	r3, r3, #1
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b18:	4b2d      	ldr	r3, [pc, #180]	; (8000bd0 <HAL_ADC_MspInit+0x138>)
 8000b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1c:	4a2c      	ldr	r2, [pc, #176]	; (8000bd0 <HAL_ADC_MspInit+0x138>)
 8000b1e:	f043 0302 	orr.w	r3, r3, #2
 8000b22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b24:	4b2a      	ldr	r3, [pc, #168]	; (8000bd0 <HAL_ADC_MspInit+0x138>)
 8000b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b28:	f003 0302 	and.w	r3, r3, #2
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b30:	2303      	movs	r3, #3
 8000b32:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b34:	2303      	movs	r3, #3
 8000b36:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b40:	4619      	mov	r1, r3
 8000b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b46:	f002 fc7b 	bl	8003440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b56:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	481d      	ldr	r0, [pc, #116]	; (8000bd4 <HAL_ADC_MspInit+0x13c>)
 8000b5e:	f002 fc6f 	bl	8003440 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b62:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <HAL_ADC_MspInit+0x140>)
 8000b64:	4a1d      	ldr	r2, [pc, #116]	; (8000bdc <HAL_ADC_MspInit+0x144>)
 8000b66:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000b68:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <HAL_ADC_MspInit+0x140>)
 8000b6a:	2205      	movs	r2, #5
 8000b6c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <HAL_ADC_MspInit+0x140>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b74:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <HAL_ADC_MspInit+0x140>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b7a:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <HAL_ADC_MspInit+0x140>)
 8000b7c:	2280      	movs	r2, #128	; 0x80
 8000b7e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b80:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <HAL_ADC_MspInit+0x140>)
 8000b82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b86:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b88:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <HAL_ADC_MspInit+0x140>)
 8000b8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b8e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <HAL_ADC_MspInit+0x140>)
 8000b92:	2220      	movs	r2, #32
 8000b94:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <HAL_ADC_MspInit+0x140>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b9c:	480e      	ldr	r0, [pc, #56]	; (8000bd8 <HAL_ADC_MspInit+0x140>)
 8000b9e:	f002 f9dd 	bl	8002f5c <HAL_DMA_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8000ba8:	f7ff ff4c 	bl	8000a44 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <HAL_ADC_MspInit+0x140>)
 8000bb0:	655a      	str	r2, [r3, #84]	; 0x54
 8000bb2:	4a09      	ldr	r2, [pc, #36]	; (8000bd8 <HAL_ADC_MspInit+0x140>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2100      	movs	r1, #0
 8000bbc:	2012      	movs	r0, #18
 8000bbe:	f002 f998 	bl	8002ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000bc2:	2012      	movs	r0, #18
 8000bc4:	f002 f9af 	bl	8002f26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bc8:	bf00      	nop
 8000bca:	3780      	adds	r7, #128	; 0x80
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	48000400 	.word	0x48000400
 8000bd8:	20000098 	.word	0x20000098
 8000bdc:	40020008 	.word	0x40020008

08000be0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b09e      	sub	sp, #120	; 0x78
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bf8:	f107 0310 	add.w	r3, r7, #16
 8000bfc:	2254      	movs	r2, #84	; 0x54
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4618      	mov	r0, r3
 8000c02:	f005 fa03 	bl	800600c <memset>
  if(huart->Instance==LPUART1)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a1f      	ldr	r2, [pc, #124]	; (8000c88 <HAL_UART_MspInit+0xa8>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d136      	bne.n	8000c7e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c10:	2320      	movs	r3, #32
 8000c12:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c18:	f107 0310 	add.w	r3, r7, #16
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f003 fbaf 	bl	8004380 <HAL_RCCEx_PeriphCLKConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c28:	f7ff ff0c 	bl	8000a44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c2c:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <HAL_UART_MspInit+0xac>)
 8000c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c30:	4a16      	ldr	r2, [pc, #88]	; (8000c8c <HAL_UART_MspInit+0xac>)
 8000c32:	f043 0301 	orr.w	r3, r3, #1
 8000c36:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000c38:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <HAL_UART_MspInit+0xac>)
 8000c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c3c:	f003 0301 	and.w	r3, r3, #1
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <HAL_UART_MspInit+0xac>)
 8000c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c48:	4a10      	ldr	r2, [pc, #64]	; (8000c8c <HAL_UART_MspInit+0xac>)
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c50:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <HAL_UART_MspInit+0xac>)
 8000c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000c5c:	230c      	movs	r3, #12
 8000c5e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000c6c:	230c      	movs	r3, #12
 8000c6e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c74:	4619      	mov	r1, r3
 8000c76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7a:	f002 fbe1 	bl	8003440 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000c7e:	bf00      	nop
 8000c80:	3778      	adds	r7, #120	; 0x78
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40008000 	.word	0x40008000
 8000c8c:	40021000 	.word	0x40021000

08000c90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ca0:	d113      	bne.n	8000cca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <HAL_TIM_Base_MspInit+0x44>)
 8000ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca6:	4a0b      	ldr	r2, [pc, #44]	; (8000cd4 <HAL_TIM_Base_MspInit+0x44>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6593      	str	r3, [r2, #88]	; 0x58
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <HAL_TIM_Base_MspInit+0x44>)
 8000cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	201c      	movs	r0, #28
 8000cc0:	f002 f917 	bl	8002ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cc4:	201c      	movs	r0, #28
 8000cc6:	f002 f92e 	bl	8002f26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cca:	bf00      	nop
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cdc:	e7fe      	b.n	8000cdc <NMI_Handler+0x4>

08000cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <HardFault_Handler+0x4>

08000ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <MemManage_Handler+0x4>

08000cea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <BusFault_Handler+0x4>

08000cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <UsageFault_Handler+0x4>

08000cf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d24:	f000 f8b6 	bl	8000e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d30:	4802      	ldr	r0, [pc, #8]	; (8000d3c <DMA1_Channel1_IRQHandler+0x10>)
 8000d32:	f002 fa36 	bl	80031a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000098 	.word	0x20000098

08000d40 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000d44:	4802      	ldr	r0, [pc, #8]	; (8000d50 <ADC1_2_IRQHandler+0x10>)
 8000d46:	f000 fdb9 	bl	80018bc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	2000002c 	.word	0x2000002c

08000d54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d58:	4802      	ldr	r0, [pc, #8]	; (8000d64 <TIM2_IRQHandler+0x10>)
 8000d5a:	f003 fe2f 	bl	80049bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	2000018c 	.word	0x2000018c

08000d68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d6c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d70:	f002 fd00 	bl	8003774 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <SystemInit+0x20>)
 8000d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d82:	4a05      	ldr	r2, [pc, #20]	; (8000d98 <SystemInit+0x20>)
 8000d84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d9c:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d9e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000da0:	f7ff ffea 	bl	8000d78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da4:	480c      	ldr	r0, [pc, #48]	; (8000dd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000da6:	490d      	ldr	r1, [pc, #52]	; (8000ddc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000da8:	4a0d      	ldr	r2, [pc, #52]	; (8000de0 <LoopForever+0xe>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000dac:	e002      	b.n	8000db4 <LoopCopyDataInit>

08000dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db2:	3304      	adds	r3, #4

08000db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db8:	d3f9      	bcc.n	8000dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dba:	4a0a      	ldr	r2, [pc, #40]	; (8000de4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dbc:	4c0a      	ldr	r4, [pc, #40]	; (8000de8 <LoopForever+0x16>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc0:	e001      	b.n	8000dc6 <LoopFillZerobss>

08000dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc4:	3204      	adds	r2, #4

08000dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc8:	d3fb      	bcc.n	8000dc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dca:	f005 f927 	bl	800601c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dce:	f7ff fba1 	bl	8000514 <main>

08000dd2 <LoopForever>:

LoopForever:
    b LoopForever
 8000dd2:	e7fe      	b.n	8000dd2 <LoopForever>
  ldr   r0, =_estack
 8000dd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ddc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000de0:	080060cc 	.word	0x080060cc
  ldr r2, =_sbss
 8000de4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000de8:	2000043c 	.word	0x2000043c

08000dec <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dec:	e7fe      	b.n	8000dec <ADC3_IRQHandler>

08000dee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000df4:	2300      	movs	r3, #0
 8000df6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f002 f86f 	bl	8002edc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f000 f80e 	bl	8000e20 <HAL_InitTick>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d002      	beq.n	8000e10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	71fb      	strb	r3, [r7, #7]
 8000e0e:	e001      	b.n	8000e14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e10:	f7ff fe1e 	bl	8000a50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e14:	79fb      	ldrb	r3, [r7, #7]

}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e2c:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <HAL_InitTick+0x68>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d022      	beq.n	8000e7a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e34:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <HAL_InitTick+0x6c>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <HAL_InitTick+0x68>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e40:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f002 f87a 	bl	8002f42 <HAL_SYSTICK_Config>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d10f      	bne.n	8000e74 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b0f      	cmp	r3, #15
 8000e58:	d809      	bhi.n	8000e6e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e62:	f002 f846 	bl	8002ef2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e66:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <HAL_InitTick+0x70>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6013      	str	r3, [r2, #0]
 8000e6c:	e007      	b.n	8000e7e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	73fb      	strb	r3, [r7, #15]
 8000e72:	e004      	b.n	8000e7e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	73fb      	strb	r3, [r7, #15]
 8000e78:	e001      	b.n	8000e7e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	2000000c 	.word	0x2000000c
 8000e8c:	20000004 	.word	0x20000004
 8000e90:	20000008 	.word	0x20000008

08000e94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <HAL_IncTick+0x1c>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <HAL_IncTick+0x20>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	4a03      	ldr	r2, [pc, #12]	; (8000eb0 <HAL_IncTick+0x1c>)
 8000ea4:	6013      	str	r3, [r2, #0]
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	20000438 	.word	0x20000438
 8000eb4:	2000000c 	.word	0x2000000c

08000eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return uwTick;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <HAL_GetTick+0x14>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000438 	.word	0x20000438

08000ed0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	431a      	orrs	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
 8000efe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	431a      	orrs	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
 8000f44:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	3360      	adds	r3, #96	; 0x60
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4413      	add	r3, r2
 8000f52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <LL_ADC_SetOffset+0x44>)
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000f62:	683a      	ldr	r2, [r7, #0]
 8000f64:	430a      	orrs	r2, r1
 8000f66:	4313      	orrs	r3, r2
 8000f68:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000f70:	bf00      	nop
 8000f72:	371c      	adds	r7, #28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	03fff000 	.word	0x03fff000

08000f80 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3360      	adds	r3, #96	; 0x60
 8000f8e:	461a      	mov	r2, r3
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4413      	add	r3, r2
 8000f96:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b087      	sub	sp, #28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	3360      	adds	r3, #96	; 0x60
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4413      	add	r3, r2
 8000fc4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	431a      	orrs	r2, r3
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000fd6:	bf00      	nop
 8000fd8:	371c      	adds	r7, #28
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b087      	sub	sp, #28
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	60f8      	str	r0, [r7, #12]
 8000fea:	60b9      	str	r1, [r7, #8]
 8000fec:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	3360      	adds	r3, #96	; 0x60
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4413      	add	r3, r2
 8000ffa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	431a      	orrs	r2, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800100c:	bf00      	nop
 800100e:	371c      	adds	r7, #28
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001018:	b480      	push	{r7}
 800101a:	b087      	sub	sp, #28
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	3360      	adds	r3, #96	; 0x60
 8001028:	461a      	mov	r2, r3
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	4413      	add	r3, r2
 8001030:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	431a      	orrs	r2, r3
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001042:	bf00      	nop
 8001044:	371c      	adds	r7, #28
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
 8001056:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	695b      	ldr	r3, [r3, #20]
 800105c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	431a      	orrs	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	615a      	str	r2, [r3, #20]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001084:	2b00      	cmp	r3, #0
 8001086:	d101      	bne.n	800108c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001088:	2301      	movs	r3, #1
 800108a:	e000      	b.n	800108e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800109a:	b480      	push	{r7}
 800109c:	b087      	sub	sp, #28
 800109e:	af00      	add	r7, sp, #0
 80010a0:	60f8      	str	r0, [r7, #12]
 80010a2:	60b9      	str	r1, [r7, #8]
 80010a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	3330      	adds	r3, #48	; 0x30
 80010aa:	461a      	mov	r2, r3
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	0a1b      	lsrs	r3, r3, #8
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	f003 030c 	and.w	r3, r3, #12
 80010b6:	4413      	add	r3, r2
 80010b8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	f003 031f 	and.w	r3, r3, #31
 80010c4:	211f      	movs	r1, #31
 80010c6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	401a      	ands	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	0e9b      	lsrs	r3, r3, #26
 80010d2:	f003 011f 	and.w	r1, r3, #31
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	f003 031f 	and.w	r3, r3, #31
 80010dc:	fa01 f303 	lsl.w	r3, r1, r3
 80010e0:	431a      	orrs	r2, r3
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010e6:	bf00      	nop
 80010e8:	371c      	adds	r7, #28
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001106:	2301      	movs	r3, #1
 8001108:	e000      	b.n	800110c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800110a:	2300      	movs	r3, #0
}
 800110c:	4618      	mov	r0, r3
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001118:	b480      	push	{r7}
 800111a:	b087      	sub	sp, #28
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	3314      	adds	r3, #20
 8001128:	461a      	mov	r2, r3
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	0e5b      	lsrs	r3, r3, #25
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	4413      	add	r3, r2
 8001136:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	0d1b      	lsrs	r3, r3, #20
 8001140:	f003 031f 	and.w	r3, r3, #31
 8001144:	2107      	movs	r1, #7
 8001146:	fa01 f303 	lsl.w	r3, r1, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	401a      	ands	r2, r3
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	0d1b      	lsrs	r3, r3, #20
 8001152:	f003 031f 	and.w	r3, r3, #31
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	fa01 f303 	lsl.w	r3, r1, r3
 800115c:	431a      	orrs	r2, r3
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001162:	bf00      	nop
 8001164:	371c      	adds	r7, #28
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
	...

08001170 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001188:	43db      	mvns	r3, r3
 800118a:	401a      	ands	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 0318 	and.w	r3, r3, #24
 8001192:	4908      	ldr	r1, [pc, #32]	; (80011b4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001194:	40d9      	lsrs	r1, r3
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	400b      	ands	r3, r1
 800119a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800119e:	431a      	orrs	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80011a6:	bf00      	nop
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	0007ffff 	.word	0x0007ffff

080011b8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f003 031f 	and.w	r3, r3, #31
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001200:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	6093      	str	r3, [r2, #8]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001224:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001228:	d101      	bne.n	800122e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800124c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001250:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001274:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001278:	d101      	bne.n	800127e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800129c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012a0:	f043 0201 	orr.w	r2, r3, #1
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012c8:	f043 0202 	orr.w	r2, r3, #2
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d101      	bne.n	80012f4 <LL_ADC_IsEnabled+0x18>
 80012f0:	2301      	movs	r3, #1
 80012f2:	e000      	b.n	80012f6 <LL_ADC_IsEnabled+0x1a>
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b02      	cmp	r3, #2
 8001314:	d101      	bne.n	800131a <LL_ADC_IsDisableOngoing+0x18>
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <LL_ADC_IsDisableOngoing+0x1a>
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001338:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800133c:	f043 0204 	orr.w	r2, r3, #4
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	2b04      	cmp	r3, #4
 8001362:	d101      	bne.n	8001368 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001364:	2301      	movs	r3, #1
 8001366:	e000      	b.n	800136a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	2b08      	cmp	r3, #8
 8001388:	d101      	bne.n	800138e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800139c:	b590      	push	{r4, r7, lr}
 800139e:	b089      	sub	sp, #36	; 0x24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e1a9      	b.n	800170a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d109      	bne.n	80013d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff fb67 	bl	8000a98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff19 	bl	8001214 <LL_ADC_IsDeepPowerDownEnabled>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d004      	beq.n	80013f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff feff 	bl	80011f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff ff34 	bl	8001264 <LL_ADC_IsInternalRegulatorEnabled>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d115      	bne.n	800142e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff ff18 	bl	800123c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800140c:	4b9c      	ldr	r3, [pc, #624]	; (8001680 <HAL_ADC_Init+0x2e4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	099b      	lsrs	r3, r3, #6
 8001412:	4a9c      	ldr	r2, [pc, #624]	; (8001684 <HAL_ADC_Init+0x2e8>)
 8001414:	fba2 2303 	umull	r2, r3, r2, r3
 8001418:	099b      	lsrs	r3, r3, #6
 800141a:	3301      	adds	r3, #1
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001420:	e002      	b.n	8001428 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	3b01      	subs	r3, #1
 8001426:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f9      	bne.n	8001422 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff ff16 	bl	8001264 <LL_ADC_IsInternalRegulatorEnabled>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10d      	bne.n	800145a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001442:	f043 0210 	orr.w	r2, r3, #16
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800144e:	f043 0201 	orr.w	r2, r3, #1
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff ff76 	bl	8001350 <LL_ADC_REG_IsConversionOngoing>
 8001464:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800146a:	f003 0310 	and.w	r3, r3, #16
 800146e:	2b00      	cmp	r3, #0
 8001470:	f040 8142 	bne.w	80016f8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	2b00      	cmp	r3, #0
 8001478:	f040 813e 	bne.w	80016f8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001480:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001484:	f043 0202 	orr.w	r2, r3, #2
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff23 	bl	80012dc <LL_ADC_IsEnabled>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d141      	bne.n	8001520 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014a4:	d004      	beq.n	80014b0 <HAL_ADC_Init+0x114>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a77      	ldr	r2, [pc, #476]	; (8001688 <HAL_ADC_Init+0x2ec>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d10f      	bne.n	80014d0 <HAL_ADC_Init+0x134>
 80014b0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80014b4:	f7ff ff12 	bl	80012dc <LL_ADC_IsEnabled>
 80014b8:	4604      	mov	r4, r0
 80014ba:	4873      	ldr	r0, [pc, #460]	; (8001688 <HAL_ADC_Init+0x2ec>)
 80014bc:	f7ff ff0e 	bl	80012dc <LL_ADC_IsEnabled>
 80014c0:	4603      	mov	r3, r0
 80014c2:	4323      	orrs	r3, r4
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	bf0c      	ite	eq
 80014c8:	2301      	moveq	r3, #1
 80014ca:	2300      	movne	r3, #0
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	e012      	b.n	80014f6 <HAL_ADC_Init+0x15a>
 80014d0:	486e      	ldr	r0, [pc, #440]	; (800168c <HAL_ADC_Init+0x2f0>)
 80014d2:	f7ff ff03 	bl	80012dc <LL_ADC_IsEnabled>
 80014d6:	4604      	mov	r4, r0
 80014d8:	486d      	ldr	r0, [pc, #436]	; (8001690 <HAL_ADC_Init+0x2f4>)
 80014da:	f7ff feff 	bl	80012dc <LL_ADC_IsEnabled>
 80014de:	4603      	mov	r3, r0
 80014e0:	431c      	orrs	r4, r3
 80014e2:	486c      	ldr	r0, [pc, #432]	; (8001694 <HAL_ADC_Init+0x2f8>)
 80014e4:	f7ff fefa 	bl	80012dc <LL_ADC_IsEnabled>
 80014e8:	4603      	mov	r3, r0
 80014ea:	4323      	orrs	r3, r4
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bf0c      	ite	eq
 80014f0:	2301      	moveq	r3, #1
 80014f2:	2300      	movne	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d012      	beq.n	8001520 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001502:	d004      	beq.n	800150e <HAL_ADC_Init+0x172>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a5f      	ldr	r2, [pc, #380]	; (8001688 <HAL_ADC_Init+0x2ec>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d101      	bne.n	8001512 <HAL_ADC_Init+0x176>
 800150e:	4a62      	ldr	r2, [pc, #392]	; (8001698 <HAL_ADC_Init+0x2fc>)
 8001510:	e000      	b.n	8001514 <HAL_ADC_Init+0x178>
 8001512:	4a62      	ldr	r2, [pc, #392]	; (800169c <HAL_ADC_Init+0x300>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	4619      	mov	r1, r3
 800151a:	4610      	mov	r0, r2
 800151c:	f7ff fcd8 	bl	8000ed0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	7f5b      	ldrb	r3, [r3, #29]
 8001524:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800152a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001530:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001536:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800153e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800154a:	2b01      	cmp	r3, #1
 800154c:	d106      	bne.n	800155c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001552:	3b01      	subs	r3, #1
 8001554:	045b      	lsls	r3, r3, #17
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001560:	2b00      	cmp	r3, #0
 8001562:	d009      	beq.n	8001578 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001568:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001570:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68da      	ldr	r2, [r3, #12]
 800157e:	4b48      	ldr	r3, [pc, #288]	; (80016a0 <HAL_ADC_Init+0x304>)
 8001580:	4013      	ands	r3, r2
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	6812      	ldr	r2, [r2, #0]
 8001586:	69b9      	ldr	r1, [r7, #24]
 8001588:	430b      	orrs	r3, r1
 800158a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fee5 	bl	8001376 <LL_ADC_INJ_IsConversionOngoing>
 80015ac:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d17f      	bne.n	80016b4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d17c      	bne.n	80016b4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015be:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015c6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015d6:	f023 0302 	bic.w	r3, r3, #2
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	6812      	ldr	r2, [r2, #0]
 80015de:	69b9      	ldr	r1, [r7, #24]
 80015e0:	430b      	orrs	r3, r1
 80015e2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d017      	beq.n	800161c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	691a      	ldr	r2, [r3, #16]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80015fa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001604:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001608:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	6911      	ldr	r1, [r2, #16]
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6812      	ldr	r2, [r2, #0]
 8001614:	430b      	orrs	r3, r1
 8001616:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800161a:	e013      	b.n	8001644 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	691a      	ldr	r2, [r3, #16]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800162a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6812      	ldr	r2, [r2, #0]
 8001638:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800163c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001640:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800164a:	2b01      	cmp	r3, #1
 800164c:	d12a      	bne.n	80016a4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001658:	f023 0304 	bic.w	r3, r3, #4
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001664:	4311      	orrs	r1, r2
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800166a:	4311      	orrs	r1, r2
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001670:	430a      	orrs	r2, r1
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f042 0201 	orr.w	r2, r2, #1
 800167c:	611a      	str	r2, [r3, #16]
 800167e:	e019      	b.n	80016b4 <HAL_ADC_Init+0x318>
 8001680:	20000004 	.word	0x20000004
 8001684:	053e2d63 	.word	0x053e2d63
 8001688:	50000100 	.word	0x50000100
 800168c:	50000400 	.word	0x50000400
 8001690:	50000500 	.word	0x50000500
 8001694:	50000600 	.word	0x50000600
 8001698:	50000300 	.word	0x50000300
 800169c:	50000700 	.word	0x50000700
 80016a0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	691a      	ldr	r2, [r3, #16]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0201 	bic.w	r2, r2, #1
 80016b2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d10c      	bne.n	80016d6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f023 010f 	bic.w	r1, r3, #15
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	1e5a      	subs	r2, r3, #1
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	631a      	str	r2, [r3, #48]	; 0x30
 80016d4:	e007      	b.n	80016e6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 020f 	bic.w	r2, r2, #15
 80016e4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ea:	f023 0303 	bic.w	r3, r3, #3
 80016ee:	f043 0201 	orr.w	r2, r3, #1
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80016f6:	e007      	b.n	8001708 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fc:	f043 0210 	orr.w	r2, r3, #16
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001708:	7ffb      	ldrb	r3, [r7, #31]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3724      	adds	r7, #36	; 0x24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd90      	pop	{r4, r7, pc}
 8001712:	bf00      	nop

08001714 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001728:	d004      	beq.n	8001734 <HAL_ADC_Start_DMA+0x20>
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a5a      	ldr	r2, [pc, #360]	; (8001898 <HAL_ADC_Start_DMA+0x184>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d101      	bne.n	8001738 <HAL_ADC_Start_DMA+0x24>
 8001734:	4b59      	ldr	r3, [pc, #356]	; (800189c <HAL_ADC_Start_DMA+0x188>)
 8001736:	e000      	b.n	800173a <HAL_ADC_Start_DMA+0x26>
 8001738:	4b59      	ldr	r3, [pc, #356]	; (80018a0 <HAL_ADC_Start_DMA+0x18c>)
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff fd3c 	bl	80011b8 <LL_ADC_GetMultimode>
 8001740:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fe02 	bl	8001350 <LL_ADC_REG_IsConversionOngoing>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	f040 809b 	bne.w	800188a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800175a:	2b01      	cmp	r3, #1
 800175c:	d101      	bne.n	8001762 <HAL_ADC_Start_DMA+0x4e>
 800175e:	2302      	movs	r3, #2
 8001760:	e096      	b.n	8001890 <HAL_ADC_Start_DMA+0x17c>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a4d      	ldr	r2, [pc, #308]	; (80018a4 <HAL_ADC_Start_DMA+0x190>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d008      	beq.n	8001786 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d005      	beq.n	8001786 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	2b05      	cmp	r3, #5
 800177e:	d002      	beq.n	8001786 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	2b09      	cmp	r3, #9
 8001784:	d17a      	bne.n	800187c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	f000 ff60 	bl	800264c <ADC_Enable>
 800178c:	4603      	mov	r3, r0
 800178e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001790:	7dfb      	ldrb	r3, [r7, #23]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d16d      	bne.n	8001872 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800179a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800179e:	f023 0301 	bic.w	r3, r3, #1
 80017a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a3a      	ldr	r2, [pc, #232]	; (8001898 <HAL_ADC_Start_DMA+0x184>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d009      	beq.n	80017c8 <HAL_ADC_Start_DMA+0xb4>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a3b      	ldr	r2, [pc, #236]	; (80018a8 <HAL_ADC_Start_DMA+0x194>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d002      	beq.n	80017c4 <HAL_ADC_Start_DMA+0xb0>
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	e003      	b.n	80017cc <HAL_ADC_Start_DMA+0xb8>
 80017c4:	4b39      	ldr	r3, [pc, #228]	; (80018ac <HAL_ADC_Start_DMA+0x198>)
 80017c6:	e001      	b.n	80017cc <HAL_ADC_Start_DMA+0xb8>
 80017c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	6812      	ldr	r2, [r2, #0]
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d002      	beq.n	80017da <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d105      	bne.n	80017e6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d006      	beq.n	8001800 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f6:	f023 0206 	bic.w	r2, r3, #6
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	661a      	str	r2, [r3, #96]	; 0x60
 80017fe:	e002      	b.n	8001806 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2200      	movs	r2, #0
 8001804:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180a:	4a29      	ldr	r2, [pc, #164]	; (80018b0 <HAL_ADC_Start_DMA+0x19c>)
 800180c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001812:	4a28      	ldr	r2, [pc, #160]	; (80018b4 <HAL_ADC_Start_DMA+0x1a0>)
 8001814:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181a:	4a27      	ldr	r2, [pc, #156]	; (80018b8 <HAL_ADC_Start_DMA+0x1a4>)
 800181c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	221c      	movs	r2, #28
 8001824:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f042 0210 	orr.w	r2, r2, #16
 800183c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68da      	ldr	r2, [r3, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f042 0201 	orr.w	r2, r2, #1
 800184c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	3340      	adds	r3, #64	; 0x40
 8001858:	4619      	mov	r1, r3
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f001 fc25 	bl	80030ac <HAL_DMA_Start_IT>
 8001862:	4603      	mov	r3, r0
 8001864:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff fd5c 	bl	8001328 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001870:	e00d      	b.n	800188e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800187a:	e008      	b.n	800188e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001888:	e001      	b.n	800188e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800188a:	2302      	movs	r3, #2
 800188c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800188e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	50000100 	.word	0x50000100
 800189c:	50000300 	.word	0x50000300
 80018a0:	50000700 	.word	0x50000700
 80018a4:	50000600 	.word	0x50000600
 80018a8:	50000500 	.word	0x50000500
 80018ac:	50000400 	.word	0x50000400
 80018b0:	08002837 	.word	0x08002837
 80018b4:	0800290f 	.word	0x0800290f
 80018b8:	0800292b 	.word	0x0800292b

080018bc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	; 0x28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80018c4:	2300      	movs	r3, #0
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018e0:	d004      	beq.n	80018ec <HAL_ADC_IRQHandler+0x30>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a8e      	ldr	r2, [pc, #568]	; (8001b20 <HAL_ADC_IRQHandler+0x264>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d101      	bne.n	80018f0 <HAL_ADC_IRQHandler+0x34>
 80018ec:	4b8d      	ldr	r3, [pc, #564]	; (8001b24 <HAL_ADC_IRQHandler+0x268>)
 80018ee:	e000      	b.n	80018f2 <HAL_ADC_IRQHandler+0x36>
 80018f0:	4b8d      	ldr	r3, [pc, #564]	; (8001b28 <HAL_ADC_IRQHandler+0x26c>)
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fc60 	bl	80011b8 <LL_ADC_GetMultimode>
 80018f8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d017      	beq.n	8001934 <HAL_ADC_IRQHandler+0x78>
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d012      	beq.n	8001934 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001912:	f003 0310 	and.w	r3, r3, #16
 8001916:	2b00      	cmp	r3, #0
 8001918:	d105      	bne.n	8001926 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800191e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f001 f8f6 	bl	8002b18 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2202      	movs	r2, #2
 8001932:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	2b00      	cmp	r3, #0
 800193c:	d004      	beq.n	8001948 <HAL_ADC_IRQHandler+0x8c>
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	d10b      	bne.n	8001960 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 8094 	beq.w	8001a7c <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 808e 	beq.w	8001a7c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001964:	f003 0310 	and.w	r3, r3, #16
 8001968:	2b00      	cmp	r3, #0
 800196a:	d105      	bne.n	8001978 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001970:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fb79 	bl	8001074 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d072      	beq.n	8001a6e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a64      	ldr	r2, [pc, #400]	; (8001b20 <HAL_ADC_IRQHandler+0x264>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d009      	beq.n	80019a6 <HAL_ADC_IRQHandler+0xea>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a65      	ldr	r2, [pc, #404]	; (8001b2c <HAL_ADC_IRQHandler+0x270>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d002      	beq.n	80019a2 <HAL_ADC_IRQHandler+0xe6>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	e003      	b.n	80019aa <HAL_ADC_IRQHandler+0xee>
 80019a2:	4b63      	ldr	r3, [pc, #396]	; (8001b30 <HAL_ADC_IRQHandler+0x274>)
 80019a4:	e001      	b.n	80019aa <HAL_ADC_IRQHandler+0xee>
 80019a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	6812      	ldr	r2, [r2, #0]
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d008      	beq.n	80019c4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d005      	beq.n	80019c4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	2b05      	cmp	r3, #5
 80019bc:	d002      	beq.n	80019c4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	2b09      	cmp	r3, #9
 80019c2:	d104      	bne.n	80019ce <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	623b      	str	r3, [r7, #32]
 80019cc:	e014      	b.n	80019f8 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a53      	ldr	r2, [pc, #332]	; (8001b20 <HAL_ADC_IRQHandler+0x264>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d009      	beq.n	80019ec <HAL_ADC_IRQHandler+0x130>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a53      	ldr	r2, [pc, #332]	; (8001b2c <HAL_ADC_IRQHandler+0x270>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d002      	beq.n	80019e8 <HAL_ADC_IRQHandler+0x12c>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	e003      	b.n	80019f0 <HAL_ADC_IRQHandler+0x134>
 80019e8:	4b51      	ldr	r3, [pc, #324]	; (8001b30 <HAL_ADC_IRQHandler+0x274>)
 80019ea:	e001      	b.n	80019f0 <HAL_ADC_IRQHandler+0x134>
 80019ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019f0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80019f8:	6a3b      	ldr	r3, [r7, #32]
 80019fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d135      	bne.n	8001a6e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d12e      	bne.n	8001a6e <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fc9b 	bl	8001350 <LL_ADC_REG_IsConversionOngoing>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d11a      	bne.n	8001a56 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 020c 	bic.w	r2, r2, #12
 8001a2e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d112      	bne.n	8001a6e <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4c:	f043 0201 	orr.w	r2, r3, #1
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a54:	e00b      	b.n	8001a6e <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a5a:	f043 0210 	orr.w	r2, r3, #16
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a66:	f043 0201 	orr.w	r2, r3, #1
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 f984 	bl	8001d7c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	220c      	movs	r2, #12
 8001a7a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f003 0320 	and.w	r3, r3, #32
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d004      	beq.n	8001a90 <HAL_ADC_IRQHandler+0x1d4>
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	f003 0320 	and.w	r3, r3, #32
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d10b      	bne.n	8001aa8 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 80b3 	beq.w	8001c02 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 80ad 	beq.w	8001c02 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aac:	f003 0310 	and.w	r3, r3, #16
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d105      	bne.n	8001ac0 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fb14 	bl	80010f2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001aca:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff facf 	bl	8001074 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ad6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a10      	ldr	r2, [pc, #64]	; (8001b20 <HAL_ADC_IRQHandler+0x264>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d009      	beq.n	8001af6 <HAL_ADC_IRQHandler+0x23a>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a11      	ldr	r2, [pc, #68]	; (8001b2c <HAL_ADC_IRQHandler+0x270>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d002      	beq.n	8001af2 <HAL_ADC_IRQHandler+0x236>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	e003      	b.n	8001afa <HAL_ADC_IRQHandler+0x23e>
 8001af2:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <HAL_ADC_IRQHandler+0x274>)
 8001af4:	e001      	b.n	8001afa <HAL_ADC_IRQHandler+0x23e>
 8001af6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6812      	ldr	r2, [r2, #0]
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d008      	beq.n	8001b14 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d005      	beq.n	8001b14 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	2b06      	cmp	r3, #6
 8001b0c:	d002      	beq.n	8001b14 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	2b07      	cmp	r3, #7
 8001b12:	d10f      	bne.n	8001b34 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	623b      	str	r3, [r7, #32]
 8001b1c:	e01f      	b.n	8001b5e <HAL_ADC_IRQHandler+0x2a2>
 8001b1e:	bf00      	nop
 8001b20:	50000100 	.word	0x50000100
 8001b24:	50000300 	.word	0x50000300
 8001b28:	50000700 	.word	0x50000700
 8001b2c:	50000500 	.word	0x50000500
 8001b30:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a8b      	ldr	r2, [pc, #556]	; (8001d68 <HAL_ADC_IRQHandler+0x4ac>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d009      	beq.n	8001b52 <HAL_ADC_IRQHandler+0x296>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a8a      	ldr	r2, [pc, #552]	; (8001d6c <HAL_ADC_IRQHandler+0x4b0>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d002      	beq.n	8001b4e <HAL_ADC_IRQHandler+0x292>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	e003      	b.n	8001b56 <HAL_ADC_IRQHandler+0x29a>
 8001b4e:	4b88      	ldr	r3, [pc, #544]	; (8001d70 <HAL_ADC_IRQHandler+0x4b4>)
 8001b50:	e001      	b.n	8001b56 <HAL_ADC_IRQHandler+0x29a>
 8001b52:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b56:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d047      	beq.n	8001bf4 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001b64:	6a3b      	ldr	r3, [r7, #32]
 8001b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d007      	beq.n	8001b7e <HAL_ADC_IRQHandler+0x2c2>
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d03f      	beq.n	8001bf4 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d13a      	bne.n	8001bf4 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b88:	2b40      	cmp	r3, #64	; 0x40
 8001b8a:	d133      	bne.n	8001bf4 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d12e      	bne.n	8001bf4 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff fbeb 	bl	8001376 <LL_ADC_INJ_IsConversionOngoing>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d11a      	bne.n	8001bdc <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001bb4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d112      	bne.n	8001bf4 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd2:	f043 0201 	orr.w	r2, r3, #1
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bda:	e00b      	b.n	8001bf4 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be0:	f043 0210 	orr.w	r2, r3, #16
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bec:	f043 0201 	orr.w	r2, r3, #1
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 ff67 	bl	8002ac8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2260      	movs	r2, #96	; 0x60
 8001c00:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d011      	beq.n	8001c30 <HAL_ADC_IRQHandler+0x374>
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00c      	beq.n	8001c30 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f8be 	bl	8001da4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2280      	movs	r2, #128	; 0x80
 8001c2e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d012      	beq.n	8001c60 <HAL_ADC_IRQHandler+0x3a4>
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00d      	beq.n	8001c60 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c48:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 ff4d 	bl	8002af0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c5e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d012      	beq.n	8001c90 <HAL_ADC_IRQHandler+0x3d4>
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00d      	beq.n	8001c90 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c78:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 ff3f 	bl	8002b04 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c8e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f003 0310 	and.w	r3, r3, #16
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d043      	beq.n	8001d22 <HAL_ADC_IRQHandler+0x466>
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	f003 0310 	and.w	r3, r3, #16
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d03e      	beq.n	8001d22 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d102      	bne.n	8001cb2 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8001cac:	2301      	movs	r3, #1
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb0:	e021      	b.n	8001cf6 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d015      	beq.n	8001ce4 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cc0:	d004      	beq.n	8001ccc <HAL_ADC_IRQHandler+0x410>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a28      	ldr	r2, [pc, #160]	; (8001d68 <HAL_ADC_IRQHandler+0x4ac>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d101      	bne.n	8001cd0 <HAL_ADC_IRQHandler+0x414>
 8001ccc:	4b29      	ldr	r3, [pc, #164]	; (8001d74 <HAL_ADC_IRQHandler+0x4b8>)
 8001cce:	e000      	b.n	8001cd2 <HAL_ADC_IRQHandler+0x416>
 8001cd0:	4b29      	ldr	r3, [pc, #164]	; (8001d78 <HAL_ADC_IRQHandler+0x4bc>)
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fa7e 	bl	80011d4 <LL_ADC_GetMultiDMATransfer>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00b      	beq.n	8001cf6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce2:	e008      	b.n	8001cf6 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d10e      	bne.n	8001d1a <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d00:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d0c:	f043 0202 	orr.w	r2, r3, #2
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 f84f 	bl	8001db8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2210      	movs	r2, #16
 8001d20:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d018      	beq.n	8001d5e <HAL_ADC_IRQHandler+0x4a2>
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d013      	beq.n	8001d5e <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d46:	f043 0208 	orr.w	r2, r3, #8
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d56:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 febf 	bl	8002adc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001d5e:	bf00      	nop
 8001d60:	3728      	adds	r7, #40	; 0x28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	50000100 	.word	0x50000100
 8001d6c:	50000500 	.word	0x50000500
 8001d70:	50000400 	.word	0x50000400
 8001d74:	50000300 	.word	0x50000300
 8001d78:	50000700 	.word	0x50000700

08001d7c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b0b6      	sub	sp, #216	; 0xd8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d102      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x24>
 8001dea:	2302      	movs	r3, #2
 8001dec:	f000 bc13 	b.w	8002616 <HAL_ADC_ConfigChannel+0x84a>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff faa7 	bl	8001350 <LL_ADC_REG_IsConversionOngoing>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f040 83f3 	bne.w	80025f0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6818      	ldr	r0, [r3, #0]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	6859      	ldr	r1, [r3, #4]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	f7ff f93f 	bl	800109a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff fa95 	bl	8001350 <LL_ADC_REG_IsConversionOngoing>
 8001e26:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff faa1 	bl	8001376 <LL_ADC_INJ_IsConversionOngoing>
 8001e34:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e38:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f040 81d9 	bne.w	80021f4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f040 81d4 	bne.w	80021f4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e54:	d10f      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6818      	ldr	r0, [r3, #0]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	4619      	mov	r1, r3
 8001e62:	f7ff f959 	bl	8001118 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff f8ed 	bl	800104e <LL_ADC_SetSamplingTimeCommonConfig>
 8001e74:	e00e      	b.n	8001e94 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6818      	ldr	r0, [r3, #0]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	6819      	ldr	r1, [r3, #0]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	461a      	mov	r2, r3
 8001e84:	f7ff f948 	bl	8001118 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff f8dd 	bl	800104e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	695a      	ldr	r2, [r3, #20]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	08db      	lsrs	r3, r3, #3
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d022      	beq.n	8001efc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6818      	ldr	r0, [r3, #0]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	6919      	ldr	r1, [r3, #16]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ec6:	f7ff f837 	bl	8000f38 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6818      	ldr	r0, [r3, #0]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	6919      	ldr	r1, [r3, #16]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	f7ff f883 	bl	8000fe2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6818      	ldr	r0, [r3, #0]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d102      	bne.n	8001ef2 <HAL_ADC_ConfigChannel+0x126>
 8001eec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ef0:	e000      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x128>
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	f7ff f88f 	bl	8001018 <LL_ADC_SetOffsetSaturation>
 8001efa:	e17b      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2100      	movs	r1, #0
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff f83c 	bl	8000f80 <LL_ADC_GetOffsetChannel>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10a      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x15c>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2100      	movs	r1, #0
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff f831 	bl	8000f80 <LL_ADC_GetOffsetChannel>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	0e9b      	lsrs	r3, r3, #26
 8001f22:	f003 021f 	and.w	r2, r3, #31
 8001f26:	e01e      	b.n	8001f66 <HAL_ADC_ConfigChannel+0x19a>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff f826 	bl	8000f80 <LL_ADC_GetOffsetChannel>
 8001f34:	4603      	mov	r3, r0
 8001f36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f3e:	fa93 f3a3 	rbit	r3, r3
 8001f42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001f56:	2320      	movs	r3, #32
 8001f58:	e004      	b.n	8001f64 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001f5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f5e:	fab3 f383 	clz	r3, r3
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d105      	bne.n	8001f7e <HAL_ADC_ConfigChannel+0x1b2>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	0e9b      	lsrs	r3, r3, #26
 8001f78:	f003 031f 	and.w	r3, r3, #31
 8001f7c:	e018      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x1e4>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f86:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f8a:	fa93 f3a3 	rbit	r3, r3
 8001f8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001f92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001f9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001fa2:	2320      	movs	r3, #32
 8001fa4:	e004      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001fa6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001faa:	fab3 f383 	clz	r3, r3
 8001fae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d106      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe fff5 	bl	8000fac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7fe ffd9 	bl	8000f80 <LL_ADC_GetOffsetChannel>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d10a      	bne.n	8001fee <HAL_ADC_ConfigChannel+0x222>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2101      	movs	r1, #1
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe ffce 	bl	8000f80 <LL_ADC_GetOffsetChannel>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	0e9b      	lsrs	r3, r3, #26
 8001fe8:	f003 021f 	and.w	r2, r3, #31
 8001fec:	e01e      	b.n	800202c <HAL_ADC_ConfigChannel+0x260>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe ffc3 	bl	8000f80 <LL_ADC_GetOffsetChannel>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002000:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002004:	fa93 f3a3 	rbit	r3, r3
 8002008:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800200c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002010:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002014:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800201c:	2320      	movs	r3, #32
 800201e:	e004      	b.n	800202a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002020:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002024:	fab3 f383 	clz	r3, r3
 8002028:	b2db      	uxtb	r3, r3
 800202a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002034:	2b00      	cmp	r3, #0
 8002036:	d105      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x278>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	0e9b      	lsrs	r3, r3, #26
 800203e:	f003 031f 	and.w	r3, r3, #31
 8002042:	e018      	b.n	8002076 <HAL_ADC_ConfigChannel+0x2aa>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002050:	fa93 f3a3 	rbit	r3, r3
 8002054:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002058:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800205c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002060:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002068:	2320      	movs	r3, #32
 800206a:	e004      	b.n	8002076 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800206c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002070:	fab3 f383 	clz	r3, r3
 8002074:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002076:	429a      	cmp	r2, r3
 8002078:	d106      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2200      	movs	r2, #0
 8002080:	2101      	movs	r1, #1
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe ff92 	bl	8000fac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2102      	movs	r1, #2
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe ff76 	bl	8000f80 <LL_ADC_GetOffsetChannel>
 8002094:	4603      	mov	r3, r0
 8002096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10a      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x2e8>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2102      	movs	r1, #2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe ff6b 	bl	8000f80 <LL_ADC_GetOffsetChannel>
 80020aa:	4603      	mov	r3, r0
 80020ac:	0e9b      	lsrs	r3, r3, #26
 80020ae:	f003 021f 	and.w	r2, r3, #31
 80020b2:	e01e      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x326>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2102      	movs	r1, #2
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe ff60 	bl	8000f80 <LL_ADC_GetOffsetChannel>
 80020c0:	4603      	mov	r3, r0
 80020c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020ca:	fa93 f3a3 	rbit	r3, r3
 80020ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80020d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80020da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80020e2:	2320      	movs	r3, #32
 80020e4:	e004      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80020e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020ea:	fab3 f383 	clz	r3, r3
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d105      	bne.n	800210a <HAL_ADC_ConfigChannel+0x33e>
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	0e9b      	lsrs	r3, r3, #26
 8002104:	f003 031f 	and.w	r3, r3, #31
 8002108:	e016      	b.n	8002138 <HAL_ADC_ConfigChannel+0x36c>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002112:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002116:	fa93 f3a3 	rbit	r3, r3
 800211a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800211c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800211e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002122:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800212a:	2320      	movs	r3, #32
 800212c:	e004      	b.n	8002138 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800212e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002132:	fab3 f383 	clz	r3, r3
 8002136:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002138:	429a      	cmp	r2, r3
 800213a:	d106      	bne.n	800214a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2200      	movs	r2, #0
 8002142:	2102      	movs	r1, #2
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe ff31 	bl	8000fac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2103      	movs	r1, #3
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe ff15 	bl	8000f80 <LL_ADC_GetOffsetChannel>
 8002156:	4603      	mov	r3, r0
 8002158:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10a      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x3aa>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2103      	movs	r1, #3
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe ff0a 	bl	8000f80 <LL_ADC_GetOffsetChannel>
 800216c:	4603      	mov	r3, r0
 800216e:	0e9b      	lsrs	r3, r3, #26
 8002170:	f003 021f 	and.w	r2, r3, #31
 8002174:	e017      	b.n	80021a6 <HAL_ADC_ConfigChannel+0x3da>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2103      	movs	r1, #3
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe feff 	bl	8000f80 <LL_ADC_GetOffsetChannel>
 8002182:	4603      	mov	r3, r0
 8002184:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002186:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002188:	fa93 f3a3 	rbit	r3, r3
 800218c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800218e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002190:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002192:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002198:	2320      	movs	r3, #32
 800219a:	e003      	b.n	80021a4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800219c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800219e:	fab3 f383 	clz	r3, r3
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d105      	bne.n	80021be <HAL_ADC_ConfigChannel+0x3f2>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	0e9b      	lsrs	r3, r3, #26
 80021b8:	f003 031f 	and.w	r3, r3, #31
 80021bc:	e011      	b.n	80021e2 <HAL_ADC_ConfigChannel+0x416>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021c6:	fa93 f3a3 	rbit	r3, r3
 80021ca:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80021cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80021d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80021d6:	2320      	movs	r3, #32
 80021d8:	e003      	b.n	80021e2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80021da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021dc:	fab3 f383 	clz	r3, r3
 80021e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d106      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2200      	movs	r2, #0
 80021ec:	2103      	movs	r1, #3
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe fedc 	bl	8000fac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff f86f 	bl	80012dc <LL_ADC_IsEnabled>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	f040 813d 	bne.w	8002480 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6818      	ldr	r0, [r3, #0]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	6819      	ldr	r1, [r3, #0]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	461a      	mov	r2, r3
 8002214:	f7fe ffac 	bl	8001170 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	4aa2      	ldr	r2, [pc, #648]	; (80024a8 <HAL_ADC_ConfigChannel+0x6dc>)
 800221e:	4293      	cmp	r3, r2
 8002220:	f040 812e 	bne.w	8002480 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10b      	bne.n	800224c <HAL_ADC_ConfigChannel+0x480>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	0e9b      	lsrs	r3, r3, #26
 800223a:	3301      	adds	r3, #1
 800223c:	f003 031f 	and.w	r3, r3, #31
 8002240:	2b09      	cmp	r3, #9
 8002242:	bf94      	ite	ls
 8002244:	2301      	movls	r3, #1
 8002246:	2300      	movhi	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	e019      	b.n	8002280 <HAL_ADC_ConfigChannel+0x4b4>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002254:	fa93 f3a3 	rbit	r3, r3
 8002258:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800225a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800225c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800225e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002264:	2320      	movs	r3, #32
 8002266:	e003      	b.n	8002270 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002268:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800226a:	fab3 f383 	clz	r3, r3
 800226e:	b2db      	uxtb	r3, r3
 8002270:	3301      	adds	r3, #1
 8002272:	f003 031f 	and.w	r3, r3, #31
 8002276:	2b09      	cmp	r3, #9
 8002278:	bf94      	ite	ls
 800227a:	2301      	movls	r3, #1
 800227c:	2300      	movhi	r3, #0
 800227e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002280:	2b00      	cmp	r3, #0
 8002282:	d079      	beq.n	8002378 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800228c:	2b00      	cmp	r3, #0
 800228e:	d107      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x4d4>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	0e9b      	lsrs	r3, r3, #26
 8002296:	3301      	adds	r3, #1
 8002298:	069b      	lsls	r3, r3, #26
 800229a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800229e:	e015      	b.n	80022cc <HAL_ADC_ConfigChannel+0x500>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022a8:	fa93 f3a3 	rbit	r3, r3
 80022ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80022ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80022b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80022b8:	2320      	movs	r3, #32
 80022ba:	e003      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80022bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022be:	fab3 f383 	clz	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	3301      	adds	r3, #1
 80022c6:	069b      	lsls	r3, r3, #26
 80022c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d109      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x520>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	0e9b      	lsrs	r3, r3, #26
 80022de:	3301      	adds	r3, #1
 80022e0:	f003 031f 	and.w	r3, r3, #31
 80022e4:	2101      	movs	r1, #1
 80022e6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ea:	e017      	b.n	800231c <HAL_ADC_ConfigChannel+0x550>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022f4:	fa93 f3a3 	rbit	r3, r3
 80022f8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80022fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022fc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80022fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002304:	2320      	movs	r3, #32
 8002306:	e003      	b.n	8002310 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800230a:	fab3 f383 	clz	r3, r3
 800230e:	b2db      	uxtb	r3, r3
 8002310:	3301      	adds	r3, #1
 8002312:	f003 031f 	and.w	r3, r3, #31
 8002316:	2101      	movs	r1, #1
 8002318:	fa01 f303 	lsl.w	r3, r1, r3
 800231c:	ea42 0103 	orr.w	r1, r2, r3
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10a      	bne.n	8002342 <HAL_ADC_ConfigChannel+0x576>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	0e9b      	lsrs	r3, r3, #26
 8002332:	3301      	adds	r3, #1
 8002334:	f003 021f 	and.w	r2, r3, #31
 8002338:	4613      	mov	r3, r2
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	4413      	add	r3, r2
 800233e:	051b      	lsls	r3, r3, #20
 8002340:	e018      	b.n	8002374 <HAL_ADC_ConfigChannel+0x5a8>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800234a:	fa93 f3a3 	rbit	r3, r3
 800234e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002352:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800235a:	2320      	movs	r3, #32
 800235c:	e003      	b.n	8002366 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800235e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002360:	fab3 f383 	clz	r3, r3
 8002364:	b2db      	uxtb	r3, r3
 8002366:	3301      	adds	r3, #1
 8002368:	f003 021f 	and.w	r2, r3, #31
 800236c:	4613      	mov	r3, r2
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	4413      	add	r3, r2
 8002372:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002374:	430b      	orrs	r3, r1
 8002376:	e07e      	b.n	8002476 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002380:	2b00      	cmp	r3, #0
 8002382:	d107      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x5c8>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	0e9b      	lsrs	r3, r3, #26
 800238a:	3301      	adds	r3, #1
 800238c:	069b      	lsls	r3, r3, #26
 800238e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002392:	e015      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x5f4>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239c:	fa93 f3a3 	rbit	r3, r3
 80023a0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80023a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80023a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80023ac:	2320      	movs	r3, #32
 80023ae:	e003      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80023b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b2:	fab3 f383 	clz	r3, r3
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	3301      	adds	r3, #1
 80023ba:	069b      	lsls	r3, r3, #26
 80023bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d109      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x614>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	0e9b      	lsrs	r3, r3, #26
 80023d2:	3301      	adds	r3, #1
 80023d4:	f003 031f 	and.w	r3, r3, #31
 80023d8:	2101      	movs	r1, #1
 80023da:	fa01 f303 	lsl.w	r3, r1, r3
 80023de:	e017      	b.n	8002410 <HAL_ADC_ConfigChannel+0x644>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	fa93 f3a3 	rbit	r3, r3
 80023ec:	61fb      	str	r3, [r7, #28]
  return result;
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80023f8:	2320      	movs	r3, #32
 80023fa:	e003      	b.n	8002404 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	fab3 f383 	clz	r3, r3
 8002402:	b2db      	uxtb	r3, r3
 8002404:	3301      	adds	r3, #1
 8002406:	f003 031f 	and.w	r3, r3, #31
 800240a:	2101      	movs	r1, #1
 800240c:	fa01 f303 	lsl.w	r3, r1, r3
 8002410:	ea42 0103 	orr.w	r1, r2, r3
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10d      	bne.n	800243c <HAL_ADC_ConfigChannel+0x670>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	0e9b      	lsrs	r3, r3, #26
 8002426:	3301      	adds	r3, #1
 8002428:	f003 021f 	and.w	r2, r3, #31
 800242c:	4613      	mov	r3, r2
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4413      	add	r3, r2
 8002432:	3b1e      	subs	r3, #30
 8002434:	051b      	lsls	r3, r3, #20
 8002436:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800243a:	e01b      	b.n	8002474 <HAL_ADC_ConfigChannel+0x6a8>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	fa93 f3a3 	rbit	r3, r3
 8002448:	613b      	str	r3, [r7, #16]
  return result;
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002454:	2320      	movs	r3, #32
 8002456:	e003      	b.n	8002460 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	fab3 f383 	clz	r3, r3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	3301      	adds	r3, #1
 8002462:	f003 021f 	and.w	r2, r3, #31
 8002466:	4613      	mov	r3, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	4413      	add	r3, r2
 800246c:	3b1e      	subs	r3, #30
 800246e:	051b      	lsls	r3, r3, #20
 8002470:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002474:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800247a:	4619      	mov	r1, r3
 800247c:	f7fe fe4c 	bl	8001118 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4b09      	ldr	r3, [pc, #36]	; (80024ac <HAL_ADC_ConfigChannel+0x6e0>)
 8002486:	4013      	ands	r3, r2
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 80be 	beq.w	800260a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002496:	d004      	beq.n	80024a2 <HAL_ADC_ConfigChannel+0x6d6>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a04      	ldr	r2, [pc, #16]	; (80024b0 <HAL_ADC_ConfigChannel+0x6e4>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d10a      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x6ec>
 80024a2:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <HAL_ADC_ConfigChannel+0x6e8>)
 80024a4:	e009      	b.n	80024ba <HAL_ADC_ConfigChannel+0x6ee>
 80024a6:	bf00      	nop
 80024a8:	407f0000 	.word	0x407f0000
 80024ac:	80080000 	.word	0x80080000
 80024b0:	50000100 	.word	0x50000100
 80024b4:	50000300 	.word	0x50000300
 80024b8:	4b59      	ldr	r3, [pc, #356]	; (8002620 <HAL_ADC_ConfigChannel+0x854>)
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fe fd2e 	bl	8000f1c <LL_ADC_GetCommonPathInternalCh>
 80024c0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a56      	ldr	r2, [pc, #344]	; (8002624 <HAL_ADC_ConfigChannel+0x858>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d004      	beq.n	80024d8 <HAL_ADC_ConfigChannel+0x70c>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a55      	ldr	r2, [pc, #340]	; (8002628 <HAL_ADC_ConfigChannel+0x85c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d13a      	bne.n	800254e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d134      	bne.n	800254e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024ec:	d005      	beq.n	80024fa <HAL_ADC_ConfigChannel+0x72e>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a4e      	ldr	r2, [pc, #312]	; (800262c <HAL_ADC_ConfigChannel+0x860>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	f040 8085 	bne.w	8002604 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002502:	d004      	beq.n	800250e <HAL_ADC_ConfigChannel+0x742>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a49      	ldr	r2, [pc, #292]	; (8002630 <HAL_ADC_ConfigChannel+0x864>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d101      	bne.n	8002512 <HAL_ADC_ConfigChannel+0x746>
 800250e:	4a49      	ldr	r2, [pc, #292]	; (8002634 <HAL_ADC_ConfigChannel+0x868>)
 8002510:	e000      	b.n	8002514 <HAL_ADC_ConfigChannel+0x748>
 8002512:	4a43      	ldr	r2, [pc, #268]	; (8002620 <HAL_ADC_ConfigChannel+0x854>)
 8002514:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002518:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800251c:	4619      	mov	r1, r3
 800251e:	4610      	mov	r0, r2
 8002520:	f7fe fce9 	bl	8000ef6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002524:	4b44      	ldr	r3, [pc, #272]	; (8002638 <HAL_ADC_ConfigChannel+0x86c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	099b      	lsrs	r3, r3, #6
 800252a:	4a44      	ldr	r2, [pc, #272]	; (800263c <HAL_ADC_ConfigChannel+0x870>)
 800252c:	fba2 2303 	umull	r2, r3, r2, r3
 8002530:	099b      	lsrs	r3, r3, #6
 8002532:	1c5a      	adds	r2, r3, #1
 8002534:	4613      	mov	r3, r2
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	4413      	add	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800253e:	e002      	b.n	8002546 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	3b01      	subs	r3, #1
 8002544:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1f9      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800254c:	e05a      	b.n	8002604 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a3b      	ldr	r2, [pc, #236]	; (8002640 <HAL_ADC_ConfigChannel+0x874>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d125      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002558:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800255c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d11f      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a31      	ldr	r2, [pc, #196]	; (8002630 <HAL_ADC_ConfigChannel+0x864>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d104      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x7ac>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a34      	ldr	r2, [pc, #208]	; (8002644 <HAL_ADC_ConfigChannel+0x878>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d047      	beq.n	8002608 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002580:	d004      	beq.n	800258c <HAL_ADC_ConfigChannel+0x7c0>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a2a      	ldr	r2, [pc, #168]	; (8002630 <HAL_ADC_ConfigChannel+0x864>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d101      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x7c4>
 800258c:	4a29      	ldr	r2, [pc, #164]	; (8002634 <HAL_ADC_ConfigChannel+0x868>)
 800258e:	e000      	b.n	8002592 <HAL_ADC_ConfigChannel+0x7c6>
 8002590:	4a23      	ldr	r2, [pc, #140]	; (8002620 <HAL_ADC_ConfigChannel+0x854>)
 8002592:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002596:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800259a:	4619      	mov	r1, r3
 800259c:	4610      	mov	r0, r2
 800259e:	f7fe fcaa 	bl	8000ef6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025a2:	e031      	b.n	8002608 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a27      	ldr	r2, [pc, #156]	; (8002648 <HAL_ADC_ConfigChannel+0x87c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d12d      	bne.n	800260a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d127      	bne.n	800260a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a1c      	ldr	r2, [pc, #112]	; (8002630 <HAL_ADC_ConfigChannel+0x864>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d022      	beq.n	800260a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025cc:	d004      	beq.n	80025d8 <HAL_ADC_ConfigChannel+0x80c>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a17      	ldr	r2, [pc, #92]	; (8002630 <HAL_ADC_ConfigChannel+0x864>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d101      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x810>
 80025d8:	4a16      	ldr	r2, [pc, #88]	; (8002634 <HAL_ADC_ConfigChannel+0x868>)
 80025da:	e000      	b.n	80025de <HAL_ADC_ConfigChannel+0x812>
 80025dc:	4a10      	ldr	r2, [pc, #64]	; (8002620 <HAL_ADC_ConfigChannel+0x854>)
 80025de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025e6:	4619      	mov	r1, r3
 80025e8:	4610      	mov	r0, r2
 80025ea:	f7fe fc84 	bl	8000ef6 <LL_ADC_SetCommonPathInternalCh>
 80025ee:	e00c      	b.n	800260a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f4:	f043 0220 	orr.w	r2, r3, #32
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002602:	e002      	b.n	800260a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002604:	bf00      	nop
 8002606:	e000      	b.n	800260a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002608:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002612:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002616:	4618      	mov	r0, r3
 8002618:	37d8      	adds	r7, #216	; 0xd8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	50000700 	.word	0x50000700
 8002624:	c3210000 	.word	0xc3210000
 8002628:	90c00010 	.word	0x90c00010
 800262c:	50000600 	.word	0x50000600
 8002630:	50000100 	.word	0x50000100
 8002634:	50000300 	.word	0x50000300
 8002638:	20000004 	.word	0x20000004
 800263c:	053e2d63 	.word	0x053e2d63
 8002640:	c7520000 	.word	0xc7520000
 8002644:	50000500 	.word	0x50000500
 8002648:	cb840000 	.word	0xcb840000

0800264c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002654:	2300      	movs	r3, #0
 8002656:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f7fe fe3d 	bl	80012dc <LL_ADC_IsEnabled>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d176      	bne.n	8002756 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	4b3c      	ldr	r3, [pc, #240]	; (8002760 <ADC_Enable+0x114>)
 8002670:	4013      	ands	r3, r2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00d      	beq.n	8002692 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267a:	f043 0210 	orr.w	r2, r3, #16
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002686:	f043 0201 	orr.w	r2, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e062      	b.n	8002758 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7fe fdf8 	bl	800128c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026a4:	d004      	beq.n	80026b0 <ADC_Enable+0x64>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a2e      	ldr	r2, [pc, #184]	; (8002764 <ADC_Enable+0x118>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d101      	bne.n	80026b4 <ADC_Enable+0x68>
 80026b0:	4b2d      	ldr	r3, [pc, #180]	; (8002768 <ADC_Enable+0x11c>)
 80026b2:	e000      	b.n	80026b6 <ADC_Enable+0x6a>
 80026b4:	4b2d      	ldr	r3, [pc, #180]	; (800276c <ADC_Enable+0x120>)
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe fc30 	bl	8000f1c <LL_ADC_GetCommonPathInternalCh>
 80026bc:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80026be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d013      	beq.n	80026ee <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026c6:	4b2a      	ldr	r3, [pc, #168]	; (8002770 <ADC_Enable+0x124>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	099b      	lsrs	r3, r3, #6
 80026cc:	4a29      	ldr	r2, [pc, #164]	; (8002774 <ADC_Enable+0x128>)
 80026ce:	fba2 2303 	umull	r2, r3, r2, r3
 80026d2:	099b      	lsrs	r3, r3, #6
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	4613      	mov	r3, r2
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80026e0:	e002      	b.n	80026e8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	3b01      	subs	r3, #1
 80026e6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f9      	bne.n	80026e2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80026ee:	f7fe fbe3 	bl	8000eb8 <HAL_GetTick>
 80026f2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026f4:	e028      	b.n	8002748 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fe fdee 	bl	80012dc <LL_ADC_IsEnabled>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d104      	bne.n	8002710 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7fe fdbe 	bl	800128c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002710:	f7fe fbd2 	bl	8000eb8 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d914      	bls.n	8002748 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b01      	cmp	r3, #1
 800272a:	d00d      	beq.n	8002748 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002730:	f043 0210 	orr.w	r2, r3, #16
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800273c:	f043 0201 	orr.w	r2, r3, #1
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e007      	b.n	8002758 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b01      	cmp	r3, #1
 8002754:	d1cf      	bne.n	80026f6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	8000003f 	.word	0x8000003f
 8002764:	50000100 	.word	0x50000100
 8002768:	50000300 	.word	0x50000300
 800276c:	50000700 	.word	0x50000700
 8002770:	20000004 	.word	0x20000004
 8002774:	053e2d63 	.word	0x053e2d63

08002778 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f7fe fdbc 	bl	8001302 <LL_ADC_IsDisableOngoing>
 800278a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f7fe fda3 	bl	80012dc <LL_ADC_IsEnabled>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d047      	beq.n	800282c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d144      	bne.n	800282c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 030d 	and.w	r3, r3, #13
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d10c      	bne.n	80027ca <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fe fd7d 	bl	80012b4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2203      	movs	r2, #3
 80027c0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027c2:	f7fe fb79 	bl	8000eb8 <HAL_GetTick>
 80027c6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027c8:	e029      	b.n	800281e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ce:	f043 0210 	orr.w	r2, r3, #16
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027da:	f043 0201 	orr.w	r2, r3, #1
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e023      	b.n	800282e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027e6:	f7fe fb67 	bl	8000eb8 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d914      	bls.n	800281e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00d      	beq.n	800281e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002806:	f043 0210 	orr.w	r2, r3, #16
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002812:	f043 0201 	orr.w	r2, r3, #1
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e007      	b.n	800282e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1dc      	bne.n	80027e6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b084      	sub	sp, #16
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002842:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002848:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800284c:	2b00      	cmp	r3, #0
 800284e:	d14b      	bne.n	80028e8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002854:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d021      	beq.n	80028ae <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe fc00 	bl	8001074 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d032      	beq.n	80028e0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d12b      	bne.n	80028e0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002898:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d11f      	bne.n	80028e0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a4:	f043 0201 	orr.w	r2, r3, #1
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80028ac:	e018      	b.n	80028e0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d111      	bne.n	80028e0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d105      	bne.n	80028e0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d8:	f043 0201 	orr.w	r2, r3, #1
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f7ff fa4b 	bl	8001d7c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80028e6:	e00e      	b.n	8002906 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ec:	f003 0310 	and.w	r3, r3, #16
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f7ff fa5f 	bl	8001db8 <HAL_ADC_ErrorCallback>
}
 80028fa:	e004      	b.n	8002906 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	4798      	blx	r3
}
 8002906:	bf00      	nop
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b084      	sub	sp, #16
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f7ff fa37 	bl	8001d90 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002922:	bf00      	nop
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b084      	sub	sp, #16
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002936:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002948:	f043 0204 	orr.w	r2, r3, #4
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f7ff fa31 	bl	8001db8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002956:	bf00      	nop
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <LL_ADC_IsEnabled>:
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b01      	cmp	r3, #1
 8002970:	d101      	bne.n	8002976 <LL_ADC_IsEnabled+0x18>
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <LL_ADC_IsEnabled+0x1a>
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <LL_ADC_StartCalibration>:
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002996:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80029a0:	4313      	orrs	r3, r2
 80029a2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	609a      	str	r2, [r3, #8]
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <LL_ADC_IsCalibrationOnGoing>:
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80029c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029ca:	d101      	bne.n	80029d0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80029cc:	2301      	movs	r3, #1
 80029ce:	e000      	b.n	80029d2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <LL_ADC_REG_IsConversionOngoing>:
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d101      	bne.n	80029f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80029f2:	2301      	movs	r3, #1
 80029f4:	e000      	b.n	80029f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_ADCEx_Calibration_Start+0x1c>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e04d      	b.n	8002abc <HAL_ADCEx_Calibration_Start+0xb8>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f7ff fea5 	bl	8002778 <ADC_Disable>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d136      	bne.n	8002aa6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a40:	f023 0302 	bic.w	r3, r3, #2
 8002a44:	f043 0202 	orr.w	r2, r3, #2
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6839      	ldr	r1, [r7, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff ff96 	bl	8002984 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002a58:	e014      	b.n	8002a84 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	4a18      	ldr	r2, [pc, #96]	; (8002ac4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d90d      	bls.n	8002a84 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6c:	f023 0312 	bic.w	r3, r3, #18
 8002a70:	f043 0210 	orr.w	r2, r3, #16
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e01b      	b.n	8002abc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff ff94 	bl	80029b6 <LL_ADC_IsCalibrationOnGoing>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1e2      	bne.n	8002a5a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a98:	f023 0303 	bic.w	r3, r3, #3
 8002a9c:	f043 0201 	orr.w	r2, r3, #1
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	65da      	str	r2, [r3, #92]	; 0x5c
 8002aa4:	e005      	b.n	8002ab2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aaa:	f043 0210 	orr.w	r2, r3, #16
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	0004de01 	.word	0x0004de01

08002ac8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002b2c:	b590      	push	{r4, r7, lr}
 8002b2e:	b0a1      	sub	sp, #132	; 0x84
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e0e7      	b.n	8002d1a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002b52:	2300      	movs	r3, #0
 8002b54:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002b56:	2300      	movs	r3, #0
 8002b58:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b62:	d102      	bne.n	8002b6a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002b64:	4b6f      	ldr	r3, [pc, #444]	; (8002d24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b66:	60bb      	str	r3, [r7, #8]
 8002b68:	e009      	b.n	8002b7e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a6e      	ldr	r2, [pc, #440]	; (8002d28 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d102      	bne.n	8002b7a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002b74:	4b6d      	ldr	r3, [pc, #436]	; (8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002b76:	60bb      	str	r3, [r7, #8]
 8002b78:	e001      	b.n	8002b7e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10b      	bne.n	8002b9c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b88:	f043 0220 	orr.w	r2, r3, #32
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0be      	b.n	8002d1a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff ff1d 	bl	80029de <LL_ADC_REG_IsConversionOngoing>
 8002ba4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff ff17 	bl	80029de <LL_ADC_REG_IsConversionOngoing>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f040 80a0 	bne.w	8002cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002bb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f040 809c 	bne.w	8002cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bc8:	d004      	beq.n	8002bd4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a55      	ldr	r2, [pc, #340]	; (8002d24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d101      	bne.n	8002bd8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002bd4:	4b56      	ldr	r3, [pc, #344]	; (8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002bd6:	e000      	b.n	8002bda <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002bd8:	4b56      	ldr	r3, [pc, #344]	; (8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002bda:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d04b      	beq.n	8002c7c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002be4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	6859      	ldr	r1, [r3, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bf6:	035b      	lsls	r3, r3, #13
 8002bf8:	430b      	orrs	r3, r1
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bfe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c08:	d004      	beq.n	8002c14 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a45      	ldr	r2, [pc, #276]	; (8002d24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d10f      	bne.n	8002c34 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002c14:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c18:	f7ff fea1 	bl	800295e <LL_ADC_IsEnabled>
 8002c1c:	4604      	mov	r4, r0
 8002c1e:	4841      	ldr	r0, [pc, #260]	; (8002d24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c20:	f7ff fe9d 	bl	800295e <LL_ADC_IsEnabled>
 8002c24:	4603      	mov	r3, r0
 8002c26:	4323      	orrs	r3, r4
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	bf0c      	ite	eq
 8002c2c:	2301      	moveq	r3, #1
 8002c2e:	2300      	movne	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	e012      	b.n	8002c5a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002c34:	483c      	ldr	r0, [pc, #240]	; (8002d28 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002c36:	f7ff fe92 	bl	800295e <LL_ADC_IsEnabled>
 8002c3a:	4604      	mov	r4, r0
 8002c3c:	483b      	ldr	r0, [pc, #236]	; (8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002c3e:	f7ff fe8e 	bl	800295e <LL_ADC_IsEnabled>
 8002c42:	4603      	mov	r3, r0
 8002c44:	431c      	orrs	r4, r3
 8002c46:	483c      	ldr	r0, [pc, #240]	; (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002c48:	f7ff fe89 	bl	800295e <LL_ADC_IsEnabled>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	4323      	orrs	r3, r4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	bf0c      	ite	eq
 8002c54:	2301      	moveq	r3, #1
 8002c56:	2300      	movne	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d056      	beq.n	8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c66:	f023 030f 	bic.w	r3, r3, #15
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	6811      	ldr	r1, [r2, #0]
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	6892      	ldr	r2, [r2, #8]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	431a      	orrs	r2, r3
 8002c76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c78:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c7a:	e047      	b.n	8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c86:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c90:	d004      	beq.n	8002c9c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a23      	ldr	r2, [pc, #140]	; (8002d24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d10f      	bne.n	8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002c9c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002ca0:	f7ff fe5d 	bl	800295e <LL_ADC_IsEnabled>
 8002ca4:	4604      	mov	r4, r0
 8002ca6:	481f      	ldr	r0, [pc, #124]	; (8002d24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ca8:	f7ff fe59 	bl	800295e <LL_ADC_IsEnabled>
 8002cac:	4603      	mov	r3, r0
 8002cae:	4323      	orrs	r3, r4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	bf0c      	ite	eq
 8002cb4:	2301      	moveq	r3, #1
 8002cb6:	2300      	movne	r3, #0
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	e012      	b.n	8002ce2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002cbc:	481a      	ldr	r0, [pc, #104]	; (8002d28 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002cbe:	f7ff fe4e 	bl	800295e <LL_ADC_IsEnabled>
 8002cc2:	4604      	mov	r4, r0
 8002cc4:	4819      	ldr	r0, [pc, #100]	; (8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002cc6:	f7ff fe4a 	bl	800295e <LL_ADC_IsEnabled>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	431c      	orrs	r4, r3
 8002cce:	481a      	ldr	r0, [pc, #104]	; (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002cd0:	f7ff fe45 	bl	800295e <LL_ADC_IsEnabled>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	4323      	orrs	r3, r4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	bf0c      	ite	eq
 8002cdc:	2301      	moveq	r3, #1
 8002cde:	2300      	movne	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d012      	beq.n	8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ce6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002cee:	f023 030f 	bic.w	r3, r3, #15
 8002cf2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002cf4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002cf6:	e009      	b.n	8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfc:	f043 0220 	orr.w	r2, r3, #32
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002d0a:	e000      	b.n	8002d0e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d0c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d16:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3784      	adds	r7, #132	; 0x84
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd90      	pop	{r4, r7, pc}
 8002d22:	bf00      	nop
 8002d24:	50000100 	.word	0x50000100
 8002d28:	50000400 	.word	0x50000400
 8002d2c:	50000500 	.word	0x50000500
 8002d30:	50000300 	.word	0x50000300
 8002d34:	50000700 	.word	0x50000700
 8002d38:	50000600 	.word	0x50000600

08002d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <__NVIC_SetPriorityGrouping+0x44>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d58:	4013      	ands	r3, r2
 8002d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d6e:	4a04      	ldr	r2, [pc, #16]	; (8002d80 <__NVIC_SetPriorityGrouping+0x44>)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	60d3      	str	r3, [r2, #12]
}
 8002d74:	bf00      	nop
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d88:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <__NVIC_GetPriorityGrouping+0x18>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	0a1b      	lsrs	r3, r3, #8
 8002d8e:	f003 0307 	and.w	r3, r3, #7
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	db0b      	blt.n	8002dca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002db2:	79fb      	ldrb	r3, [r7, #7]
 8002db4:	f003 021f 	and.w	r2, r3, #31
 8002db8:	4907      	ldr	r1, [pc, #28]	; (8002dd8 <__NVIC_EnableIRQ+0x38>)
 8002dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbe:	095b      	lsrs	r3, r3, #5
 8002dc0:	2001      	movs	r0, #1
 8002dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8002dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	e000e100 	.word	0xe000e100

08002ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	6039      	str	r1, [r7, #0]
 8002de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	db0a      	blt.n	8002e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	490c      	ldr	r1, [pc, #48]	; (8002e28 <__NVIC_SetPriority+0x4c>)
 8002df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfa:	0112      	lsls	r2, r2, #4
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	440b      	add	r3, r1
 8002e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e04:	e00a      	b.n	8002e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	4908      	ldr	r1, [pc, #32]	; (8002e2c <__NVIC_SetPriority+0x50>)
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	3b04      	subs	r3, #4
 8002e14:	0112      	lsls	r2, r2, #4
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	440b      	add	r3, r1
 8002e1a:	761a      	strb	r2, [r3, #24]
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	e000e100 	.word	0xe000e100
 8002e2c:	e000ed00 	.word	0xe000ed00

08002e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b089      	sub	sp, #36	; 0x24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	f1c3 0307 	rsb	r3, r3, #7
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	bf28      	it	cs
 8002e4e:	2304      	movcs	r3, #4
 8002e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	3304      	adds	r3, #4
 8002e56:	2b06      	cmp	r3, #6
 8002e58:	d902      	bls.n	8002e60 <NVIC_EncodePriority+0x30>
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	3b03      	subs	r3, #3
 8002e5e:	e000      	b.n	8002e62 <NVIC_EncodePriority+0x32>
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e64:	f04f 32ff 	mov.w	r2, #4294967295
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	43da      	mvns	r2, r3
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	401a      	ands	r2, r3
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e78:	f04f 31ff 	mov.w	r1, #4294967295
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e82:	43d9      	mvns	r1, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e88:	4313      	orrs	r3, r2
         );
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3724      	adds	r7, #36	; 0x24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
	...

08002e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ea8:	d301      	bcc.n	8002eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e00f      	b.n	8002ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eae:	4a0a      	ldr	r2, [pc, #40]	; (8002ed8 <SysTick_Config+0x40>)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eb6:	210f      	movs	r1, #15
 8002eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ebc:	f7ff ff8e 	bl	8002ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ec0:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <SysTick_Config+0x40>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ec6:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <SysTick_Config+0x40>)
 8002ec8:	2207      	movs	r2, #7
 8002eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	e000e010 	.word	0xe000e010

08002edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7ff ff29 	bl	8002d3c <__NVIC_SetPriorityGrouping>
}
 8002eea:	bf00      	nop
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b086      	sub	sp, #24
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	4603      	mov	r3, r0
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	607a      	str	r2, [r7, #4]
 8002efe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f00:	f7ff ff40 	bl	8002d84 <__NVIC_GetPriorityGrouping>
 8002f04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	68b9      	ldr	r1, [r7, #8]
 8002f0a:	6978      	ldr	r0, [r7, #20]
 8002f0c:	f7ff ff90 	bl	8002e30 <NVIC_EncodePriority>
 8002f10:	4602      	mov	r2, r0
 8002f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f16:	4611      	mov	r1, r2
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff ff5f 	bl	8002ddc <__NVIC_SetPriority>
}
 8002f1e:	bf00      	nop
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff ff33 	bl	8002da0 <__NVIC_EnableIRQ>
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b082      	sub	sp, #8
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7ff ffa4 	bl	8002e98 <SysTick_Config>
 8002f50:	4603      	mov	r3, r0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e08d      	b.n	800308a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	461a      	mov	r2, r3
 8002f74:	4b47      	ldr	r3, [pc, #284]	; (8003094 <HAL_DMA_Init+0x138>)
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d80f      	bhi.n	8002f9a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	4b45      	ldr	r3, [pc, #276]	; (8003098 <HAL_DMA_Init+0x13c>)
 8002f82:	4413      	add	r3, r2
 8002f84:	4a45      	ldr	r2, [pc, #276]	; (800309c <HAL_DMA_Init+0x140>)
 8002f86:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8a:	091b      	lsrs	r3, r3, #4
 8002f8c:	009a      	lsls	r2, r3, #2
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a42      	ldr	r2, [pc, #264]	; (80030a0 <HAL_DMA_Init+0x144>)
 8002f96:	641a      	str	r2, [r3, #64]	; 0x40
 8002f98:	e00e      	b.n	8002fb8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	4b40      	ldr	r3, [pc, #256]	; (80030a4 <HAL_DMA_Init+0x148>)
 8002fa2:	4413      	add	r3, r2
 8002fa4:	4a3d      	ldr	r2, [pc, #244]	; (800309c <HAL_DMA_Init+0x140>)
 8002fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002faa:	091b      	lsrs	r3, r3, #4
 8002fac:	009a      	lsls	r2, r3, #2
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a3c      	ldr	r2, [pc, #240]	; (80030a8 <HAL_DMA_Init+0x14c>)
 8002fb6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002fdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fe8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ff4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f9b6 	bl	800337c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003018:	d102      	bne.n	8003020 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003034:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d010      	beq.n	8003060 <HAL_DMA_Init+0x104>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b04      	cmp	r3, #4
 8003044:	d80c      	bhi.n	8003060 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f9d6 	bl	80033f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800305c:	605a      	str	r2, [r3, #4]
 800305e:	e008      	b.n	8003072 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40020407 	.word	0x40020407
 8003098:	bffdfff8 	.word	0xbffdfff8
 800309c:	cccccccd 	.word	0xcccccccd
 80030a0:	40020000 	.word	0x40020000
 80030a4:	bffdfbf8 	.word	0xbffdfbf8
 80030a8:	40020400 	.word	0x40020400

080030ac <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
 80030b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <HAL_DMA_Start_IT+0x20>
 80030c8:	2302      	movs	r3, #2
 80030ca:	e066      	b.n	800319a <HAL_DMA_Start_IT+0xee>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d155      	bne.n	800318c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0201 	bic.w	r2, r2, #1
 80030fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	68b9      	ldr	r1, [r7, #8]
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 f8fb 	bl	8003300 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	2b00      	cmp	r3, #0
 8003110:	d008      	beq.n	8003124 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f042 020e 	orr.w	r2, r2, #14
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	e00f      	b.n	8003144 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0204 	bic.w	r2, r2, #4
 8003132:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 020a 	orr.w	r2, r2, #10
 8003142:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d007      	beq.n	8003162 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800315c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003160:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003166:	2b00      	cmp	r3, #0
 8003168:	d007      	beq.n	800317a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003174:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003178:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f042 0201 	orr.w	r2, r2, #1
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	e005      	b.n	8003198 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003194:	2302      	movs	r3, #2
 8003196:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003198:	7dfb      	ldrb	r3, [r7, #23]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b084      	sub	sp, #16
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031be:	f003 031f 	and.w	r3, r3, #31
 80031c2:	2204      	movs	r2, #4
 80031c4:	409a      	lsls	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4013      	ands	r3, r2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d026      	beq.n	800321c <HAL_DMA_IRQHandler+0x7a>
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d021      	beq.n	800321c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0320 	and.w	r3, r3, #32
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d107      	bne.n	80031f6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0204 	bic.w	r2, r2, #4
 80031f4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fa:	f003 021f 	and.w	r2, r3, #31
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	2104      	movs	r1, #4
 8003204:	fa01 f202 	lsl.w	r2, r1, r2
 8003208:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	2b00      	cmp	r3, #0
 8003210:	d071      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800321a:	e06c      	b.n	80032f6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003220:	f003 031f 	and.w	r3, r3, #31
 8003224:	2202      	movs	r2, #2
 8003226:	409a      	lsls	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4013      	ands	r3, r2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d02e      	beq.n	800328e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d029      	beq.n	800328e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0320 	and.w	r3, r3, #32
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10b      	bne.n	8003260 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 020a 	bic.w	r2, r2, #10
 8003256:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003264:	f003 021f 	and.w	r2, r3, #31
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326c:	2102      	movs	r1, #2
 800326e:	fa01 f202 	lsl.w	r2, r1, r2
 8003272:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003280:	2b00      	cmp	r3, #0
 8003282:	d038      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800328c:	e033      	b.n	80032f6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003292:	f003 031f 	and.w	r3, r3, #31
 8003296:	2208      	movs	r2, #8
 8003298:	409a      	lsls	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4013      	ands	r3, r2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d02a      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d025      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 020e 	bic.w	r2, r2, #14
 80032ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c0:	f003 021f 	and.w	r2, r3, #31
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	2101      	movs	r1, #1
 80032ca:	fa01 f202 	lsl.w	r2, r1, r2
 80032ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d004      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80032f6:	bf00      	nop
 80032f8:	bf00      	nop
}
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
 800330c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003316:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331c:	2b00      	cmp	r3, #0
 800331e:	d004      	beq.n	800332a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003328:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332e:	f003 021f 	and.w	r2, r3, #31
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	2101      	movs	r1, #1
 8003338:	fa01 f202 	lsl.w	r2, r1, r2
 800333c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b10      	cmp	r3, #16
 800334c:	d108      	bne.n	8003360 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800335e:	e007      	b.n	8003370 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	60da      	str	r2, [r3, #12]
}
 8003370:	bf00      	nop
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800337c:	b480      	push	{r7}
 800337e:	b087      	sub	sp, #28
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	461a      	mov	r2, r3
 800338a:	4b16      	ldr	r3, [pc, #88]	; (80033e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800338c:	429a      	cmp	r2, r3
 800338e:	d802      	bhi.n	8003396 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003390:	4b15      	ldr	r3, [pc, #84]	; (80033e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	e001      	b.n	800339a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003396:	4b15      	ldr	r3, [pc, #84]	; (80033ec <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003398:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	3b08      	subs	r3, #8
 80033a6:	4a12      	ldr	r2, [pc, #72]	; (80033f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80033a8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ac:	091b      	lsrs	r3, r3, #4
 80033ae:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b4:	089b      	lsrs	r3, r3, #2
 80033b6:	009a      	lsls	r2, r3, #2
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4413      	add	r3, r2
 80033bc:	461a      	mov	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a0b      	ldr	r2, [pc, #44]	; (80033f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80033c6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f003 031f 	and.w	r3, r3, #31
 80033ce:	2201      	movs	r2, #1
 80033d0:	409a      	lsls	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80033d6:	bf00      	nop
 80033d8:	371c      	adds	r7, #28
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	40020407 	.word	0x40020407
 80033e8:	40020800 	.word	0x40020800
 80033ec:	40020820 	.word	0x40020820
 80033f0:	cccccccd 	.word	0xcccccccd
 80033f4:	40020880 	.word	0x40020880

080033f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	b2db      	uxtb	r3, r3
 8003406:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800340c:	4413      	add	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	461a      	mov	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a08      	ldr	r2, [pc, #32]	; (800343c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800341a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	3b01      	subs	r3, #1
 8003420:	f003 031f 	and.w	r3, r3, #31
 8003424:	2201      	movs	r2, #1
 8003426:	409a      	lsls	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800342c:	bf00      	nop
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	1000823f 	.word	0x1000823f
 800343c:	40020940 	.word	0x40020940

08003440 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003440:	b480      	push	{r7}
 8003442:	b087      	sub	sp, #28
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800344e:	e15a      	b.n	8003706 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	2101      	movs	r1, #1
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	fa01 f303 	lsl.w	r3, r1, r3
 800345c:	4013      	ands	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 814c 	beq.w	8003700 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 0303 	and.w	r3, r3, #3
 8003470:	2b01      	cmp	r3, #1
 8003472:	d005      	beq.n	8003480 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800347c:	2b02      	cmp	r3, #2
 800347e:	d130      	bne.n	80034e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	2203      	movs	r2, #3
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	43db      	mvns	r3, r3
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4013      	ands	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034b6:	2201      	movs	r2, #1
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	43db      	mvns	r3, r3
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4013      	ands	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	091b      	lsrs	r3, r3, #4
 80034cc:	f003 0201 	and.w	r2, r3, #1
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	2b03      	cmp	r3, #3
 80034ec:	d017      	beq.n	800351e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	2203      	movs	r2, #3
 80034fa:	fa02 f303 	lsl.w	r3, r2, r3
 80034fe:	43db      	mvns	r3, r3
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4013      	ands	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d123      	bne.n	8003572 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	08da      	lsrs	r2, r3, #3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	3208      	adds	r2, #8
 8003532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003536:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	220f      	movs	r2, #15
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43db      	mvns	r3, r3
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4013      	ands	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	691a      	ldr	r2, [r3, #16]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	4313      	orrs	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	08da      	lsrs	r2, r3, #3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3208      	adds	r2, #8
 800356c:	6939      	ldr	r1, [r7, #16]
 800356e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	2203      	movs	r2, #3
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	43db      	mvns	r3, r3
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4013      	ands	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f003 0203 	and.w	r2, r3, #3
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 80a6 	beq.w	8003700 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035b4:	4b5b      	ldr	r3, [pc, #364]	; (8003724 <HAL_GPIO_Init+0x2e4>)
 80035b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035b8:	4a5a      	ldr	r2, [pc, #360]	; (8003724 <HAL_GPIO_Init+0x2e4>)
 80035ba:	f043 0301 	orr.w	r3, r3, #1
 80035be:	6613      	str	r3, [r2, #96]	; 0x60
 80035c0:	4b58      	ldr	r3, [pc, #352]	; (8003724 <HAL_GPIO_Init+0x2e4>)
 80035c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	60bb      	str	r3, [r7, #8]
 80035ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035cc:	4a56      	ldr	r2, [pc, #344]	; (8003728 <HAL_GPIO_Init+0x2e8>)
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	089b      	lsrs	r3, r3, #2
 80035d2:	3302      	adds	r3, #2
 80035d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f003 0303 	and.w	r3, r3, #3
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	220f      	movs	r2, #15
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	43db      	mvns	r3, r3
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	4013      	ands	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80035f6:	d01f      	beq.n	8003638 <HAL_GPIO_Init+0x1f8>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a4c      	ldr	r2, [pc, #304]	; (800372c <HAL_GPIO_Init+0x2ec>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d019      	beq.n	8003634 <HAL_GPIO_Init+0x1f4>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a4b      	ldr	r2, [pc, #300]	; (8003730 <HAL_GPIO_Init+0x2f0>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d013      	beq.n	8003630 <HAL_GPIO_Init+0x1f0>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a4a      	ldr	r2, [pc, #296]	; (8003734 <HAL_GPIO_Init+0x2f4>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d00d      	beq.n	800362c <HAL_GPIO_Init+0x1ec>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a49      	ldr	r2, [pc, #292]	; (8003738 <HAL_GPIO_Init+0x2f8>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d007      	beq.n	8003628 <HAL_GPIO_Init+0x1e8>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a48      	ldr	r2, [pc, #288]	; (800373c <HAL_GPIO_Init+0x2fc>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d101      	bne.n	8003624 <HAL_GPIO_Init+0x1e4>
 8003620:	2305      	movs	r3, #5
 8003622:	e00a      	b.n	800363a <HAL_GPIO_Init+0x1fa>
 8003624:	2306      	movs	r3, #6
 8003626:	e008      	b.n	800363a <HAL_GPIO_Init+0x1fa>
 8003628:	2304      	movs	r3, #4
 800362a:	e006      	b.n	800363a <HAL_GPIO_Init+0x1fa>
 800362c:	2303      	movs	r3, #3
 800362e:	e004      	b.n	800363a <HAL_GPIO_Init+0x1fa>
 8003630:	2302      	movs	r3, #2
 8003632:	e002      	b.n	800363a <HAL_GPIO_Init+0x1fa>
 8003634:	2301      	movs	r3, #1
 8003636:	e000      	b.n	800363a <HAL_GPIO_Init+0x1fa>
 8003638:	2300      	movs	r3, #0
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	f002 0203 	and.w	r2, r2, #3
 8003640:	0092      	lsls	r2, r2, #2
 8003642:	4093      	lsls	r3, r2
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	4313      	orrs	r3, r2
 8003648:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800364a:	4937      	ldr	r1, [pc, #220]	; (8003728 <HAL_GPIO_Init+0x2e8>)
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	089b      	lsrs	r3, r3, #2
 8003650:	3302      	adds	r3, #2
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003658:	4b39      	ldr	r3, [pc, #228]	; (8003740 <HAL_GPIO_Init+0x300>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	43db      	mvns	r3, r3
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4013      	ands	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	4313      	orrs	r3, r2
 800367a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800367c:	4a30      	ldr	r2, [pc, #192]	; (8003740 <HAL_GPIO_Init+0x300>)
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003682:	4b2f      	ldr	r3, [pc, #188]	; (8003740 <HAL_GPIO_Init+0x300>)
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	43db      	mvns	r3, r3
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	4013      	ands	r3, r2
 8003690:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036a6:	4a26      	ldr	r2, [pc, #152]	; (8003740 <HAL_GPIO_Init+0x300>)
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80036ac:	4b24      	ldr	r3, [pc, #144]	; (8003740 <HAL_GPIO_Init+0x300>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	43db      	mvns	r3, r3
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4013      	ands	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036d0:	4a1b      	ldr	r2, [pc, #108]	; (8003740 <HAL_GPIO_Init+0x300>)
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80036d6:	4b1a      	ldr	r3, [pc, #104]	; (8003740 <HAL_GPIO_Init+0x300>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	43db      	mvns	r3, r3
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4013      	ands	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036fa:	4a11      	ldr	r2, [pc, #68]	; (8003740 <HAL_GPIO_Init+0x300>)
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	3301      	adds	r3, #1
 8003704:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	fa22 f303 	lsr.w	r3, r2, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	f47f ae9d 	bne.w	8003450 <HAL_GPIO_Init+0x10>
  }
}
 8003716:	bf00      	nop
 8003718:	bf00      	nop
 800371a:	371c      	adds	r7, #28
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	40021000 	.word	0x40021000
 8003728:	40010000 	.word	0x40010000
 800372c:	48000400 	.word	0x48000400
 8003730:	48000800 	.word	0x48000800
 8003734:	48000c00 	.word	0x48000c00
 8003738:	48001000 	.word	0x48001000
 800373c:	48001400 	.word	0x48001400
 8003740:	40010400 	.word	0x40010400

08003744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	807b      	strh	r3, [r7, #2]
 8003750:	4613      	mov	r3, r2
 8003752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003754:	787b      	ldrb	r3, [r7, #1]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800375a:	887a      	ldrh	r2, [r7, #2]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003760:	e002      	b.n	8003768 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003762:	887a      	ldrh	r2, [r7, #2]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	4603      	mov	r3, r0
 800377c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800377e:	4b08      	ldr	r3, [pc, #32]	; (80037a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003780:	695a      	ldr	r2, [r3, #20]
 8003782:	88fb      	ldrh	r3, [r7, #6]
 8003784:	4013      	ands	r3, r2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d006      	beq.n	8003798 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800378a:	4a05      	ldr	r2, [pc, #20]	; (80037a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800378c:	88fb      	ldrh	r3, [r7, #6]
 800378e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003790:	88fb      	ldrh	r3, [r7, #6]
 8003792:	4618      	mov	r0, r3
 8003794:	f000 f806 	bl	80037a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003798:	bf00      	nop
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40010400 	.word	0x40010400

080037a4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
	...

080037bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d141      	bne.n	800384e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80037ca:	4b4b      	ldr	r3, [pc, #300]	; (80038f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037d6:	d131      	bne.n	800383c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037d8:	4b47      	ldr	r3, [pc, #284]	; (80038f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037de:	4a46      	ldr	r2, [pc, #280]	; (80038f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037e8:	4b43      	ldr	r3, [pc, #268]	; (80038f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037f0:	4a41      	ldr	r2, [pc, #260]	; (80038f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037f8:	4b40      	ldr	r3, [pc, #256]	; (80038fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2232      	movs	r2, #50	; 0x32
 80037fe:	fb02 f303 	mul.w	r3, r2, r3
 8003802:	4a3f      	ldr	r2, [pc, #252]	; (8003900 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003804:	fba2 2303 	umull	r2, r3, r2, r3
 8003808:	0c9b      	lsrs	r3, r3, #18
 800380a:	3301      	adds	r3, #1
 800380c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800380e:	e002      	b.n	8003816 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	3b01      	subs	r3, #1
 8003814:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003816:	4b38      	ldr	r3, [pc, #224]	; (80038f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800381e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003822:	d102      	bne.n	800382a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1f2      	bne.n	8003810 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800382a:	4b33      	ldr	r3, [pc, #204]	; (80038f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003836:	d158      	bne.n	80038ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e057      	b.n	80038ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800383c:	4b2e      	ldr	r3, [pc, #184]	; (80038f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800383e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003842:	4a2d      	ldr	r2, [pc, #180]	; (80038f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003844:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003848:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800384c:	e04d      	b.n	80038ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003854:	d141      	bne.n	80038da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003856:	4b28      	ldr	r3, [pc, #160]	; (80038f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800385e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003862:	d131      	bne.n	80038c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003864:	4b24      	ldr	r3, [pc, #144]	; (80038f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800386a:	4a23      	ldr	r2, [pc, #140]	; (80038f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800386c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003870:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003874:	4b20      	ldr	r3, [pc, #128]	; (80038f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800387c:	4a1e      	ldr	r2, [pc, #120]	; (80038f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800387e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003882:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003884:	4b1d      	ldr	r3, [pc, #116]	; (80038fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2232      	movs	r2, #50	; 0x32
 800388a:	fb02 f303 	mul.w	r3, r2, r3
 800388e:	4a1c      	ldr	r2, [pc, #112]	; (8003900 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003890:	fba2 2303 	umull	r2, r3, r2, r3
 8003894:	0c9b      	lsrs	r3, r3, #18
 8003896:	3301      	adds	r3, #1
 8003898:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800389a:	e002      	b.n	80038a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	3b01      	subs	r3, #1
 80038a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038a2:	4b15      	ldr	r3, [pc, #84]	; (80038f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ae:	d102      	bne.n	80038b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f2      	bne.n	800389c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038b6:	4b10      	ldr	r3, [pc, #64]	; (80038f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c2:	d112      	bne.n	80038ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e011      	b.n	80038ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038c8:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038ce:	4a0a      	ldr	r2, [pc, #40]	; (80038f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80038d8:	e007      	b.n	80038ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038da:	4b07      	ldr	r3, [pc, #28]	; (80038f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038e2:	4a05      	ldr	r2, [pc, #20]	; (80038f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038e8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	40007000 	.word	0x40007000
 80038fc:	20000004 	.word	0x20000004
 8003900:	431bde83 	.word	0x431bde83

08003904 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003908:	4b05      	ldr	r3, [pc, #20]	; (8003920 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	4a04      	ldr	r2, [pc, #16]	; (8003920 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800390e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003912:	6093      	str	r3, [r2, #8]
}
 8003914:	bf00      	nop
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	40007000 	.word	0x40007000

08003924 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b088      	sub	sp, #32
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e2fe      	b.n	8003f34 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d075      	beq.n	8003a2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003942:	4b97      	ldr	r3, [pc, #604]	; (8003ba0 <HAL_RCC_OscConfig+0x27c>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 030c 	and.w	r3, r3, #12
 800394a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800394c:	4b94      	ldr	r3, [pc, #592]	; (8003ba0 <HAL_RCC_OscConfig+0x27c>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f003 0303 	and.w	r3, r3, #3
 8003954:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	2b0c      	cmp	r3, #12
 800395a:	d102      	bne.n	8003962 <HAL_RCC_OscConfig+0x3e>
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	2b03      	cmp	r3, #3
 8003960:	d002      	beq.n	8003968 <HAL_RCC_OscConfig+0x44>
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	2b08      	cmp	r3, #8
 8003966:	d10b      	bne.n	8003980 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003968:	4b8d      	ldr	r3, [pc, #564]	; (8003ba0 <HAL_RCC_OscConfig+0x27c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d05b      	beq.n	8003a2c <HAL_RCC_OscConfig+0x108>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d157      	bne.n	8003a2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e2d9      	b.n	8003f34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003988:	d106      	bne.n	8003998 <HAL_RCC_OscConfig+0x74>
 800398a:	4b85      	ldr	r3, [pc, #532]	; (8003ba0 <HAL_RCC_OscConfig+0x27c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a84      	ldr	r2, [pc, #528]	; (8003ba0 <HAL_RCC_OscConfig+0x27c>)
 8003990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	e01d      	b.n	80039d4 <HAL_RCC_OscConfig+0xb0>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039a0:	d10c      	bne.n	80039bc <HAL_RCC_OscConfig+0x98>
 80039a2:	4b7f      	ldr	r3, [pc, #508]	; (8003ba0 <HAL_RCC_OscConfig+0x27c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a7e      	ldr	r2, [pc, #504]	; (8003ba0 <HAL_RCC_OscConfig+0x27c>)
 80039a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	4b7c      	ldr	r3, [pc, #496]	; (8003ba0 <HAL_RCC_OscConfig+0x27c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a7b      	ldr	r2, [pc, #492]	; (8003ba0 <HAL_RCC_OscConfig+0x27c>)
 80039b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	e00b      	b.n	80039d4 <HAL_RCC_OscConfig+0xb0>
 80039bc:	4b78      	ldr	r3, [pc, #480]	; (8003ba0 <HAL_RCC_OscConfig+0x27c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a77      	ldr	r2, [pc, #476]	; (8003ba0 <HAL_RCC_OscConfig+0x27c>)
 80039c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039c6:	6013      	str	r3, [r2, #0]
 80039c8:	4b75      	ldr	r3, [pc, #468]	; (8003ba0 <HAL_RCC_OscConfig+0x27c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a74      	ldr	r2, [pc, #464]	; (8003ba0 <HAL_RCC_OscConfig+0x27c>)
 80039ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d013      	beq.n	8003a04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039dc:	f7fd fa6c 	bl	8000eb8 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039e4:	f7fd fa68 	bl	8000eb8 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b64      	cmp	r3, #100	; 0x64
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e29e      	b.n	8003f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039f6:	4b6a      	ldr	r3, [pc, #424]	; (8003ba0 <HAL_RCC_OscConfig+0x27c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0f0      	beq.n	80039e4 <HAL_RCC_OscConfig+0xc0>
 8003a02:	e014      	b.n	8003a2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a04:	f7fd fa58 	bl	8000eb8 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a0c:	f7fd fa54 	bl	8000eb8 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b64      	cmp	r3, #100	; 0x64
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e28a      	b.n	8003f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a1e:	4b60      	ldr	r3, [pc, #384]	; (8003ba0 <HAL_RCC_OscConfig+0x27c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1f0      	bne.n	8003a0c <HAL_RCC_OscConfig+0xe8>
 8003a2a:	e000      	b.n	8003a2e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d075      	beq.n	8003b26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a3a:	4b59      	ldr	r3, [pc, #356]	; (8003ba0 <HAL_RCC_OscConfig+0x27c>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 030c 	and.w	r3, r3, #12
 8003a42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a44:	4b56      	ldr	r3, [pc, #344]	; (8003ba0 <HAL_RCC_OscConfig+0x27c>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f003 0303 	and.w	r3, r3, #3
 8003a4c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	2b0c      	cmp	r3, #12
 8003a52:	d102      	bne.n	8003a5a <HAL_RCC_OscConfig+0x136>
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d002      	beq.n	8003a60 <HAL_RCC_OscConfig+0x13c>
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	2b04      	cmp	r3, #4
 8003a5e:	d11f      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a60:	4b4f      	ldr	r3, [pc, #316]	; (8003ba0 <HAL_RCC_OscConfig+0x27c>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d005      	beq.n	8003a78 <HAL_RCC_OscConfig+0x154>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e25d      	b.n	8003f34 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a78:	4b49      	ldr	r3, [pc, #292]	; (8003ba0 <HAL_RCC_OscConfig+0x27c>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	061b      	lsls	r3, r3, #24
 8003a86:	4946      	ldr	r1, [pc, #280]	; (8003ba0 <HAL_RCC_OscConfig+0x27c>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003a8c:	4b45      	ldr	r3, [pc, #276]	; (8003ba4 <HAL_RCC_OscConfig+0x280>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7fd f9c5 	bl	8000e20 <HAL_InitTick>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d043      	beq.n	8003b24 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e249      	b.n	8003f34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d023      	beq.n	8003af0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aa8:	4b3d      	ldr	r3, [pc, #244]	; (8003ba0 <HAL_RCC_OscConfig+0x27c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a3c      	ldr	r2, [pc, #240]	; (8003ba0 <HAL_RCC_OscConfig+0x27c>)
 8003aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab4:	f7fd fa00 	bl	8000eb8 <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003abc:	f7fd f9fc 	bl	8000eb8 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e232      	b.n	8003f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ace:	4b34      	ldr	r3, [pc, #208]	; (8003ba0 <HAL_RCC_OscConfig+0x27c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0f0      	beq.n	8003abc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ada:	4b31      	ldr	r3, [pc, #196]	; (8003ba0 <HAL_RCC_OscConfig+0x27c>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	061b      	lsls	r3, r3, #24
 8003ae8:	492d      	ldr	r1, [pc, #180]	; (8003ba0 <HAL_RCC_OscConfig+0x27c>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	604b      	str	r3, [r1, #4]
 8003aee:	e01a      	b.n	8003b26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003af0:	4b2b      	ldr	r3, [pc, #172]	; (8003ba0 <HAL_RCC_OscConfig+0x27c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a2a      	ldr	r2, [pc, #168]	; (8003ba0 <HAL_RCC_OscConfig+0x27c>)
 8003af6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afc:	f7fd f9dc 	bl	8000eb8 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b04:	f7fd f9d8 	bl	8000eb8 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e20e      	b.n	8003f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b16:	4b22      	ldr	r3, [pc, #136]	; (8003ba0 <HAL_RCC_OscConfig+0x27c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1f0      	bne.n	8003b04 <HAL_RCC_OscConfig+0x1e0>
 8003b22:	e000      	b.n	8003b26 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d041      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d01c      	beq.n	8003b74 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b3a:	4b19      	ldr	r3, [pc, #100]	; (8003ba0 <HAL_RCC_OscConfig+0x27c>)
 8003b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b40:	4a17      	ldr	r2, [pc, #92]	; (8003ba0 <HAL_RCC_OscConfig+0x27c>)
 8003b42:	f043 0301 	orr.w	r3, r3, #1
 8003b46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4a:	f7fd f9b5 	bl	8000eb8 <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b50:	e008      	b.n	8003b64 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b52:	f7fd f9b1 	bl	8000eb8 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e1e7      	b.n	8003f34 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b64:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <HAL_RCC_OscConfig+0x27c>)
 8003b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0ef      	beq.n	8003b52 <HAL_RCC_OscConfig+0x22e>
 8003b72:	e020      	b.n	8003bb6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b74:	4b0a      	ldr	r3, [pc, #40]	; (8003ba0 <HAL_RCC_OscConfig+0x27c>)
 8003b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b7a:	4a09      	ldr	r2, [pc, #36]	; (8003ba0 <HAL_RCC_OscConfig+0x27c>)
 8003b7c:	f023 0301 	bic.w	r3, r3, #1
 8003b80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b84:	f7fd f998 	bl	8000eb8 <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b8a:	e00d      	b.n	8003ba8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b8c:	f7fd f994 	bl	8000eb8 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d906      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e1ca      	b.n	8003f34 <HAL_RCC_OscConfig+0x610>
 8003b9e:	bf00      	nop
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ba8:	4b8c      	ldr	r3, [pc, #560]	; (8003ddc <HAL_RCC_OscConfig+0x4b8>)
 8003baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1ea      	bne.n	8003b8c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 80a6 	beq.w	8003d10 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bc8:	4b84      	ldr	r3, [pc, #528]	; (8003ddc <HAL_RCC_OscConfig+0x4b8>)
 8003bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x2b4>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e000      	b.n	8003bda <HAL_RCC_OscConfig+0x2b6>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00d      	beq.n	8003bfa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bde:	4b7f      	ldr	r3, [pc, #508]	; (8003ddc <HAL_RCC_OscConfig+0x4b8>)
 8003be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be2:	4a7e      	ldr	r2, [pc, #504]	; (8003ddc <HAL_RCC_OscConfig+0x4b8>)
 8003be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be8:	6593      	str	r3, [r2, #88]	; 0x58
 8003bea:	4b7c      	ldr	r3, [pc, #496]	; (8003ddc <HAL_RCC_OscConfig+0x4b8>)
 8003bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bfa:	4b79      	ldr	r3, [pc, #484]	; (8003de0 <HAL_RCC_OscConfig+0x4bc>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d118      	bne.n	8003c38 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c06:	4b76      	ldr	r3, [pc, #472]	; (8003de0 <HAL_RCC_OscConfig+0x4bc>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a75      	ldr	r2, [pc, #468]	; (8003de0 <HAL_RCC_OscConfig+0x4bc>)
 8003c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c12:	f7fd f951 	bl	8000eb8 <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c1a:	f7fd f94d 	bl	8000eb8 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e183      	b.n	8003f34 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c2c:	4b6c      	ldr	r3, [pc, #432]	; (8003de0 <HAL_RCC_OscConfig+0x4bc>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0f0      	beq.n	8003c1a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d108      	bne.n	8003c52 <HAL_RCC_OscConfig+0x32e>
 8003c40:	4b66      	ldr	r3, [pc, #408]	; (8003ddc <HAL_RCC_OscConfig+0x4b8>)
 8003c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c46:	4a65      	ldr	r2, [pc, #404]	; (8003ddc <HAL_RCC_OscConfig+0x4b8>)
 8003c48:	f043 0301 	orr.w	r3, r3, #1
 8003c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c50:	e024      	b.n	8003c9c <HAL_RCC_OscConfig+0x378>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	2b05      	cmp	r3, #5
 8003c58:	d110      	bne.n	8003c7c <HAL_RCC_OscConfig+0x358>
 8003c5a:	4b60      	ldr	r3, [pc, #384]	; (8003ddc <HAL_RCC_OscConfig+0x4b8>)
 8003c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c60:	4a5e      	ldr	r2, [pc, #376]	; (8003ddc <HAL_RCC_OscConfig+0x4b8>)
 8003c62:	f043 0304 	orr.w	r3, r3, #4
 8003c66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c6a:	4b5c      	ldr	r3, [pc, #368]	; (8003ddc <HAL_RCC_OscConfig+0x4b8>)
 8003c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c70:	4a5a      	ldr	r2, [pc, #360]	; (8003ddc <HAL_RCC_OscConfig+0x4b8>)
 8003c72:	f043 0301 	orr.w	r3, r3, #1
 8003c76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c7a:	e00f      	b.n	8003c9c <HAL_RCC_OscConfig+0x378>
 8003c7c:	4b57      	ldr	r3, [pc, #348]	; (8003ddc <HAL_RCC_OscConfig+0x4b8>)
 8003c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c82:	4a56      	ldr	r2, [pc, #344]	; (8003ddc <HAL_RCC_OscConfig+0x4b8>)
 8003c84:	f023 0301 	bic.w	r3, r3, #1
 8003c88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c8c:	4b53      	ldr	r3, [pc, #332]	; (8003ddc <HAL_RCC_OscConfig+0x4b8>)
 8003c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c92:	4a52      	ldr	r2, [pc, #328]	; (8003ddc <HAL_RCC_OscConfig+0x4b8>)
 8003c94:	f023 0304 	bic.w	r3, r3, #4
 8003c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d016      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca4:	f7fd f908 	bl	8000eb8 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003caa:	e00a      	b.n	8003cc2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cac:	f7fd f904 	bl	8000eb8 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e138      	b.n	8003f34 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cc2:	4b46      	ldr	r3, [pc, #280]	; (8003ddc <HAL_RCC_OscConfig+0x4b8>)
 8003cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0ed      	beq.n	8003cac <HAL_RCC_OscConfig+0x388>
 8003cd0:	e015      	b.n	8003cfe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd2:	f7fd f8f1 	bl	8000eb8 <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cd8:	e00a      	b.n	8003cf0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cda:	f7fd f8ed 	bl	8000eb8 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e121      	b.n	8003f34 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cf0:	4b3a      	ldr	r3, [pc, #232]	; (8003ddc <HAL_RCC_OscConfig+0x4b8>)
 8003cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1ed      	bne.n	8003cda <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003cfe:	7ffb      	ldrb	r3, [r7, #31]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d105      	bne.n	8003d10 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d04:	4b35      	ldr	r3, [pc, #212]	; (8003ddc <HAL_RCC_OscConfig+0x4b8>)
 8003d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d08:	4a34      	ldr	r2, [pc, #208]	; (8003ddc <HAL_RCC_OscConfig+0x4b8>)
 8003d0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d0e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0320 	and.w	r3, r3, #32
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d03c      	beq.n	8003d96 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d01c      	beq.n	8003d5e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d24:	4b2d      	ldr	r3, [pc, #180]	; (8003ddc <HAL_RCC_OscConfig+0x4b8>)
 8003d26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d2a:	4a2c      	ldr	r2, [pc, #176]	; (8003ddc <HAL_RCC_OscConfig+0x4b8>)
 8003d2c:	f043 0301 	orr.w	r3, r3, #1
 8003d30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d34:	f7fd f8c0 	bl	8000eb8 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d3c:	f7fd f8bc 	bl	8000eb8 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e0f2      	b.n	8003f34 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d4e:	4b23      	ldr	r3, [pc, #140]	; (8003ddc <HAL_RCC_OscConfig+0x4b8>)
 8003d50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0ef      	beq.n	8003d3c <HAL_RCC_OscConfig+0x418>
 8003d5c:	e01b      	b.n	8003d96 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d5e:	4b1f      	ldr	r3, [pc, #124]	; (8003ddc <HAL_RCC_OscConfig+0x4b8>)
 8003d60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d64:	4a1d      	ldr	r2, [pc, #116]	; (8003ddc <HAL_RCC_OscConfig+0x4b8>)
 8003d66:	f023 0301 	bic.w	r3, r3, #1
 8003d6a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6e:	f7fd f8a3 	bl	8000eb8 <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d74:	e008      	b.n	8003d88 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d76:	f7fd f89f 	bl	8000eb8 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e0d5      	b.n	8003f34 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d88:	4b14      	ldr	r3, [pc, #80]	; (8003ddc <HAL_RCC_OscConfig+0x4b8>)
 8003d8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1ef      	bne.n	8003d76 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 80c9 	beq.w	8003f32 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003da0:	4b0e      	ldr	r3, [pc, #56]	; (8003ddc <HAL_RCC_OscConfig+0x4b8>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 030c 	and.w	r3, r3, #12
 8003da8:	2b0c      	cmp	r3, #12
 8003daa:	f000 8083 	beq.w	8003eb4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d15e      	bne.n	8003e74 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db6:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <HAL_RCC_OscConfig+0x4b8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a08      	ldr	r2, [pc, #32]	; (8003ddc <HAL_RCC_OscConfig+0x4b8>)
 8003dbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc2:	f7fd f879 	bl	8000eb8 <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dc8:	e00c      	b.n	8003de4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dca:	f7fd f875 	bl	8000eb8 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d905      	bls.n	8003de4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e0ab      	b.n	8003f34 <HAL_RCC_OscConfig+0x610>
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003de4:	4b55      	ldr	r3, [pc, #340]	; (8003f3c <HAL_RCC_OscConfig+0x618>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1ec      	bne.n	8003dca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003df0:	4b52      	ldr	r3, [pc, #328]	; (8003f3c <HAL_RCC_OscConfig+0x618>)
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	4b52      	ldr	r3, [pc, #328]	; (8003f40 <HAL_RCC_OscConfig+0x61c>)
 8003df6:	4013      	ands	r3, r2
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6a11      	ldr	r1, [r2, #32]
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e00:	3a01      	subs	r2, #1
 8003e02:	0112      	lsls	r2, r2, #4
 8003e04:	4311      	orrs	r1, r2
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003e0a:	0212      	lsls	r2, r2, #8
 8003e0c:	4311      	orrs	r1, r2
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e12:	0852      	lsrs	r2, r2, #1
 8003e14:	3a01      	subs	r2, #1
 8003e16:	0552      	lsls	r2, r2, #21
 8003e18:	4311      	orrs	r1, r2
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e1e:	0852      	lsrs	r2, r2, #1
 8003e20:	3a01      	subs	r2, #1
 8003e22:	0652      	lsls	r2, r2, #25
 8003e24:	4311      	orrs	r1, r2
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003e2a:	06d2      	lsls	r2, r2, #27
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	4943      	ldr	r1, [pc, #268]	; (8003f3c <HAL_RCC_OscConfig+0x618>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e34:	4b41      	ldr	r3, [pc, #260]	; (8003f3c <HAL_RCC_OscConfig+0x618>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a40      	ldr	r2, [pc, #256]	; (8003f3c <HAL_RCC_OscConfig+0x618>)
 8003e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e3e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e40:	4b3e      	ldr	r3, [pc, #248]	; (8003f3c <HAL_RCC_OscConfig+0x618>)
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	4a3d      	ldr	r2, [pc, #244]	; (8003f3c <HAL_RCC_OscConfig+0x618>)
 8003e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e4a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4c:	f7fd f834 	bl	8000eb8 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e54:	f7fd f830 	bl	8000eb8 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e066      	b.n	8003f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e66:	4b35      	ldr	r3, [pc, #212]	; (8003f3c <HAL_RCC_OscConfig+0x618>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0f0      	beq.n	8003e54 <HAL_RCC_OscConfig+0x530>
 8003e72:	e05e      	b.n	8003f32 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e74:	4b31      	ldr	r3, [pc, #196]	; (8003f3c <HAL_RCC_OscConfig+0x618>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a30      	ldr	r2, [pc, #192]	; (8003f3c <HAL_RCC_OscConfig+0x618>)
 8003e7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e80:	f7fd f81a 	bl	8000eb8 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e88:	f7fd f816 	bl	8000eb8 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e04c      	b.n	8003f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e9a:	4b28      	ldr	r3, [pc, #160]	; (8003f3c <HAL_RCC_OscConfig+0x618>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f0      	bne.n	8003e88 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003ea6:	4b25      	ldr	r3, [pc, #148]	; (8003f3c <HAL_RCC_OscConfig+0x618>)
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	4924      	ldr	r1, [pc, #144]	; (8003f3c <HAL_RCC_OscConfig+0x618>)
 8003eac:	4b25      	ldr	r3, [pc, #148]	; (8003f44 <HAL_RCC_OscConfig+0x620>)
 8003eae:	4013      	ands	r3, r2
 8003eb0:	60cb      	str	r3, [r1, #12]
 8003eb2:	e03e      	b.n	8003f32 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d101      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e039      	b.n	8003f34 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003ec0:	4b1e      	ldr	r3, [pc, #120]	; (8003f3c <HAL_RCC_OscConfig+0x618>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f003 0203 	and.w	r2, r3, #3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d12c      	bne.n	8003f2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d123      	bne.n	8003f2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d11b      	bne.n	8003f2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d113      	bne.n	8003f2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f10:	085b      	lsrs	r3, r3, #1
 8003f12:	3b01      	subs	r3, #1
 8003f14:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d109      	bne.n	8003f2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f24:	085b      	lsrs	r3, r3, #1
 8003f26:	3b01      	subs	r3, #1
 8003f28:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d001      	beq.n	8003f32 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3720      	adds	r7, #32
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	019f800c 	.word	0x019f800c
 8003f44:	feeefffc 	.word	0xfeeefffc

08003f48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003f52:	2300      	movs	r3, #0
 8003f54:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e11e      	b.n	800419e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f60:	4b91      	ldr	r3, [pc, #580]	; (80041a8 <HAL_RCC_ClockConfig+0x260>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 030f 	and.w	r3, r3, #15
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d910      	bls.n	8003f90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f6e:	4b8e      	ldr	r3, [pc, #568]	; (80041a8 <HAL_RCC_ClockConfig+0x260>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f023 020f 	bic.w	r2, r3, #15
 8003f76:	498c      	ldr	r1, [pc, #560]	; (80041a8 <HAL_RCC_ClockConfig+0x260>)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7e:	4b8a      	ldr	r3, [pc, #552]	; (80041a8 <HAL_RCC_ClockConfig+0x260>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 030f 	and.w	r3, r3, #15
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d001      	beq.n	8003f90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e106      	b.n	800419e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d073      	beq.n	8004084 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2b03      	cmp	r3, #3
 8003fa2:	d129      	bne.n	8003ff8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fa4:	4b81      	ldr	r3, [pc, #516]	; (80041ac <HAL_RCC_ClockConfig+0x264>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e0f4      	b.n	800419e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003fb4:	f000 f99e 	bl	80042f4 <RCC_GetSysClockFreqFromPLLSource>
 8003fb8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	4a7c      	ldr	r2, [pc, #496]	; (80041b0 <HAL_RCC_ClockConfig+0x268>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d93f      	bls.n	8004042 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003fc2:	4b7a      	ldr	r3, [pc, #488]	; (80041ac <HAL_RCC_ClockConfig+0x264>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d009      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d033      	beq.n	8004042 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d12f      	bne.n	8004042 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003fe2:	4b72      	ldr	r3, [pc, #456]	; (80041ac <HAL_RCC_ClockConfig+0x264>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fea:	4a70      	ldr	r2, [pc, #448]	; (80041ac <HAL_RCC_ClockConfig+0x264>)
 8003fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ff0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003ff2:	2380      	movs	r3, #128	; 0x80
 8003ff4:	617b      	str	r3, [r7, #20]
 8003ff6:	e024      	b.n	8004042 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d107      	bne.n	8004010 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004000:	4b6a      	ldr	r3, [pc, #424]	; (80041ac <HAL_RCC_ClockConfig+0x264>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d109      	bne.n	8004020 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e0c6      	b.n	800419e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004010:	4b66      	ldr	r3, [pc, #408]	; (80041ac <HAL_RCC_ClockConfig+0x264>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e0be      	b.n	800419e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004020:	f000 f8ce 	bl	80041c0 <HAL_RCC_GetSysClockFreq>
 8004024:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	4a61      	ldr	r2, [pc, #388]	; (80041b0 <HAL_RCC_ClockConfig+0x268>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d909      	bls.n	8004042 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800402e:	4b5f      	ldr	r3, [pc, #380]	; (80041ac <HAL_RCC_ClockConfig+0x264>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004036:	4a5d      	ldr	r2, [pc, #372]	; (80041ac <HAL_RCC_ClockConfig+0x264>)
 8004038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800403c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800403e:	2380      	movs	r3, #128	; 0x80
 8004040:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004042:	4b5a      	ldr	r3, [pc, #360]	; (80041ac <HAL_RCC_ClockConfig+0x264>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f023 0203 	bic.w	r2, r3, #3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	4957      	ldr	r1, [pc, #348]	; (80041ac <HAL_RCC_ClockConfig+0x264>)
 8004050:	4313      	orrs	r3, r2
 8004052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004054:	f7fc ff30 	bl	8000eb8 <HAL_GetTick>
 8004058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800405a:	e00a      	b.n	8004072 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800405c:	f7fc ff2c 	bl	8000eb8 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	f241 3288 	movw	r2, #5000	; 0x1388
 800406a:	4293      	cmp	r3, r2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e095      	b.n	800419e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004072:	4b4e      	ldr	r3, [pc, #312]	; (80041ac <HAL_RCC_ClockConfig+0x264>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 020c 	and.w	r2, r3, #12
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	429a      	cmp	r2, r3
 8004082:	d1eb      	bne.n	800405c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d023      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b00      	cmp	r3, #0
 800409a:	d005      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800409c:	4b43      	ldr	r3, [pc, #268]	; (80041ac <HAL_RCC_ClockConfig+0x264>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	4a42      	ldr	r2, [pc, #264]	; (80041ac <HAL_RCC_ClockConfig+0x264>)
 80040a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80040a6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0308 	and.w	r3, r3, #8
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d007      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80040b4:	4b3d      	ldr	r3, [pc, #244]	; (80041ac <HAL_RCC_ClockConfig+0x264>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80040bc:	4a3b      	ldr	r2, [pc, #236]	; (80041ac <HAL_RCC_ClockConfig+0x264>)
 80040be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80040c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040c4:	4b39      	ldr	r3, [pc, #228]	; (80041ac <HAL_RCC_ClockConfig+0x264>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	4936      	ldr	r1, [pc, #216]	; (80041ac <HAL_RCC_ClockConfig+0x264>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	608b      	str	r3, [r1, #8]
 80040d6:	e008      	b.n	80040ea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	2b80      	cmp	r3, #128	; 0x80
 80040dc:	d105      	bne.n	80040ea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80040de:	4b33      	ldr	r3, [pc, #204]	; (80041ac <HAL_RCC_ClockConfig+0x264>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	4a32      	ldr	r2, [pc, #200]	; (80041ac <HAL_RCC_ClockConfig+0x264>)
 80040e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040ea:	4b2f      	ldr	r3, [pc, #188]	; (80041a8 <HAL_RCC_ClockConfig+0x260>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d21d      	bcs.n	8004134 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040f8:	4b2b      	ldr	r3, [pc, #172]	; (80041a8 <HAL_RCC_ClockConfig+0x260>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f023 020f 	bic.w	r2, r3, #15
 8004100:	4929      	ldr	r1, [pc, #164]	; (80041a8 <HAL_RCC_ClockConfig+0x260>)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	4313      	orrs	r3, r2
 8004106:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004108:	f7fc fed6 	bl	8000eb8 <HAL_GetTick>
 800410c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800410e:	e00a      	b.n	8004126 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004110:	f7fc fed2 	bl	8000eb8 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	f241 3288 	movw	r2, #5000	; 0x1388
 800411e:	4293      	cmp	r3, r2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e03b      	b.n	800419e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004126:	4b20      	ldr	r3, [pc, #128]	; (80041a8 <HAL_RCC_ClockConfig+0x260>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	429a      	cmp	r2, r3
 8004132:	d1ed      	bne.n	8004110 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d008      	beq.n	8004152 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004140:	4b1a      	ldr	r3, [pc, #104]	; (80041ac <HAL_RCC_ClockConfig+0x264>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	4917      	ldr	r1, [pc, #92]	; (80041ac <HAL_RCC_ClockConfig+0x264>)
 800414e:	4313      	orrs	r3, r2
 8004150:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	2b00      	cmp	r3, #0
 800415c:	d009      	beq.n	8004172 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800415e:	4b13      	ldr	r3, [pc, #76]	; (80041ac <HAL_RCC_ClockConfig+0x264>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	490f      	ldr	r1, [pc, #60]	; (80041ac <HAL_RCC_ClockConfig+0x264>)
 800416e:	4313      	orrs	r3, r2
 8004170:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004172:	f000 f825 	bl	80041c0 <HAL_RCC_GetSysClockFreq>
 8004176:	4602      	mov	r2, r0
 8004178:	4b0c      	ldr	r3, [pc, #48]	; (80041ac <HAL_RCC_ClockConfig+0x264>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	091b      	lsrs	r3, r3, #4
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	490c      	ldr	r1, [pc, #48]	; (80041b4 <HAL_RCC_ClockConfig+0x26c>)
 8004184:	5ccb      	ldrb	r3, [r1, r3]
 8004186:	f003 031f 	and.w	r3, r3, #31
 800418a:	fa22 f303 	lsr.w	r3, r2, r3
 800418e:	4a0a      	ldr	r2, [pc, #40]	; (80041b8 <HAL_RCC_ClockConfig+0x270>)
 8004190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004192:	4b0a      	ldr	r3, [pc, #40]	; (80041bc <HAL_RCC_ClockConfig+0x274>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f7fc fe42 	bl	8000e20 <HAL_InitTick>
 800419c:	4603      	mov	r3, r0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	40022000 	.word	0x40022000
 80041ac:	40021000 	.word	0x40021000
 80041b0:	04c4b400 	.word	0x04c4b400
 80041b4:	0800607c 	.word	0x0800607c
 80041b8:	20000004 	.word	0x20000004
 80041bc:	20000008 	.word	0x20000008

080041c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80041c6:	4b2c      	ldr	r3, [pc, #176]	; (8004278 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 030c 	and.w	r3, r3, #12
 80041ce:	2b04      	cmp	r3, #4
 80041d0:	d102      	bne.n	80041d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041d2:	4b2a      	ldr	r3, [pc, #168]	; (800427c <HAL_RCC_GetSysClockFreq+0xbc>)
 80041d4:	613b      	str	r3, [r7, #16]
 80041d6:	e047      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80041d8:	4b27      	ldr	r3, [pc, #156]	; (8004278 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 030c 	and.w	r3, r3, #12
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	d102      	bne.n	80041ea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041e4:	4b26      	ldr	r3, [pc, #152]	; (8004280 <HAL_RCC_GetSysClockFreq+0xc0>)
 80041e6:	613b      	str	r3, [r7, #16]
 80041e8:	e03e      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80041ea:	4b23      	ldr	r3, [pc, #140]	; (8004278 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 030c 	and.w	r3, r3, #12
 80041f2:	2b0c      	cmp	r3, #12
 80041f4:	d136      	bne.n	8004264 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041f6:	4b20      	ldr	r3, [pc, #128]	; (8004278 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004200:	4b1d      	ldr	r3, [pc, #116]	; (8004278 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	091b      	lsrs	r3, r3, #4
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	3301      	adds	r3, #1
 800420c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2b03      	cmp	r3, #3
 8004212:	d10c      	bne.n	800422e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004214:	4a1a      	ldr	r2, [pc, #104]	; (8004280 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	fbb2 f3f3 	udiv	r3, r2, r3
 800421c:	4a16      	ldr	r2, [pc, #88]	; (8004278 <HAL_RCC_GetSysClockFreq+0xb8>)
 800421e:	68d2      	ldr	r2, [r2, #12]
 8004220:	0a12      	lsrs	r2, r2, #8
 8004222:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004226:	fb02 f303 	mul.w	r3, r2, r3
 800422a:	617b      	str	r3, [r7, #20]
      break;
 800422c:	e00c      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800422e:	4a13      	ldr	r2, [pc, #76]	; (800427c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	fbb2 f3f3 	udiv	r3, r2, r3
 8004236:	4a10      	ldr	r2, [pc, #64]	; (8004278 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004238:	68d2      	ldr	r2, [r2, #12]
 800423a:	0a12      	lsrs	r2, r2, #8
 800423c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004240:	fb02 f303 	mul.w	r3, r2, r3
 8004244:	617b      	str	r3, [r7, #20]
      break;
 8004246:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004248:	4b0b      	ldr	r3, [pc, #44]	; (8004278 <HAL_RCC_GetSysClockFreq+0xb8>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	0e5b      	lsrs	r3, r3, #25
 800424e:	f003 0303 	and.w	r3, r3, #3
 8004252:	3301      	adds	r3, #1
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004260:	613b      	str	r3, [r7, #16]
 8004262:	e001      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004268:	693b      	ldr	r3, [r7, #16]
}
 800426a:	4618      	mov	r0, r3
 800426c:	371c      	adds	r7, #28
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40021000 	.word	0x40021000
 800427c:	00f42400 	.word	0x00f42400
 8004280:	016e3600 	.word	0x016e3600

08004284 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004288:	4b03      	ldr	r3, [pc, #12]	; (8004298 <HAL_RCC_GetHCLKFreq+0x14>)
 800428a:	681b      	ldr	r3, [r3, #0]
}
 800428c:	4618      	mov	r0, r3
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	20000004 	.word	0x20000004

0800429c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042a0:	f7ff fff0 	bl	8004284 <HAL_RCC_GetHCLKFreq>
 80042a4:	4602      	mov	r2, r0
 80042a6:	4b06      	ldr	r3, [pc, #24]	; (80042c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	0a1b      	lsrs	r3, r3, #8
 80042ac:	f003 0307 	and.w	r3, r3, #7
 80042b0:	4904      	ldr	r1, [pc, #16]	; (80042c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80042b2:	5ccb      	ldrb	r3, [r1, r3]
 80042b4:	f003 031f 	and.w	r3, r3, #31
 80042b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042bc:	4618      	mov	r0, r3
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	40021000 	.word	0x40021000
 80042c4:	0800608c 	.word	0x0800608c

080042c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80042cc:	f7ff ffda 	bl	8004284 <HAL_RCC_GetHCLKFreq>
 80042d0:	4602      	mov	r2, r0
 80042d2:	4b06      	ldr	r3, [pc, #24]	; (80042ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	0adb      	lsrs	r3, r3, #11
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	4904      	ldr	r1, [pc, #16]	; (80042f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80042de:	5ccb      	ldrb	r3, [r1, r3]
 80042e0:	f003 031f 	and.w	r3, r3, #31
 80042e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40021000 	.word	0x40021000
 80042f0:	0800608c 	.word	0x0800608c

080042f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042fa:	4b1e      	ldr	r3, [pc, #120]	; (8004374 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004304:	4b1b      	ldr	r3, [pc, #108]	; (8004374 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	091b      	lsrs	r3, r3, #4
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	3301      	adds	r3, #1
 8004310:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	2b03      	cmp	r3, #3
 8004316:	d10c      	bne.n	8004332 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004318:	4a17      	ldr	r2, [pc, #92]	; (8004378 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004320:	4a14      	ldr	r2, [pc, #80]	; (8004374 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004322:	68d2      	ldr	r2, [r2, #12]
 8004324:	0a12      	lsrs	r2, r2, #8
 8004326:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800432a:	fb02 f303 	mul.w	r3, r2, r3
 800432e:	617b      	str	r3, [r7, #20]
    break;
 8004330:	e00c      	b.n	800434c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004332:	4a12      	ldr	r2, [pc, #72]	; (800437c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	fbb2 f3f3 	udiv	r3, r2, r3
 800433a:	4a0e      	ldr	r2, [pc, #56]	; (8004374 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800433c:	68d2      	ldr	r2, [r2, #12]
 800433e:	0a12      	lsrs	r2, r2, #8
 8004340:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004344:	fb02 f303 	mul.w	r3, r2, r3
 8004348:	617b      	str	r3, [r7, #20]
    break;
 800434a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800434c:	4b09      	ldr	r3, [pc, #36]	; (8004374 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	0e5b      	lsrs	r3, r3, #25
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	3301      	adds	r3, #1
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	fbb2 f3f3 	udiv	r3, r2, r3
 8004364:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004366:	687b      	ldr	r3, [r7, #4]
}
 8004368:	4618      	mov	r0, r3
 800436a:	371c      	adds	r7, #28
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	40021000 	.word	0x40021000
 8004378:	016e3600 	.word	0x016e3600
 800437c:	00f42400 	.word	0x00f42400

08004380 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004388:	2300      	movs	r3, #0
 800438a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800438c:	2300      	movs	r3, #0
 800438e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 8098 	beq.w	80044ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800439e:	2300      	movs	r3, #0
 80043a0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043a2:	4b43      	ldr	r3, [pc, #268]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10d      	bne.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ae:	4b40      	ldr	r3, [pc, #256]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b2:	4a3f      	ldr	r2, [pc, #252]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043b8:	6593      	str	r3, [r2, #88]	; 0x58
 80043ba:	4b3d      	ldr	r3, [pc, #244]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c2:	60bb      	str	r3, [r7, #8]
 80043c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043c6:	2301      	movs	r3, #1
 80043c8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043ca:	4b3a      	ldr	r3, [pc, #232]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a39      	ldr	r2, [pc, #228]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80043d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043d6:	f7fc fd6f 	bl	8000eb8 <HAL_GetTick>
 80043da:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043dc:	e009      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043de:	f7fc fd6b 	bl	8000eb8 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d902      	bls.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	74fb      	strb	r3, [r7, #19]
        break;
 80043f0:	e005      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043f2:	4b30      	ldr	r3, [pc, #192]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0ef      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80043fe:	7cfb      	ldrb	r3, [r7, #19]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d159      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004404:	4b2a      	ldr	r3, [pc, #168]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800440e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d01e      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	429a      	cmp	r2, r3
 800441e:	d019      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004420:	4b23      	ldr	r3, [pc, #140]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800442a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800442c:	4b20      	ldr	r3, [pc, #128]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800442e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004432:	4a1f      	ldr	r2, [pc, #124]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800443c:	4b1c      	ldr	r3, [pc, #112]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800443e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004442:	4a1b      	ldr	r2, [pc, #108]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004444:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800444c:	4a18      	ldr	r2, [pc, #96]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	d016      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445e:	f7fc fd2b 	bl	8000eb8 <HAL_GetTick>
 8004462:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004464:	e00b      	b.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004466:	f7fc fd27 	bl	8000eb8 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	f241 3288 	movw	r2, #5000	; 0x1388
 8004474:	4293      	cmp	r3, r2
 8004476:	d902      	bls.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	74fb      	strb	r3, [r7, #19]
            break;
 800447c:	e006      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800447e:	4b0c      	ldr	r3, [pc, #48]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0ec      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800448c:	7cfb      	ldrb	r3, [r7, #19]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10b      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004492:	4b07      	ldr	r3, [pc, #28]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004498:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044a0:	4903      	ldr	r1, [pc, #12]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80044a8:	e008      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044aa:	7cfb      	ldrb	r3, [r7, #19]
 80044ac:	74bb      	strb	r3, [r7, #18]
 80044ae:	e005      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80044b0:	40021000 	.word	0x40021000
 80044b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b8:	7cfb      	ldrb	r3, [r7, #19]
 80044ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044bc:	7c7b      	ldrb	r3, [r7, #17]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d105      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044c2:	4ba7      	ldr	r3, [pc, #668]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c6:	4aa6      	ldr	r2, [pc, #664]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044da:	4ba1      	ldr	r3, [pc, #644]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e0:	f023 0203 	bic.w	r2, r3, #3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	499d      	ldr	r1, [pc, #628]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00a      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044fc:	4b98      	ldr	r3, [pc, #608]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004502:	f023 020c 	bic.w	r2, r3, #12
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	4995      	ldr	r1, [pc, #596]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800450c:	4313      	orrs	r3, r2
 800450e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0304 	and.w	r3, r3, #4
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00a      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800451e:	4b90      	ldr	r3, [pc, #576]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004524:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	498c      	ldr	r1, [pc, #560]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800452e:	4313      	orrs	r3, r2
 8004530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0308 	and.w	r3, r3, #8
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00a      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004540:	4b87      	ldr	r3, [pc, #540]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004546:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	4984      	ldr	r1, [pc, #528]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004550:	4313      	orrs	r3, r2
 8004552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0310 	and.w	r3, r3, #16
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004562:	4b7f      	ldr	r3, [pc, #508]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004568:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	497b      	ldr	r1, [pc, #492]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004572:	4313      	orrs	r3, r2
 8004574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0320 	and.w	r3, r3, #32
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00a      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004584:	4b76      	ldr	r3, [pc, #472]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	4973      	ldr	r1, [pc, #460]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004594:	4313      	orrs	r3, r2
 8004596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045a6:	4b6e      	ldr	r3, [pc, #440]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	496a      	ldr	r1, [pc, #424]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00a      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045c8:	4b65      	ldr	r3, [pc, #404]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	4962      	ldr	r1, [pc, #392]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00a      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045ea:	4b5d      	ldr	r3, [pc, #372]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	4959      	ldr	r1, [pc, #356]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00a      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800460c:	4b54      	ldr	r3, [pc, #336]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800460e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004612:	f023 0203 	bic.w	r2, r3, #3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461a:	4951      	ldr	r1, [pc, #324]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800461c:	4313      	orrs	r3, r2
 800461e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800462e:	4b4c      	ldr	r3, [pc, #304]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004634:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463c:	4948      	ldr	r1, [pc, #288]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800463e:	4313      	orrs	r3, r2
 8004640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800464c:	2b00      	cmp	r3, #0
 800464e:	d015      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004650:	4b43      	ldr	r3, [pc, #268]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004656:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465e:	4940      	ldr	r1, [pc, #256]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004660:	4313      	orrs	r3, r2
 8004662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800466e:	d105      	bne.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004670:	4b3b      	ldr	r3, [pc, #236]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	4a3a      	ldr	r2, [pc, #232]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800467a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004684:	2b00      	cmp	r3, #0
 8004686:	d015      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004688:	4b35      	ldr	r3, [pc, #212]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800468a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004696:	4932      	ldr	r1, [pc, #200]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004698:	4313      	orrs	r3, r2
 800469a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046a6:	d105      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046a8:	4b2d      	ldr	r3, [pc, #180]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	4a2c      	ldr	r2, [pc, #176]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046b2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d015      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80046c0:	4b27      	ldr	r3, [pc, #156]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ce:	4924      	ldr	r1, [pc, #144]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046de:	d105      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046e0:	4b1f      	ldr	r3, [pc, #124]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	4a1e      	ldr	r2, [pc, #120]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d015      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046f8:	4b19      	ldr	r3, [pc, #100]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004706:	4916      	ldr	r1, [pc, #88]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004708:	4313      	orrs	r3, r2
 800470a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004712:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004716:	d105      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004718:	4b11      	ldr	r3, [pc, #68]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	4a10      	ldr	r2, [pc, #64]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800471e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004722:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d019      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004730:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004736:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	4908      	ldr	r1, [pc, #32]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004740:	4313      	orrs	r3, r2
 8004742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800474e:	d109      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004750:	4b03      	ldr	r3, [pc, #12]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	4a02      	ldr	r2, [pc, #8]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004756:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800475a:	60d3      	str	r3, [r2, #12]
 800475c:	e002      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800475e:	bf00      	nop
 8004760:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d015      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004770:	4b29      	ldr	r3, [pc, #164]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004776:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800477e:	4926      	ldr	r1, [pc, #152]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004780:	4313      	orrs	r3, r2
 8004782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800478a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800478e:	d105      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004790:	4b21      	ldr	r3, [pc, #132]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	4a20      	ldr	r2, [pc, #128]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800479a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d015      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80047a8:	4b1b      	ldr	r3, [pc, #108]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ae:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047b6:	4918      	ldr	r1, [pc, #96]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c6:	d105      	bne.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80047c8:	4b13      	ldr	r3, [pc, #76]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	4a12      	ldr	r2, [pc, #72]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047d2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d015      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80047e0:	4b0d      	ldr	r3, [pc, #52]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ee:	490a      	ldr	r1, [pc, #40]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047fe:	d105      	bne.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004800:	4b05      	ldr	r3, [pc, #20]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	4a04      	ldr	r2, [pc, #16]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004806:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800480a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800480c:	7cbb      	ldrb	r3, [r7, #18]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3718      	adds	r7, #24
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	40021000 	.word	0x40021000

0800481c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e049      	b.n	80048c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d106      	bne.n	8004848 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7fc fa24 	bl	8000c90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	3304      	adds	r3, #4
 8004858:	4619      	mov	r1, r3
 800485a:	4610      	mov	r0, r2
 800485c:	f000 fb3c 	bl	8004ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
	...

080048cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d001      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e054      	b.n	800498e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2202      	movs	r2, #2
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0201 	orr.w	r2, r2, #1
 80048fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a26      	ldr	r2, [pc, #152]	; (800499c <HAL_TIM_Base_Start_IT+0xd0>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d022      	beq.n	800494c <HAL_TIM_Base_Start_IT+0x80>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800490e:	d01d      	beq.n	800494c <HAL_TIM_Base_Start_IT+0x80>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a22      	ldr	r2, [pc, #136]	; (80049a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d018      	beq.n	800494c <HAL_TIM_Base_Start_IT+0x80>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a21      	ldr	r2, [pc, #132]	; (80049a4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d013      	beq.n	800494c <HAL_TIM_Base_Start_IT+0x80>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a1f      	ldr	r2, [pc, #124]	; (80049a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00e      	beq.n	800494c <HAL_TIM_Base_Start_IT+0x80>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a1e      	ldr	r2, [pc, #120]	; (80049ac <HAL_TIM_Base_Start_IT+0xe0>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d009      	beq.n	800494c <HAL_TIM_Base_Start_IT+0x80>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a1c      	ldr	r2, [pc, #112]	; (80049b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d004      	beq.n	800494c <HAL_TIM_Base_Start_IT+0x80>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a1b      	ldr	r2, [pc, #108]	; (80049b4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d115      	bne.n	8004978 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689a      	ldr	r2, [r3, #8]
 8004952:	4b19      	ldr	r3, [pc, #100]	; (80049b8 <HAL_TIM_Base_Start_IT+0xec>)
 8004954:	4013      	ands	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2b06      	cmp	r3, #6
 800495c:	d015      	beq.n	800498a <HAL_TIM_Base_Start_IT+0xbe>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004964:	d011      	beq.n	800498a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f042 0201 	orr.w	r2, r2, #1
 8004974:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004976:	e008      	b.n	800498a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0201 	orr.w	r2, r2, #1
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	e000      	b.n	800498c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800498a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	40012c00 	.word	0x40012c00
 80049a0:	40000400 	.word	0x40000400
 80049a4:	40000800 	.word	0x40000800
 80049a8:	40000c00 	.word	0x40000c00
 80049ac:	40013400 	.word	0x40013400
 80049b0:	40014000 	.word	0x40014000
 80049b4:	40015000 	.word	0x40015000
 80049b8:	00010007 	.word	0x00010007

080049bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d020      	beq.n	8004a20 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d01b      	beq.n	8004a20 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f06f 0202 	mvn.w	r2, #2
 80049f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	f003 0303 	and.w	r3, r3, #3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 fa48 	bl	8004e9c <HAL_TIM_IC_CaptureCallback>
 8004a0c:	e005      	b.n	8004a1a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 fa3a 	bl	8004e88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 fa4b 	bl	8004eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f003 0304 	and.w	r3, r3, #4
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d020      	beq.n	8004a6c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d01b      	beq.n	8004a6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f06f 0204 	mvn.w	r2, #4
 8004a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2202      	movs	r2, #2
 8004a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 fa22 	bl	8004e9c <HAL_TIM_IC_CaptureCallback>
 8004a58:	e005      	b.n	8004a66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fa14 	bl	8004e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 fa25 	bl	8004eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f003 0308 	and.w	r3, r3, #8
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d020      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f003 0308 	and.w	r3, r3, #8
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d01b      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f06f 0208 	mvn.w	r2, #8
 8004a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2204      	movs	r2, #4
 8004a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	f003 0303 	and.w	r3, r3, #3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f9fc 	bl	8004e9c <HAL_TIM_IC_CaptureCallback>
 8004aa4:	e005      	b.n	8004ab2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f9ee 	bl	8004e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 f9ff 	bl	8004eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f003 0310 	and.w	r3, r3, #16
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d020      	beq.n	8004b04 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f003 0310 	and.w	r3, r3, #16
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d01b      	beq.n	8004b04 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f06f 0210 	mvn.w	r2, #16
 8004ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2208      	movs	r2, #8
 8004ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f9d6 	bl	8004e9c <HAL_TIM_IC_CaptureCallback>
 8004af0:	e005      	b.n	8004afe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f9c8 	bl	8004e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 f9d9 	bl	8004eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00c      	beq.n	8004b28 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d007      	beq.n	8004b28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f06f 0201 	mvn.w	r2, #1
 8004b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7fb ff30 	bl	8000988 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d104      	bne.n	8004b3c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00c      	beq.n	8004b56 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d007      	beq.n	8004b56 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 fbb1 	bl	80052b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00c      	beq.n	8004b7a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d007      	beq.n	8004b7a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 fba9 	bl	80052cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00c      	beq.n	8004b9e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d007      	beq.n	8004b9e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f993 	bl	8004ec4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	f003 0320 	and.w	r3, r3, #32
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00c      	beq.n	8004bc2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f003 0320 	and.w	r3, r3, #32
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d007      	beq.n	8004bc2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f06f 0220 	mvn.w	r2, #32
 8004bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 fb71 	bl	80052a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00c      	beq.n	8004be6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d007      	beq.n	8004be6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 fb7d 	bl	80052e0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00c      	beq.n	8004c0a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d007      	beq.n	8004c0a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 fb75 	bl	80052f4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00c      	beq.n	8004c2e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d007      	beq.n	8004c2e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 fb6d 	bl	8005308 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00c      	beq.n	8004c52 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d007      	beq.n	8004c52 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 fb65 	bl	800531c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c52:	bf00      	nop
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c66:	2300      	movs	r3, #0
 8004c68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d101      	bne.n	8004c78 <HAL_TIM_ConfigClockSource+0x1c>
 8004c74:	2302      	movs	r3, #2
 8004c76:	e0f6      	b.n	8004e66 <HAL_TIM_ConfigClockSource+0x20a>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2202      	movs	r2, #2
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004c96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ca2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a6f      	ldr	r2, [pc, #444]	; (8004e70 <HAL_TIM_ConfigClockSource+0x214>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	f000 80c1 	beq.w	8004e3a <HAL_TIM_ConfigClockSource+0x1de>
 8004cb8:	4a6d      	ldr	r2, [pc, #436]	; (8004e70 <HAL_TIM_ConfigClockSource+0x214>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	f200 80c6 	bhi.w	8004e4c <HAL_TIM_ConfigClockSource+0x1f0>
 8004cc0:	4a6c      	ldr	r2, [pc, #432]	; (8004e74 <HAL_TIM_ConfigClockSource+0x218>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	f000 80b9 	beq.w	8004e3a <HAL_TIM_ConfigClockSource+0x1de>
 8004cc8:	4a6a      	ldr	r2, [pc, #424]	; (8004e74 <HAL_TIM_ConfigClockSource+0x218>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	f200 80be 	bhi.w	8004e4c <HAL_TIM_ConfigClockSource+0x1f0>
 8004cd0:	4a69      	ldr	r2, [pc, #420]	; (8004e78 <HAL_TIM_ConfigClockSource+0x21c>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	f000 80b1 	beq.w	8004e3a <HAL_TIM_ConfigClockSource+0x1de>
 8004cd8:	4a67      	ldr	r2, [pc, #412]	; (8004e78 <HAL_TIM_ConfigClockSource+0x21c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	f200 80b6 	bhi.w	8004e4c <HAL_TIM_ConfigClockSource+0x1f0>
 8004ce0:	4a66      	ldr	r2, [pc, #408]	; (8004e7c <HAL_TIM_ConfigClockSource+0x220>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	f000 80a9 	beq.w	8004e3a <HAL_TIM_ConfigClockSource+0x1de>
 8004ce8:	4a64      	ldr	r2, [pc, #400]	; (8004e7c <HAL_TIM_ConfigClockSource+0x220>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	f200 80ae 	bhi.w	8004e4c <HAL_TIM_ConfigClockSource+0x1f0>
 8004cf0:	4a63      	ldr	r2, [pc, #396]	; (8004e80 <HAL_TIM_ConfigClockSource+0x224>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	f000 80a1 	beq.w	8004e3a <HAL_TIM_ConfigClockSource+0x1de>
 8004cf8:	4a61      	ldr	r2, [pc, #388]	; (8004e80 <HAL_TIM_ConfigClockSource+0x224>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	f200 80a6 	bhi.w	8004e4c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d00:	4a60      	ldr	r2, [pc, #384]	; (8004e84 <HAL_TIM_ConfigClockSource+0x228>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	f000 8099 	beq.w	8004e3a <HAL_TIM_ConfigClockSource+0x1de>
 8004d08:	4a5e      	ldr	r2, [pc, #376]	; (8004e84 <HAL_TIM_ConfigClockSource+0x228>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	f200 809e 	bhi.w	8004e4c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d10:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004d14:	f000 8091 	beq.w	8004e3a <HAL_TIM_ConfigClockSource+0x1de>
 8004d18:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004d1c:	f200 8096 	bhi.w	8004e4c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d24:	f000 8089 	beq.w	8004e3a <HAL_TIM_ConfigClockSource+0x1de>
 8004d28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d2c:	f200 808e 	bhi.w	8004e4c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d34:	d03e      	beq.n	8004db4 <HAL_TIM_ConfigClockSource+0x158>
 8004d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d3a:	f200 8087 	bhi.w	8004e4c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d42:	f000 8086 	beq.w	8004e52 <HAL_TIM_ConfigClockSource+0x1f6>
 8004d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d4a:	d87f      	bhi.n	8004e4c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d4c:	2b70      	cmp	r3, #112	; 0x70
 8004d4e:	d01a      	beq.n	8004d86 <HAL_TIM_ConfigClockSource+0x12a>
 8004d50:	2b70      	cmp	r3, #112	; 0x70
 8004d52:	d87b      	bhi.n	8004e4c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d54:	2b60      	cmp	r3, #96	; 0x60
 8004d56:	d050      	beq.n	8004dfa <HAL_TIM_ConfigClockSource+0x19e>
 8004d58:	2b60      	cmp	r3, #96	; 0x60
 8004d5a:	d877      	bhi.n	8004e4c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d5c:	2b50      	cmp	r3, #80	; 0x50
 8004d5e:	d03c      	beq.n	8004dda <HAL_TIM_ConfigClockSource+0x17e>
 8004d60:	2b50      	cmp	r3, #80	; 0x50
 8004d62:	d873      	bhi.n	8004e4c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d64:	2b40      	cmp	r3, #64	; 0x40
 8004d66:	d058      	beq.n	8004e1a <HAL_TIM_ConfigClockSource+0x1be>
 8004d68:	2b40      	cmp	r3, #64	; 0x40
 8004d6a:	d86f      	bhi.n	8004e4c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d6c:	2b30      	cmp	r3, #48	; 0x30
 8004d6e:	d064      	beq.n	8004e3a <HAL_TIM_ConfigClockSource+0x1de>
 8004d70:	2b30      	cmp	r3, #48	; 0x30
 8004d72:	d86b      	bhi.n	8004e4c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d74:	2b20      	cmp	r3, #32
 8004d76:	d060      	beq.n	8004e3a <HAL_TIM_ConfigClockSource+0x1de>
 8004d78:	2b20      	cmp	r3, #32
 8004d7a:	d867      	bhi.n	8004e4c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d05c      	beq.n	8004e3a <HAL_TIM_ConfigClockSource+0x1de>
 8004d80:	2b10      	cmp	r3, #16
 8004d82:	d05a      	beq.n	8004e3a <HAL_TIM_ConfigClockSource+0x1de>
 8004d84:	e062      	b.n	8004e4c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d96:	f000 f9cf 	bl	8005138 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004da8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	609a      	str	r2, [r3, #8]
      break;
 8004db2:	e04f      	b.n	8004e54 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004dc4:	f000 f9b8 	bl	8005138 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689a      	ldr	r2, [r3, #8]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dd6:	609a      	str	r2, [r3, #8]
      break;
 8004dd8:	e03c      	b.n	8004e54 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004de6:	461a      	mov	r2, r3
 8004de8:	f000 f92a 	bl	8005040 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2150      	movs	r1, #80	; 0x50
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 f983 	bl	80050fe <TIM_ITRx_SetConfig>
      break;
 8004df8:	e02c      	b.n	8004e54 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e06:	461a      	mov	r2, r3
 8004e08:	f000 f949 	bl	800509e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2160      	movs	r1, #96	; 0x60
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 f973 	bl	80050fe <TIM_ITRx_SetConfig>
      break;
 8004e18:	e01c      	b.n	8004e54 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e26:	461a      	mov	r2, r3
 8004e28:	f000 f90a 	bl	8005040 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2140      	movs	r1, #64	; 0x40
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 f963 	bl	80050fe <TIM_ITRx_SetConfig>
      break;
 8004e38:	e00c      	b.n	8004e54 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4619      	mov	r1, r3
 8004e44:	4610      	mov	r0, r2
 8004e46:	f000 f95a 	bl	80050fe <TIM_ITRx_SetConfig>
      break;
 8004e4a:	e003      	b.n	8004e54 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e50:	e000      	b.n	8004e54 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004e52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	00100070 	.word	0x00100070
 8004e74:	00100060 	.word	0x00100060
 8004e78:	00100050 	.word	0x00100050
 8004e7c:	00100040 	.word	0x00100040
 8004e80:	00100030 	.word	0x00100030
 8004e84:	00100020 	.word	0x00100020

08004e88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a4c      	ldr	r2, [pc, #304]	; (800501c <TIM_Base_SetConfig+0x144>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d017      	beq.n	8004f20 <TIM_Base_SetConfig+0x48>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef6:	d013      	beq.n	8004f20 <TIM_Base_SetConfig+0x48>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a49      	ldr	r2, [pc, #292]	; (8005020 <TIM_Base_SetConfig+0x148>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d00f      	beq.n	8004f20 <TIM_Base_SetConfig+0x48>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a48      	ldr	r2, [pc, #288]	; (8005024 <TIM_Base_SetConfig+0x14c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d00b      	beq.n	8004f20 <TIM_Base_SetConfig+0x48>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a47      	ldr	r2, [pc, #284]	; (8005028 <TIM_Base_SetConfig+0x150>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d007      	beq.n	8004f20 <TIM_Base_SetConfig+0x48>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a46      	ldr	r2, [pc, #280]	; (800502c <TIM_Base_SetConfig+0x154>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d003      	beq.n	8004f20 <TIM_Base_SetConfig+0x48>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a45      	ldr	r2, [pc, #276]	; (8005030 <TIM_Base_SetConfig+0x158>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d108      	bne.n	8004f32 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a39      	ldr	r2, [pc, #228]	; (800501c <TIM_Base_SetConfig+0x144>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d023      	beq.n	8004f82 <TIM_Base_SetConfig+0xaa>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f40:	d01f      	beq.n	8004f82 <TIM_Base_SetConfig+0xaa>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a36      	ldr	r2, [pc, #216]	; (8005020 <TIM_Base_SetConfig+0x148>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d01b      	beq.n	8004f82 <TIM_Base_SetConfig+0xaa>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a35      	ldr	r2, [pc, #212]	; (8005024 <TIM_Base_SetConfig+0x14c>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d017      	beq.n	8004f82 <TIM_Base_SetConfig+0xaa>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a34      	ldr	r2, [pc, #208]	; (8005028 <TIM_Base_SetConfig+0x150>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d013      	beq.n	8004f82 <TIM_Base_SetConfig+0xaa>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a33      	ldr	r2, [pc, #204]	; (800502c <TIM_Base_SetConfig+0x154>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d00f      	beq.n	8004f82 <TIM_Base_SetConfig+0xaa>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a33      	ldr	r2, [pc, #204]	; (8005034 <TIM_Base_SetConfig+0x15c>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d00b      	beq.n	8004f82 <TIM_Base_SetConfig+0xaa>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a32      	ldr	r2, [pc, #200]	; (8005038 <TIM_Base_SetConfig+0x160>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d007      	beq.n	8004f82 <TIM_Base_SetConfig+0xaa>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a31      	ldr	r2, [pc, #196]	; (800503c <TIM_Base_SetConfig+0x164>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d003      	beq.n	8004f82 <TIM_Base_SetConfig+0xaa>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a2c      	ldr	r2, [pc, #176]	; (8005030 <TIM_Base_SetConfig+0x158>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d108      	bne.n	8004f94 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	689a      	ldr	r2, [r3, #8]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a18      	ldr	r2, [pc, #96]	; (800501c <TIM_Base_SetConfig+0x144>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d013      	beq.n	8004fe8 <TIM_Base_SetConfig+0x110>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a1a      	ldr	r2, [pc, #104]	; (800502c <TIM_Base_SetConfig+0x154>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d00f      	beq.n	8004fe8 <TIM_Base_SetConfig+0x110>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a1a      	ldr	r2, [pc, #104]	; (8005034 <TIM_Base_SetConfig+0x15c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d00b      	beq.n	8004fe8 <TIM_Base_SetConfig+0x110>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a19      	ldr	r2, [pc, #100]	; (8005038 <TIM_Base_SetConfig+0x160>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d007      	beq.n	8004fe8 <TIM_Base_SetConfig+0x110>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a18      	ldr	r2, [pc, #96]	; (800503c <TIM_Base_SetConfig+0x164>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d003      	beq.n	8004fe8 <TIM_Base_SetConfig+0x110>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a13      	ldr	r2, [pc, #76]	; (8005030 <TIM_Base_SetConfig+0x158>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d103      	bne.n	8004ff0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	691a      	ldr	r2, [r3, #16]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d105      	bne.n	800500e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	f023 0201 	bic.w	r2, r3, #1
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	611a      	str	r2, [r3, #16]
  }
}
 800500e:	bf00      	nop
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	40012c00 	.word	0x40012c00
 8005020:	40000400 	.word	0x40000400
 8005024:	40000800 	.word	0x40000800
 8005028:	40000c00 	.word	0x40000c00
 800502c:	40013400 	.word	0x40013400
 8005030:	40015000 	.word	0x40015000
 8005034:	40014000 	.word	0x40014000
 8005038:	40014400 	.word	0x40014400
 800503c:	40014800 	.word	0x40014800

08005040 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005040:	b480      	push	{r7}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6a1b      	ldr	r3, [r3, #32]
 8005050:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	f023 0201 	bic.w	r2, r3, #1
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800506a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	011b      	lsls	r3, r3, #4
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	4313      	orrs	r3, r2
 8005074:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f023 030a 	bic.w	r3, r3, #10
 800507c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	4313      	orrs	r3, r2
 8005084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	621a      	str	r2, [r3, #32]
}
 8005092:	bf00      	nop
 8005094:	371c      	adds	r7, #28
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800509e:	b480      	push	{r7}
 80050a0:	b087      	sub	sp, #28
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	60f8      	str	r0, [r7, #12]
 80050a6:	60b9      	str	r1, [r7, #8]
 80050a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	f023 0210 	bic.w	r2, r3, #16
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	031b      	lsls	r3, r3, #12
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	011b      	lsls	r3, r3, #4
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	621a      	str	r2, [r3, #32]
}
 80050f2:	bf00      	nop
 80050f4:	371c      	adds	r7, #28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050fe:	b480      	push	{r7}
 8005100:	b085      	sub	sp, #20
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005118:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4313      	orrs	r3, r2
 8005120:	f043 0307 	orr.w	r3, r3, #7
 8005124:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	609a      	str	r2, [r3, #8]
}
 800512c:	bf00      	nop
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005138:	b480      	push	{r7}
 800513a:	b087      	sub	sp, #28
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
 8005144:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005152:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	021a      	lsls	r2, r3, #8
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	431a      	orrs	r2, r3
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	4313      	orrs	r3, r2
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	4313      	orrs	r3, r2
 8005164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	609a      	str	r2, [r3, #8]
}
 800516c:	bf00      	nop
 800516e:	371c      	adds	r7, #28
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005188:	2b01      	cmp	r3, #1
 800518a:	d101      	bne.n	8005190 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800518c:	2302      	movs	r3, #2
 800518e:	e074      	b.n	800527a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a34      	ldr	r2, [pc, #208]	; (8005288 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d009      	beq.n	80051ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a33      	ldr	r2, [pc, #204]	; (800528c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d004      	beq.n	80051ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a31      	ldr	r2, [pc, #196]	; (8005290 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d108      	bne.n	80051e0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	4313      	orrs	r3, r2
 80051de:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80051e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a21      	ldr	r2, [pc, #132]	; (8005288 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d022      	beq.n	800524e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005210:	d01d      	beq.n	800524e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a1f      	ldr	r2, [pc, #124]	; (8005294 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d018      	beq.n	800524e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a1d      	ldr	r2, [pc, #116]	; (8005298 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d013      	beq.n	800524e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a1c      	ldr	r2, [pc, #112]	; (800529c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d00e      	beq.n	800524e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a15      	ldr	r2, [pc, #84]	; (800528c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d009      	beq.n	800524e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a18      	ldr	r2, [pc, #96]	; (80052a0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d004      	beq.n	800524e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a11      	ldr	r2, [pc, #68]	; (8005290 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d10c      	bne.n	8005268 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005254:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	4313      	orrs	r3, r2
 800525e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	40012c00 	.word	0x40012c00
 800528c:	40013400 	.word	0x40013400
 8005290:	40015000 	.word	0x40015000
 8005294:	40000400 	.word	0x40000400
 8005298:	40000800 	.word	0x40000800
 800529c:	40000c00 	.word	0x40000c00
 80052a0:	40014000 	.word	0x40014000

080052a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e042      	b.n	80053c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005348:	2b00      	cmp	r3, #0
 800534a:	d106      	bne.n	800535a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f7fb fc43 	bl	8000be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2224      	movs	r2, #36	; 0x24
 800535e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 0201 	bic.w	r2, r2, #1
 8005370:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005376:	2b00      	cmp	r3, #0
 8005378:	d002      	beq.n	8005380 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 fb24 	bl	80059c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f825 	bl	80053d0 <UART_SetConfig>
 8005386:	4603      	mov	r3, r0
 8005388:	2b01      	cmp	r3, #1
 800538a:	d101      	bne.n	8005390 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e01b      	b.n	80053c8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800539e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689a      	ldr	r2, [r3, #8]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f042 0201 	orr.w	r2, r2, #1
 80053be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 fba3 	bl	8005b0c <UART_CheckIdleState>
 80053c6:	4603      	mov	r3, r0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3708      	adds	r7, #8
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053d4:	b08c      	sub	sp, #48	; 0x30
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053da:	2300      	movs	r3, #0
 80053dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	431a      	orrs	r2, r3
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	431a      	orrs	r2, r3
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	69db      	ldr	r3, [r3, #28]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	4baa      	ldr	r3, [pc, #680]	; (80056a8 <UART_SetConfig+0x2d8>)
 8005400:	4013      	ands	r3, r2
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	6812      	ldr	r2, [r2, #0]
 8005406:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005408:	430b      	orrs	r3, r1
 800540a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a9f      	ldr	r2, [pc, #636]	; (80056ac <UART_SetConfig+0x2dc>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d004      	beq.n	800543c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005438:	4313      	orrs	r3, r2
 800543a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005446:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	6812      	ldr	r2, [r2, #0]
 800544e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005450:	430b      	orrs	r3, r1
 8005452:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545a:	f023 010f 	bic.w	r1, r3, #15
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a90      	ldr	r2, [pc, #576]	; (80056b0 <UART_SetConfig+0x2e0>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d125      	bne.n	80054c0 <UART_SetConfig+0xf0>
 8005474:	4b8f      	ldr	r3, [pc, #572]	; (80056b4 <UART_SetConfig+0x2e4>)
 8005476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	2b03      	cmp	r3, #3
 8005480:	d81a      	bhi.n	80054b8 <UART_SetConfig+0xe8>
 8005482:	a201      	add	r2, pc, #4	; (adr r2, 8005488 <UART_SetConfig+0xb8>)
 8005484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005488:	08005499 	.word	0x08005499
 800548c:	080054a9 	.word	0x080054a9
 8005490:	080054a1 	.word	0x080054a1
 8005494:	080054b1 	.word	0x080054b1
 8005498:	2301      	movs	r3, #1
 800549a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800549e:	e116      	b.n	80056ce <UART_SetConfig+0x2fe>
 80054a0:	2302      	movs	r3, #2
 80054a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054a6:	e112      	b.n	80056ce <UART_SetConfig+0x2fe>
 80054a8:	2304      	movs	r3, #4
 80054aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054ae:	e10e      	b.n	80056ce <UART_SetConfig+0x2fe>
 80054b0:	2308      	movs	r3, #8
 80054b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054b6:	e10a      	b.n	80056ce <UART_SetConfig+0x2fe>
 80054b8:	2310      	movs	r3, #16
 80054ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054be:	e106      	b.n	80056ce <UART_SetConfig+0x2fe>
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a7c      	ldr	r2, [pc, #496]	; (80056b8 <UART_SetConfig+0x2e8>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d138      	bne.n	800553c <UART_SetConfig+0x16c>
 80054ca:	4b7a      	ldr	r3, [pc, #488]	; (80056b4 <UART_SetConfig+0x2e4>)
 80054cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d0:	f003 030c 	and.w	r3, r3, #12
 80054d4:	2b0c      	cmp	r3, #12
 80054d6:	d82d      	bhi.n	8005534 <UART_SetConfig+0x164>
 80054d8:	a201      	add	r2, pc, #4	; (adr r2, 80054e0 <UART_SetConfig+0x110>)
 80054da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054de:	bf00      	nop
 80054e0:	08005515 	.word	0x08005515
 80054e4:	08005535 	.word	0x08005535
 80054e8:	08005535 	.word	0x08005535
 80054ec:	08005535 	.word	0x08005535
 80054f0:	08005525 	.word	0x08005525
 80054f4:	08005535 	.word	0x08005535
 80054f8:	08005535 	.word	0x08005535
 80054fc:	08005535 	.word	0x08005535
 8005500:	0800551d 	.word	0x0800551d
 8005504:	08005535 	.word	0x08005535
 8005508:	08005535 	.word	0x08005535
 800550c:	08005535 	.word	0x08005535
 8005510:	0800552d 	.word	0x0800552d
 8005514:	2300      	movs	r3, #0
 8005516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800551a:	e0d8      	b.n	80056ce <UART_SetConfig+0x2fe>
 800551c:	2302      	movs	r3, #2
 800551e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005522:	e0d4      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005524:	2304      	movs	r3, #4
 8005526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800552a:	e0d0      	b.n	80056ce <UART_SetConfig+0x2fe>
 800552c:	2308      	movs	r3, #8
 800552e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005532:	e0cc      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005534:	2310      	movs	r3, #16
 8005536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800553a:	e0c8      	b.n	80056ce <UART_SetConfig+0x2fe>
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a5e      	ldr	r2, [pc, #376]	; (80056bc <UART_SetConfig+0x2ec>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d125      	bne.n	8005592 <UART_SetConfig+0x1c2>
 8005546:	4b5b      	ldr	r3, [pc, #364]	; (80056b4 <UART_SetConfig+0x2e4>)
 8005548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005550:	2b30      	cmp	r3, #48	; 0x30
 8005552:	d016      	beq.n	8005582 <UART_SetConfig+0x1b2>
 8005554:	2b30      	cmp	r3, #48	; 0x30
 8005556:	d818      	bhi.n	800558a <UART_SetConfig+0x1ba>
 8005558:	2b20      	cmp	r3, #32
 800555a:	d00a      	beq.n	8005572 <UART_SetConfig+0x1a2>
 800555c:	2b20      	cmp	r3, #32
 800555e:	d814      	bhi.n	800558a <UART_SetConfig+0x1ba>
 8005560:	2b00      	cmp	r3, #0
 8005562:	d002      	beq.n	800556a <UART_SetConfig+0x19a>
 8005564:	2b10      	cmp	r3, #16
 8005566:	d008      	beq.n	800557a <UART_SetConfig+0x1aa>
 8005568:	e00f      	b.n	800558a <UART_SetConfig+0x1ba>
 800556a:	2300      	movs	r3, #0
 800556c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005570:	e0ad      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005572:	2302      	movs	r3, #2
 8005574:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005578:	e0a9      	b.n	80056ce <UART_SetConfig+0x2fe>
 800557a:	2304      	movs	r3, #4
 800557c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005580:	e0a5      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005582:	2308      	movs	r3, #8
 8005584:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005588:	e0a1      	b.n	80056ce <UART_SetConfig+0x2fe>
 800558a:	2310      	movs	r3, #16
 800558c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005590:	e09d      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a4a      	ldr	r2, [pc, #296]	; (80056c0 <UART_SetConfig+0x2f0>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d125      	bne.n	80055e8 <UART_SetConfig+0x218>
 800559c:	4b45      	ldr	r3, [pc, #276]	; (80056b4 <UART_SetConfig+0x2e4>)
 800559e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80055a6:	2bc0      	cmp	r3, #192	; 0xc0
 80055a8:	d016      	beq.n	80055d8 <UART_SetConfig+0x208>
 80055aa:	2bc0      	cmp	r3, #192	; 0xc0
 80055ac:	d818      	bhi.n	80055e0 <UART_SetConfig+0x210>
 80055ae:	2b80      	cmp	r3, #128	; 0x80
 80055b0:	d00a      	beq.n	80055c8 <UART_SetConfig+0x1f8>
 80055b2:	2b80      	cmp	r3, #128	; 0x80
 80055b4:	d814      	bhi.n	80055e0 <UART_SetConfig+0x210>
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d002      	beq.n	80055c0 <UART_SetConfig+0x1f0>
 80055ba:	2b40      	cmp	r3, #64	; 0x40
 80055bc:	d008      	beq.n	80055d0 <UART_SetConfig+0x200>
 80055be:	e00f      	b.n	80055e0 <UART_SetConfig+0x210>
 80055c0:	2300      	movs	r3, #0
 80055c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055c6:	e082      	b.n	80056ce <UART_SetConfig+0x2fe>
 80055c8:	2302      	movs	r3, #2
 80055ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055ce:	e07e      	b.n	80056ce <UART_SetConfig+0x2fe>
 80055d0:	2304      	movs	r3, #4
 80055d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055d6:	e07a      	b.n	80056ce <UART_SetConfig+0x2fe>
 80055d8:	2308      	movs	r3, #8
 80055da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055de:	e076      	b.n	80056ce <UART_SetConfig+0x2fe>
 80055e0:	2310      	movs	r3, #16
 80055e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055e6:	e072      	b.n	80056ce <UART_SetConfig+0x2fe>
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a35      	ldr	r2, [pc, #212]	; (80056c4 <UART_SetConfig+0x2f4>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d12a      	bne.n	8005648 <UART_SetConfig+0x278>
 80055f2:	4b30      	ldr	r3, [pc, #192]	; (80056b4 <UART_SetConfig+0x2e4>)
 80055f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005600:	d01a      	beq.n	8005638 <UART_SetConfig+0x268>
 8005602:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005606:	d81b      	bhi.n	8005640 <UART_SetConfig+0x270>
 8005608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800560c:	d00c      	beq.n	8005628 <UART_SetConfig+0x258>
 800560e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005612:	d815      	bhi.n	8005640 <UART_SetConfig+0x270>
 8005614:	2b00      	cmp	r3, #0
 8005616:	d003      	beq.n	8005620 <UART_SetConfig+0x250>
 8005618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800561c:	d008      	beq.n	8005630 <UART_SetConfig+0x260>
 800561e:	e00f      	b.n	8005640 <UART_SetConfig+0x270>
 8005620:	2300      	movs	r3, #0
 8005622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005626:	e052      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005628:	2302      	movs	r3, #2
 800562a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800562e:	e04e      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005630:	2304      	movs	r3, #4
 8005632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005636:	e04a      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005638:	2308      	movs	r3, #8
 800563a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800563e:	e046      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005640:	2310      	movs	r3, #16
 8005642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005646:	e042      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a17      	ldr	r2, [pc, #92]	; (80056ac <UART_SetConfig+0x2dc>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d13a      	bne.n	80056c8 <UART_SetConfig+0x2f8>
 8005652:	4b18      	ldr	r3, [pc, #96]	; (80056b4 <UART_SetConfig+0x2e4>)
 8005654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005658:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800565c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005660:	d01a      	beq.n	8005698 <UART_SetConfig+0x2c8>
 8005662:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005666:	d81b      	bhi.n	80056a0 <UART_SetConfig+0x2d0>
 8005668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800566c:	d00c      	beq.n	8005688 <UART_SetConfig+0x2b8>
 800566e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005672:	d815      	bhi.n	80056a0 <UART_SetConfig+0x2d0>
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <UART_SetConfig+0x2b0>
 8005678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800567c:	d008      	beq.n	8005690 <UART_SetConfig+0x2c0>
 800567e:	e00f      	b.n	80056a0 <UART_SetConfig+0x2d0>
 8005680:	2300      	movs	r3, #0
 8005682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005686:	e022      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005688:	2302      	movs	r3, #2
 800568a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800568e:	e01e      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005690:	2304      	movs	r3, #4
 8005692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005696:	e01a      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005698:	2308      	movs	r3, #8
 800569a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800569e:	e016      	b.n	80056ce <UART_SetConfig+0x2fe>
 80056a0:	2310      	movs	r3, #16
 80056a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056a6:	e012      	b.n	80056ce <UART_SetConfig+0x2fe>
 80056a8:	cfff69f3 	.word	0xcfff69f3
 80056ac:	40008000 	.word	0x40008000
 80056b0:	40013800 	.word	0x40013800
 80056b4:	40021000 	.word	0x40021000
 80056b8:	40004400 	.word	0x40004400
 80056bc:	40004800 	.word	0x40004800
 80056c0:	40004c00 	.word	0x40004c00
 80056c4:	40005000 	.word	0x40005000
 80056c8:	2310      	movs	r3, #16
 80056ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4aae      	ldr	r2, [pc, #696]	; (800598c <UART_SetConfig+0x5bc>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	f040 8097 	bne.w	8005808 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80056de:	2b08      	cmp	r3, #8
 80056e0:	d823      	bhi.n	800572a <UART_SetConfig+0x35a>
 80056e2:	a201      	add	r2, pc, #4	; (adr r2, 80056e8 <UART_SetConfig+0x318>)
 80056e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e8:	0800570d 	.word	0x0800570d
 80056ec:	0800572b 	.word	0x0800572b
 80056f0:	08005715 	.word	0x08005715
 80056f4:	0800572b 	.word	0x0800572b
 80056f8:	0800571b 	.word	0x0800571b
 80056fc:	0800572b 	.word	0x0800572b
 8005700:	0800572b 	.word	0x0800572b
 8005704:	0800572b 	.word	0x0800572b
 8005708:	08005723 	.word	0x08005723
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800570c:	f7fe fdc6 	bl	800429c <HAL_RCC_GetPCLK1Freq>
 8005710:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005712:	e010      	b.n	8005736 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005714:	4b9e      	ldr	r3, [pc, #632]	; (8005990 <UART_SetConfig+0x5c0>)
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005718:	e00d      	b.n	8005736 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800571a:	f7fe fd51 	bl	80041c0 <HAL_RCC_GetSysClockFreq>
 800571e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005720:	e009      	b.n	8005736 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005726:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005728:	e005      	b.n	8005736 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800572a:	2300      	movs	r3, #0
 800572c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005734:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	2b00      	cmp	r3, #0
 800573a:	f000 8130 	beq.w	800599e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	4a94      	ldr	r2, [pc, #592]	; (8005994 <UART_SetConfig+0x5c4>)
 8005744:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005748:	461a      	mov	r2, r3
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005750:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	4613      	mov	r3, r2
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	4413      	add	r3, r2
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	429a      	cmp	r2, r3
 8005760:	d305      	bcc.n	800576e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005768:	69ba      	ldr	r2, [r7, #24]
 800576a:	429a      	cmp	r2, r3
 800576c:	d903      	bls.n	8005776 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005774:	e113      	b.n	800599e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	2200      	movs	r2, #0
 800577a:	60bb      	str	r3, [r7, #8]
 800577c:	60fa      	str	r2, [r7, #12]
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	4a84      	ldr	r2, [pc, #528]	; (8005994 <UART_SetConfig+0x5c4>)
 8005784:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005788:	b29b      	uxth	r3, r3
 800578a:	2200      	movs	r2, #0
 800578c:	603b      	str	r3, [r7, #0]
 800578e:	607a      	str	r2, [r7, #4]
 8005790:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005794:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005798:	f7fa fd3e 	bl	8000218 <__aeabi_uldivmod>
 800579c:	4602      	mov	r2, r0
 800579e:	460b      	mov	r3, r1
 80057a0:	4610      	mov	r0, r2
 80057a2:	4619      	mov	r1, r3
 80057a4:	f04f 0200 	mov.w	r2, #0
 80057a8:	f04f 0300 	mov.w	r3, #0
 80057ac:	020b      	lsls	r3, r1, #8
 80057ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80057b2:	0202      	lsls	r2, r0, #8
 80057b4:	6979      	ldr	r1, [r7, #20]
 80057b6:	6849      	ldr	r1, [r1, #4]
 80057b8:	0849      	lsrs	r1, r1, #1
 80057ba:	2000      	movs	r0, #0
 80057bc:	460c      	mov	r4, r1
 80057be:	4605      	mov	r5, r0
 80057c0:	eb12 0804 	adds.w	r8, r2, r4
 80057c4:	eb43 0905 	adc.w	r9, r3, r5
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	469a      	mov	sl, r3
 80057d0:	4693      	mov	fp, r2
 80057d2:	4652      	mov	r2, sl
 80057d4:	465b      	mov	r3, fp
 80057d6:	4640      	mov	r0, r8
 80057d8:	4649      	mov	r1, r9
 80057da:	f7fa fd1d 	bl	8000218 <__aeabi_uldivmod>
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	4613      	mov	r3, r2
 80057e4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057e6:	6a3b      	ldr	r3, [r7, #32]
 80057e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057ec:	d308      	bcc.n	8005800 <UART_SetConfig+0x430>
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057f4:	d204      	bcs.n	8005800 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6a3a      	ldr	r2, [r7, #32]
 80057fc:	60da      	str	r2, [r3, #12]
 80057fe:	e0ce      	b.n	800599e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005806:	e0ca      	b.n	800599e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	69db      	ldr	r3, [r3, #28]
 800580c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005810:	d166      	bne.n	80058e0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005812:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005816:	2b08      	cmp	r3, #8
 8005818:	d827      	bhi.n	800586a <UART_SetConfig+0x49a>
 800581a:	a201      	add	r2, pc, #4	; (adr r2, 8005820 <UART_SetConfig+0x450>)
 800581c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005820:	08005845 	.word	0x08005845
 8005824:	0800584d 	.word	0x0800584d
 8005828:	08005855 	.word	0x08005855
 800582c:	0800586b 	.word	0x0800586b
 8005830:	0800585b 	.word	0x0800585b
 8005834:	0800586b 	.word	0x0800586b
 8005838:	0800586b 	.word	0x0800586b
 800583c:	0800586b 	.word	0x0800586b
 8005840:	08005863 	.word	0x08005863
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005844:	f7fe fd2a 	bl	800429c <HAL_RCC_GetPCLK1Freq>
 8005848:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800584a:	e014      	b.n	8005876 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800584c:	f7fe fd3c 	bl	80042c8 <HAL_RCC_GetPCLK2Freq>
 8005850:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005852:	e010      	b.n	8005876 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005854:	4b4e      	ldr	r3, [pc, #312]	; (8005990 <UART_SetConfig+0x5c0>)
 8005856:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005858:	e00d      	b.n	8005876 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800585a:	f7fe fcb1 	bl	80041c0 <HAL_RCC_GetSysClockFreq>
 800585e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005860:	e009      	b.n	8005876 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005866:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005868:	e005      	b.n	8005876 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800586a:	2300      	movs	r3, #0
 800586c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005874:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	2b00      	cmp	r3, #0
 800587a:	f000 8090 	beq.w	800599e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	4a44      	ldr	r2, [pc, #272]	; (8005994 <UART_SetConfig+0x5c4>)
 8005884:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005888:	461a      	mov	r2, r3
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005890:	005a      	lsls	r2, r3, #1
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	085b      	lsrs	r3, r3, #1
 8005898:	441a      	add	r2, r3
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	2b0f      	cmp	r3, #15
 80058a8:	d916      	bls.n	80058d8 <UART_SetConfig+0x508>
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058b0:	d212      	bcs.n	80058d8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	f023 030f 	bic.w	r3, r3, #15
 80058ba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058bc:	6a3b      	ldr	r3, [r7, #32]
 80058be:	085b      	lsrs	r3, r3, #1
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	f003 0307 	and.w	r3, r3, #7
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	8bfb      	ldrh	r3, [r7, #30]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	8bfa      	ldrh	r2, [r7, #30]
 80058d4:	60da      	str	r2, [r3, #12]
 80058d6:	e062      	b.n	800599e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80058de:	e05e      	b.n	800599e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058e4:	2b08      	cmp	r3, #8
 80058e6:	d828      	bhi.n	800593a <UART_SetConfig+0x56a>
 80058e8:	a201      	add	r2, pc, #4	; (adr r2, 80058f0 <UART_SetConfig+0x520>)
 80058ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ee:	bf00      	nop
 80058f0:	08005915 	.word	0x08005915
 80058f4:	0800591d 	.word	0x0800591d
 80058f8:	08005925 	.word	0x08005925
 80058fc:	0800593b 	.word	0x0800593b
 8005900:	0800592b 	.word	0x0800592b
 8005904:	0800593b 	.word	0x0800593b
 8005908:	0800593b 	.word	0x0800593b
 800590c:	0800593b 	.word	0x0800593b
 8005910:	08005933 	.word	0x08005933
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005914:	f7fe fcc2 	bl	800429c <HAL_RCC_GetPCLK1Freq>
 8005918:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800591a:	e014      	b.n	8005946 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800591c:	f7fe fcd4 	bl	80042c8 <HAL_RCC_GetPCLK2Freq>
 8005920:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005922:	e010      	b.n	8005946 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005924:	4b1a      	ldr	r3, [pc, #104]	; (8005990 <UART_SetConfig+0x5c0>)
 8005926:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005928:	e00d      	b.n	8005946 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800592a:	f7fe fc49 	bl	80041c0 <HAL_RCC_GetSysClockFreq>
 800592e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005930:	e009      	b.n	8005946 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005936:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005938:	e005      	b.n	8005946 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800593a:	2300      	movs	r3, #0
 800593c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005944:	bf00      	nop
    }

    if (pclk != 0U)
 8005946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005948:	2b00      	cmp	r3, #0
 800594a:	d028      	beq.n	800599e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005950:	4a10      	ldr	r2, [pc, #64]	; (8005994 <UART_SetConfig+0x5c4>)
 8005952:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005956:	461a      	mov	r2, r3
 8005958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595a:	fbb3 f2f2 	udiv	r2, r3, r2
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	085b      	lsrs	r3, r3, #1
 8005964:	441a      	add	r2, r3
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	fbb2 f3f3 	udiv	r3, r2, r3
 800596e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	2b0f      	cmp	r3, #15
 8005974:	d910      	bls.n	8005998 <UART_SetConfig+0x5c8>
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800597c:	d20c      	bcs.n	8005998 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	b29a      	uxth	r2, r3
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	60da      	str	r2, [r3, #12]
 8005988:	e009      	b.n	800599e <UART_SetConfig+0x5ce>
 800598a:	bf00      	nop
 800598c:	40008000 	.word	0x40008000
 8005990:	00f42400 	.word	0x00f42400
 8005994:	08006094 	.word	0x08006094
      }
      else
      {
        ret = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	2200      	movs	r2, #0
 80059b2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	2200      	movs	r2, #0
 80059b8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80059ba:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3730      	adds	r7, #48	; 0x30
 80059c2:	46bd      	mov	sp, r7
 80059c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080059c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d4:	f003 0308 	and.w	r3, r3, #8
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00a      	beq.n	80059f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00a      	beq.n	8005a14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	430a      	orrs	r2, r1
 8005a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00a      	beq.n	8005a36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00a      	beq.n	8005a58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	430a      	orrs	r2, r1
 8005a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5c:	f003 0310 	and.w	r3, r3, #16
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00a      	beq.n	8005a7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7e:	f003 0320 	and.w	r3, r3, #32
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00a      	beq.n	8005a9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d01a      	beq.n	8005ade <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ac6:	d10a      	bne.n	8005ade <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00a      	beq.n	8005b00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	605a      	str	r2, [r3, #4]
  }
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b098      	sub	sp, #96	; 0x60
 8005b10:	af02      	add	r7, sp, #8
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b1c:	f7fb f9cc 	bl	8000eb8 <HAL_GetTick>
 8005b20:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0308 	and.w	r3, r3, #8
 8005b2c:	2b08      	cmp	r3, #8
 8005b2e:	d12f      	bne.n	8005b90 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f88e 	bl	8005c60 <UART_WaitOnFlagUntilTimeout>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d022      	beq.n	8005b90 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b52:	e853 3f00 	ldrex	r3, [r3]
 8005b56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b5e:	653b      	str	r3, [r7, #80]	; 0x50
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	461a      	mov	r2, r3
 8005b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b68:	647b      	str	r3, [r7, #68]	; 0x44
 8005b6a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b70:	e841 2300 	strex	r3, r2, [r1]
 8005b74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1e6      	bne.n	8005b4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e063      	b.n	8005c58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0304 	and.w	r3, r3, #4
 8005b9a:	2b04      	cmp	r3, #4
 8005b9c:	d149      	bne.n	8005c32 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b9e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ba2:	9300      	str	r3, [sp, #0]
 8005ba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f857 	bl	8005c60 <UART_WaitOnFlagUntilTimeout>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d03c      	beq.n	8005c32 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	e853 3f00 	ldrex	r3, [r3]
 8005bc4:	623b      	str	r3, [r7, #32]
   return(result);
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bd6:	633b      	str	r3, [r7, #48]	; 0x30
 8005bd8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bde:	e841 2300 	strex	r3, r2, [r1]
 8005be2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1e6      	bne.n	8005bb8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	3308      	adds	r3, #8
 8005bf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	e853 3f00 	ldrex	r3, [r3]
 8005bf8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f023 0301 	bic.w	r3, r3, #1
 8005c00:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	3308      	adds	r3, #8
 8005c08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c0a:	61fa      	str	r2, [r7, #28]
 8005c0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0e:	69b9      	ldr	r1, [r7, #24]
 8005c10:	69fa      	ldr	r2, [r7, #28]
 8005c12:	e841 2300 	strex	r3, r2, [r1]
 8005c16:	617b      	str	r3, [r7, #20]
   return(result);
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1e5      	bne.n	8005bea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2220      	movs	r2, #32
 8005c22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e012      	b.n	8005c58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3758      	adds	r7, #88	; 0x58
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	603b      	str	r3, [r7, #0]
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c70:	e04f      	b.n	8005d12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c78:	d04b      	beq.n	8005d12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c7a:	f7fb f91d 	bl	8000eb8 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d302      	bcc.n	8005c90 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e04e      	b.n	8005d32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0304 	and.w	r3, r3, #4
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d037      	beq.n	8005d12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	2b80      	cmp	r3, #128	; 0x80
 8005ca6:	d034      	beq.n	8005d12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	2b40      	cmp	r3, #64	; 0x40
 8005cac:	d031      	beq.n	8005d12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	69db      	ldr	r3, [r3, #28]
 8005cb4:	f003 0308 	and.w	r3, r3, #8
 8005cb8:	2b08      	cmp	r3, #8
 8005cba:	d110      	bne.n	8005cde <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2208      	movs	r2, #8
 8005cc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f000 f838 	bl	8005d3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2208      	movs	r2, #8
 8005cce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e029      	b.n	8005d32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	69db      	ldr	r3, [r3, #28]
 8005ce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ce8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cec:	d111      	bne.n	8005d12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cf6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f000 f81e 	bl	8005d3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2220      	movs	r2, #32
 8005d02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e00f      	b.n	8005d32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	69da      	ldr	r2, [r3, #28]
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	bf0c      	ite	eq
 8005d22:	2301      	moveq	r3, #1
 8005d24:	2300      	movne	r3, #0
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	461a      	mov	r2, r3
 8005d2a:	79fb      	ldrb	r3, [r7, #7]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d0a0      	beq.n	8005c72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b095      	sub	sp, #84	; 0x54
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d4a:	e853 3f00 	ldrex	r3, [r3]
 8005d4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d60:	643b      	str	r3, [r7, #64]	; 0x40
 8005d62:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d68:	e841 2300 	strex	r3, r2, [r1]
 8005d6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1e6      	bne.n	8005d42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	3308      	adds	r3, #8
 8005d7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7c:	6a3b      	ldr	r3, [r7, #32]
 8005d7e:	e853 3f00 	ldrex	r3, [r3]
 8005d82:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d8a:	f023 0301 	bic.w	r3, r3, #1
 8005d8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	3308      	adds	r3, #8
 8005d96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005da0:	e841 2300 	strex	r3, r2, [r1]
 8005da4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1e3      	bne.n	8005d74 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d118      	bne.n	8005de6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	e853 3f00 	ldrex	r3, [r3]
 8005dc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	f023 0310 	bic.w	r3, r3, #16
 8005dc8:	647b      	str	r3, [r7, #68]	; 0x44
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	461a      	mov	r2, r3
 8005dd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dd2:	61bb      	str	r3, [r7, #24]
 8005dd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd6:	6979      	ldr	r1, [r7, #20]
 8005dd8:	69ba      	ldr	r2, [r7, #24]
 8005dda:	e841 2300 	strex	r3, r2, [r1]
 8005dde:	613b      	str	r3, [r7, #16]
   return(result);
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1e6      	bne.n	8005db4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2220      	movs	r2, #32
 8005dea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005dfa:	bf00      	nop
 8005dfc:	3754      	adds	r7, #84	; 0x54
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b085      	sub	sp, #20
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d101      	bne.n	8005e1c <HAL_UARTEx_DisableFifoMode+0x16>
 8005e18:	2302      	movs	r3, #2
 8005e1a:	e027      	b.n	8005e6c <HAL_UARTEx_DisableFifoMode+0x66>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2224      	movs	r2, #36	; 0x24
 8005e28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f022 0201 	bic.w	r2, r2, #1
 8005e42:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e4a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3714      	adds	r7, #20
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d101      	bne.n	8005e90 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	e02d      	b.n	8005eec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2224      	movs	r2, #36	; 0x24
 8005e9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 0201 	bic.w	r2, r2, #1
 8005eb6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	683a      	ldr	r2, [r7, #0]
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 f84f 	bl	8005f70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2220      	movs	r2, #32
 8005ede:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d101      	bne.n	8005f0c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f08:	2302      	movs	r3, #2
 8005f0a:	e02d      	b.n	8005f68 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2224      	movs	r2, #36	; 0x24
 8005f18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f022 0201 	bic.w	r2, r2, #1
 8005f32:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	430a      	orrs	r2, r1
 8005f46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 f811 	bl	8005f70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2220      	movs	r2, #32
 8005f5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d108      	bne.n	8005f92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f90:	e031      	b.n	8005ff6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f92:	2308      	movs	r3, #8
 8005f94:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f96:	2308      	movs	r3, #8
 8005f98:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	0e5b      	lsrs	r3, r3, #25
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	f003 0307 	and.w	r3, r3, #7
 8005fa8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	0f5b      	lsrs	r3, r3, #29
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	f003 0307 	and.w	r3, r3, #7
 8005fb8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fba:	7bbb      	ldrb	r3, [r7, #14]
 8005fbc:	7b3a      	ldrb	r2, [r7, #12]
 8005fbe:	4911      	ldr	r1, [pc, #68]	; (8006004 <UARTEx_SetNbDataToProcess+0x94>)
 8005fc0:	5c8a      	ldrb	r2, [r1, r2]
 8005fc2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005fc6:	7b3a      	ldrb	r2, [r7, #12]
 8005fc8:	490f      	ldr	r1, [pc, #60]	; (8006008 <UARTEx_SetNbDataToProcess+0x98>)
 8005fca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fcc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
 8005fda:	7b7a      	ldrb	r2, [r7, #13]
 8005fdc:	4909      	ldr	r1, [pc, #36]	; (8006004 <UARTEx_SetNbDataToProcess+0x94>)
 8005fde:	5c8a      	ldrb	r2, [r1, r2]
 8005fe0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005fe4:	7b7a      	ldrb	r2, [r7, #13]
 8005fe6:	4908      	ldr	r1, [pc, #32]	; (8006008 <UARTEx_SetNbDataToProcess+0x98>)
 8005fe8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fea:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005ff6:	bf00      	nop
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	080060ac 	.word	0x080060ac
 8006008:	080060b4 	.word	0x080060b4

0800600c <memset>:
 800600c:	4402      	add	r2, r0
 800600e:	4603      	mov	r3, r0
 8006010:	4293      	cmp	r3, r2
 8006012:	d100      	bne.n	8006016 <memset+0xa>
 8006014:	4770      	bx	lr
 8006016:	f803 1b01 	strb.w	r1, [r3], #1
 800601a:	e7f9      	b.n	8006010 <memset+0x4>

0800601c <__libc_init_array>:
 800601c:	b570      	push	{r4, r5, r6, lr}
 800601e:	4d0d      	ldr	r5, [pc, #52]	; (8006054 <__libc_init_array+0x38>)
 8006020:	4c0d      	ldr	r4, [pc, #52]	; (8006058 <__libc_init_array+0x3c>)
 8006022:	1b64      	subs	r4, r4, r5
 8006024:	10a4      	asrs	r4, r4, #2
 8006026:	2600      	movs	r6, #0
 8006028:	42a6      	cmp	r6, r4
 800602a:	d109      	bne.n	8006040 <__libc_init_array+0x24>
 800602c:	4d0b      	ldr	r5, [pc, #44]	; (800605c <__libc_init_array+0x40>)
 800602e:	4c0c      	ldr	r4, [pc, #48]	; (8006060 <__libc_init_array+0x44>)
 8006030:	f000 f818 	bl	8006064 <_init>
 8006034:	1b64      	subs	r4, r4, r5
 8006036:	10a4      	asrs	r4, r4, #2
 8006038:	2600      	movs	r6, #0
 800603a:	42a6      	cmp	r6, r4
 800603c:	d105      	bne.n	800604a <__libc_init_array+0x2e>
 800603e:	bd70      	pop	{r4, r5, r6, pc}
 8006040:	f855 3b04 	ldr.w	r3, [r5], #4
 8006044:	4798      	blx	r3
 8006046:	3601      	adds	r6, #1
 8006048:	e7ee      	b.n	8006028 <__libc_init_array+0xc>
 800604a:	f855 3b04 	ldr.w	r3, [r5], #4
 800604e:	4798      	blx	r3
 8006050:	3601      	adds	r6, #1
 8006052:	e7f2      	b.n	800603a <__libc_init_array+0x1e>
 8006054:	080060c4 	.word	0x080060c4
 8006058:	080060c4 	.word	0x080060c4
 800605c:	080060c4 	.word	0x080060c4
 8006060:	080060c8 	.word	0x080060c8

08006064 <_init>:
 8006064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006066:	bf00      	nop
 8006068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800606a:	bc08      	pop	{r3}
 800606c:	469e      	mov	lr, r3
 800606e:	4770      	bx	lr

08006070 <_fini>:
 8006070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006072:	bf00      	nop
 8006074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006076:	bc08      	pop	{r3}
 8006078:	469e      	mov	lr, r3
 800607a:	4770      	bx	lr
