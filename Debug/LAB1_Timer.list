
LAB1_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039a8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003b80  08003b80  00013b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bc0  08003bc0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003bc0  08003bc0  00013bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bc8  08003bc8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bc8  08003bc8  00013bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bcc  08003bcc  00013bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003bd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000010  08003bdc  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08003bdc  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011e8a  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002206  00000000  00000000  00031f09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb0  00000000  00000000  00034110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c4d  00000000  00000000  000350c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002567d  00000000  00000000  00035d0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011fc4  00000000  00000000  0005b38a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7b85  00000000  00000000  0006d34e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042ec  00000000  00000000  00164ed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  001691c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003b68 	.word	0x08003b68

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08003b68 	.word	0x08003b68

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fb23 	bl	8000b62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f81a 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f94a 	bl	80007b8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000524:	f000 f862 	bl	80005ec <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8000528:	f000 f8aa 	bl	8000680 <MX_TIM2_Init>
  MX_TIM5_Init();
 800052c:	f000 f8f6 	bl	800071c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim5);
 8000530:	4806      	ldr	r0, [pc, #24]	; (800054c <main+0x38>)
 8000532:	f001 fedd 	bl	80022f0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8000536:	4805      	ldr	r0, [pc, #20]	; (800054c <main+0x38>)
 8000538:	f001 ff4a 	bl	80023d0 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  micros();
 800053c:	f000 f9c2 	bl	80008c4 <micros>
	  getCounter = __HAL_TIM_GET_COUNTER(&htim5);
 8000540:	4b02      	ldr	r3, [pc, #8]	; (800054c <main+0x38>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000546:	4a02      	ldr	r2, [pc, #8]	; (8000550 <main+0x3c>)
 8000548:	6013      	str	r3, [r2, #0]
	  micros();
 800054a:	e7f7      	b.n	800053c <main+0x28>
 800054c:	2000010c 	.word	0x2000010c
 8000550:	20000164 	.word	0x20000164

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	; 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0318 	add.w	r3, r7, #24
 800055e:	2238      	movs	r2, #56	; 0x38
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f003 fad4 	bl	8003b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000576:	2000      	movs	r0, #0
 8000578:	f000 fe32 	bl	80011e0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057c:	2302      	movs	r3, #2
 800057e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000586:	2340      	movs	r3, #64	; 0x40
 8000588:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058e:	2302      	movs	r3, #2
 8000590:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000592:	2304      	movs	r3, #4
 8000594:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000596:	2355      	movs	r3, #85	; 0x55
 8000598:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059a:	2302      	movs	r3, #2
 800059c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a6:	f107 0318 	add.w	r3, r7, #24
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 fecc 	bl	8001348 <HAL_RCC_OscConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005b6:	f000 f9a3 	bl	8000900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ba:	230f      	movs	r3, #15
 80005bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005be:	2303      	movs	r3, #3
 80005c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2104      	movs	r1, #4
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 f9ca 	bl	800196c <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005de:	f000 f98f 	bl	8000900 <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3750      	adds	r7, #80	; 0x50
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005f0:	4b21      	ldr	r3, [pc, #132]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 80005f2:	4a22      	ldr	r2, [pc, #136]	; (800067c <MX_LPUART1_UART_Init+0x90>)
 80005f4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80005f6:	4b20      	ldr	r3, [pc, #128]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 80005f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005fc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005fe:	4b1e      	ldr	r3, [pc, #120]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000604:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800060a:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000610:	4b19      	ldr	r3, [pc, #100]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000612:	220c      	movs	r2, #12
 8000614:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000616:	4b18      	ldr	r3, [pc, #96]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800061c:	4b16      	ldr	r3, [pc, #88]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 800061e:	2200      	movs	r2, #0
 8000620:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000624:	2200      	movs	r2, #0
 8000626:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000628:	4b13      	ldr	r3, [pc, #76]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 800062a:	2200      	movs	r2, #0
 800062c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800062e:	4812      	ldr	r0, [pc, #72]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000630:	f002 fc00 	bl	8002e34 <HAL_UART_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800063a:	f000 f961 	bl	8000900 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800063e:	2100      	movs	r1, #0
 8000640:	480d      	ldr	r0, [pc, #52]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000642:	f003 f99b 	bl	800397c <HAL_UARTEx_SetTxFifoThreshold>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800064c:	f000 f958 	bl	8000900 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000650:	2100      	movs	r1, #0
 8000652:	4809      	ldr	r0, [pc, #36]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000654:	f003 f9d0 	bl	80039f8 <HAL_UARTEx_SetRxFifoThreshold>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800065e:	f000 f94f 	bl	8000900 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000664:	f003 f951 	bl	800390a <HAL_UARTEx_DisableFifoMode>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800066e:	f000 f947 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	2000002c 	.word	0x2000002c
 800067c:	40008000 	.word	0x40008000

08000680 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000686:	f107 0310 	add.w	r3, r7, #16
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800069e:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <MX_TIM2_Init+0x98>)
 80006a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80006a6:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <MX_TIM2_Init+0x98>)
 80006a8:	22a9      	movs	r2, #169	; 0xa9
 80006aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ac:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <MX_TIM2_Init+0x98>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80006b2:	4b19      	ldr	r3, [pc, #100]	; (8000718 <MX_TIM2_Init+0x98>)
 80006b4:	f04f 32ff 	mov.w	r2, #4294967295
 80006b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ba:	4b17      	ldr	r3, [pc, #92]	; (8000718 <MX_TIM2_Init+0x98>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c0:	4b15      	ldr	r3, [pc, #84]	; (8000718 <MX_TIM2_Init+0x98>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006c6:	4814      	ldr	r0, [pc, #80]	; (8000718 <MX_TIM2_Init+0x98>)
 80006c8:	f001 fdba 	bl	8002240 <HAL_TIM_Base_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80006d2:	f000 f915 	bl	8000900 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006dc:	f107 0310 	add.w	r3, r7, #16
 80006e0:	4619      	mov	r1, r3
 80006e2:	480d      	ldr	r0, [pc, #52]	; (8000718 <MX_TIM2_Init+0x98>)
 80006e4:	f002 f83c 	bl	8002760 <HAL_TIM_ConfigClockSource>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80006ee:	f000 f907 	bl	8000900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	4619      	mov	r1, r3
 80006fe:	4806      	ldr	r0, [pc, #24]	; (8000718 <MX_TIM2_Init+0x98>)
 8000700:	f002 fabc 	bl	8002c7c <HAL_TIMEx_MasterConfigSynchronization>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800070a:	f000 f8f9 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	3720      	adds	r7, #32
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	200000c0 	.word	0x200000c0

0800071c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000722:	f107 0310 	add.w	r3, r7, #16
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800073a:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <MX_TIM5_Init+0x94>)
 800073c:	4a1d      	ldr	r2, [pc, #116]	; (80007b4 <MX_TIM5_Init+0x98>)
 800073e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8000740:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <MX_TIM5_Init+0x94>)
 8000742:	22a9      	movs	r2, #169	; 0xa9
 8000744:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000746:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <MX_TIM5_Init+0x94>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <MX_TIM5_Init+0x94>)
 800074e:	f04f 32ff 	mov.w	r2, #4294967295
 8000752:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000754:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <MX_TIM5_Init+0x94>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_TIM5_Init+0x94>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000760:	4813      	ldr	r0, [pc, #76]	; (80007b0 <MX_TIM5_Init+0x94>)
 8000762:	f001 fd6d 	bl	8002240 <HAL_TIM_Base_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800076c:	f000 f8c8 	bl	8000900 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000774:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000776:	f107 0310 	add.w	r3, r7, #16
 800077a:	4619      	mov	r1, r3
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <MX_TIM5_Init+0x94>)
 800077e:	f001 ffef 	bl	8002760 <HAL_TIM_ConfigClockSource>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000788:	f000 f8ba 	bl	8000900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078c:	2300      	movs	r3, #0
 800078e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	4619      	mov	r1, r3
 8000798:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_TIM5_Init+0x94>)
 800079a:	f002 fa6f 	bl	8002c7c <HAL_TIMEx_MasterConfigSynchronization>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80007a4:	f000 f8ac 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	3720      	adds	r7, #32
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	2000010c 	.word	0x2000010c
 80007b4:	40000c00 	.word	0x40000c00

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	; 0x28
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	4b2f      	ldr	r3, [pc, #188]	; (800088c <MX_GPIO_Init+0xd4>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	4a2e      	ldr	r2, [pc, #184]	; (800088c <MX_GPIO_Init+0xd4>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007da:	4b2c      	ldr	r3, [pc, #176]	; (800088c <MX_GPIO_Init+0xd4>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007e6:	4b29      	ldr	r3, [pc, #164]	; (800088c <MX_GPIO_Init+0xd4>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	4a28      	ldr	r2, [pc, #160]	; (800088c <MX_GPIO_Init+0xd4>)
 80007ec:	f043 0320 	orr.w	r3, r3, #32
 80007f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f2:	4b26      	ldr	r3, [pc, #152]	; (800088c <MX_GPIO_Init+0xd4>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	f003 0320 	and.w	r3, r3, #32
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	4b23      	ldr	r3, [pc, #140]	; (800088c <MX_GPIO_Init+0xd4>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	4a22      	ldr	r2, [pc, #136]	; (800088c <MX_GPIO_Init+0xd4>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080a:	4b20      	ldr	r3, [pc, #128]	; (800088c <MX_GPIO_Init+0xd4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b1d      	ldr	r3, [pc, #116]	; (800088c <MX_GPIO_Init+0xd4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	4a1c      	ldr	r2, [pc, #112]	; (800088c <MX_GPIO_Init+0xd4>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000822:	4b1a      	ldr	r3, [pc, #104]	; (800088c <MX_GPIO_Init+0xd4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2120      	movs	r1, #32
 8000832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000836:	f000 fc97 	bl	8001168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800083a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800083e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000840:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4619      	mov	r1, r3
 8000850:	480f      	ldr	r0, [pc, #60]	; (8000890 <MX_GPIO_Init+0xd8>)
 8000852:	f000 fb07 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000856:	2320      	movs	r3, #32
 8000858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4619      	mov	r1, r3
 800086c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000870:	f000 faf8 	bl	8000e64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000874:	2200      	movs	r2, #0
 8000876:	2100      	movs	r1, #0
 8000878:	2028      	movs	r0, #40	; 0x28
 800087a:	f000 fabe 	bl	8000dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800087e:	2028      	movs	r0, #40	; 0x28
 8000880:	f000 fad5 	bl	8000e2e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000884:	bf00      	nop
 8000886:	3728      	adds	r7, #40	; 0x28
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40021000 	.word	0x40021000
 8000890:	48000800 	.word	0x48000800

08000894 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a07      	ldr	r2, [pc, #28]	; (80008bc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d104      	bne.n	80008ae <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		counter++;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	3301      	adds	r3, #1
 80008aa:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80008ac:	6013      	str	r3, [r2, #0]
	}
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	2000010c 	.word	0x2000010c
 80008c0:	20000160 	.word	0x20000160

080008c4 <micros>:
void micros()
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
	timestamp = counter*(2^32) + __HAL_TIM_GET_COUNTER(&htim5);
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <micros+0x30>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	4613      	mov	r3, r2
 80008ce:	011b      	lsls	r3, r3, #4
 80008d0:	4413      	add	r3, r2
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	461a      	mov	r2, r3
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <micros+0x34>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008dc:	4413      	add	r3, r2
 80008de:	2200      	movs	r2, #0
 80008e0:	4618      	mov	r0, r3
 80008e2:	4611      	mov	r1, r2
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <micros+0x38>)
 80008e6:	e9c3 0100 	strd	r0, r1, [r3]
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	20000160 	.word	0x20000160
 80008f8:	2000010c 	.word	0x2000010c
 80008fc:	20000158 	.word	0x20000158

08000900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000904:	b672      	cpsid	i
}
 8000906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000908:	e7fe      	b.n	8000908 <Error_Handler+0x8>
	...

0800090c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <HAL_MspInit+0x44>)
 8000914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000916:	4a0e      	ldr	r2, [pc, #56]	; (8000950 <HAL_MspInit+0x44>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6613      	str	r3, [r2, #96]	; 0x60
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <HAL_MspInit+0x44>)
 8000920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <HAL_MspInit+0x44>)
 800092c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800092e:	4a08      	ldr	r2, [pc, #32]	; (8000950 <HAL_MspInit+0x44>)
 8000930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000934:	6593      	str	r3, [r2, #88]	; 0x58
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <HAL_MspInit+0x44>)
 8000938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000942:	f000 fcf1 	bl	8001328 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40021000 	.word	0x40021000

08000954 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b09e      	sub	sp, #120	; 0x78
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800096c:	f107 0310 	add.w	r3, r7, #16
 8000970:	2254      	movs	r2, #84	; 0x54
 8000972:	2100      	movs	r1, #0
 8000974:	4618      	mov	r0, r3
 8000976:	f003 f8cb 	bl	8003b10 <memset>
  if(huart->Instance==LPUART1)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a1f      	ldr	r2, [pc, #124]	; (80009fc <HAL_UART_MspInit+0xa8>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d136      	bne.n	80009f2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000984:	2320      	movs	r3, #32
 8000986:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800098c:	f107 0310 	add.w	r3, r7, #16
 8000990:	4618      	mov	r0, r3
 8000992:	f001 fa07 	bl	8001da4 <HAL_RCCEx_PeriphCLKConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800099c:	f7ff ffb0 	bl	8000900 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80009a0:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <HAL_UART_MspInit+0xac>)
 80009a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009a4:	4a16      	ldr	r2, [pc, #88]	; (8000a00 <HAL_UART_MspInit+0xac>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	65d3      	str	r3, [r2, #92]	; 0x5c
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <HAL_UART_MspInit+0xac>)
 80009ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009b0:	f003 0301 	and.w	r3, r3, #1
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <HAL_UART_MspInit+0xac>)
 80009ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009bc:	4a10      	ldr	r2, [pc, #64]	; (8000a00 <HAL_UART_MspInit+0xac>)
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <HAL_UART_MspInit+0xac>)
 80009c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80009d0:	230c      	movs	r3, #12
 80009d2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80009e0:	230c      	movs	r3, #12
 80009e2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009e8:	4619      	mov	r1, r3
 80009ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ee:	f000 fa39 	bl	8000e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80009f2:	bf00      	nop
 80009f4:	3778      	adds	r7, #120	; 0x78
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40008000 	.word	0x40008000
 8000a00:	40021000 	.word	0x40021000

08000a04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a14:	d10c      	bne.n	8000a30 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <HAL_TIM_Base_MspInit+0x68>)
 8000a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a1a:	4a14      	ldr	r2, [pc, #80]	; (8000a6c <HAL_TIM_Base_MspInit+0x68>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6593      	str	r3, [r2, #88]	; 0x58
 8000a22:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_TIM_Base_MspInit+0x68>)
 8000a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000a2e:	e018      	b.n	8000a62 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM5)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0e      	ldr	r2, [pc, #56]	; (8000a70 <HAL_TIM_Base_MspInit+0x6c>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d113      	bne.n	8000a62 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <HAL_TIM_Base_MspInit+0x68>)
 8000a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3e:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <HAL_TIM_Base_MspInit+0x68>)
 8000a40:	f043 0308 	orr.w	r3, r3, #8
 8000a44:	6593      	str	r3, [r2, #88]	; 0x58
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <HAL_TIM_Base_MspInit+0x68>)
 8000a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4a:	f003 0308 	and.w	r3, r3, #8
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	2032      	movs	r0, #50	; 0x32
 8000a58:	f000 f9cf 	bl	8000dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000a5c:	2032      	movs	r0, #50	; 0x32
 8000a5e:	f000 f9e6 	bl	8000e2e <HAL_NVIC_EnableIRQ>
}
 8000a62:	bf00      	nop
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40000c00 	.word	0x40000c00

08000a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a78:	e7fe      	b.n	8000a78 <NMI_Handler+0x4>

08000a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <HardFault_Handler+0x4>

08000a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <MemManage_Handler+0x4>

08000a86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <BusFault_Handler+0x4>

08000a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <UsageFault_Handler+0x4>

08000a92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac0:	f000 f8a2 	bl	8000c08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000acc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ad0:	f000 fb62 	bl	8001198 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <TIM5_IRQHandler+0x10>)
 8000ade:	f001 fcef 	bl	80024c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	2000010c 	.word	0x2000010c

08000aec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <SystemInit+0x20>)
 8000af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000af6:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <SystemInit+0x20>)
 8000af8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000afc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b10:	480d      	ldr	r0, [pc, #52]	; (8000b48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b12:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b14:	f7ff ffea 	bl	8000aec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b18:	480c      	ldr	r0, [pc, #48]	; (8000b4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b1a:	490d      	ldr	r1, [pc, #52]	; (8000b50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b1c:	4a0d      	ldr	r2, [pc, #52]	; (8000b54 <LoopForever+0xe>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b20:	e002      	b.n	8000b28 <LoopCopyDataInit>

08000b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b26:	3304      	adds	r3, #4

08000b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b2c:	d3f9      	bcc.n	8000b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b30:	4c0a      	ldr	r4, [pc, #40]	; (8000b5c <LoopForever+0x16>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b34:	e001      	b.n	8000b3a <LoopFillZerobss>

08000b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b38:	3204      	adds	r2, #4

08000b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b3c:	d3fb      	bcc.n	8000b36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b3e:	f002 ffef 	bl	8003b20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b42:	f7ff fce7 	bl	8000514 <main>

08000b46 <LoopForever>:

LoopForever:
    b LoopForever
 8000b46:	e7fe      	b.n	8000b46 <LoopForever>
  ldr   r0, =_estack
 8000b48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b54:	08003bd0 	.word	0x08003bd0
  ldr r2, =_sbss
 8000b58:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b5c:	2000016c 	.word	0x2000016c

08000b60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b60:	e7fe      	b.n	8000b60 <ADC1_2_IRQHandler>

08000b62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b6c:	2003      	movs	r0, #3
 8000b6e:	f000 f939 	bl	8000de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b72:	2000      	movs	r0, #0
 8000b74:	f000 f80e 	bl	8000b94 <HAL_InitTick>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d002      	beq.n	8000b84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	71fb      	strb	r3, [r7, #7]
 8000b82:	e001      	b.n	8000b88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b84:	f7ff fec2 	bl	800090c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b88:	79fb      	ldrb	r3, [r7, #7]

}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ba0:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <HAL_InitTick+0x68>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d022      	beq.n	8000bee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ba8:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <HAL_InitTick+0x6c>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <HAL_InitTick+0x68>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f000 f944 	bl	8000e4a <HAL_SYSTICK_Config>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d10f      	bne.n	8000be8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b0f      	cmp	r3, #15
 8000bcc:	d809      	bhi.n	8000be2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	6879      	ldr	r1, [r7, #4]
 8000bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd6:	f000 f910 	bl	8000dfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bda:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <HAL_InitTick+0x70>)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6013      	str	r3, [r2, #0]
 8000be0:	e007      	b.n	8000bf2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	73fb      	strb	r3, [r7, #15]
 8000be6:	e004      	b.n	8000bf2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	73fb      	strb	r3, [r7, #15]
 8000bec:	e001      	b.n	8000bf2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	20000000 	.word	0x20000000
 8000c04:	20000004 	.word	0x20000004

08000c08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <HAL_IncTick+0x1c>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <HAL_IncTick+0x20>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4413      	add	r3, r2
 8000c16:	4a03      	ldr	r2, [pc, #12]	; (8000c24 <HAL_IncTick+0x1c>)
 8000c18:	6013      	str	r3, [r2, #0]
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	20000168 	.word	0x20000168
 8000c28:	20000008 	.word	0x20000008

08000c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c30:	4b03      	ldr	r3, [pc, #12]	; (8000c40 <HAL_GetTick+0x14>)
 8000c32:	681b      	ldr	r3, [r3, #0]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000168 	.word	0x20000168

08000c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c60:	4013      	ands	r3, r2
 8000c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c76:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	60d3      	str	r3, [r2, #12]
}
 8000c7c:	bf00      	nop
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	0a1b      	lsrs	r3, r3, #8
 8000c96:	f003 0307 	and.w	r3, r3, #7
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db0b      	blt.n	8000cd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	f003 021f 	and.w	r2, r3, #31
 8000cc0:	4907      	ldr	r1, [pc, #28]	; (8000ce0 <__NVIC_EnableIRQ+0x38>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	095b      	lsrs	r3, r3, #5
 8000cc8:	2001      	movs	r0, #1
 8000cca:	fa00 f202 	lsl.w	r2, r0, r2
 8000cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000e100 	.word	0xe000e100

08000ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	6039      	str	r1, [r7, #0]
 8000cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	db0a      	blt.n	8000d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	490c      	ldr	r1, [pc, #48]	; (8000d30 <__NVIC_SetPriority+0x4c>)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	0112      	lsls	r2, r2, #4
 8000d04:	b2d2      	uxtb	r2, r2
 8000d06:	440b      	add	r3, r1
 8000d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d0c:	e00a      	b.n	8000d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4908      	ldr	r1, [pc, #32]	; (8000d34 <__NVIC_SetPriority+0x50>)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	f003 030f 	and.w	r3, r3, #15
 8000d1a:	3b04      	subs	r3, #4
 8000d1c:	0112      	lsls	r2, r2, #4
 8000d1e:	b2d2      	uxtb	r2, r2
 8000d20:	440b      	add	r3, r1
 8000d22:	761a      	strb	r2, [r3, #24]
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000e100 	.word	0xe000e100
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b089      	sub	sp, #36	; 0x24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	f1c3 0307 	rsb	r3, r3, #7
 8000d52:	2b04      	cmp	r3, #4
 8000d54:	bf28      	it	cs
 8000d56:	2304      	movcs	r3, #4
 8000d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	2b06      	cmp	r3, #6
 8000d60:	d902      	bls.n	8000d68 <NVIC_EncodePriority+0x30>
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3b03      	subs	r3, #3
 8000d66:	e000      	b.n	8000d6a <NVIC_EncodePriority+0x32>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43da      	mvns	r2, r3
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	401a      	ands	r2, r3
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d80:	f04f 31ff 	mov.w	r1, #4294967295
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8a:	43d9      	mvns	r1, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	4313      	orrs	r3, r2
         );
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3724      	adds	r7, #36	; 0x24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000db0:	d301      	bcc.n	8000db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db2:	2301      	movs	r3, #1
 8000db4:	e00f      	b.n	8000dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db6:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <SysTick_Config+0x40>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dbe:	210f      	movs	r1, #15
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc4:	f7ff ff8e 	bl	8000ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <SysTick_Config+0x40>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dce:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <SysTick_Config+0x40>)
 8000dd0:	2207      	movs	r2, #7
 8000dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	e000e010 	.word	0xe000e010

08000de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff ff29 	bl	8000c44 <__NVIC_SetPriorityGrouping>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b086      	sub	sp, #24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e08:	f7ff ff40 	bl	8000c8c <__NVIC_GetPriorityGrouping>
 8000e0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	68b9      	ldr	r1, [r7, #8]
 8000e12:	6978      	ldr	r0, [r7, #20]
 8000e14:	f7ff ff90 	bl	8000d38 <NVIC_EncodePriority>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1e:	4611      	mov	r1, r2
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ff5f 	bl	8000ce4 <__NVIC_SetPriority>
}
 8000e26:	bf00      	nop
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	4603      	mov	r3, r0
 8000e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ff33 	bl	8000ca8 <__NVIC_EnableIRQ>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ffa4 	bl	8000da0 <SysTick_Config>
 8000e58:	4603      	mov	r3, r0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b087      	sub	sp, #28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e72:	e15a      	b.n	800112a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	2101      	movs	r1, #1
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e80:	4013      	ands	r3, r2
 8000e82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f000 814c 	beq.w	8001124 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 0303 	and.w	r3, r3, #3
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d005      	beq.n	8000ea4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d130      	bne.n	8000f06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	2203      	movs	r2, #3
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	68da      	ldr	r2, [r3, #12]
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eda:	2201      	movs	r2, #1
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	091b      	lsrs	r3, r3, #4
 8000ef0:	f003 0201 	and.w	r2, r3, #1
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	d017      	beq.n	8000f42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	689a      	ldr	r2, [r3, #8]
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f003 0303 	and.w	r3, r3, #3
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d123      	bne.n	8000f96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	08da      	lsrs	r2, r3, #3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3208      	adds	r2, #8
 8000f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	220f      	movs	r2, #15
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	691a      	ldr	r2, [r3, #16]
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f003 0307 	and.w	r3, r3, #7
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	08da      	lsrs	r2, r3, #3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3208      	adds	r2, #8
 8000f90:	6939      	ldr	r1, [r7, #16]
 8000f92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f003 0203 	and.w	r2, r3, #3
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f000 80a6 	beq.w	8001124 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd8:	4b5b      	ldr	r3, [pc, #364]	; (8001148 <HAL_GPIO_Init+0x2e4>)
 8000fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fdc:	4a5a      	ldr	r2, [pc, #360]	; (8001148 <HAL_GPIO_Init+0x2e4>)
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	6613      	str	r3, [r2, #96]	; 0x60
 8000fe4:	4b58      	ldr	r3, [pc, #352]	; (8001148 <HAL_GPIO_Init+0x2e4>)
 8000fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ff0:	4a56      	ldr	r2, [pc, #344]	; (800114c <HAL_GPIO_Init+0x2e8>)
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	089b      	lsrs	r3, r3, #2
 8000ff6:	3302      	adds	r3, #2
 8000ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	220f      	movs	r2, #15
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800101a:	d01f      	beq.n	800105c <HAL_GPIO_Init+0x1f8>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a4c      	ldr	r2, [pc, #304]	; (8001150 <HAL_GPIO_Init+0x2ec>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d019      	beq.n	8001058 <HAL_GPIO_Init+0x1f4>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a4b      	ldr	r2, [pc, #300]	; (8001154 <HAL_GPIO_Init+0x2f0>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d013      	beq.n	8001054 <HAL_GPIO_Init+0x1f0>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a4a      	ldr	r2, [pc, #296]	; (8001158 <HAL_GPIO_Init+0x2f4>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d00d      	beq.n	8001050 <HAL_GPIO_Init+0x1ec>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a49      	ldr	r2, [pc, #292]	; (800115c <HAL_GPIO_Init+0x2f8>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d007      	beq.n	800104c <HAL_GPIO_Init+0x1e8>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a48      	ldr	r2, [pc, #288]	; (8001160 <HAL_GPIO_Init+0x2fc>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d101      	bne.n	8001048 <HAL_GPIO_Init+0x1e4>
 8001044:	2305      	movs	r3, #5
 8001046:	e00a      	b.n	800105e <HAL_GPIO_Init+0x1fa>
 8001048:	2306      	movs	r3, #6
 800104a:	e008      	b.n	800105e <HAL_GPIO_Init+0x1fa>
 800104c:	2304      	movs	r3, #4
 800104e:	e006      	b.n	800105e <HAL_GPIO_Init+0x1fa>
 8001050:	2303      	movs	r3, #3
 8001052:	e004      	b.n	800105e <HAL_GPIO_Init+0x1fa>
 8001054:	2302      	movs	r3, #2
 8001056:	e002      	b.n	800105e <HAL_GPIO_Init+0x1fa>
 8001058:	2301      	movs	r3, #1
 800105a:	e000      	b.n	800105e <HAL_GPIO_Init+0x1fa>
 800105c:	2300      	movs	r3, #0
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	f002 0203 	and.w	r2, r2, #3
 8001064:	0092      	lsls	r2, r2, #2
 8001066:	4093      	lsls	r3, r2
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800106e:	4937      	ldr	r1, [pc, #220]	; (800114c <HAL_GPIO_Init+0x2e8>)
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	3302      	adds	r3, #2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800107c:	4b39      	ldr	r3, [pc, #228]	; (8001164 <HAL_GPIO_Init+0x300>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	43db      	mvns	r3, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010a0:	4a30      	ldr	r2, [pc, #192]	; (8001164 <HAL_GPIO_Init+0x300>)
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010a6:	4b2f      	ldr	r3, [pc, #188]	; (8001164 <HAL_GPIO_Init+0x300>)
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010ca:	4a26      	ldr	r2, [pc, #152]	; (8001164 <HAL_GPIO_Init+0x300>)
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80010d0:	4b24      	ldr	r3, [pc, #144]	; (8001164 <HAL_GPIO_Init+0x300>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	43db      	mvns	r3, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010f4:	4a1b      	ldr	r2, [pc, #108]	; (8001164 <HAL_GPIO_Init+0x300>)
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010fa:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <HAL_GPIO_Init+0x300>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	43db      	mvns	r3, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4313      	orrs	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800111e:	4a11      	ldr	r2, [pc, #68]	; (8001164 <HAL_GPIO_Init+0x300>)
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	3301      	adds	r3, #1
 8001128:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	fa22 f303 	lsr.w	r3, r2, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	f47f ae9d 	bne.w	8000e74 <HAL_GPIO_Init+0x10>
  }
}
 800113a:	bf00      	nop
 800113c:	bf00      	nop
 800113e:	371c      	adds	r7, #28
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	40021000 	.word	0x40021000
 800114c:	40010000 	.word	0x40010000
 8001150:	48000400 	.word	0x48000400
 8001154:	48000800 	.word	0x48000800
 8001158:	48000c00 	.word	0x48000c00
 800115c:	48001000 	.word	0x48001000
 8001160:	48001400 	.word	0x48001400
 8001164:	40010400 	.word	0x40010400

08001168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	807b      	strh	r3, [r7, #2]
 8001174:	4613      	mov	r3, r2
 8001176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001178:	787b      	ldrb	r3, [r7, #1]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001184:	e002      	b.n	800118c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001186:	887a      	ldrh	r2, [r7, #2]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011a4:	695a      	ldr	r2, [r3, #20]
 80011a6:	88fb      	ldrh	r3, [r7, #6]
 80011a8:	4013      	ands	r3, r2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d006      	beq.n	80011bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011ae:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011b4:	88fb      	ldrh	r3, [r7, #6]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 f806 	bl	80011c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40010400 	.word	0x40010400

080011c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
	...

080011e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d141      	bne.n	8001272 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80011ee:	4b4b      	ldr	r3, [pc, #300]	; (800131c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011fa:	d131      	bne.n	8001260 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011fc:	4b47      	ldr	r3, [pc, #284]	; (800131c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001202:	4a46      	ldr	r2, [pc, #280]	; (800131c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001208:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800120c:	4b43      	ldr	r3, [pc, #268]	; (800131c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001214:	4a41      	ldr	r2, [pc, #260]	; (800131c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800121a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800121c:	4b40      	ldr	r3, [pc, #256]	; (8001320 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2232      	movs	r2, #50	; 0x32
 8001222:	fb02 f303 	mul.w	r3, r2, r3
 8001226:	4a3f      	ldr	r2, [pc, #252]	; (8001324 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001228:	fba2 2303 	umull	r2, r3, r2, r3
 800122c:	0c9b      	lsrs	r3, r3, #18
 800122e:	3301      	adds	r3, #1
 8001230:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001232:	e002      	b.n	800123a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	3b01      	subs	r3, #1
 8001238:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800123a:	4b38      	ldr	r3, [pc, #224]	; (800131c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001246:	d102      	bne.n	800124e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f2      	bne.n	8001234 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800124e:	4b33      	ldr	r3, [pc, #204]	; (800131c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800125a:	d158      	bne.n	800130e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e057      	b.n	8001310 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001260:	4b2e      	ldr	r3, [pc, #184]	; (800131c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001262:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001266:	4a2d      	ldr	r2, [pc, #180]	; (800131c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001268:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800126c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001270:	e04d      	b.n	800130e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001278:	d141      	bne.n	80012fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800127a:	4b28      	ldr	r3, [pc, #160]	; (800131c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001286:	d131      	bne.n	80012ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001288:	4b24      	ldr	r3, [pc, #144]	; (800131c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800128a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800128e:	4a23      	ldr	r2, [pc, #140]	; (800131c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001294:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001298:	4b20      	ldr	r3, [pc, #128]	; (800131c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012a0:	4a1e      	ldr	r2, [pc, #120]	; (800131c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012a8:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2232      	movs	r2, #50	; 0x32
 80012ae:	fb02 f303 	mul.w	r3, r2, r3
 80012b2:	4a1c      	ldr	r2, [pc, #112]	; (8001324 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80012b4:	fba2 2303 	umull	r2, r3, r2, r3
 80012b8:	0c9b      	lsrs	r3, r3, #18
 80012ba:	3301      	adds	r3, #1
 80012bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012be:	e002      	b.n	80012c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012d2:	d102      	bne.n	80012da <HAL_PWREx_ControlVoltageScaling+0xfa>
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f2      	bne.n	80012c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012da:	4b10      	ldr	r3, [pc, #64]	; (800131c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012e6:	d112      	bne.n	800130e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e011      	b.n	8001310 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012ec:	4b0b      	ldr	r3, [pc, #44]	; (800131c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012f2:	4a0a      	ldr	r2, [pc, #40]	; (800131c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80012fc:	e007      	b.n	800130e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012fe:	4b07      	ldr	r3, [pc, #28]	; (800131c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001306:	4a05      	ldr	r2, [pc, #20]	; (800131c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001308:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800130c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	40007000 	.word	0x40007000
 8001320:	20000000 	.word	0x20000000
 8001324:	431bde83 	.word	0x431bde83

08001328 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	4a04      	ldr	r2, [pc, #16]	; (8001344 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001332:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001336:	6093      	str	r3, [r2, #8]
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40007000 	.word	0x40007000

08001348 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e2fe      	b.n	8001958 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	2b00      	cmp	r3, #0
 8001364:	d075      	beq.n	8001452 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001366:	4b97      	ldr	r3, [pc, #604]	; (80015c4 <HAL_RCC_OscConfig+0x27c>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
 800136e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001370:	4b94      	ldr	r3, [pc, #592]	; (80015c4 <HAL_RCC_OscConfig+0x27c>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	2b0c      	cmp	r3, #12
 800137e:	d102      	bne.n	8001386 <HAL_RCC_OscConfig+0x3e>
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	2b03      	cmp	r3, #3
 8001384:	d002      	beq.n	800138c <HAL_RCC_OscConfig+0x44>
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	2b08      	cmp	r3, #8
 800138a:	d10b      	bne.n	80013a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800138c:	4b8d      	ldr	r3, [pc, #564]	; (80015c4 <HAL_RCC_OscConfig+0x27c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d05b      	beq.n	8001450 <HAL_RCC_OscConfig+0x108>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d157      	bne.n	8001450 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e2d9      	b.n	8001958 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ac:	d106      	bne.n	80013bc <HAL_RCC_OscConfig+0x74>
 80013ae:	4b85      	ldr	r3, [pc, #532]	; (80015c4 <HAL_RCC_OscConfig+0x27c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a84      	ldr	r2, [pc, #528]	; (80015c4 <HAL_RCC_OscConfig+0x27c>)
 80013b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	e01d      	b.n	80013f8 <HAL_RCC_OscConfig+0xb0>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013c4:	d10c      	bne.n	80013e0 <HAL_RCC_OscConfig+0x98>
 80013c6:	4b7f      	ldr	r3, [pc, #508]	; (80015c4 <HAL_RCC_OscConfig+0x27c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a7e      	ldr	r2, [pc, #504]	; (80015c4 <HAL_RCC_OscConfig+0x27c>)
 80013cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	4b7c      	ldr	r3, [pc, #496]	; (80015c4 <HAL_RCC_OscConfig+0x27c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a7b      	ldr	r2, [pc, #492]	; (80015c4 <HAL_RCC_OscConfig+0x27c>)
 80013d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	e00b      	b.n	80013f8 <HAL_RCC_OscConfig+0xb0>
 80013e0:	4b78      	ldr	r3, [pc, #480]	; (80015c4 <HAL_RCC_OscConfig+0x27c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a77      	ldr	r2, [pc, #476]	; (80015c4 <HAL_RCC_OscConfig+0x27c>)
 80013e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	4b75      	ldr	r3, [pc, #468]	; (80015c4 <HAL_RCC_OscConfig+0x27c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a74      	ldr	r2, [pc, #464]	; (80015c4 <HAL_RCC_OscConfig+0x27c>)
 80013f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d013      	beq.n	8001428 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001400:	f7ff fc14 	bl	8000c2c <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001408:	f7ff fc10 	bl	8000c2c <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b64      	cmp	r3, #100	; 0x64
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e29e      	b.n	8001958 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800141a:	4b6a      	ldr	r3, [pc, #424]	; (80015c4 <HAL_RCC_OscConfig+0x27c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f0      	beq.n	8001408 <HAL_RCC_OscConfig+0xc0>
 8001426:	e014      	b.n	8001452 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001428:	f7ff fc00 	bl	8000c2c <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001430:	f7ff fbfc 	bl	8000c2c <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b64      	cmp	r3, #100	; 0x64
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e28a      	b.n	8001958 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001442:	4b60      	ldr	r3, [pc, #384]	; (80015c4 <HAL_RCC_OscConfig+0x27c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f0      	bne.n	8001430 <HAL_RCC_OscConfig+0xe8>
 800144e:	e000      	b.n	8001452 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d075      	beq.n	800154a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800145e:	4b59      	ldr	r3, [pc, #356]	; (80015c4 <HAL_RCC_OscConfig+0x27c>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001468:	4b56      	ldr	r3, [pc, #344]	; (80015c4 <HAL_RCC_OscConfig+0x27c>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	f003 0303 	and.w	r3, r3, #3
 8001470:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	2b0c      	cmp	r3, #12
 8001476:	d102      	bne.n	800147e <HAL_RCC_OscConfig+0x136>
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d002      	beq.n	8001484 <HAL_RCC_OscConfig+0x13c>
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	2b04      	cmp	r3, #4
 8001482:	d11f      	bne.n	80014c4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001484:	4b4f      	ldr	r3, [pc, #316]	; (80015c4 <HAL_RCC_OscConfig+0x27c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800148c:	2b00      	cmp	r3, #0
 800148e:	d005      	beq.n	800149c <HAL_RCC_OscConfig+0x154>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e25d      	b.n	8001958 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149c:	4b49      	ldr	r3, [pc, #292]	; (80015c4 <HAL_RCC_OscConfig+0x27c>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	061b      	lsls	r3, r3, #24
 80014aa:	4946      	ldr	r1, [pc, #280]	; (80015c4 <HAL_RCC_OscConfig+0x27c>)
 80014ac:	4313      	orrs	r3, r2
 80014ae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80014b0:	4b45      	ldr	r3, [pc, #276]	; (80015c8 <HAL_RCC_OscConfig+0x280>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fb6d 	bl	8000b94 <HAL_InitTick>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d043      	beq.n	8001548 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e249      	b.n	8001958 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d023      	beq.n	8001514 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014cc:	4b3d      	ldr	r3, [pc, #244]	; (80015c4 <HAL_RCC_OscConfig+0x27c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a3c      	ldr	r2, [pc, #240]	; (80015c4 <HAL_RCC_OscConfig+0x27c>)
 80014d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d8:	f7ff fba8 	bl	8000c2c <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e0:	f7ff fba4 	bl	8000c2c <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e232      	b.n	8001958 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014f2:	4b34      	ldr	r3, [pc, #208]	; (80015c4 <HAL_RCC_OscConfig+0x27c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f0      	beq.n	80014e0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fe:	4b31      	ldr	r3, [pc, #196]	; (80015c4 <HAL_RCC_OscConfig+0x27c>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	061b      	lsls	r3, r3, #24
 800150c:	492d      	ldr	r1, [pc, #180]	; (80015c4 <HAL_RCC_OscConfig+0x27c>)
 800150e:	4313      	orrs	r3, r2
 8001510:	604b      	str	r3, [r1, #4]
 8001512:	e01a      	b.n	800154a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001514:	4b2b      	ldr	r3, [pc, #172]	; (80015c4 <HAL_RCC_OscConfig+0x27c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a2a      	ldr	r2, [pc, #168]	; (80015c4 <HAL_RCC_OscConfig+0x27c>)
 800151a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800151e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001520:	f7ff fb84 	bl	8000c2c <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001528:	f7ff fb80 	bl	8000c2c <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e20e      	b.n	8001958 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800153a:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <HAL_RCC_OscConfig+0x27c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f0      	bne.n	8001528 <HAL_RCC_OscConfig+0x1e0>
 8001546:	e000      	b.n	800154a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001548:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	2b00      	cmp	r3, #0
 8001554:	d041      	beq.n	80015da <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d01c      	beq.n	8001598 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800155e:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <HAL_RCC_OscConfig+0x27c>)
 8001560:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001564:	4a17      	ldr	r2, [pc, #92]	; (80015c4 <HAL_RCC_OscConfig+0x27c>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156e:	f7ff fb5d 	bl	8000c2c <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001576:	f7ff fb59 	bl	8000c2c <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e1e7      	b.n	8001958 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001588:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <HAL_RCC_OscConfig+0x27c>)
 800158a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0ef      	beq.n	8001576 <HAL_RCC_OscConfig+0x22e>
 8001596:	e020      	b.n	80015da <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001598:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <HAL_RCC_OscConfig+0x27c>)
 800159a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800159e:	4a09      	ldr	r2, [pc, #36]	; (80015c4 <HAL_RCC_OscConfig+0x27c>)
 80015a0:	f023 0301 	bic.w	r3, r3, #1
 80015a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a8:	f7ff fb40 	bl	8000c2c <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015ae:	e00d      	b.n	80015cc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b0:	f7ff fb3c 	bl	8000c2c <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d906      	bls.n	80015cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e1ca      	b.n	8001958 <HAL_RCC_OscConfig+0x610>
 80015c2:	bf00      	nop
 80015c4:	40021000 	.word	0x40021000
 80015c8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015cc:	4b8c      	ldr	r3, [pc, #560]	; (8001800 <HAL_RCC_OscConfig+0x4b8>)
 80015ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1ea      	bne.n	80015b0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 80a6 	beq.w	8001734 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e8:	2300      	movs	r3, #0
 80015ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80015ec:	4b84      	ldr	r3, [pc, #528]	; (8001800 <HAL_RCC_OscConfig+0x4b8>)
 80015ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d101      	bne.n	80015fc <HAL_RCC_OscConfig+0x2b4>
 80015f8:	2301      	movs	r3, #1
 80015fa:	e000      	b.n	80015fe <HAL_RCC_OscConfig+0x2b6>
 80015fc:	2300      	movs	r3, #0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00d      	beq.n	800161e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	4b7f      	ldr	r3, [pc, #508]	; (8001800 <HAL_RCC_OscConfig+0x4b8>)
 8001604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001606:	4a7e      	ldr	r2, [pc, #504]	; (8001800 <HAL_RCC_OscConfig+0x4b8>)
 8001608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160c:	6593      	str	r3, [r2, #88]	; 0x58
 800160e:	4b7c      	ldr	r3, [pc, #496]	; (8001800 <HAL_RCC_OscConfig+0x4b8>)
 8001610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800161a:	2301      	movs	r3, #1
 800161c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800161e:	4b79      	ldr	r3, [pc, #484]	; (8001804 <HAL_RCC_OscConfig+0x4bc>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001626:	2b00      	cmp	r3, #0
 8001628:	d118      	bne.n	800165c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800162a:	4b76      	ldr	r3, [pc, #472]	; (8001804 <HAL_RCC_OscConfig+0x4bc>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a75      	ldr	r2, [pc, #468]	; (8001804 <HAL_RCC_OscConfig+0x4bc>)
 8001630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001636:	f7ff faf9 	bl	8000c2c <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800163e:	f7ff faf5 	bl	8000c2c <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e183      	b.n	8001958 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001650:	4b6c      	ldr	r3, [pc, #432]	; (8001804 <HAL_RCC_OscConfig+0x4bc>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d108      	bne.n	8001676 <HAL_RCC_OscConfig+0x32e>
 8001664:	4b66      	ldr	r3, [pc, #408]	; (8001800 <HAL_RCC_OscConfig+0x4b8>)
 8001666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800166a:	4a65      	ldr	r2, [pc, #404]	; (8001800 <HAL_RCC_OscConfig+0x4b8>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001674:	e024      	b.n	80016c0 <HAL_RCC_OscConfig+0x378>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2b05      	cmp	r3, #5
 800167c:	d110      	bne.n	80016a0 <HAL_RCC_OscConfig+0x358>
 800167e:	4b60      	ldr	r3, [pc, #384]	; (8001800 <HAL_RCC_OscConfig+0x4b8>)
 8001680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001684:	4a5e      	ldr	r2, [pc, #376]	; (8001800 <HAL_RCC_OscConfig+0x4b8>)
 8001686:	f043 0304 	orr.w	r3, r3, #4
 800168a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800168e:	4b5c      	ldr	r3, [pc, #368]	; (8001800 <HAL_RCC_OscConfig+0x4b8>)
 8001690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001694:	4a5a      	ldr	r2, [pc, #360]	; (8001800 <HAL_RCC_OscConfig+0x4b8>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800169e:	e00f      	b.n	80016c0 <HAL_RCC_OscConfig+0x378>
 80016a0:	4b57      	ldr	r3, [pc, #348]	; (8001800 <HAL_RCC_OscConfig+0x4b8>)
 80016a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a6:	4a56      	ldr	r2, [pc, #344]	; (8001800 <HAL_RCC_OscConfig+0x4b8>)
 80016a8:	f023 0301 	bic.w	r3, r3, #1
 80016ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016b0:	4b53      	ldr	r3, [pc, #332]	; (8001800 <HAL_RCC_OscConfig+0x4b8>)
 80016b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b6:	4a52      	ldr	r2, [pc, #328]	; (8001800 <HAL_RCC_OscConfig+0x4b8>)
 80016b8:	f023 0304 	bic.w	r3, r3, #4
 80016bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d016      	beq.n	80016f6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c8:	f7ff fab0 	bl	8000c2c <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ce:	e00a      	b.n	80016e6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d0:	f7ff faac 	bl	8000c2c <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	f241 3288 	movw	r2, #5000	; 0x1388
 80016de:	4293      	cmp	r3, r2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e138      	b.n	8001958 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016e6:	4b46      	ldr	r3, [pc, #280]	; (8001800 <HAL_RCC_OscConfig+0x4b8>)
 80016e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0ed      	beq.n	80016d0 <HAL_RCC_OscConfig+0x388>
 80016f4:	e015      	b.n	8001722 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f6:	f7ff fa99 	bl	8000c2c <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016fc:	e00a      	b.n	8001714 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016fe:	f7ff fa95 	bl	8000c2c <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	f241 3288 	movw	r2, #5000	; 0x1388
 800170c:	4293      	cmp	r3, r2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e121      	b.n	8001958 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001714:	4b3a      	ldr	r3, [pc, #232]	; (8001800 <HAL_RCC_OscConfig+0x4b8>)
 8001716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1ed      	bne.n	80016fe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001722:	7ffb      	ldrb	r3, [r7, #31]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d105      	bne.n	8001734 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001728:	4b35      	ldr	r3, [pc, #212]	; (8001800 <HAL_RCC_OscConfig+0x4b8>)
 800172a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172c:	4a34      	ldr	r2, [pc, #208]	; (8001800 <HAL_RCC_OscConfig+0x4b8>)
 800172e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001732:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0320 	and.w	r3, r3, #32
 800173c:	2b00      	cmp	r3, #0
 800173e:	d03c      	beq.n	80017ba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d01c      	beq.n	8001782 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001748:	4b2d      	ldr	r3, [pc, #180]	; (8001800 <HAL_RCC_OscConfig+0x4b8>)
 800174a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800174e:	4a2c      	ldr	r2, [pc, #176]	; (8001800 <HAL_RCC_OscConfig+0x4b8>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001758:	f7ff fa68 	bl	8000c2c <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001760:	f7ff fa64 	bl	8000c2c <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e0f2      	b.n	8001958 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001772:	4b23      	ldr	r3, [pc, #140]	; (8001800 <HAL_RCC_OscConfig+0x4b8>)
 8001774:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0ef      	beq.n	8001760 <HAL_RCC_OscConfig+0x418>
 8001780:	e01b      	b.n	80017ba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001782:	4b1f      	ldr	r3, [pc, #124]	; (8001800 <HAL_RCC_OscConfig+0x4b8>)
 8001784:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001788:	4a1d      	ldr	r2, [pc, #116]	; (8001800 <HAL_RCC_OscConfig+0x4b8>)
 800178a:	f023 0301 	bic.w	r3, r3, #1
 800178e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001792:	f7ff fa4b 	bl	8000c2c <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800179a:	f7ff fa47 	bl	8000c2c <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e0d5      	b.n	8001958 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017ac:	4b14      	ldr	r3, [pc, #80]	; (8001800 <HAL_RCC_OscConfig+0x4b8>)
 80017ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1ef      	bne.n	800179a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 80c9 	beq.w	8001956 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017c4:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <HAL_RCC_OscConfig+0x4b8>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 030c 	and.w	r3, r3, #12
 80017cc:	2b0c      	cmp	r3, #12
 80017ce:	f000 8083 	beq.w	80018d8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d15e      	bne.n	8001898 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HAL_RCC_OscConfig+0x4b8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a08      	ldr	r2, [pc, #32]	; (8001800 <HAL_RCC_OscConfig+0x4b8>)
 80017e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e6:	f7ff fa21 	bl	8000c2c <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ec:	e00c      	b.n	8001808 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ee:	f7ff fa1d 	bl	8000c2c <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d905      	bls.n	8001808 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e0ab      	b.n	8001958 <HAL_RCC_OscConfig+0x610>
 8001800:	40021000 	.word	0x40021000
 8001804:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001808:	4b55      	ldr	r3, [pc, #340]	; (8001960 <HAL_RCC_OscConfig+0x618>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1ec      	bne.n	80017ee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001814:	4b52      	ldr	r3, [pc, #328]	; (8001960 <HAL_RCC_OscConfig+0x618>)
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	4b52      	ldr	r3, [pc, #328]	; (8001964 <HAL_RCC_OscConfig+0x61c>)
 800181a:	4013      	ands	r3, r2
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6a11      	ldr	r1, [r2, #32]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001824:	3a01      	subs	r2, #1
 8001826:	0112      	lsls	r2, r2, #4
 8001828:	4311      	orrs	r1, r2
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800182e:	0212      	lsls	r2, r2, #8
 8001830:	4311      	orrs	r1, r2
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001836:	0852      	lsrs	r2, r2, #1
 8001838:	3a01      	subs	r2, #1
 800183a:	0552      	lsls	r2, r2, #21
 800183c:	4311      	orrs	r1, r2
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001842:	0852      	lsrs	r2, r2, #1
 8001844:	3a01      	subs	r2, #1
 8001846:	0652      	lsls	r2, r2, #25
 8001848:	4311      	orrs	r1, r2
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800184e:	06d2      	lsls	r2, r2, #27
 8001850:	430a      	orrs	r2, r1
 8001852:	4943      	ldr	r1, [pc, #268]	; (8001960 <HAL_RCC_OscConfig+0x618>)
 8001854:	4313      	orrs	r3, r2
 8001856:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001858:	4b41      	ldr	r3, [pc, #260]	; (8001960 <HAL_RCC_OscConfig+0x618>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a40      	ldr	r2, [pc, #256]	; (8001960 <HAL_RCC_OscConfig+0x618>)
 800185e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001862:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001864:	4b3e      	ldr	r3, [pc, #248]	; (8001960 <HAL_RCC_OscConfig+0x618>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	4a3d      	ldr	r2, [pc, #244]	; (8001960 <HAL_RCC_OscConfig+0x618>)
 800186a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800186e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001870:	f7ff f9dc 	bl	8000c2c <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001878:	f7ff f9d8 	bl	8000c2c <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e066      	b.n	8001958 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800188a:	4b35      	ldr	r3, [pc, #212]	; (8001960 <HAL_RCC_OscConfig+0x618>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0f0      	beq.n	8001878 <HAL_RCC_OscConfig+0x530>
 8001896:	e05e      	b.n	8001956 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001898:	4b31      	ldr	r3, [pc, #196]	; (8001960 <HAL_RCC_OscConfig+0x618>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a30      	ldr	r2, [pc, #192]	; (8001960 <HAL_RCC_OscConfig+0x618>)
 800189e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a4:	f7ff f9c2 	bl	8000c2c <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ac:	f7ff f9be 	bl	8000c2c <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e04c      	b.n	8001958 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018be:	4b28      	ldr	r3, [pc, #160]	; (8001960 <HAL_RCC_OscConfig+0x618>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f0      	bne.n	80018ac <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80018ca:	4b25      	ldr	r3, [pc, #148]	; (8001960 <HAL_RCC_OscConfig+0x618>)
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	4924      	ldr	r1, [pc, #144]	; (8001960 <HAL_RCC_OscConfig+0x618>)
 80018d0:	4b25      	ldr	r3, [pc, #148]	; (8001968 <HAL_RCC_OscConfig+0x620>)
 80018d2:	4013      	ands	r3, r2
 80018d4:	60cb      	str	r3, [r1, #12]
 80018d6:	e03e      	b.n	8001956 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69db      	ldr	r3, [r3, #28]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d101      	bne.n	80018e4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e039      	b.n	8001958 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80018e4:	4b1e      	ldr	r3, [pc, #120]	; (8001960 <HAL_RCC_OscConfig+0x618>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f003 0203 	and.w	r2, r3, #3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d12c      	bne.n	8001952 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001902:	3b01      	subs	r3, #1
 8001904:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001906:	429a      	cmp	r2, r3
 8001908:	d123      	bne.n	8001952 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001914:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001916:	429a      	cmp	r2, r3
 8001918:	d11b      	bne.n	8001952 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001924:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001926:	429a      	cmp	r2, r3
 8001928:	d113      	bne.n	8001952 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001934:	085b      	lsrs	r3, r3, #1
 8001936:	3b01      	subs	r3, #1
 8001938:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800193a:	429a      	cmp	r2, r3
 800193c:	d109      	bne.n	8001952 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001948:	085b      	lsrs	r3, r3, #1
 800194a:	3b01      	subs	r3, #1
 800194c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800194e:	429a      	cmp	r2, r3
 8001950:	d001      	beq.n	8001956 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e000      	b.n	8001958 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3720      	adds	r7, #32
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40021000 	.word	0x40021000
 8001964:	019f800c 	.word	0x019f800c
 8001968:	feeefffc 	.word	0xfeeefffc

0800196c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e11e      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001984:	4b91      	ldr	r3, [pc, #580]	; (8001bcc <HAL_RCC_ClockConfig+0x260>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 030f 	and.w	r3, r3, #15
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	d910      	bls.n	80019b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001992:	4b8e      	ldr	r3, [pc, #568]	; (8001bcc <HAL_RCC_ClockConfig+0x260>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 020f 	bic.w	r2, r3, #15
 800199a:	498c      	ldr	r1, [pc, #560]	; (8001bcc <HAL_RCC_ClockConfig+0x260>)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	4313      	orrs	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a2:	4b8a      	ldr	r3, [pc, #552]	; (8001bcc <HAL_RCC_ClockConfig+0x260>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d001      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e106      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d073      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b03      	cmp	r3, #3
 80019c6:	d129      	bne.n	8001a1c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c8:	4b81      	ldr	r3, [pc, #516]	; (8001bd0 <HAL_RCC_ClockConfig+0x264>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e0f4      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80019d8:	f000 f99e 	bl	8001d18 <RCC_GetSysClockFreqFromPLLSource>
 80019dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	4a7c      	ldr	r2, [pc, #496]	; (8001bd4 <HAL_RCC_ClockConfig+0x268>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d93f      	bls.n	8001a66 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80019e6:	4b7a      	ldr	r3, [pc, #488]	; (8001bd0 <HAL_RCC_ClockConfig+0x264>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d009      	beq.n	8001a06 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d033      	beq.n	8001a66 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d12f      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a06:	4b72      	ldr	r3, [pc, #456]	; (8001bd0 <HAL_RCC_ClockConfig+0x264>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a0e:	4a70      	ldr	r2, [pc, #448]	; (8001bd0 <HAL_RCC_ClockConfig+0x264>)
 8001a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a14:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	e024      	b.n	8001a66 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d107      	bne.n	8001a34 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a24:	4b6a      	ldr	r3, [pc, #424]	; (8001bd0 <HAL_RCC_ClockConfig+0x264>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d109      	bne.n	8001a44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e0c6      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a34:	4b66      	ldr	r3, [pc, #408]	; (8001bd0 <HAL_RCC_ClockConfig+0x264>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0be      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001a44:	f000 f8ce 	bl	8001be4 <HAL_RCC_GetSysClockFreq>
 8001a48:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	4a61      	ldr	r2, [pc, #388]	; (8001bd4 <HAL_RCC_ClockConfig+0x268>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d909      	bls.n	8001a66 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a52:	4b5f      	ldr	r3, [pc, #380]	; (8001bd0 <HAL_RCC_ClockConfig+0x264>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a5a:	4a5d      	ldr	r2, [pc, #372]	; (8001bd0 <HAL_RCC_ClockConfig+0x264>)
 8001a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a60:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001a62:	2380      	movs	r3, #128	; 0x80
 8001a64:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a66:	4b5a      	ldr	r3, [pc, #360]	; (8001bd0 <HAL_RCC_ClockConfig+0x264>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f023 0203 	bic.w	r2, r3, #3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	4957      	ldr	r1, [pc, #348]	; (8001bd0 <HAL_RCC_ClockConfig+0x264>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a78:	f7ff f8d8 	bl	8000c2c <HAL_GetTick>
 8001a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7e:	e00a      	b.n	8001a96 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a80:	f7ff f8d4 	bl	8000c2c <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e095      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a96:	4b4e      	ldr	r3, [pc, #312]	; (8001bd0 <HAL_RCC_ClockConfig+0x264>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 020c 	and.w	r2, r3, #12
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d1eb      	bne.n	8001a80 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d023      	beq.n	8001afc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ac0:	4b43      	ldr	r3, [pc, #268]	; (8001bd0 <HAL_RCC_ClockConfig+0x264>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	4a42      	ldr	r2, [pc, #264]	; (8001bd0 <HAL_RCC_ClockConfig+0x264>)
 8001ac6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001aca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0308 	and.w	r3, r3, #8
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d007      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001ad8:	4b3d      	ldr	r3, [pc, #244]	; (8001bd0 <HAL_RCC_ClockConfig+0x264>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001ae0:	4a3b      	ldr	r2, [pc, #236]	; (8001bd0 <HAL_RCC_ClockConfig+0x264>)
 8001ae2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ae6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae8:	4b39      	ldr	r3, [pc, #228]	; (8001bd0 <HAL_RCC_ClockConfig+0x264>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	4936      	ldr	r1, [pc, #216]	; (8001bd0 <HAL_RCC_ClockConfig+0x264>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	608b      	str	r3, [r1, #8]
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	2b80      	cmp	r3, #128	; 0x80
 8001b00:	d105      	bne.n	8001b0e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001b02:	4b33      	ldr	r3, [pc, #204]	; (8001bd0 <HAL_RCC_ClockConfig+0x264>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	4a32      	ldr	r2, [pc, #200]	; (8001bd0 <HAL_RCC_ClockConfig+0x264>)
 8001b08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b0c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b0e:	4b2f      	ldr	r3, [pc, #188]	; (8001bcc <HAL_RCC_ClockConfig+0x260>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d21d      	bcs.n	8001b58 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1c:	4b2b      	ldr	r3, [pc, #172]	; (8001bcc <HAL_RCC_ClockConfig+0x260>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f023 020f 	bic.w	r2, r3, #15
 8001b24:	4929      	ldr	r1, [pc, #164]	; (8001bcc <HAL_RCC_ClockConfig+0x260>)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b2c:	f7ff f87e 	bl	8000c2c <HAL_GetTick>
 8001b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b32:	e00a      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b34:	f7ff f87a 	bl	8000c2c <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e03b      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4a:	4b20      	ldr	r3, [pc, #128]	; (8001bcc <HAL_RCC_ClockConfig+0x260>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d1ed      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d008      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b64:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <HAL_RCC_ClockConfig+0x264>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	4917      	ldr	r1, [pc, #92]	; (8001bd0 <HAL_RCC_ClockConfig+0x264>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d009      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b82:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <HAL_RCC_ClockConfig+0x264>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	490f      	ldr	r1, [pc, #60]	; (8001bd0 <HAL_RCC_ClockConfig+0x264>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b96:	f000 f825 	bl	8001be4 <HAL_RCC_GetSysClockFreq>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <HAL_RCC_ClockConfig+0x264>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	490c      	ldr	r1, [pc, #48]	; (8001bd8 <HAL_RCC_ClockConfig+0x26c>)
 8001ba8:	5ccb      	ldrb	r3, [r1, r3]
 8001baa:	f003 031f 	and.w	r3, r3, #31
 8001bae:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	; (8001bdc <HAL_RCC_ClockConfig+0x270>)
 8001bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <HAL_RCC_ClockConfig+0x274>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe ffea 	bl	8000b94 <HAL_InitTick>
 8001bc0:	4603      	mov	r3, r0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40022000 	.word	0x40022000
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	04c4b400 	.word	0x04c4b400
 8001bd8:	08003b80 	.word	0x08003b80
 8001bdc:	20000000 	.word	0x20000000
 8001be0:	20000004 	.word	0x20000004

08001be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b087      	sub	sp, #28
 8001be8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001bea:	4b2c      	ldr	r3, [pc, #176]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 030c 	and.w	r3, r3, #12
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d102      	bne.n	8001bfc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bf6:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bf8:	613b      	str	r3, [r7, #16]
 8001bfa:	e047      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001bfc:	4b27      	ldr	r3, [pc, #156]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 030c 	and.w	r3, r3, #12
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	d102      	bne.n	8001c0e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c08:	4b26      	ldr	r3, [pc, #152]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	e03e      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001c0e:	4b23      	ldr	r3, [pc, #140]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 030c 	and.w	r3, r3, #12
 8001c16:	2b0c      	cmp	r3, #12
 8001c18:	d136      	bne.n	8001c88 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c1a:	4b20      	ldr	r3, [pc, #128]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c24:	4b1d      	ldr	r3, [pc, #116]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	091b      	lsrs	r3, r3, #4
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	3301      	adds	r3, #1
 8001c30:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2b03      	cmp	r3, #3
 8001c36:	d10c      	bne.n	8001c52 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c38:	4a1a      	ldr	r2, [pc, #104]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c40:	4a16      	ldr	r2, [pc, #88]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c42:	68d2      	ldr	r2, [r2, #12]
 8001c44:	0a12      	lsrs	r2, r2, #8
 8001c46:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c4a:	fb02 f303 	mul.w	r3, r2, r3
 8001c4e:	617b      	str	r3, [r7, #20]
      break;
 8001c50:	e00c      	b.n	8001c6c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c52:	4a13      	ldr	r2, [pc, #76]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5a:	4a10      	ldr	r2, [pc, #64]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c5c:	68d2      	ldr	r2, [r2, #12]
 8001c5e:	0a12      	lsrs	r2, r2, #8
 8001c60:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c64:	fb02 f303 	mul.w	r3, r2, r3
 8001c68:	617b      	str	r3, [r7, #20]
      break;
 8001c6a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	0e5b      	lsrs	r3, r3, #25
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	3301      	adds	r3, #1
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	e001      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c8c:	693b      	ldr	r3, [r7, #16]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	371c      	adds	r7, #28
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	00f42400 	.word	0x00f42400
 8001ca4:	016e3600 	.word	0x016e3600

08001ca8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cac:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <HAL_RCC_GetHCLKFreq+0x14>)
 8001cae:	681b      	ldr	r3, [r3, #0]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	20000000 	.word	0x20000000

08001cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001cc4:	f7ff fff0 	bl	8001ca8 <HAL_RCC_GetHCLKFreq>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	0a1b      	lsrs	r3, r3, #8
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	4904      	ldr	r1, [pc, #16]	; (8001ce8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cd6:	5ccb      	ldrb	r3, [r1, r3]
 8001cd8:	f003 031f 	and.w	r3, r3, #31
 8001cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	08003b90 	.word	0x08003b90

08001cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001cf0:	f7ff ffda 	bl	8001ca8 <HAL_RCC_GetHCLKFreq>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	0adb      	lsrs	r3, r3, #11
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	4904      	ldr	r1, [pc, #16]	; (8001d14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d02:	5ccb      	ldrb	r3, [r1, r3]
 8001d04:	f003 031f 	and.w	r3, r3, #31
 8001d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40021000 	.word	0x40021000
 8001d14:	08003b90 	.word	0x08003b90

08001d18 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b087      	sub	sp, #28
 8001d1c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d1e:	4b1e      	ldr	r3, [pc, #120]	; (8001d98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d28:	4b1b      	ldr	r3, [pc, #108]	; (8001d98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	091b      	lsrs	r3, r3, #4
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	3301      	adds	r3, #1
 8001d34:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	2b03      	cmp	r3, #3
 8001d3a:	d10c      	bne.n	8001d56 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d3c:	4a17      	ldr	r2, [pc, #92]	; (8001d9c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d44:	4a14      	ldr	r2, [pc, #80]	; (8001d98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d46:	68d2      	ldr	r2, [r2, #12]
 8001d48:	0a12      	lsrs	r2, r2, #8
 8001d4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d4e:	fb02 f303 	mul.w	r3, r2, r3
 8001d52:	617b      	str	r3, [r7, #20]
    break;
 8001d54:	e00c      	b.n	8001d70 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d56:	4a12      	ldr	r2, [pc, #72]	; (8001da0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5e:	4a0e      	ldr	r2, [pc, #56]	; (8001d98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d60:	68d2      	ldr	r2, [r2, #12]
 8001d62:	0a12      	lsrs	r2, r2, #8
 8001d64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d68:	fb02 f303 	mul.w	r3, r2, r3
 8001d6c:	617b      	str	r3, [r7, #20]
    break;
 8001d6e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d70:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	0e5b      	lsrs	r3, r3, #25
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d88:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001d8a:	687b      	ldr	r3, [r7, #4]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	371c      	adds	r7, #28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	016e3600 	.word	0x016e3600
 8001da0:	00f42400 	.word	0x00f42400

08001da4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001dac:	2300      	movs	r3, #0
 8001dae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001db0:	2300      	movs	r3, #0
 8001db2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 8098 	beq.w	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dc6:	4b43      	ldr	r3, [pc, #268]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10d      	bne.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd2:	4b40      	ldr	r3, [pc, #256]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd6:	4a3f      	ldr	r2, [pc, #252]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	6593      	str	r3, [r2, #88]	; 0x58
 8001dde:	4b3d      	ldr	r3, [pc, #244]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dea:	2301      	movs	r3, #1
 8001dec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dee:	4b3a      	ldr	r3, [pc, #232]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a39      	ldr	r2, [pc, #228]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001dfa:	f7fe ff17 	bl	8000c2c <HAL_GetTick>
 8001dfe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e00:	e009      	b.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e02:	f7fe ff13 	bl	8000c2c <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d902      	bls.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	74fb      	strb	r3, [r7, #19]
        break;
 8001e14:	e005      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e16:	4b30      	ldr	r3, [pc, #192]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0ef      	beq.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001e22:	7cfb      	ldrb	r3, [r7, #19]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d159      	bne.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e28:	4b2a      	ldr	r3, [pc, #168]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e32:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d01e      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d019      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e44:	4b23      	ldr	r3, [pc, #140]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e50:	4b20      	ldr	r3, [pc, #128]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e56:	4a1f      	ldr	r2, [pc, #124]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e60:	4b1c      	ldr	r3, [pc, #112]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e66:	4a1b      	ldr	r2, [pc, #108]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e70:	4a18      	ldr	r2, [pc, #96]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d016      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e82:	f7fe fed3 	bl	8000c2c <HAL_GetTick>
 8001e86:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e88:	e00b      	b.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8a:	f7fe fecf 	bl	8000c2c <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d902      	bls.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	74fb      	strb	r3, [r7, #19]
            break;
 8001ea0:	e006      	b.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ea2:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0ec      	beq.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001eb0:	7cfb      	ldrb	r3, [r7, #19]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10b      	bne.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001eb6:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ebc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ec4:	4903      	ldr	r1, [pc, #12]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ece:	7cfb      	ldrb	r3, [r7, #19]
 8001ed0:	74bb      	strb	r3, [r7, #18]
 8001ed2:	e005      	b.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001edc:	7cfb      	ldrb	r3, [r7, #19]
 8001ede:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ee0:	7c7b      	ldrb	r3, [r7, #17]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d105      	bne.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee6:	4ba7      	ldr	r3, [pc, #668]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eea:	4aa6      	ldr	r2, [pc, #664]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ef0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00a      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001efe:	4ba1      	ldr	r3, [pc, #644]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f04:	f023 0203 	bic.w	r2, r3, #3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	499d      	ldr	r1, [pc, #628]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00a      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f20:	4b98      	ldr	r3, [pc, #608]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f26:	f023 020c 	bic.w	r2, r3, #12
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	4995      	ldr	r1, [pc, #596]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0304 	and.w	r3, r3, #4
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00a      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f42:	4b90      	ldr	r3, [pc, #576]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	498c      	ldr	r1, [pc, #560]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00a      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f64:	4b87      	ldr	r3, [pc, #540]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	4984      	ldr	r1, [pc, #528]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00a      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f86:	4b7f      	ldr	r3, [pc, #508]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	497b      	ldr	r1, [pc, #492]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0320 	and.w	r3, r3, #32
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00a      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fa8:	4b76      	ldr	r3, [pc, #472]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	4973      	ldr	r1, [pc, #460]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00a      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fca:	4b6e      	ldr	r3, [pc, #440]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	496a      	ldr	r1, [pc, #424]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00a      	beq.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fec:	4b65      	ldr	r3, [pc, #404]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	4962      	ldr	r1, [pc, #392]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00a      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800200e:	4b5d      	ldr	r3, [pc, #372]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002014:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	4959      	ldr	r1, [pc, #356]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800201e:	4313      	orrs	r3, r2
 8002020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00a      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002030:	4b54      	ldr	r3, [pc, #336]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002032:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002036:	f023 0203 	bic.w	r2, r3, #3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203e:	4951      	ldr	r1, [pc, #324]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00a      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002052:	4b4c      	ldr	r3, [pc, #304]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002058:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	4948      	ldr	r1, [pc, #288]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002062:	4313      	orrs	r3, r2
 8002064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002070:	2b00      	cmp	r3, #0
 8002072:	d015      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002074:	4b43      	ldr	r3, [pc, #268]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	4940      	ldr	r1, [pc, #256]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002084:	4313      	orrs	r3, r2
 8002086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002092:	d105      	bne.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002094:	4b3b      	ldr	r3, [pc, #236]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	4a3a      	ldr	r2, [pc, #232]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800209a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800209e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d015      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80020ac:	4b35      	ldr	r3, [pc, #212]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ba:	4932      	ldr	r1, [pc, #200]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ca:	d105      	bne.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020cc:	4b2d      	ldr	r3, [pc, #180]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	4a2c      	ldr	r2, [pc, #176]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020d6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d015      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80020e4:	4b27      	ldr	r3, [pc, #156]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f2:	4924      	ldr	r1, [pc, #144]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002102:	d105      	bne.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002104:	4b1f      	ldr	r3, [pc, #124]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	4a1e      	ldr	r2, [pc, #120]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800210a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800210e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d015      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800211c:	4b19      	ldr	r3, [pc, #100]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800211e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002122:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212a:	4916      	ldr	r1, [pc, #88]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800212c:	4313      	orrs	r3, r2
 800212e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002136:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800213a:	d105      	bne.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800213c:	4b11      	ldr	r3, [pc, #68]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	4a10      	ldr	r2, [pc, #64]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002142:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002146:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d019      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002154:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	4908      	ldr	r1, [pc, #32]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002164:	4313      	orrs	r3, r2
 8002166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002172:	d109      	bne.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002174:	4b03      	ldr	r3, [pc, #12]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	4a02      	ldr	r2, [pc, #8]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800217a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800217e:	60d3      	str	r3, [r2, #12]
 8002180:	e002      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002182:	bf00      	nop
 8002184:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d015      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002194:	4b29      	ldr	r3, [pc, #164]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	4926      	ldr	r1, [pc, #152]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021b2:	d105      	bne.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80021b4:	4b21      	ldr	r3, [pc, #132]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	4a20      	ldr	r2, [pc, #128]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021be:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d015      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80021cc:	4b1b      	ldr	r3, [pc, #108]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021da:	4918      	ldr	r1, [pc, #96]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ea:	d105      	bne.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80021ec:	4b13      	ldr	r3, [pc, #76]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	4a12      	ldr	r2, [pc, #72]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d015      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002204:	4b0d      	ldr	r3, [pc, #52]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002206:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800220a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002212:	490a      	ldr	r1, [pc, #40]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002214:	4313      	orrs	r3, r2
 8002216:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002222:	d105      	bne.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002224:	4b05      	ldr	r3, [pc, #20]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	4a04      	ldr	r2, [pc, #16]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800222a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800222e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002230:	7cbb      	ldrb	r3, [r7, #18]
}
 8002232:	4618      	mov	r0, r3
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40021000 	.word	0x40021000

08002240 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e049      	b.n	80022e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d106      	bne.n	800226c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7fe fbcc 	bl	8000a04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2202      	movs	r2, #2
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3304      	adds	r3, #4
 800227c:	4619      	mov	r1, r3
 800227e:	4610      	mov	r0, r2
 8002280:	f000 fbac 	bl	80029dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b01      	cmp	r3, #1
 8002302:	d001      	beq.n	8002308 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e04c      	b.n	80023a2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2202      	movs	r2, #2
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a26      	ldr	r2, [pc, #152]	; (80023b0 <HAL_TIM_Base_Start+0xc0>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d022      	beq.n	8002360 <HAL_TIM_Base_Start+0x70>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002322:	d01d      	beq.n	8002360 <HAL_TIM_Base_Start+0x70>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a22      	ldr	r2, [pc, #136]	; (80023b4 <HAL_TIM_Base_Start+0xc4>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d018      	beq.n	8002360 <HAL_TIM_Base_Start+0x70>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a21      	ldr	r2, [pc, #132]	; (80023b8 <HAL_TIM_Base_Start+0xc8>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d013      	beq.n	8002360 <HAL_TIM_Base_Start+0x70>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a1f      	ldr	r2, [pc, #124]	; (80023bc <HAL_TIM_Base_Start+0xcc>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d00e      	beq.n	8002360 <HAL_TIM_Base_Start+0x70>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a1e      	ldr	r2, [pc, #120]	; (80023c0 <HAL_TIM_Base_Start+0xd0>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d009      	beq.n	8002360 <HAL_TIM_Base_Start+0x70>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a1c      	ldr	r2, [pc, #112]	; (80023c4 <HAL_TIM_Base_Start+0xd4>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d004      	beq.n	8002360 <HAL_TIM_Base_Start+0x70>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a1b      	ldr	r2, [pc, #108]	; (80023c8 <HAL_TIM_Base_Start+0xd8>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d115      	bne.n	800238c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	4b19      	ldr	r3, [pc, #100]	; (80023cc <HAL_TIM_Base_Start+0xdc>)
 8002368:	4013      	ands	r3, r2
 800236a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2b06      	cmp	r3, #6
 8002370:	d015      	beq.n	800239e <HAL_TIM_Base_Start+0xae>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002378:	d011      	beq.n	800239e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f042 0201 	orr.w	r2, r2, #1
 8002388:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800238a:	e008      	b.n	800239e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 0201 	orr.w	r2, r2, #1
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	e000      	b.n	80023a0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800239e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40012c00 	.word	0x40012c00
 80023b4:	40000400 	.word	0x40000400
 80023b8:	40000800 	.word	0x40000800
 80023bc:	40000c00 	.word	0x40000c00
 80023c0:	40013400 	.word	0x40013400
 80023c4:	40014000 	.word	0x40014000
 80023c8:	40015000 	.word	0x40015000
 80023cc:	00010007 	.word	0x00010007

080023d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d001      	beq.n	80023e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e054      	b.n	8002492 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2202      	movs	r2, #2
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0201 	orr.w	r2, r2, #1
 80023fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a26      	ldr	r2, [pc, #152]	; (80024a0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d022      	beq.n	8002450 <HAL_TIM_Base_Start_IT+0x80>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002412:	d01d      	beq.n	8002450 <HAL_TIM_Base_Start_IT+0x80>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a22      	ldr	r2, [pc, #136]	; (80024a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d018      	beq.n	8002450 <HAL_TIM_Base_Start_IT+0x80>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a21      	ldr	r2, [pc, #132]	; (80024a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d013      	beq.n	8002450 <HAL_TIM_Base_Start_IT+0x80>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a1f      	ldr	r2, [pc, #124]	; (80024ac <HAL_TIM_Base_Start_IT+0xdc>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d00e      	beq.n	8002450 <HAL_TIM_Base_Start_IT+0x80>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a1e      	ldr	r2, [pc, #120]	; (80024b0 <HAL_TIM_Base_Start_IT+0xe0>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d009      	beq.n	8002450 <HAL_TIM_Base_Start_IT+0x80>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a1c      	ldr	r2, [pc, #112]	; (80024b4 <HAL_TIM_Base_Start_IT+0xe4>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d004      	beq.n	8002450 <HAL_TIM_Base_Start_IT+0x80>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a1b      	ldr	r2, [pc, #108]	; (80024b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d115      	bne.n	800247c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	4b19      	ldr	r3, [pc, #100]	; (80024bc <HAL_TIM_Base_Start_IT+0xec>)
 8002458:	4013      	ands	r3, r2
 800245a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2b06      	cmp	r3, #6
 8002460:	d015      	beq.n	800248e <HAL_TIM_Base_Start_IT+0xbe>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002468:	d011      	beq.n	800248e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f042 0201 	orr.w	r2, r2, #1
 8002478:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800247a:	e008      	b.n	800248e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	e000      	b.n	8002490 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800248e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40012c00 	.word	0x40012c00
 80024a4:	40000400 	.word	0x40000400
 80024a8:	40000800 	.word	0x40000800
 80024ac:	40000c00 	.word	0x40000c00
 80024b0:	40013400 	.word	0x40013400
 80024b4:	40014000 	.word	0x40014000
 80024b8:	40015000 	.word	0x40015000
 80024bc:	00010007 	.word	0x00010007

080024c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d020      	beq.n	8002524 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d01b      	beq.n	8002524 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f06f 0202 	mvn.w	r2, #2
 80024f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 fa48 	bl	80029a0 <HAL_TIM_IC_CaptureCallback>
 8002510:	e005      	b.n	800251e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 fa3a 	bl	800298c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 fa4b 	bl	80029b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	2b00      	cmp	r3, #0
 800252c:	d020      	beq.n	8002570 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d01b      	beq.n	8002570 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f06f 0204 	mvn.w	r2, #4
 8002540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2202      	movs	r2, #2
 8002546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 fa22 	bl	80029a0 <HAL_TIM_IC_CaptureCallback>
 800255c:	e005      	b.n	800256a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 fa14 	bl	800298c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 fa25 	bl	80029b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b00      	cmp	r3, #0
 8002578:	d020      	beq.n	80025bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	2b00      	cmp	r3, #0
 8002582:	d01b      	beq.n	80025bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f06f 0208 	mvn.w	r2, #8
 800258c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2204      	movs	r2, #4
 8002592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f9fc 	bl	80029a0 <HAL_TIM_IC_CaptureCallback>
 80025a8:	e005      	b.n	80025b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f9ee 	bl	800298c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f9ff 	bl	80029b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	f003 0310 	and.w	r3, r3, #16
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d020      	beq.n	8002608 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f003 0310 	and.w	r3, r3, #16
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d01b      	beq.n	8002608 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f06f 0210 	mvn.w	r2, #16
 80025d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2208      	movs	r2, #8
 80025de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f9d6 	bl	80029a0 <HAL_TIM_IC_CaptureCallback>
 80025f4:	e005      	b.n	8002602 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f9c8 	bl	800298c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f9d9 	bl	80029b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00c      	beq.n	800262c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b00      	cmp	r3, #0
 800261a:	d007      	beq.n	800262c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f06f 0201 	mvn.w	r2, #1
 8002624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7fe f934 	bl	8000894 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002632:	2b00      	cmp	r3, #0
 8002634:	d104      	bne.n	8002640 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00c      	beq.n	800265a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002646:	2b00      	cmp	r3, #0
 8002648:	d007      	beq.n	800265a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8002652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 fbb1 	bl	8002dbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00c      	beq.n	800267e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266a:	2b00      	cmp	r3, #0
 800266c:	d007      	beq.n	800267e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 fba9 	bl	8002dd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00c      	beq.n	80026a2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800268e:	2b00      	cmp	r3, #0
 8002690:	d007      	beq.n	80026a2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800269a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 f993 	bl	80029c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	f003 0320 	and.w	r3, r3, #32
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00c      	beq.n	80026c6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f003 0320 	and.w	r3, r3, #32
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d007      	beq.n	80026c6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f06f 0220 	mvn.w	r2, #32
 80026be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 fb71 	bl	8002da8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00c      	beq.n	80026ea <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d007      	beq.n	80026ea <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80026e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 fb7d 	bl	8002de4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00c      	beq.n	800270e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d007      	beq.n	800270e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8002706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 fb75 	bl	8002df8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00c      	beq.n	8002732 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d007      	beq.n	8002732 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800272a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 fb6d 	bl	8002e0c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00c      	beq.n	8002756 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d007      	beq.n	8002756 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800274e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 fb65 	bl	8002e20 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002756:	bf00      	nop
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
	...

08002760 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002774:	2b01      	cmp	r3, #1
 8002776:	d101      	bne.n	800277c <HAL_TIM_ConfigClockSource+0x1c>
 8002778:	2302      	movs	r3, #2
 800277a:	e0f6      	b.n	800296a <HAL_TIM_ConfigClockSource+0x20a>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2202      	movs	r2, #2
 8002788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800279a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800279e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a6f      	ldr	r2, [pc, #444]	; (8002974 <HAL_TIM_ConfigClockSource+0x214>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	f000 80c1 	beq.w	800293e <HAL_TIM_ConfigClockSource+0x1de>
 80027bc:	4a6d      	ldr	r2, [pc, #436]	; (8002974 <HAL_TIM_ConfigClockSource+0x214>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	f200 80c6 	bhi.w	8002950 <HAL_TIM_ConfigClockSource+0x1f0>
 80027c4:	4a6c      	ldr	r2, [pc, #432]	; (8002978 <HAL_TIM_ConfigClockSource+0x218>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	f000 80b9 	beq.w	800293e <HAL_TIM_ConfigClockSource+0x1de>
 80027cc:	4a6a      	ldr	r2, [pc, #424]	; (8002978 <HAL_TIM_ConfigClockSource+0x218>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	f200 80be 	bhi.w	8002950 <HAL_TIM_ConfigClockSource+0x1f0>
 80027d4:	4a69      	ldr	r2, [pc, #420]	; (800297c <HAL_TIM_ConfigClockSource+0x21c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	f000 80b1 	beq.w	800293e <HAL_TIM_ConfigClockSource+0x1de>
 80027dc:	4a67      	ldr	r2, [pc, #412]	; (800297c <HAL_TIM_ConfigClockSource+0x21c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	f200 80b6 	bhi.w	8002950 <HAL_TIM_ConfigClockSource+0x1f0>
 80027e4:	4a66      	ldr	r2, [pc, #408]	; (8002980 <HAL_TIM_ConfigClockSource+0x220>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	f000 80a9 	beq.w	800293e <HAL_TIM_ConfigClockSource+0x1de>
 80027ec:	4a64      	ldr	r2, [pc, #400]	; (8002980 <HAL_TIM_ConfigClockSource+0x220>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	f200 80ae 	bhi.w	8002950 <HAL_TIM_ConfigClockSource+0x1f0>
 80027f4:	4a63      	ldr	r2, [pc, #396]	; (8002984 <HAL_TIM_ConfigClockSource+0x224>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	f000 80a1 	beq.w	800293e <HAL_TIM_ConfigClockSource+0x1de>
 80027fc:	4a61      	ldr	r2, [pc, #388]	; (8002984 <HAL_TIM_ConfigClockSource+0x224>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	f200 80a6 	bhi.w	8002950 <HAL_TIM_ConfigClockSource+0x1f0>
 8002804:	4a60      	ldr	r2, [pc, #384]	; (8002988 <HAL_TIM_ConfigClockSource+0x228>)
 8002806:	4293      	cmp	r3, r2
 8002808:	f000 8099 	beq.w	800293e <HAL_TIM_ConfigClockSource+0x1de>
 800280c:	4a5e      	ldr	r2, [pc, #376]	; (8002988 <HAL_TIM_ConfigClockSource+0x228>)
 800280e:	4293      	cmp	r3, r2
 8002810:	f200 809e 	bhi.w	8002950 <HAL_TIM_ConfigClockSource+0x1f0>
 8002814:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002818:	f000 8091 	beq.w	800293e <HAL_TIM_ConfigClockSource+0x1de>
 800281c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002820:	f200 8096 	bhi.w	8002950 <HAL_TIM_ConfigClockSource+0x1f0>
 8002824:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002828:	f000 8089 	beq.w	800293e <HAL_TIM_ConfigClockSource+0x1de>
 800282c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002830:	f200 808e 	bhi.w	8002950 <HAL_TIM_ConfigClockSource+0x1f0>
 8002834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002838:	d03e      	beq.n	80028b8 <HAL_TIM_ConfigClockSource+0x158>
 800283a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800283e:	f200 8087 	bhi.w	8002950 <HAL_TIM_ConfigClockSource+0x1f0>
 8002842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002846:	f000 8086 	beq.w	8002956 <HAL_TIM_ConfigClockSource+0x1f6>
 800284a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800284e:	d87f      	bhi.n	8002950 <HAL_TIM_ConfigClockSource+0x1f0>
 8002850:	2b70      	cmp	r3, #112	; 0x70
 8002852:	d01a      	beq.n	800288a <HAL_TIM_ConfigClockSource+0x12a>
 8002854:	2b70      	cmp	r3, #112	; 0x70
 8002856:	d87b      	bhi.n	8002950 <HAL_TIM_ConfigClockSource+0x1f0>
 8002858:	2b60      	cmp	r3, #96	; 0x60
 800285a:	d050      	beq.n	80028fe <HAL_TIM_ConfigClockSource+0x19e>
 800285c:	2b60      	cmp	r3, #96	; 0x60
 800285e:	d877      	bhi.n	8002950 <HAL_TIM_ConfigClockSource+0x1f0>
 8002860:	2b50      	cmp	r3, #80	; 0x50
 8002862:	d03c      	beq.n	80028de <HAL_TIM_ConfigClockSource+0x17e>
 8002864:	2b50      	cmp	r3, #80	; 0x50
 8002866:	d873      	bhi.n	8002950 <HAL_TIM_ConfigClockSource+0x1f0>
 8002868:	2b40      	cmp	r3, #64	; 0x40
 800286a:	d058      	beq.n	800291e <HAL_TIM_ConfigClockSource+0x1be>
 800286c:	2b40      	cmp	r3, #64	; 0x40
 800286e:	d86f      	bhi.n	8002950 <HAL_TIM_ConfigClockSource+0x1f0>
 8002870:	2b30      	cmp	r3, #48	; 0x30
 8002872:	d064      	beq.n	800293e <HAL_TIM_ConfigClockSource+0x1de>
 8002874:	2b30      	cmp	r3, #48	; 0x30
 8002876:	d86b      	bhi.n	8002950 <HAL_TIM_ConfigClockSource+0x1f0>
 8002878:	2b20      	cmp	r3, #32
 800287a:	d060      	beq.n	800293e <HAL_TIM_ConfigClockSource+0x1de>
 800287c:	2b20      	cmp	r3, #32
 800287e:	d867      	bhi.n	8002950 <HAL_TIM_ConfigClockSource+0x1f0>
 8002880:	2b00      	cmp	r3, #0
 8002882:	d05c      	beq.n	800293e <HAL_TIM_ConfigClockSource+0x1de>
 8002884:	2b10      	cmp	r3, #16
 8002886:	d05a      	beq.n	800293e <HAL_TIM_ConfigClockSource+0x1de>
 8002888:	e062      	b.n	8002950 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800289a:	f000 f9cf 	bl	8002c3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	609a      	str	r2, [r3, #8]
      break;
 80028b6:	e04f      	b.n	8002958 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028c8:	f000 f9b8 	bl	8002c3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028da:	609a      	str	r2, [r3, #8]
      break;
 80028dc:	e03c      	b.n	8002958 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ea:	461a      	mov	r2, r3
 80028ec:	f000 f92a 	bl	8002b44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2150      	movs	r1, #80	; 0x50
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 f983 	bl	8002c02 <TIM_ITRx_SetConfig>
      break;
 80028fc:	e02c      	b.n	8002958 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800290a:	461a      	mov	r2, r3
 800290c:	f000 f949 	bl	8002ba2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2160      	movs	r1, #96	; 0x60
 8002916:	4618      	mov	r0, r3
 8002918:	f000 f973 	bl	8002c02 <TIM_ITRx_SetConfig>
      break;
 800291c:	e01c      	b.n	8002958 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800292a:	461a      	mov	r2, r3
 800292c:	f000 f90a 	bl	8002b44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2140      	movs	r1, #64	; 0x40
 8002936:	4618      	mov	r0, r3
 8002938:	f000 f963 	bl	8002c02 <TIM_ITRx_SetConfig>
      break;
 800293c:	e00c      	b.n	8002958 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4619      	mov	r1, r3
 8002948:	4610      	mov	r0, r2
 800294a:	f000 f95a 	bl	8002c02 <TIM_ITRx_SetConfig>
      break;
 800294e:	e003      	b.n	8002958 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	73fb      	strb	r3, [r7, #15]
      break;
 8002954:	e000      	b.n	8002958 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8002956:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002968:	7bfb      	ldrb	r3, [r7, #15]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	00100070 	.word	0x00100070
 8002978:	00100060 	.word	0x00100060
 800297c:	00100050 	.word	0x00100050
 8002980:	00100040 	.word	0x00100040
 8002984:	00100030 	.word	0x00100030
 8002988:	00100020 	.word	0x00100020

0800298c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a4c      	ldr	r2, [pc, #304]	; (8002b20 <TIM_Base_SetConfig+0x144>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d017      	beq.n	8002a24 <TIM_Base_SetConfig+0x48>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029fa:	d013      	beq.n	8002a24 <TIM_Base_SetConfig+0x48>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a49      	ldr	r2, [pc, #292]	; (8002b24 <TIM_Base_SetConfig+0x148>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d00f      	beq.n	8002a24 <TIM_Base_SetConfig+0x48>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a48      	ldr	r2, [pc, #288]	; (8002b28 <TIM_Base_SetConfig+0x14c>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d00b      	beq.n	8002a24 <TIM_Base_SetConfig+0x48>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a47      	ldr	r2, [pc, #284]	; (8002b2c <TIM_Base_SetConfig+0x150>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d007      	beq.n	8002a24 <TIM_Base_SetConfig+0x48>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a46      	ldr	r2, [pc, #280]	; (8002b30 <TIM_Base_SetConfig+0x154>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d003      	beq.n	8002a24 <TIM_Base_SetConfig+0x48>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a45      	ldr	r2, [pc, #276]	; (8002b34 <TIM_Base_SetConfig+0x158>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d108      	bne.n	8002a36 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a39      	ldr	r2, [pc, #228]	; (8002b20 <TIM_Base_SetConfig+0x144>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d023      	beq.n	8002a86 <TIM_Base_SetConfig+0xaa>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a44:	d01f      	beq.n	8002a86 <TIM_Base_SetConfig+0xaa>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a36      	ldr	r2, [pc, #216]	; (8002b24 <TIM_Base_SetConfig+0x148>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d01b      	beq.n	8002a86 <TIM_Base_SetConfig+0xaa>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a35      	ldr	r2, [pc, #212]	; (8002b28 <TIM_Base_SetConfig+0x14c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d017      	beq.n	8002a86 <TIM_Base_SetConfig+0xaa>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a34      	ldr	r2, [pc, #208]	; (8002b2c <TIM_Base_SetConfig+0x150>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d013      	beq.n	8002a86 <TIM_Base_SetConfig+0xaa>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a33      	ldr	r2, [pc, #204]	; (8002b30 <TIM_Base_SetConfig+0x154>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d00f      	beq.n	8002a86 <TIM_Base_SetConfig+0xaa>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a33      	ldr	r2, [pc, #204]	; (8002b38 <TIM_Base_SetConfig+0x15c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d00b      	beq.n	8002a86 <TIM_Base_SetConfig+0xaa>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a32      	ldr	r2, [pc, #200]	; (8002b3c <TIM_Base_SetConfig+0x160>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d007      	beq.n	8002a86 <TIM_Base_SetConfig+0xaa>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a31      	ldr	r2, [pc, #196]	; (8002b40 <TIM_Base_SetConfig+0x164>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d003      	beq.n	8002a86 <TIM_Base_SetConfig+0xaa>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a2c      	ldr	r2, [pc, #176]	; (8002b34 <TIM_Base_SetConfig+0x158>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d108      	bne.n	8002a98 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a18      	ldr	r2, [pc, #96]	; (8002b20 <TIM_Base_SetConfig+0x144>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d013      	beq.n	8002aec <TIM_Base_SetConfig+0x110>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a1a      	ldr	r2, [pc, #104]	; (8002b30 <TIM_Base_SetConfig+0x154>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d00f      	beq.n	8002aec <TIM_Base_SetConfig+0x110>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a1a      	ldr	r2, [pc, #104]	; (8002b38 <TIM_Base_SetConfig+0x15c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d00b      	beq.n	8002aec <TIM_Base_SetConfig+0x110>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a19      	ldr	r2, [pc, #100]	; (8002b3c <TIM_Base_SetConfig+0x160>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d007      	beq.n	8002aec <TIM_Base_SetConfig+0x110>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a18      	ldr	r2, [pc, #96]	; (8002b40 <TIM_Base_SetConfig+0x164>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d003      	beq.n	8002aec <TIM_Base_SetConfig+0x110>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a13      	ldr	r2, [pc, #76]	; (8002b34 <TIM_Base_SetConfig+0x158>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d103      	bne.n	8002af4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	691a      	ldr	r2, [r3, #16]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d105      	bne.n	8002b12 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	f023 0201 	bic.w	r2, r3, #1
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	611a      	str	r2, [r3, #16]
  }
}
 8002b12:	bf00      	nop
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	40012c00 	.word	0x40012c00
 8002b24:	40000400 	.word	0x40000400
 8002b28:	40000800 	.word	0x40000800
 8002b2c:	40000c00 	.word	0x40000c00
 8002b30:	40013400 	.word	0x40013400
 8002b34:	40015000 	.word	0x40015000
 8002b38:	40014000 	.word	0x40014000
 8002b3c:	40014400 	.word	0x40014400
 8002b40:	40014800 	.word	0x40014800

08002b44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b087      	sub	sp, #28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	f023 0201 	bic.w	r2, r3, #1
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f023 030a 	bic.w	r3, r3, #10
 8002b80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	621a      	str	r2, [r3, #32]
}
 8002b96:	bf00      	nop
 8002b98:	371c      	adds	r7, #28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b087      	sub	sp, #28
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	60f8      	str	r0, [r7, #12]
 8002baa:	60b9      	str	r1, [r7, #8]
 8002bac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	f023 0210 	bic.w	r2, r3, #16
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	031b      	lsls	r3, r3, #12
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bde:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	621a      	str	r2, [r3, #32]
}
 8002bf6:	bf00      	nop
 8002bf8:	371c      	adds	r7, #28
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b085      	sub	sp, #20
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f043 0307 	orr.w	r3, r3, #7
 8002c28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	609a      	str	r2, [r3, #8]
}
 8002c30:	bf00      	nop
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b087      	sub	sp, #28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
 8002c48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	021a      	lsls	r2, r3, #8
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	609a      	str	r2, [r3, #8]
}
 8002c70:	bf00      	nop
 8002c72:	371c      	adds	r7, #28
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d101      	bne.n	8002c94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c90:	2302      	movs	r3, #2
 8002c92:	e074      	b.n	8002d7e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a34      	ldr	r2, [pc, #208]	; (8002d8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d009      	beq.n	8002cd2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a33      	ldr	r2, [pc, #204]	; (8002d90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d004      	beq.n	8002cd2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a31      	ldr	r2, [pc, #196]	; (8002d94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d108      	bne.n	8002ce4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002cd8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a21      	ldr	r2, [pc, #132]	; (8002d8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d022      	beq.n	8002d52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d14:	d01d      	beq.n	8002d52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a1f      	ldr	r2, [pc, #124]	; (8002d98 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d018      	beq.n	8002d52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a1d      	ldr	r2, [pc, #116]	; (8002d9c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d013      	beq.n	8002d52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a1c      	ldr	r2, [pc, #112]	; (8002da0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d00e      	beq.n	8002d52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a15      	ldr	r2, [pc, #84]	; (8002d90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d009      	beq.n	8002d52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a18      	ldr	r2, [pc, #96]	; (8002da4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d004      	beq.n	8002d52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a11      	ldr	r2, [pc, #68]	; (8002d94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d10c      	bne.n	8002d6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40012c00 	.word	0x40012c00
 8002d90:	40013400 	.word	0x40013400
 8002d94:	40015000 	.word	0x40015000
 8002d98:	40000400 	.word	0x40000400
 8002d9c:	40000800 	.word	0x40000800
 8002da0:	40000c00 	.word	0x40000c00
 8002da4:	40014000 	.word	0x40014000

08002da8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e042      	b.n	8002ecc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d106      	bne.n	8002e5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7fd fd7b 	bl	8000954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2224      	movs	r2, #36	; 0x24
 8002e62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0201 	bic.w	r2, r2, #1
 8002e74:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 fb24 	bl	80034cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 f825 	bl	8002ed4 <UART_SetConfig>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e01b      	b.n	8002ecc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ea2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002eb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0201 	orr.w	r2, r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 fba3 	bl	8003610 <UART_CheckIdleState>
 8002eca:	4603      	mov	r3, r0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ed8:	b08c      	sub	sp, #48	; 0x30
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	431a      	orrs	r2, r3
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	4baa      	ldr	r3, [pc, #680]	; (80031ac <UART_SetConfig+0x2d8>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a9f      	ldr	r2, [pc, #636]	; (80031b0 <UART_SetConfig+0x2dc>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d004      	beq.n	8002f40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002f4a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f54:	430b      	orrs	r3, r1
 8002f56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5e:	f023 010f 	bic.w	r1, r3, #15
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a90      	ldr	r2, [pc, #576]	; (80031b4 <UART_SetConfig+0x2e0>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d125      	bne.n	8002fc4 <UART_SetConfig+0xf0>
 8002f78:	4b8f      	ldr	r3, [pc, #572]	; (80031b8 <UART_SetConfig+0x2e4>)
 8002f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	2b03      	cmp	r3, #3
 8002f84:	d81a      	bhi.n	8002fbc <UART_SetConfig+0xe8>
 8002f86:	a201      	add	r2, pc, #4	; (adr r2, 8002f8c <UART_SetConfig+0xb8>)
 8002f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8c:	08002f9d 	.word	0x08002f9d
 8002f90:	08002fad 	.word	0x08002fad
 8002f94:	08002fa5 	.word	0x08002fa5
 8002f98:	08002fb5 	.word	0x08002fb5
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fa2:	e116      	b.n	80031d2 <UART_SetConfig+0x2fe>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002faa:	e112      	b.n	80031d2 <UART_SetConfig+0x2fe>
 8002fac:	2304      	movs	r3, #4
 8002fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fb2:	e10e      	b.n	80031d2 <UART_SetConfig+0x2fe>
 8002fb4:	2308      	movs	r3, #8
 8002fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fba:	e10a      	b.n	80031d2 <UART_SetConfig+0x2fe>
 8002fbc:	2310      	movs	r3, #16
 8002fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fc2:	e106      	b.n	80031d2 <UART_SetConfig+0x2fe>
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a7c      	ldr	r2, [pc, #496]	; (80031bc <UART_SetConfig+0x2e8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d138      	bne.n	8003040 <UART_SetConfig+0x16c>
 8002fce:	4b7a      	ldr	r3, [pc, #488]	; (80031b8 <UART_SetConfig+0x2e4>)
 8002fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd4:	f003 030c 	and.w	r3, r3, #12
 8002fd8:	2b0c      	cmp	r3, #12
 8002fda:	d82d      	bhi.n	8003038 <UART_SetConfig+0x164>
 8002fdc:	a201      	add	r2, pc, #4	; (adr r2, 8002fe4 <UART_SetConfig+0x110>)
 8002fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe2:	bf00      	nop
 8002fe4:	08003019 	.word	0x08003019
 8002fe8:	08003039 	.word	0x08003039
 8002fec:	08003039 	.word	0x08003039
 8002ff0:	08003039 	.word	0x08003039
 8002ff4:	08003029 	.word	0x08003029
 8002ff8:	08003039 	.word	0x08003039
 8002ffc:	08003039 	.word	0x08003039
 8003000:	08003039 	.word	0x08003039
 8003004:	08003021 	.word	0x08003021
 8003008:	08003039 	.word	0x08003039
 800300c:	08003039 	.word	0x08003039
 8003010:	08003039 	.word	0x08003039
 8003014:	08003031 	.word	0x08003031
 8003018:	2300      	movs	r3, #0
 800301a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800301e:	e0d8      	b.n	80031d2 <UART_SetConfig+0x2fe>
 8003020:	2302      	movs	r3, #2
 8003022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003026:	e0d4      	b.n	80031d2 <UART_SetConfig+0x2fe>
 8003028:	2304      	movs	r3, #4
 800302a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800302e:	e0d0      	b.n	80031d2 <UART_SetConfig+0x2fe>
 8003030:	2308      	movs	r3, #8
 8003032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003036:	e0cc      	b.n	80031d2 <UART_SetConfig+0x2fe>
 8003038:	2310      	movs	r3, #16
 800303a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800303e:	e0c8      	b.n	80031d2 <UART_SetConfig+0x2fe>
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a5e      	ldr	r2, [pc, #376]	; (80031c0 <UART_SetConfig+0x2ec>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d125      	bne.n	8003096 <UART_SetConfig+0x1c2>
 800304a:	4b5b      	ldr	r3, [pc, #364]	; (80031b8 <UART_SetConfig+0x2e4>)
 800304c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003050:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003054:	2b30      	cmp	r3, #48	; 0x30
 8003056:	d016      	beq.n	8003086 <UART_SetConfig+0x1b2>
 8003058:	2b30      	cmp	r3, #48	; 0x30
 800305a:	d818      	bhi.n	800308e <UART_SetConfig+0x1ba>
 800305c:	2b20      	cmp	r3, #32
 800305e:	d00a      	beq.n	8003076 <UART_SetConfig+0x1a2>
 8003060:	2b20      	cmp	r3, #32
 8003062:	d814      	bhi.n	800308e <UART_SetConfig+0x1ba>
 8003064:	2b00      	cmp	r3, #0
 8003066:	d002      	beq.n	800306e <UART_SetConfig+0x19a>
 8003068:	2b10      	cmp	r3, #16
 800306a:	d008      	beq.n	800307e <UART_SetConfig+0x1aa>
 800306c:	e00f      	b.n	800308e <UART_SetConfig+0x1ba>
 800306e:	2300      	movs	r3, #0
 8003070:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003074:	e0ad      	b.n	80031d2 <UART_SetConfig+0x2fe>
 8003076:	2302      	movs	r3, #2
 8003078:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800307c:	e0a9      	b.n	80031d2 <UART_SetConfig+0x2fe>
 800307e:	2304      	movs	r3, #4
 8003080:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003084:	e0a5      	b.n	80031d2 <UART_SetConfig+0x2fe>
 8003086:	2308      	movs	r3, #8
 8003088:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800308c:	e0a1      	b.n	80031d2 <UART_SetConfig+0x2fe>
 800308e:	2310      	movs	r3, #16
 8003090:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003094:	e09d      	b.n	80031d2 <UART_SetConfig+0x2fe>
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a4a      	ldr	r2, [pc, #296]	; (80031c4 <UART_SetConfig+0x2f0>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d125      	bne.n	80030ec <UART_SetConfig+0x218>
 80030a0:	4b45      	ldr	r3, [pc, #276]	; (80031b8 <UART_SetConfig+0x2e4>)
 80030a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80030aa:	2bc0      	cmp	r3, #192	; 0xc0
 80030ac:	d016      	beq.n	80030dc <UART_SetConfig+0x208>
 80030ae:	2bc0      	cmp	r3, #192	; 0xc0
 80030b0:	d818      	bhi.n	80030e4 <UART_SetConfig+0x210>
 80030b2:	2b80      	cmp	r3, #128	; 0x80
 80030b4:	d00a      	beq.n	80030cc <UART_SetConfig+0x1f8>
 80030b6:	2b80      	cmp	r3, #128	; 0x80
 80030b8:	d814      	bhi.n	80030e4 <UART_SetConfig+0x210>
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d002      	beq.n	80030c4 <UART_SetConfig+0x1f0>
 80030be:	2b40      	cmp	r3, #64	; 0x40
 80030c0:	d008      	beq.n	80030d4 <UART_SetConfig+0x200>
 80030c2:	e00f      	b.n	80030e4 <UART_SetConfig+0x210>
 80030c4:	2300      	movs	r3, #0
 80030c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030ca:	e082      	b.n	80031d2 <UART_SetConfig+0x2fe>
 80030cc:	2302      	movs	r3, #2
 80030ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030d2:	e07e      	b.n	80031d2 <UART_SetConfig+0x2fe>
 80030d4:	2304      	movs	r3, #4
 80030d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030da:	e07a      	b.n	80031d2 <UART_SetConfig+0x2fe>
 80030dc:	2308      	movs	r3, #8
 80030de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030e2:	e076      	b.n	80031d2 <UART_SetConfig+0x2fe>
 80030e4:	2310      	movs	r3, #16
 80030e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030ea:	e072      	b.n	80031d2 <UART_SetConfig+0x2fe>
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a35      	ldr	r2, [pc, #212]	; (80031c8 <UART_SetConfig+0x2f4>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d12a      	bne.n	800314c <UART_SetConfig+0x278>
 80030f6:	4b30      	ldr	r3, [pc, #192]	; (80031b8 <UART_SetConfig+0x2e4>)
 80030f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003100:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003104:	d01a      	beq.n	800313c <UART_SetConfig+0x268>
 8003106:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800310a:	d81b      	bhi.n	8003144 <UART_SetConfig+0x270>
 800310c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003110:	d00c      	beq.n	800312c <UART_SetConfig+0x258>
 8003112:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003116:	d815      	bhi.n	8003144 <UART_SetConfig+0x270>
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <UART_SetConfig+0x250>
 800311c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003120:	d008      	beq.n	8003134 <UART_SetConfig+0x260>
 8003122:	e00f      	b.n	8003144 <UART_SetConfig+0x270>
 8003124:	2300      	movs	r3, #0
 8003126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800312a:	e052      	b.n	80031d2 <UART_SetConfig+0x2fe>
 800312c:	2302      	movs	r3, #2
 800312e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003132:	e04e      	b.n	80031d2 <UART_SetConfig+0x2fe>
 8003134:	2304      	movs	r3, #4
 8003136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800313a:	e04a      	b.n	80031d2 <UART_SetConfig+0x2fe>
 800313c:	2308      	movs	r3, #8
 800313e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003142:	e046      	b.n	80031d2 <UART_SetConfig+0x2fe>
 8003144:	2310      	movs	r3, #16
 8003146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800314a:	e042      	b.n	80031d2 <UART_SetConfig+0x2fe>
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a17      	ldr	r2, [pc, #92]	; (80031b0 <UART_SetConfig+0x2dc>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d13a      	bne.n	80031cc <UART_SetConfig+0x2f8>
 8003156:	4b18      	ldr	r3, [pc, #96]	; (80031b8 <UART_SetConfig+0x2e4>)
 8003158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003160:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003164:	d01a      	beq.n	800319c <UART_SetConfig+0x2c8>
 8003166:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800316a:	d81b      	bhi.n	80031a4 <UART_SetConfig+0x2d0>
 800316c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003170:	d00c      	beq.n	800318c <UART_SetConfig+0x2b8>
 8003172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003176:	d815      	bhi.n	80031a4 <UART_SetConfig+0x2d0>
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <UART_SetConfig+0x2b0>
 800317c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003180:	d008      	beq.n	8003194 <UART_SetConfig+0x2c0>
 8003182:	e00f      	b.n	80031a4 <UART_SetConfig+0x2d0>
 8003184:	2300      	movs	r3, #0
 8003186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800318a:	e022      	b.n	80031d2 <UART_SetConfig+0x2fe>
 800318c:	2302      	movs	r3, #2
 800318e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003192:	e01e      	b.n	80031d2 <UART_SetConfig+0x2fe>
 8003194:	2304      	movs	r3, #4
 8003196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800319a:	e01a      	b.n	80031d2 <UART_SetConfig+0x2fe>
 800319c:	2308      	movs	r3, #8
 800319e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031a2:	e016      	b.n	80031d2 <UART_SetConfig+0x2fe>
 80031a4:	2310      	movs	r3, #16
 80031a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031aa:	e012      	b.n	80031d2 <UART_SetConfig+0x2fe>
 80031ac:	cfff69f3 	.word	0xcfff69f3
 80031b0:	40008000 	.word	0x40008000
 80031b4:	40013800 	.word	0x40013800
 80031b8:	40021000 	.word	0x40021000
 80031bc:	40004400 	.word	0x40004400
 80031c0:	40004800 	.word	0x40004800
 80031c4:	40004c00 	.word	0x40004c00
 80031c8:	40005000 	.word	0x40005000
 80031cc:	2310      	movs	r3, #16
 80031ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4aae      	ldr	r2, [pc, #696]	; (8003490 <UART_SetConfig+0x5bc>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	f040 8097 	bne.w	800330c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80031e2:	2b08      	cmp	r3, #8
 80031e4:	d823      	bhi.n	800322e <UART_SetConfig+0x35a>
 80031e6:	a201      	add	r2, pc, #4	; (adr r2, 80031ec <UART_SetConfig+0x318>)
 80031e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ec:	08003211 	.word	0x08003211
 80031f0:	0800322f 	.word	0x0800322f
 80031f4:	08003219 	.word	0x08003219
 80031f8:	0800322f 	.word	0x0800322f
 80031fc:	0800321f 	.word	0x0800321f
 8003200:	0800322f 	.word	0x0800322f
 8003204:	0800322f 	.word	0x0800322f
 8003208:	0800322f 	.word	0x0800322f
 800320c:	08003227 	.word	0x08003227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003210:	f7fe fd56 	bl	8001cc0 <HAL_RCC_GetPCLK1Freq>
 8003214:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003216:	e010      	b.n	800323a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003218:	4b9e      	ldr	r3, [pc, #632]	; (8003494 <UART_SetConfig+0x5c0>)
 800321a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800321c:	e00d      	b.n	800323a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800321e:	f7fe fce1 	bl	8001be4 <HAL_RCC_GetSysClockFreq>
 8003222:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003224:	e009      	b.n	800323a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800322c:	e005      	b.n	800323a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800322e:	2300      	movs	r3, #0
 8003230:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003238:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 8130 	beq.w	80034a2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	4a94      	ldr	r2, [pc, #592]	; (8003498 <UART_SetConfig+0x5c4>)
 8003248:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800324c:	461a      	mov	r2, r3
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	fbb3 f3f2 	udiv	r3, r3, r2
 8003254:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	4413      	add	r3, r2
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	429a      	cmp	r2, r3
 8003264:	d305      	bcc.n	8003272 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	429a      	cmp	r2, r3
 8003270:	d903      	bls.n	800327a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003278:	e113      	b.n	80034a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	2200      	movs	r2, #0
 800327e:	60bb      	str	r3, [r7, #8]
 8003280:	60fa      	str	r2, [r7, #12]
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	4a84      	ldr	r2, [pc, #528]	; (8003498 <UART_SetConfig+0x5c4>)
 8003288:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800328c:	b29b      	uxth	r3, r3
 800328e:	2200      	movs	r2, #0
 8003290:	603b      	str	r3, [r7, #0]
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003298:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800329c:	f7fc ffbc 	bl	8000218 <__aeabi_uldivmod>
 80032a0:	4602      	mov	r2, r0
 80032a2:	460b      	mov	r3, r1
 80032a4:	4610      	mov	r0, r2
 80032a6:	4619      	mov	r1, r3
 80032a8:	f04f 0200 	mov.w	r2, #0
 80032ac:	f04f 0300 	mov.w	r3, #0
 80032b0:	020b      	lsls	r3, r1, #8
 80032b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80032b6:	0202      	lsls	r2, r0, #8
 80032b8:	6979      	ldr	r1, [r7, #20]
 80032ba:	6849      	ldr	r1, [r1, #4]
 80032bc:	0849      	lsrs	r1, r1, #1
 80032be:	2000      	movs	r0, #0
 80032c0:	460c      	mov	r4, r1
 80032c2:	4605      	mov	r5, r0
 80032c4:	eb12 0804 	adds.w	r8, r2, r4
 80032c8:	eb43 0905 	adc.w	r9, r3, r5
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	469a      	mov	sl, r3
 80032d4:	4693      	mov	fp, r2
 80032d6:	4652      	mov	r2, sl
 80032d8:	465b      	mov	r3, fp
 80032da:	4640      	mov	r0, r8
 80032dc:	4649      	mov	r1, r9
 80032de:	f7fc ff9b 	bl	8000218 <__aeabi_uldivmod>
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	4613      	mov	r3, r2
 80032e8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032f0:	d308      	bcc.n	8003304 <UART_SetConfig+0x430>
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032f8:	d204      	bcs.n	8003304 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6a3a      	ldr	r2, [r7, #32]
 8003300:	60da      	str	r2, [r3, #12]
 8003302:	e0ce      	b.n	80034a2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800330a:	e0ca      	b.n	80034a2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003314:	d166      	bne.n	80033e4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003316:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800331a:	2b08      	cmp	r3, #8
 800331c:	d827      	bhi.n	800336e <UART_SetConfig+0x49a>
 800331e:	a201      	add	r2, pc, #4	; (adr r2, 8003324 <UART_SetConfig+0x450>)
 8003320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003324:	08003349 	.word	0x08003349
 8003328:	08003351 	.word	0x08003351
 800332c:	08003359 	.word	0x08003359
 8003330:	0800336f 	.word	0x0800336f
 8003334:	0800335f 	.word	0x0800335f
 8003338:	0800336f 	.word	0x0800336f
 800333c:	0800336f 	.word	0x0800336f
 8003340:	0800336f 	.word	0x0800336f
 8003344:	08003367 	.word	0x08003367
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003348:	f7fe fcba 	bl	8001cc0 <HAL_RCC_GetPCLK1Freq>
 800334c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800334e:	e014      	b.n	800337a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003350:	f7fe fccc 	bl	8001cec <HAL_RCC_GetPCLK2Freq>
 8003354:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003356:	e010      	b.n	800337a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003358:	4b4e      	ldr	r3, [pc, #312]	; (8003494 <UART_SetConfig+0x5c0>)
 800335a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800335c:	e00d      	b.n	800337a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800335e:	f7fe fc41 	bl	8001be4 <HAL_RCC_GetSysClockFreq>
 8003362:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003364:	e009      	b.n	800337a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800336a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800336c:	e005      	b.n	800337a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800336e:	2300      	movs	r3, #0
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003378:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 8090 	beq.w	80034a2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	4a44      	ldr	r2, [pc, #272]	; (8003498 <UART_SetConfig+0x5c4>)
 8003388:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800338c:	461a      	mov	r2, r3
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	fbb3 f3f2 	udiv	r3, r3, r2
 8003394:	005a      	lsls	r2, r3, #1
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	085b      	lsrs	r3, r3, #1
 800339c:	441a      	add	r2, r3
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	2b0f      	cmp	r3, #15
 80033ac:	d916      	bls.n	80033dc <UART_SetConfig+0x508>
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b4:	d212      	bcs.n	80033dc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033b6:	6a3b      	ldr	r3, [r7, #32]
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	f023 030f 	bic.w	r3, r3, #15
 80033be:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033c0:	6a3b      	ldr	r3, [r7, #32]
 80033c2:	085b      	lsrs	r3, r3, #1
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	8bfb      	ldrh	r3, [r7, #30]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	8bfa      	ldrh	r2, [r7, #30]
 80033d8:	60da      	str	r2, [r3, #12]
 80033da:	e062      	b.n	80034a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80033e2:	e05e      	b.n	80034a2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d828      	bhi.n	800343e <UART_SetConfig+0x56a>
 80033ec:	a201      	add	r2, pc, #4	; (adr r2, 80033f4 <UART_SetConfig+0x520>)
 80033ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f2:	bf00      	nop
 80033f4:	08003419 	.word	0x08003419
 80033f8:	08003421 	.word	0x08003421
 80033fc:	08003429 	.word	0x08003429
 8003400:	0800343f 	.word	0x0800343f
 8003404:	0800342f 	.word	0x0800342f
 8003408:	0800343f 	.word	0x0800343f
 800340c:	0800343f 	.word	0x0800343f
 8003410:	0800343f 	.word	0x0800343f
 8003414:	08003437 	.word	0x08003437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003418:	f7fe fc52 	bl	8001cc0 <HAL_RCC_GetPCLK1Freq>
 800341c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800341e:	e014      	b.n	800344a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003420:	f7fe fc64 	bl	8001cec <HAL_RCC_GetPCLK2Freq>
 8003424:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003426:	e010      	b.n	800344a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003428:	4b1a      	ldr	r3, [pc, #104]	; (8003494 <UART_SetConfig+0x5c0>)
 800342a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800342c:	e00d      	b.n	800344a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800342e:	f7fe fbd9 	bl	8001be4 <HAL_RCC_GetSysClockFreq>
 8003432:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003434:	e009      	b.n	800344a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800343a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800343c:	e005      	b.n	800344a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800343e:	2300      	movs	r3, #0
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003448:	bf00      	nop
    }

    if (pclk != 0U)
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	2b00      	cmp	r3, #0
 800344e:	d028      	beq.n	80034a2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	4a10      	ldr	r2, [pc, #64]	; (8003498 <UART_SetConfig+0x5c4>)
 8003456:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800345a:	461a      	mov	r2, r3
 800345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	085b      	lsrs	r3, r3, #1
 8003468:	441a      	add	r2, r3
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003472:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	2b0f      	cmp	r3, #15
 8003478:	d910      	bls.n	800349c <UART_SetConfig+0x5c8>
 800347a:	6a3b      	ldr	r3, [r7, #32]
 800347c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003480:	d20c      	bcs.n	800349c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	b29a      	uxth	r2, r3
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	60da      	str	r2, [r3, #12]
 800348c:	e009      	b.n	80034a2 <UART_SetConfig+0x5ce>
 800348e:	bf00      	nop
 8003490:	40008000 	.word	0x40008000
 8003494:	00f42400 	.word	0x00f42400
 8003498:	08003b98 	.word	0x08003b98
      }
      else
      {
        ret = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2200      	movs	r2, #0
 80034b6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2200      	movs	r2, #0
 80034bc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80034be:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3730      	adds	r7, #48	; 0x30
 80034c6:	46bd      	mov	sp, r7
 80034c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080034cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	f003 0308 	and.w	r3, r3, #8
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00a      	beq.n	80034f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00a      	beq.n	800353a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353e:	f003 0304 	and.w	r3, r3, #4
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003560:	f003 0310 	and.w	r3, r3, #16
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00a      	beq.n	800357e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003582:	f003 0320 	and.w	r3, r3, #32
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d01a      	beq.n	80035e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035ca:	d10a      	bne.n	80035e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00a      	beq.n	8003604 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	605a      	str	r2, [r3, #4]
  }
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b098      	sub	sp, #96	; 0x60
 8003614:	af02      	add	r7, sp, #8
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003620:	f7fd fb04 	bl	8000c2c <HAL_GetTick>
 8003624:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0308 	and.w	r3, r3, #8
 8003630:	2b08      	cmp	r3, #8
 8003632:	d12f      	bne.n	8003694 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003634:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800363c:	2200      	movs	r2, #0
 800363e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f88e 	bl	8003764 <UART_WaitOnFlagUntilTimeout>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d022      	beq.n	8003694 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003656:	e853 3f00 	ldrex	r3, [r3]
 800365a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800365c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800365e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003662:	653b      	str	r3, [r7, #80]	; 0x50
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	461a      	mov	r2, r3
 800366a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800366c:	647b      	str	r3, [r7, #68]	; 0x44
 800366e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003670:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003672:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003674:	e841 2300 	strex	r3, r2, [r1]
 8003678:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800367a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e6      	bne.n	800364e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2220      	movs	r2, #32
 8003684:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e063      	b.n	800375c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0304 	and.w	r3, r3, #4
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d149      	bne.n	8003736 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036aa:	2200      	movs	r2, #0
 80036ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 f857 	bl	8003764 <UART_WaitOnFlagUntilTimeout>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d03c      	beq.n	8003736 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	e853 3f00 	ldrex	r3, [r3]
 80036c8:	623b      	str	r3, [r7, #32]
   return(result);
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	461a      	mov	r2, r3
 80036d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036da:	633b      	str	r3, [r7, #48]	; 0x30
 80036dc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036e2:	e841 2300 	strex	r3, r2, [r1]
 80036e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80036e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1e6      	bne.n	80036bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	3308      	adds	r3, #8
 80036f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	e853 3f00 	ldrex	r3, [r3]
 80036fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f023 0301 	bic.w	r3, r3, #1
 8003704:	64bb      	str	r3, [r7, #72]	; 0x48
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	3308      	adds	r3, #8
 800370c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800370e:	61fa      	str	r2, [r7, #28]
 8003710:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003712:	69b9      	ldr	r1, [r7, #24]
 8003714:	69fa      	ldr	r2, [r7, #28]
 8003716:	e841 2300 	strex	r3, r2, [r1]
 800371a:	617b      	str	r3, [r7, #20]
   return(result);
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1e5      	bne.n	80036ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2220      	movs	r2, #32
 8003726:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e012      	b.n	800375c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2220      	movs	r2, #32
 800373a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2220      	movs	r2, #32
 8003742:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3758      	adds	r7, #88	; 0x58
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	603b      	str	r3, [r7, #0]
 8003770:	4613      	mov	r3, r2
 8003772:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003774:	e04f      	b.n	8003816 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377c:	d04b      	beq.n	8003816 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377e:	f7fd fa55 	bl	8000c2c <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	429a      	cmp	r2, r3
 800378c:	d302      	bcc.n	8003794 <UART_WaitOnFlagUntilTimeout+0x30>
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e04e      	b.n	8003836 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0304 	and.w	r3, r3, #4
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d037      	beq.n	8003816 <UART_WaitOnFlagUntilTimeout+0xb2>
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b80      	cmp	r3, #128	; 0x80
 80037aa:	d034      	beq.n	8003816 <UART_WaitOnFlagUntilTimeout+0xb2>
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2b40      	cmp	r3, #64	; 0x40
 80037b0:	d031      	beq.n	8003816 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	f003 0308 	and.w	r3, r3, #8
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d110      	bne.n	80037e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2208      	movs	r2, #8
 80037c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 f838 	bl	800383e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2208      	movs	r2, #8
 80037d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e029      	b.n	8003836 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037f0:	d111      	bne.n	8003816 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 f81e 	bl	800383e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2220      	movs	r2, #32
 8003806:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e00f      	b.n	8003836 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	69da      	ldr	r2, [r3, #28]
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	4013      	ands	r3, r2
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	429a      	cmp	r2, r3
 8003824:	bf0c      	ite	eq
 8003826:	2301      	moveq	r3, #1
 8003828:	2300      	movne	r3, #0
 800382a:	b2db      	uxtb	r3, r3
 800382c:	461a      	mov	r2, r3
 800382e:	79fb      	ldrb	r3, [r7, #7]
 8003830:	429a      	cmp	r2, r3
 8003832:	d0a0      	beq.n	8003776 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800383e:	b480      	push	{r7}
 8003840:	b095      	sub	sp, #84	; 0x54
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384e:	e853 3f00 	ldrex	r3, [r3]
 8003852:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003856:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800385a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	461a      	mov	r2, r3
 8003862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003864:	643b      	str	r3, [r7, #64]	; 0x40
 8003866:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003868:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800386a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800386c:	e841 2300 	strex	r3, r2, [r1]
 8003870:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1e6      	bne.n	8003846 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	3308      	adds	r3, #8
 800387e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	e853 3f00 	ldrex	r3, [r3]
 8003886:	61fb      	str	r3, [r7, #28]
   return(result);
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800388e:	f023 0301 	bic.w	r3, r3, #1
 8003892:	64bb      	str	r3, [r7, #72]	; 0x48
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	3308      	adds	r3, #8
 800389a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800389c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800389e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038a4:	e841 2300 	strex	r3, r2, [r1]
 80038a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1e3      	bne.n	8003878 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d118      	bne.n	80038ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	e853 3f00 	ldrex	r3, [r3]
 80038c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	f023 0310 	bic.w	r3, r3, #16
 80038cc:	647b      	str	r3, [r7, #68]	; 0x44
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	461a      	mov	r2, r3
 80038d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038d6:	61bb      	str	r3, [r7, #24]
 80038d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038da:	6979      	ldr	r1, [r7, #20]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	e841 2300 	strex	r3, r2, [r1]
 80038e2:	613b      	str	r3, [r7, #16]
   return(result);
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1e6      	bne.n	80038b8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	675a      	str	r2, [r3, #116]	; 0x74
}
 80038fe:	bf00      	nop
 8003900:	3754      	adds	r7, #84	; 0x54
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800390a:	b480      	push	{r7}
 800390c:	b085      	sub	sp, #20
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_UARTEx_DisableFifoMode+0x16>
 800391c:	2302      	movs	r3, #2
 800391e:	e027      	b.n	8003970 <HAL_UARTEx_DisableFifoMode+0x66>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2224      	movs	r2, #36	; 0x24
 800392c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0201 	bic.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800394e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2220      	movs	r2, #32
 8003962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800398c:	2b01      	cmp	r3, #1
 800398e:	d101      	bne.n	8003994 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003990:	2302      	movs	r3, #2
 8003992:	e02d      	b.n	80039f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2224      	movs	r2, #36	; 0x24
 80039a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0201 	bic.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f84f 	bl	8003a74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2220      	movs	r2, #32
 80039e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d101      	bne.n	8003a10 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	e02d      	b.n	8003a6c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2224      	movs	r2, #36	; 0x24
 8003a1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0201 	bic.w	r2, r2, #1
 8003a36:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f811 	bl	8003a74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d108      	bne.n	8003a96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003a94:	e031      	b.n	8003afa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003a96:	2308      	movs	r3, #8
 8003a98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003a9a:	2308      	movs	r3, #8
 8003a9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	0e5b      	lsrs	r3, r3, #25
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	0f5b      	lsrs	r3, r3, #29
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003abe:	7bbb      	ldrb	r3, [r7, #14]
 8003ac0:	7b3a      	ldrb	r2, [r7, #12]
 8003ac2:	4911      	ldr	r1, [pc, #68]	; (8003b08 <UARTEx_SetNbDataToProcess+0x94>)
 8003ac4:	5c8a      	ldrb	r2, [r1, r2]
 8003ac6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003aca:	7b3a      	ldrb	r2, [r7, #12]
 8003acc:	490f      	ldr	r1, [pc, #60]	; (8003b0c <UARTEx_SetNbDataToProcess+0x98>)
 8003ace:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ad0:	fb93 f3f2 	sdiv	r3, r3, r2
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
 8003ade:	7b7a      	ldrb	r2, [r7, #13]
 8003ae0:	4909      	ldr	r1, [pc, #36]	; (8003b08 <UARTEx_SetNbDataToProcess+0x94>)
 8003ae2:	5c8a      	ldrb	r2, [r1, r2]
 8003ae4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003ae8:	7b7a      	ldrb	r2, [r7, #13]
 8003aea:	4908      	ldr	r1, [pc, #32]	; (8003b0c <UARTEx_SetNbDataToProcess+0x98>)
 8003aec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003aee:	fb93 f3f2 	sdiv	r3, r3, r2
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003afa:	bf00      	nop
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	08003bb0 	.word	0x08003bb0
 8003b0c:	08003bb8 	.word	0x08003bb8

08003b10 <memset>:
 8003b10:	4402      	add	r2, r0
 8003b12:	4603      	mov	r3, r0
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d100      	bne.n	8003b1a <memset+0xa>
 8003b18:	4770      	bx	lr
 8003b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b1e:	e7f9      	b.n	8003b14 <memset+0x4>

08003b20 <__libc_init_array>:
 8003b20:	b570      	push	{r4, r5, r6, lr}
 8003b22:	4d0d      	ldr	r5, [pc, #52]	; (8003b58 <__libc_init_array+0x38>)
 8003b24:	4c0d      	ldr	r4, [pc, #52]	; (8003b5c <__libc_init_array+0x3c>)
 8003b26:	1b64      	subs	r4, r4, r5
 8003b28:	10a4      	asrs	r4, r4, #2
 8003b2a:	2600      	movs	r6, #0
 8003b2c:	42a6      	cmp	r6, r4
 8003b2e:	d109      	bne.n	8003b44 <__libc_init_array+0x24>
 8003b30:	4d0b      	ldr	r5, [pc, #44]	; (8003b60 <__libc_init_array+0x40>)
 8003b32:	4c0c      	ldr	r4, [pc, #48]	; (8003b64 <__libc_init_array+0x44>)
 8003b34:	f000 f818 	bl	8003b68 <_init>
 8003b38:	1b64      	subs	r4, r4, r5
 8003b3a:	10a4      	asrs	r4, r4, #2
 8003b3c:	2600      	movs	r6, #0
 8003b3e:	42a6      	cmp	r6, r4
 8003b40:	d105      	bne.n	8003b4e <__libc_init_array+0x2e>
 8003b42:	bd70      	pop	{r4, r5, r6, pc}
 8003b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b48:	4798      	blx	r3
 8003b4a:	3601      	adds	r6, #1
 8003b4c:	e7ee      	b.n	8003b2c <__libc_init_array+0xc>
 8003b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b52:	4798      	blx	r3
 8003b54:	3601      	adds	r6, #1
 8003b56:	e7f2      	b.n	8003b3e <__libc_init_array+0x1e>
 8003b58:	08003bc8 	.word	0x08003bc8
 8003b5c:	08003bc8 	.word	0x08003bc8
 8003b60:	08003bc8 	.word	0x08003bc8
 8003b64:	08003bcc 	.word	0x08003bcc

08003b68 <_init>:
 8003b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b6a:	bf00      	nop
 8003b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b6e:	bc08      	pop	{r3}
 8003b70:	469e      	mov	lr, r3
 8003b72:	4770      	bx	lr

08003b74 <_fini>:
 8003b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b76:	bf00      	nop
 8003b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b7a:	bc08      	pop	{r3}
 8003b7c:	469e      	mov	lr, r3
 8003b7e:	4770      	bx	lr
