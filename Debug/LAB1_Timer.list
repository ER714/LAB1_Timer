
LAB1_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006130  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006308  08006308  00016308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006348  08006348  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006348  08006348  00016348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006350  08006350  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006350  08006350  00016350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006354  08006354  00016354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000494  20000010  08006368  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  08006368  000204a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017586  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a5a  00000000  00000000  00037609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001480  00000000  00000000  0003a068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001006  00000000  00000000  0003b4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a3a  00000000  00000000  0003c4ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001740e  00000000  00000000  00063f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e9be  00000000  00000000  0007b336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000592c  00000000  00000000  00189cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0018f620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080062f0 	.word	0x080062f0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	080062f0 	.word	0x080062f0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fd3f 	bl	8000f9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f82a 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 fa1e 	bl	8000960 <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 f9f2 	bl	800090c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000528:	f000 f90a 	bl	8000740 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 800052c:	f000 f952 	bl	80007d4 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000530:	f000 f86c 	bl	800060c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000534:	f000 f99c 	bl	8000870 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2); //Interrupt
 8000538:	480a      	ldr	r0, [pc, #40]	; (8000564 <main+0x50>)
 800053a:	f004 fb0d 	bl	8004b58 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800053e:	217f      	movs	r1, #127	; 0x7f
 8000540:	4809      	ldr	r0, [pc, #36]	; (8000568 <main+0x54>)
 8000542:	f002 fb35 	bl	8002bb0 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 300);
 8000546:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800054a:	4908      	ldr	r1, [pc, #32]	; (800056c <main+0x58>)
 800054c:	4806      	ldr	r0, [pc, #24]	; (8000568 <main+0x54>)
 800054e:	f001 f9b7 	bl	80018c0 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 8000552:	4807      	ldr	r0, [pc, #28]	; (8000570 <main+0x5c>)
 8000554:	f004 fa90 	bl	8004a78 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  micros();
 8000558:	f000 fa88 	bl	8000a6c <micros>
	  avg();
 800055c:	f000 facc 	bl	8000af8 <avg>
	  micros();
 8000560:	e7fa      	b.n	8000558 <main+0x44>
 8000562:	bf00      	nop
 8000564:	2000018c 	.word	0x2000018c
 8000568:	2000002c 	.word	0x2000002c
 800056c:	20000230 	.word	0x20000230
 8000570:	200001d8 	.word	0x200001d8

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	; 0x50
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0318 	add.w	r3, r7, #24
 800057e:	2238      	movs	r2, #56	; 0x38
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f005 fe88 	bl	8006298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000596:	2000      	movs	r0, #0
 8000598:	f003 f9e6 	bl	8003968 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059c:	2302      	movs	r3, #2
 800059e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a6:	2340      	movs	r3, #64	; 0x40
 80005a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005aa:	2302      	movs	r3, #2
 80005ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ae:	2302      	movs	r3, #2
 80005b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005b2:	2304      	movs	r3, #4
 80005b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005b6:	2355      	movs	r3, #85	; 0x55
 80005b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005be:	2302      	movs	r3, #2
 80005c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	f107 0318 	add.w	r3, r7, #24
 80005ca:	4618      	mov	r0, r3
 80005cc:	f003 fa80 	bl	8003ad0 <HAL_RCC_OscConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005d6:	f000 faf7 	bl	8000bc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005da:	230f      	movs	r3, #15
 80005dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005de:	2303      	movs	r3, #3
 80005e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2104      	movs	r1, #4
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 fd7e 	bl	80040f4 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005fe:	f000 fae3 	bl	8000bc8 <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3750      	adds	r7, #80	; 0x50
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08c      	sub	sp, #48	; 0x30
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2220      	movs	r2, #32
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f005 fe37 	bl	8006298 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800062a:	4b41      	ldr	r3, [pc, #260]	; (8000730 <MX_ADC1_Init+0x124>)
 800062c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000630:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000632:	4b3f      	ldr	r3, [pc, #252]	; (8000730 <MX_ADC1_Init+0x124>)
 8000634:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000638:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800063a:	4b3d      	ldr	r3, [pc, #244]	; (8000730 <MX_ADC1_Init+0x124>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000640:	4b3b      	ldr	r3, [pc, #236]	; (8000730 <MX_ADC1_Init+0x124>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000646:	4b3a      	ldr	r3, [pc, #232]	; (8000730 <MX_ADC1_Init+0x124>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800064c:	4b38      	ldr	r3, [pc, #224]	; (8000730 <MX_ADC1_Init+0x124>)
 800064e:	2201      	movs	r2, #1
 8000650:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000652:	4b37      	ldr	r3, [pc, #220]	; (8000730 <MX_ADC1_Init+0x124>)
 8000654:	2204      	movs	r2, #4
 8000656:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000658:	4b35      	ldr	r3, [pc, #212]	; (8000730 <MX_ADC1_Init+0x124>)
 800065a:	2200      	movs	r2, #0
 800065c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800065e:	4b34      	ldr	r3, [pc, #208]	; (8000730 <MX_ADC1_Init+0x124>)
 8000660:	2201      	movs	r2, #1
 8000662:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8000664:	4b32      	ldr	r3, [pc, #200]	; (8000730 <MX_ADC1_Init+0x124>)
 8000666:	2203      	movs	r2, #3
 8000668:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800066a:	4b31      	ldr	r3, [pc, #196]	; (8000730 <MX_ADC1_Init+0x124>)
 800066c:	2200      	movs	r2, #0
 800066e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000672:	4b2f      	ldr	r3, [pc, #188]	; (8000730 <MX_ADC1_Init+0x124>)
 8000674:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8000678:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800067a:	4b2d      	ldr	r3, [pc, #180]	; (8000730 <MX_ADC1_Init+0x124>)
 800067c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000680:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000682:	4b2b      	ldr	r3, [pc, #172]	; (8000730 <MX_ADC1_Init+0x124>)
 8000684:	2201      	movs	r2, #1
 8000686:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800068a:	4b29      	ldr	r3, [pc, #164]	; (8000730 <MX_ADC1_Init+0x124>)
 800068c:	2200      	movs	r2, #0
 800068e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000690:	4b27      	ldr	r3, [pc, #156]	; (8000730 <MX_ADC1_Init+0x124>)
 8000692:	2200      	movs	r2, #0
 8000694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000698:	4825      	ldr	r0, [pc, #148]	; (8000730 <MX_ADC1_Init+0x124>)
 800069a:	f000 ff55 	bl	8001548 <HAL_ADC_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80006a4:	f000 fa90 	bl	8000bc8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b0:	4619      	mov	r1, r3
 80006b2:	481f      	ldr	r0, [pc, #124]	; (8000730 <MX_ADC1_Init+0x124>)
 80006b4:	f002 fb10 	bl	8002cd8 <HAL_ADCEx_MultiModeConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80006be:	f000 fa83 	bl	8000bc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006c2:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <MX_ADC1_Init+0x128>)
 80006c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006c6:	2306      	movs	r3, #6
 80006c8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80006ca:	2307      	movs	r3, #7
 80006cc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ce:	237f      	movs	r3, #127	; 0x7f
 80006d0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006d2:	2304      	movs	r3, #4
 80006d4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	4619      	mov	r1, r3
 80006de:	4814      	ldr	r0, [pc, #80]	; (8000730 <MX_ADC1_Init+0x124>)
 80006e0:	f001 fc4a 	bl	8001f78 <HAL_ADC_ConfigChannel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80006ea:	f000 fa6d 	bl	8000bc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_ADC1_Init+0x12c>)
 80006f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006f2:	230c      	movs	r3, #12
 80006f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	4619      	mov	r1, r3
 80006fa:	480d      	ldr	r0, [pc, #52]	; (8000730 <MX_ADC1_Init+0x124>)
 80006fc:	f001 fc3c 	bl	8001f78 <HAL_ADC_ConfigChannel>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000706:	f000 fa5f 	bl	8000bc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_ADC1_Init+0x130>)
 800070c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800070e:	2312      	movs	r3, #18
 8000710:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	4619      	mov	r1, r3
 8000716:	4806      	ldr	r0, [pc, #24]	; (8000730 <MX_ADC1_Init+0x124>)
 8000718:	f001 fc2e 	bl	8001f78 <HAL_ADC_ConfigChannel>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000722:	f000 fa51 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	3730      	adds	r7, #48	; 0x30
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2000002c 	.word	0x2000002c
 8000734:	04300002 	.word	0x04300002
 8000738:	08600004 	.word	0x08600004
 800073c:	3ef08000 	.word	0x3ef08000

08000740 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000744:	4b21      	ldr	r3, [pc, #132]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 8000746:	4a22      	ldr	r2, [pc, #136]	; (80007d0 <MX_LPUART1_UART_Init+0x90>)
 8000748:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800074a:	4b20      	ldr	r3, [pc, #128]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 800074c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000750:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000752:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000758:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800075e:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000764:	4b19      	ldr	r3, [pc, #100]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 8000766:	220c      	movs	r2, #12
 8000768:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076a:	4b18      	ldr	r3, [pc, #96]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000770:	4b16      	ldr	r3, [pc, #88]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 8000772:	2200      	movs	r2, #0
 8000774:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 8000778:	2200      	movs	r2, #0
 800077a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800077c:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 800077e:	2200      	movs	r2, #0
 8000780:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000782:	4812      	ldr	r0, [pc, #72]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 8000784:	f004 ff1a 	bl	80055bc <HAL_UART_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800078e:	f000 fa1b 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000792:	2100      	movs	r1, #0
 8000794:	480d      	ldr	r0, [pc, #52]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 8000796:	f005 fcb5 	bl	8006104 <HAL_UARTEx_SetTxFifoThreshold>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80007a0:	f000 fa12 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007a4:	2100      	movs	r1, #0
 80007a6:	4809      	ldr	r0, [pc, #36]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 80007a8:	f005 fcea 	bl	8006180 <HAL_UARTEx_SetRxFifoThreshold>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80007b2:	f000 fa09 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 80007b8:	f005 fc6b 	bl	8006092 <HAL_UARTEx_DisableFifoMode>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80007c2:	f000 fa01 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200000f8 	.word	0x200000f8
 80007d0:	40008000 	.word	0x40008000

080007d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007da:	f107 0310 	add.w	r3, r7, #16
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007f2:	4b1e      	ldr	r3, [pc, #120]	; (800086c <MX_TIM2_Init+0x98>)
 80007f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80007fa:	4b1c      	ldr	r3, [pc, #112]	; (800086c <MX_TIM2_Init+0x98>)
 80007fc:	22a9      	movs	r2, #169	; 0xa9
 80007fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000800:	4b1a      	ldr	r3, [pc, #104]	; (800086c <MX_TIM2_Init+0x98>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8000806:	4b19      	ldr	r3, [pc, #100]	; (800086c <MX_TIM2_Init+0x98>)
 8000808:	f04f 32ff 	mov.w	r2, #4294967295
 800080c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080e:	4b17      	ldr	r3, [pc, #92]	; (800086c <MX_TIM2_Init+0x98>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000814:	4b15      	ldr	r3, [pc, #84]	; (800086c <MX_TIM2_Init+0x98>)
 8000816:	2200      	movs	r2, #0
 8000818:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800081a:	4814      	ldr	r0, [pc, #80]	; (800086c <MX_TIM2_Init+0x98>)
 800081c:	f004 f8d4 	bl	80049c8 <HAL_TIM_Base_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000826:	f000 f9cf 	bl	8000bc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800082a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	4619      	mov	r1, r3
 8000836:	480d      	ldr	r0, [pc, #52]	; (800086c <MX_TIM2_Init+0x98>)
 8000838:	f004 fb56 	bl	8004ee8 <HAL_TIM_ConfigClockSource>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000842:	f000 f9c1 	bl	8000bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	4619      	mov	r1, r3
 8000852:	4806      	ldr	r0, [pc, #24]	; (800086c <MX_TIM2_Init+0x98>)
 8000854:	f004 fdd6 	bl	8005404 <HAL_TIMEx_MasterConfigSynchronization>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800085e:	f000 f9b3 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	3720      	adds	r7, #32
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	2000018c 	.word	0x2000018c

08000870 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000876:	f107 0310 	add.w	r3, r7, #16
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800088e:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <MX_TIM3_Init+0x94>)
 8000890:	4a1d      	ldr	r2, [pc, #116]	; (8000908 <MX_TIM3_Init+0x98>)
 8000892:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 56666;
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <MX_TIM3_Init+0x94>)
 8000896:	f64d 525a 	movw	r2, #56666	; 0xdd5a
 800089a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089c:	4b19      	ldr	r3, [pc, #100]	; (8000904 <MX_TIM3_Init+0x94>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 80008a2:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_TIM3_Init+0x94>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a8:	4b16      	ldr	r3, [pc, #88]	; (8000904 <MX_TIM3_Init+0x94>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_TIM3_Init+0x94>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008b4:	4813      	ldr	r0, [pc, #76]	; (8000904 <MX_TIM3_Init+0x94>)
 80008b6:	f004 f887 	bl	80049c8 <HAL_TIM_Base_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80008c0:	f000 f982 	bl	8000bc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008ca:	f107 0310 	add.w	r3, r7, #16
 80008ce:	4619      	mov	r1, r3
 80008d0:	480c      	ldr	r0, [pc, #48]	; (8000904 <MX_TIM3_Init+0x94>)
 80008d2:	f004 fb09 	bl	8004ee8 <HAL_TIM_ConfigClockSource>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80008dc:	f000 f974 	bl	8000bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008e0:	2320      	movs	r3, #32
 80008e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	4619      	mov	r1, r3
 80008ec:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_TIM3_Init+0x94>)
 80008ee:	f004 fd89 	bl	8005404 <HAL_TIMEx_MasterConfigSynchronization>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80008f8:	f000 f966 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	3720      	adds	r7, #32
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	200001d8 	.word	0x200001d8
 8000908:	40000400 	.word	0x40000400

0800090c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_DMA_Init+0x50>)
 8000914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000916:	4a11      	ldr	r2, [pc, #68]	; (800095c <MX_DMA_Init+0x50>)
 8000918:	f043 0304 	orr.w	r3, r3, #4
 800091c:	6493      	str	r3, [r2, #72]	; 0x48
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_DMA_Init+0x50>)
 8000920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000922:	f003 0304 	and.w	r3, r3, #4
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_DMA_Init+0x50>)
 800092c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800092e:	4a0b      	ldr	r2, [pc, #44]	; (800095c <MX_DMA_Init+0x50>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6493      	str	r3, [r2, #72]	; 0x48
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_DMA_Init+0x50>)
 8000938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	2100      	movs	r1, #0
 8000946:	200b      	movs	r0, #11
 8000948:	f002 fba9 	bl	800309e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800094c:	200b      	movs	r0, #11
 800094e:	f002 fbc0 	bl	80030d2 <HAL_NVIC_EnableIRQ>

}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40021000 	.word	0x40021000

08000960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08a      	sub	sp, #40	; 0x28
 8000964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000976:	4b2f      	ldr	r3, [pc, #188]	; (8000a34 <MX_GPIO_Init+0xd4>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	4a2e      	ldr	r2, [pc, #184]	; (8000a34 <MX_GPIO_Init+0xd4>)
 800097c:	f043 0304 	orr.w	r3, r3, #4
 8000980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000982:	4b2c      	ldr	r3, [pc, #176]	; (8000a34 <MX_GPIO_Init+0xd4>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	f003 0304 	and.w	r3, r3, #4
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800098e:	4b29      	ldr	r3, [pc, #164]	; (8000a34 <MX_GPIO_Init+0xd4>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	4a28      	ldr	r2, [pc, #160]	; (8000a34 <MX_GPIO_Init+0xd4>)
 8000994:	f043 0320 	orr.w	r3, r3, #32
 8000998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099a:	4b26      	ldr	r3, [pc, #152]	; (8000a34 <MX_GPIO_Init+0xd4>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	f003 0320 	and.w	r3, r3, #32
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	4b23      	ldr	r3, [pc, #140]	; (8000a34 <MX_GPIO_Init+0xd4>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	4a22      	ldr	r2, [pc, #136]	; (8000a34 <MX_GPIO_Init+0xd4>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b2:	4b20      	ldr	r3, [pc, #128]	; (8000a34 <MX_GPIO_Init+0xd4>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <MX_GPIO_Init+0xd4>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	4a1c      	ldr	r2, [pc, #112]	; (8000a34 <MX_GPIO_Init+0xd4>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ca:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_GPIO_Init+0xd4>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2120      	movs	r1, #32
 80009da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009de:	f002 ff87 	bl	80038f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4619      	mov	r1, r3
 80009f8:	480f      	ldr	r0, [pc, #60]	; (8000a38 <MX_GPIO_Init+0xd8>)
 80009fa:	f002 fdf7 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009fe:	2320      	movs	r3, #32
 8000a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4619      	mov	r1, r3
 8000a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a18:	f002 fde8 	bl	80035ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2100      	movs	r1, #0
 8000a20:	2028      	movs	r0, #40	; 0x28
 8000a22:	f002 fb3c 	bl	800309e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a26:	2028      	movs	r0, #40	; 0x28
 8000a28:	f002 fb53 	bl	80030d2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a2c:	bf00      	nop
 8000a2e:	3728      	adds	r7, #40	; 0x28
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40021000 	.word	0x40021000
 8000a38:	48000800 	.word	0x48000800

08000a3c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d104      	bne.n	8000a56 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		counter++;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	3301      	adds	r3, #1
 8000a52:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a54:	6013      	str	r3, [r2, #0]
	}
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	2000018c 	.word	0x2000018c
 8000a68:	20000000 	.word	0x20000000

08000a6c <micros>:
void micros()
{
 8000a6c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000a70:	b087      	sub	sp, #28
 8000a72:	af00      	add	r7, sp, #0
	timestamp = counter*(4294967295) + __HAL_TIM_GET_COUNTER(&htim2);
 8000a74:	4b1d      	ldr	r3, [pc, #116]	; (8000aec <micros+0x80>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2200      	movs	r2, #0
 8000a7a:	4698      	mov	r8, r3
 8000a7c:	4691      	mov	r9, r2
 8000a7e:	4642      	mov	r2, r8
 8000a80:	464b      	mov	r3, r9
 8000a82:	f04f 0400 	mov.w	r4, #0
 8000a86:	f04f 0500 	mov.w	r5, #0
 8000a8a:	07dd      	lsls	r5, r3, #31
 8000a8c:	ea45 0552 	orr.w	r5, r5, r2, lsr #1
 8000a90:	07d4      	lsls	r4, r2, #31
 8000a92:	4622      	mov	r2, r4
 8000a94:	462b      	mov	r3, r5
 8000a96:	ebb2 0008 	subs.w	r0, r2, r8
 8000a9a:	eb63 0109 	sbc.w	r1, r3, r9
 8000a9e:	1803      	adds	r3, r0, r0
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	eb41 0301 	adc.w	r3, r1, r1
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000aac:	eb10 0a08 	adds.w	sl, r0, r8
 8000ab0:	eb41 0b09 	adc.w	fp, r1, r9
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <micros+0x84>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aba:	2200      	movs	r2, #0
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	617a      	str	r2, [r7, #20]
 8000ac0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	eb1a 0303 	adds.w	r3, sl, r3
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	4613      	mov	r3, r2
 8000ace:	eb4b 0303 	adc.w	r3, fp, r3
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ad8:	4906      	ldr	r1, [pc, #24]	; (8000af4 <micros+0x88>)
 8000ada:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000ade:	bf00      	nop
 8000ae0:	371c      	adds	r7, #28
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	20000000 	.word	0x20000000
 8000af0:	2000018c 	.word	0x2000018c
 8000af4:	20000228 	.word	0x20000228

08000af8 <avg>:
void avg()
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
	for (int i = 0; i < 100; i++)
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	e028      	b.n	8000b56 <avg+0x5e>
	{
		sum[0] += ADC_RawRead[(3*i)];
 8000b04:	4b2c      	ldr	r3, [pc, #176]	; (8000bb8 <avg+0xc0>)
 8000b06:	6819      	ldr	r1, [r3, #0]
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	4413      	add	r3, r2
 8000b10:	4a2a      	ldr	r2, [pc, #168]	; (8000bbc <avg+0xc4>)
 8000b12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b16:	440b      	add	r3, r1
 8000b18:	4a27      	ldr	r2, [pc, #156]	; (8000bb8 <avg+0xc0>)
 8000b1a:	6013      	str	r3, [r2, #0]
		sum[1] += ADC_RawRead[(3*i) + 1];
 8000b1c:	4b26      	ldr	r3, [pc, #152]	; (8000bb8 <avg+0xc0>)
 8000b1e:	6859      	ldr	r1, [r3, #4]
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	4613      	mov	r3, r2
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	4413      	add	r3, r2
 8000b28:	3301      	adds	r3, #1
 8000b2a:	4a24      	ldr	r2, [pc, #144]	; (8000bbc <avg+0xc4>)
 8000b2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b30:	440b      	add	r3, r1
 8000b32:	4a21      	ldr	r2, [pc, #132]	; (8000bb8 <avg+0xc0>)
 8000b34:	6053      	str	r3, [r2, #4]
		sum[2] += ADC_RawRead[(3*i) + 2];
 8000b36:	4b20      	ldr	r3, [pc, #128]	; (8000bb8 <avg+0xc0>)
 8000b38:	6899      	ldr	r1, [r3, #8]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	4413      	add	r3, r2
 8000b42:	3302      	adds	r3, #2
 8000b44:	4a1d      	ldr	r2, [pc, #116]	; (8000bbc <avg+0xc4>)
 8000b46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b4a:	440b      	add	r3, r1
 8000b4c:	4a1a      	ldr	r2, [pc, #104]	; (8000bb8 <avg+0xc0>)
 8000b4e:	6093      	str	r3, [r2, #8]
	for (int i = 0; i < 100; i++)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3301      	adds	r3, #1
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2b63      	cmp	r3, #99	; 0x63
 8000b5a:	ddd3      	ble.n	8000b04 <avg+0xc>
	}
		Avg[0] = sum[0]/100;
 8000b5c:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <avg+0xc0>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a17      	ldr	r2, [pc, #92]	; (8000bc0 <avg+0xc8>)
 8000b62:	fb82 1203 	smull	r1, r2, r2, r3
 8000b66:	1152      	asrs	r2, r2, #5
 8000b68:	17db      	asrs	r3, r3, #31
 8000b6a:	1ad3      	subs	r3, r2, r3
 8000b6c:	4a15      	ldr	r2, [pc, #84]	; (8000bc4 <avg+0xcc>)
 8000b6e:	6013      	str	r3, [r2, #0]
		Avg[1] = sum[1]/100;
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <avg+0xc0>)
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <avg+0xc8>)
 8000b76:	fb82 1203 	smull	r1, r2, r2, r3
 8000b7a:	1152      	asrs	r2, r2, #5
 8000b7c:	17db      	asrs	r3, r3, #31
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	4a10      	ldr	r2, [pc, #64]	; (8000bc4 <avg+0xcc>)
 8000b82:	6053      	str	r3, [r2, #4]
		Avg[2] = sum[2]/100;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <avg+0xc0>)
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	4a0d      	ldr	r2, [pc, #52]	; (8000bc0 <avg+0xc8>)
 8000b8a:	fb82 1203 	smull	r1, r2, r2, r3
 8000b8e:	1152      	asrs	r2, r2, #5
 8000b90:	17db      	asrs	r3, r3, #31
 8000b92:	1ad3      	subs	r3, r2, r3
 8000b94:	4a0b      	ldr	r2, [pc, #44]	; (8000bc4 <avg+0xcc>)
 8000b96:	6093      	str	r3, [r2, #8]
		sum[0] = 0;
 8000b98:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <avg+0xc0>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
		sum[1] = 0;
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <avg+0xc0>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	605a      	str	r2, [r3, #4]
		sum[2] = 0;
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <avg+0xc0>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	20000488 	.word	0x20000488
 8000bbc:	20000230 	.word	0x20000230
 8000bc0:	51eb851f 	.word	0x51eb851f
 8000bc4:	20000494 	.word	0x20000494

08000bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bcc:	b672      	cpsid	i
}
 8000bce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <Error_Handler+0x8>
	...

08000bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bda:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <HAL_MspInit+0x44>)
 8000bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bde:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <HAL_MspInit+0x44>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6613      	str	r3, [r2, #96]	; 0x60
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <HAL_MspInit+0x44>)
 8000be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <HAL_MspInit+0x44>)
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf6:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <HAL_MspInit+0x44>)
 8000bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bfc:	6593      	str	r3, [r2, #88]	; 0x58
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_MspInit+0x44>)
 8000c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c0a:	f002 ff51 	bl	8003ab0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40021000 	.word	0x40021000

08000c1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b0a0      	sub	sp, #128	; 0x80
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c34:	f107 0318 	add.w	r3, r7, #24
 8000c38:	2254      	movs	r2, #84	; 0x54
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f005 fb2b 	bl	8006298 <memset>
  if(hadc->Instance==ADC1)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c4a:	d17f      	bne.n	8000d4c <HAL_ADC_MspInit+0x130>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000c4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c50:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000c52:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c56:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c58:	f107 0318 	add.w	r3, r7, #24
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f003 fc65 	bl	800452c <HAL_RCCEx_PeriphCLKConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000c68:	f7ff ffae 	bl	8000bc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c6c:	4b39      	ldr	r3, [pc, #228]	; (8000d54 <HAL_ADC_MspInit+0x138>)
 8000c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c70:	4a38      	ldr	r2, [pc, #224]	; (8000d54 <HAL_ADC_MspInit+0x138>)
 8000c72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c78:	4b36      	ldr	r3, [pc, #216]	; (8000d54 <HAL_ADC_MspInit+0x138>)
 8000c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c84:	4b33      	ldr	r3, [pc, #204]	; (8000d54 <HAL_ADC_MspInit+0x138>)
 8000c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c88:	4a32      	ldr	r2, [pc, #200]	; (8000d54 <HAL_ADC_MspInit+0x138>)
 8000c8a:	f043 0301 	orr.w	r3, r3, #1
 8000c8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c90:	4b30      	ldr	r3, [pc, #192]	; (8000d54 <HAL_ADC_MspInit+0x138>)
 8000c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c94:	f003 0301 	and.w	r3, r3, #1
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9c:	4b2d      	ldr	r3, [pc, #180]	; (8000d54 <HAL_ADC_MspInit+0x138>)
 8000c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca0:	4a2c      	ldr	r2, [pc, #176]	; (8000d54 <HAL_ADC_MspInit+0x138>)
 8000ca2:	f043 0302 	orr.w	r3, r3, #2
 8000ca6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca8:	4b2a      	ldr	r3, [pc, #168]	; (8000d54 <HAL_ADC_MspInit+0x138>)
 8000caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cac:	f003 0302 	and.w	r3, r3, #2
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cca:	f002 fc8f 	bl	80035ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cda:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000cde:	4619      	mov	r1, r3
 8000ce0:	481d      	ldr	r0, [pc, #116]	; (8000d58 <HAL_ADC_MspInit+0x13c>)
 8000ce2:	f002 fc83 	bl	80035ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ce6:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <HAL_ADC_MspInit+0x140>)
 8000ce8:	4a1d      	ldr	r2, [pc, #116]	; (8000d60 <HAL_ADC_MspInit+0x144>)
 8000cea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000cec:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <HAL_ADC_MspInit+0x140>)
 8000cee:	2205      	movs	r2, #5
 8000cf0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <HAL_ADC_MspInit+0x140>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cf8:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <HAL_ADC_MspInit+0x140>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cfe:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <HAL_ADC_MspInit+0x140>)
 8000d00:	2280      	movs	r2, #128	; 0x80
 8000d02:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d04:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <HAL_ADC_MspInit+0x140>)
 8000d06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d0a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d0c:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <HAL_ADC_MspInit+0x140>)
 8000d0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d12:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <HAL_ADC_MspInit+0x140>)
 8000d16:	2220      	movs	r2, #32
 8000d18:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <HAL_ADC_MspInit+0x140>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d20:	480e      	ldr	r0, [pc, #56]	; (8000d5c <HAL_ADC_MspInit+0x140>)
 8000d22:	f002 f9f1 	bl	8003108 <HAL_DMA_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8000d2c:	f7ff ff4c 	bl	8000bc8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <HAL_ADC_MspInit+0x140>)
 8000d34:	655a      	str	r2, [r3, #84]	; 0x54
 8000d36:	4a09      	ldr	r2, [pc, #36]	; (8000d5c <HAL_ADC_MspInit+0x140>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2100      	movs	r1, #0
 8000d40:	2012      	movs	r0, #18
 8000d42:	f002 f9ac 	bl	800309e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000d46:	2012      	movs	r0, #18
 8000d48:	f002 f9c3 	bl	80030d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d4c:	bf00      	nop
 8000d4e:	3780      	adds	r7, #128	; 0x80
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40021000 	.word	0x40021000
 8000d58:	48000400 	.word	0x48000400
 8000d5c:	20000098 	.word	0x20000098
 8000d60:	40020008 	.word	0x40020008

08000d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b09e      	sub	sp, #120	; 0x78
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d7c:	f107 0310 	add.w	r3, r7, #16
 8000d80:	2254      	movs	r2, #84	; 0x54
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f005 fa87 	bl	8006298 <memset>
  if(huart->Instance==LPUART1)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a1f      	ldr	r2, [pc, #124]	; (8000e0c <HAL_UART_MspInit+0xa8>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d136      	bne.n	8000e02 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d94:	2320      	movs	r3, #32
 8000d96:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	4618      	mov	r0, r3
 8000da2:	f003 fbc3 	bl	800452c <HAL_RCCEx_PeriphCLKConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dac:	f7ff ff0c 	bl	8000bc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000db0:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <HAL_UART_MspInit+0xac>)
 8000db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000db4:	4a16      	ldr	r2, [pc, #88]	; (8000e10 <HAL_UART_MspInit+0xac>)
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000dbc:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <HAL_UART_MspInit+0xac>)
 8000dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc8:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <HAL_UART_MspInit+0xac>)
 8000dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dcc:	4a10      	ldr	r2, [pc, #64]	; (8000e10 <HAL_UART_MspInit+0xac>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd4:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <HAL_UART_MspInit+0xac>)
 8000dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000de0:	230c      	movs	r3, #12
 8000de2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000df0:	230c      	movs	r3, #12
 8000df2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfe:	f002 fbf5 	bl	80035ec <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000e02:	bf00      	nop
 8000e04:	3778      	adds	r7, #120	; 0x78
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40008000 	.word	0x40008000
 8000e10:	40021000 	.word	0x40021000

08000e14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e24:	d114      	bne.n	8000e50 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <HAL_TIM_Base_MspInit+0x68>)
 8000e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2a:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <HAL_TIM_Base_MspInit+0x68>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6593      	str	r3, [r2, #88]	; 0x58
 8000e32:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_TIM_Base_MspInit+0x68>)
 8000e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2100      	movs	r1, #0
 8000e42:	201c      	movs	r0, #28
 8000e44:	f002 f92b 	bl	800309e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e48:	201c      	movs	r0, #28
 8000e4a:	f002 f942 	bl	80030d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e4e:	e010      	b.n	8000e72 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <HAL_TIM_Base_MspInit+0x6c>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d10b      	bne.n	8000e72 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <HAL_TIM_Base_MspInit+0x68>)
 8000e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5e:	4a07      	ldr	r2, [pc, #28]	; (8000e7c <HAL_TIM_Base_MspInit+0x68>)
 8000e60:	f043 0302 	orr.w	r3, r3, #2
 8000e64:	6593      	str	r3, [r2, #88]	; 0x58
 8000e66:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <HAL_TIM_Base_MspInit+0x68>)
 8000e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	68bb      	ldr	r3, [r7, #8]
}
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	40000400 	.word	0x40000400

08000e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e88:	e7fe      	b.n	8000e88 <NMI_Handler+0x4>

08000e8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <HardFault_Handler+0x4>

08000e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <MemManage_Handler+0x4>

08000e96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <BusFault_Handler+0x4>

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <UsageFault_Handler+0x4>

08000ea2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed0:	f000 f8b6 	bl	8001040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <DMA1_Channel1_IRQHandler+0x10>)
 8000ede:	f002 fa36 	bl	800334e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000098 	.word	0x20000098

08000eec <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <ADC1_2_IRQHandler+0x10>)
 8000ef2:	f000 fdb9 	bl	8001a68 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	2000002c 	.word	0x2000002c

08000f00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <TIM2_IRQHandler+0x10>)
 8000f06:	f003 fe9f 	bl	8004c48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	2000018c 	.word	0x2000018c

08000f14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f18:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f1c:	f002 fd00 	bl	8003920 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <SystemInit+0x20>)
 8000f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f2e:	4a05      	ldr	r2, [pc, #20]	; (8000f44 <SystemInit+0x20>)
 8000f30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f48:	480d      	ldr	r0, [pc, #52]	; (8000f80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f4a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f4c:	f7ff ffea 	bl	8000f24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f50:	480c      	ldr	r0, [pc, #48]	; (8000f84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f52:	490d      	ldr	r1, [pc, #52]	; (8000f88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f54:	4a0d      	ldr	r2, [pc, #52]	; (8000f8c <LoopForever+0xe>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f66:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f68:	4c0a      	ldr	r4, [pc, #40]	; (8000f94 <LoopForever+0x16>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f76:	f005 f997 	bl	80062a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f7a:	f7ff facb 	bl	8000514 <main>

08000f7e <LoopForever>:

LoopForever:
    b LoopForever
 8000f7e:	e7fe      	b.n	8000f7e <LoopForever>
  ldr   r0, =_estack
 8000f80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f88:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f8c:	08006358 	.word	0x08006358
  ldr r2, =_sbss
 8000f90:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f94:	200004a4 	.word	0x200004a4

08000f98 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f98:	e7fe      	b.n	8000f98 <ADC3_IRQHandler>

08000f9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	f002 f86f 	bl	8003088 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000faa:	2000      	movs	r0, #0
 8000fac:	f000 f80e 	bl	8000fcc <HAL_InitTick>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d002      	beq.n	8000fbc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	71fb      	strb	r3, [r7, #7]
 8000fba:	e001      	b.n	8000fc0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fbc:	f7ff fe0a 	bl	8000bd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fc0:	79fb      	ldrb	r3, [r7, #7]

}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fd8:	4b16      	ldr	r3, [pc, #88]	; (8001034 <HAL_InitTick+0x68>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d022      	beq.n	8001026 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fe0:	4b15      	ldr	r3, [pc, #84]	; (8001038 <HAL_InitTick+0x6c>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <HAL_InitTick+0x68>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fec:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f002 f87a 	bl	80030ee <HAL_SYSTICK_Config>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d10f      	bne.n	8001020 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b0f      	cmp	r3, #15
 8001004:	d809      	bhi.n	800101a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001006:	2200      	movs	r2, #0
 8001008:	6879      	ldr	r1, [r7, #4]
 800100a:	f04f 30ff 	mov.w	r0, #4294967295
 800100e:	f002 f846 	bl	800309e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001012:	4a0a      	ldr	r2, [pc, #40]	; (800103c <HAL_InitTick+0x70>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	e007      	b.n	800102a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	73fb      	strb	r3, [r7, #15]
 800101e:	e004      	b.n	800102a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	73fb      	strb	r3, [r7, #15]
 8001024:	e001      	b.n	800102a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800102a:	7bfb      	ldrb	r3, [r7, #15]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	2000000c 	.word	0x2000000c
 8001038:	20000004 	.word	0x20000004
 800103c:	20000008 	.word	0x20000008

08001040 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <HAL_IncTick+0x1c>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_IncTick+0x20>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4413      	add	r3, r2
 800104e:	4a03      	ldr	r2, [pc, #12]	; (800105c <HAL_IncTick+0x1c>)
 8001050:	6013      	str	r3, [r2, #0]
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	200004a0 	.word	0x200004a0
 8001060:	2000000c 	.word	0x2000000c

08001064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <HAL_GetTick+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	200004a0 	.word	0x200004a0

0800107c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	431a      	orrs	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	609a      	str	r2, [r3, #8]
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	431a      	orrs	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	609a      	str	r2, [r3, #8]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b087      	sub	sp, #28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
 80010f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	3360      	adds	r3, #96	; 0x60
 80010f6:	461a      	mov	r2, r3
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <LL_ADC_SetOffset+0x44>)
 8001106:	4013      	ands	r3, r2
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	430a      	orrs	r2, r1
 8001112:	4313      	orrs	r3, r2
 8001114:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800111c:	bf00      	nop
 800111e:	371c      	adds	r7, #28
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	03fff000 	.word	0x03fff000

0800112c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3360      	adds	r3, #96	; 0x60
 800113a:	461a      	mov	r2, r3
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4413      	add	r3, r2
 8001142:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800114c:	4618      	mov	r0, r3
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001158:	b480      	push	{r7}
 800115a:	b087      	sub	sp, #28
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	3360      	adds	r3, #96	; 0x60
 8001168:	461a      	mov	r2, r3
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	4413      	add	r3, r2
 8001170:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	431a      	orrs	r2, r3
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001182:	bf00      	nop
 8001184:	371c      	adds	r7, #28
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800118e:	b480      	push	{r7}
 8001190:	b087      	sub	sp, #28
 8001192:	af00      	add	r7, sp, #0
 8001194:	60f8      	str	r0, [r7, #12]
 8001196:	60b9      	str	r1, [r7, #8]
 8001198:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	3360      	adds	r3, #96	; 0x60
 800119e:	461a      	mov	r2, r3
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4413      	add	r3, r2
 80011a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	431a      	orrs	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80011b8:	bf00      	nop
 80011ba:	371c      	adds	r7, #28
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b087      	sub	sp, #28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	3360      	adds	r3, #96	; 0x60
 80011d4:	461a      	mov	r2, r3
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	431a      	orrs	r2, r3
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80011ee:	bf00      	nop
 80011f0:	371c      	adds	r7, #28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	695b      	ldr	r3, [r3, #20]
 8001208:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	431a      	orrs	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	615a      	str	r2, [r3, #20]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001230:	2b00      	cmp	r3, #0
 8001232:	d101      	bne.n	8001238 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001234:	2301      	movs	r3, #1
 8001236:	e000      	b.n	800123a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001246:	b480      	push	{r7}
 8001248:	b087      	sub	sp, #28
 800124a:	af00      	add	r7, sp, #0
 800124c:	60f8      	str	r0, [r7, #12]
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	3330      	adds	r3, #48	; 0x30
 8001256:	461a      	mov	r2, r3
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	0a1b      	lsrs	r3, r3, #8
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	f003 030c 	and.w	r3, r3, #12
 8001262:	4413      	add	r3, r2
 8001264:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	f003 031f 	and.w	r3, r3, #31
 8001270:	211f      	movs	r1, #31
 8001272:	fa01 f303 	lsl.w	r3, r1, r3
 8001276:	43db      	mvns	r3, r3
 8001278:	401a      	ands	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	0e9b      	lsrs	r3, r3, #26
 800127e:	f003 011f 	and.w	r1, r3, #31
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	f003 031f 	and.w	r3, r3, #31
 8001288:	fa01 f303 	lsl.w	r3, r1, r3
 800128c:	431a      	orrs	r2, r3
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001292:	bf00      	nop
 8001294:	371c      	adds	r7, #28
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80012b2:	2301      	movs	r3, #1
 80012b4:	e000      	b.n	80012b8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b087      	sub	sp, #28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	3314      	adds	r3, #20
 80012d4:	461a      	mov	r2, r3
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	0e5b      	lsrs	r3, r3, #25
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	4413      	add	r3, r2
 80012e2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	0d1b      	lsrs	r3, r3, #20
 80012ec:	f003 031f 	and.w	r3, r3, #31
 80012f0:	2107      	movs	r1, #7
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	401a      	ands	r2, r3
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	0d1b      	lsrs	r3, r3, #20
 80012fe:	f003 031f 	and.w	r3, r3, #31
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	fa01 f303 	lsl.w	r3, r1, r3
 8001308:	431a      	orrs	r2, r3
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800130e:	bf00      	nop
 8001310:	371c      	adds	r7, #28
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001334:	43db      	mvns	r3, r3
 8001336:	401a      	ands	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f003 0318 	and.w	r3, r3, #24
 800133e:	4908      	ldr	r1, [pc, #32]	; (8001360 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001340:	40d9      	lsrs	r1, r3
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	400b      	ands	r3, r1
 8001346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800134a:	431a      	orrs	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001352:	bf00      	nop
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	0007ffff 	.word	0x0007ffff

08001364 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f003 031f 	and.w	r3, r3, #31
}
 8001374:	4618      	mov	r0, r3
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80013ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	6093      	str	r3, [r2, #8]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013d4:	d101      	bne.n	80013da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013d6:	2301      	movs	r3, #1
 80013d8:	e000      	b.n	80013dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80013f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001420:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001424:	d101      	bne.n	800142a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001448:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800144c:	f043 0201 	orr.w	r2, r3, #1
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001470:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001474:	f043 0202 	orr.w	r2, r3, #2
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	2b01      	cmp	r3, #1
 800149a:	d101      	bne.n	80014a0 <LL_ADC_IsEnabled+0x18>
 800149c:	2301      	movs	r3, #1
 800149e:	e000      	b.n	80014a2 <LL_ADC_IsEnabled+0x1a>
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d101      	bne.n	80014c6 <LL_ADC_IsDisableOngoing+0x18>
 80014c2:	2301      	movs	r3, #1
 80014c4:	e000      	b.n	80014c8 <LL_ADC_IsDisableOngoing+0x1a>
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014e8:	f043 0204 	orr.w	r2, r3, #4
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	2b04      	cmp	r3, #4
 800150e:	d101      	bne.n	8001514 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001510:	2301      	movs	r3, #1
 8001512:	e000      	b.n	8001516 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	2b08      	cmp	r3, #8
 8001534:	d101      	bne.n	800153a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001536:	2301      	movs	r3, #1
 8001538:	e000      	b.n	800153c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b089      	sub	sp, #36	; 0x24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001550:	2300      	movs	r3, #0
 8001552:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e1a9      	b.n	80018b6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800156c:	2b00      	cmp	r3, #0
 800156e:	d109      	bne.n	8001584 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff fb53 	bl	8000c1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff19 	bl	80013c0 <LL_ADC_IsDeepPowerDownEnabled>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d004      	beq.n	800159e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff feff 	bl	800139c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff ff34 	bl	8001410 <LL_ADC_IsInternalRegulatorEnabled>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d115      	bne.n	80015da <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff ff18 	bl	80013e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015b8:	4b9c      	ldr	r3, [pc, #624]	; (800182c <HAL_ADC_Init+0x2e4>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	099b      	lsrs	r3, r3, #6
 80015be:	4a9c      	ldr	r2, [pc, #624]	; (8001830 <HAL_ADC_Init+0x2e8>)
 80015c0:	fba2 2303 	umull	r2, r3, r2, r3
 80015c4:	099b      	lsrs	r3, r3, #6
 80015c6:	3301      	adds	r3, #1
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015cc:	e002      	b.n	80015d4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	3b01      	subs	r3, #1
 80015d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f9      	bne.n	80015ce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff ff16 	bl	8001410 <LL_ADC_IsInternalRegulatorEnabled>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10d      	bne.n	8001606 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ee:	f043 0210 	orr.w	r2, r3, #16
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015fa:	f043 0201 	orr.w	r2, r3, #1
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff ff76 	bl	80014fc <LL_ADC_REG_IsConversionOngoing>
 8001610:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001616:	f003 0310 	and.w	r3, r3, #16
 800161a:	2b00      	cmp	r3, #0
 800161c:	f040 8142 	bne.w	80018a4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	2b00      	cmp	r3, #0
 8001624:	f040 813e 	bne.w	80018a4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800162c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001630:	f043 0202 	orr.w	r2, r3, #2
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff23 	bl	8001488 <LL_ADC_IsEnabled>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d141      	bne.n	80016cc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001650:	d004      	beq.n	800165c <HAL_ADC_Init+0x114>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a77      	ldr	r2, [pc, #476]	; (8001834 <HAL_ADC_Init+0x2ec>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d10f      	bne.n	800167c <HAL_ADC_Init+0x134>
 800165c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001660:	f7ff ff12 	bl	8001488 <LL_ADC_IsEnabled>
 8001664:	4604      	mov	r4, r0
 8001666:	4873      	ldr	r0, [pc, #460]	; (8001834 <HAL_ADC_Init+0x2ec>)
 8001668:	f7ff ff0e 	bl	8001488 <LL_ADC_IsEnabled>
 800166c:	4603      	mov	r3, r0
 800166e:	4323      	orrs	r3, r4
 8001670:	2b00      	cmp	r3, #0
 8001672:	bf0c      	ite	eq
 8001674:	2301      	moveq	r3, #1
 8001676:	2300      	movne	r3, #0
 8001678:	b2db      	uxtb	r3, r3
 800167a:	e012      	b.n	80016a2 <HAL_ADC_Init+0x15a>
 800167c:	486e      	ldr	r0, [pc, #440]	; (8001838 <HAL_ADC_Init+0x2f0>)
 800167e:	f7ff ff03 	bl	8001488 <LL_ADC_IsEnabled>
 8001682:	4604      	mov	r4, r0
 8001684:	486d      	ldr	r0, [pc, #436]	; (800183c <HAL_ADC_Init+0x2f4>)
 8001686:	f7ff feff 	bl	8001488 <LL_ADC_IsEnabled>
 800168a:	4603      	mov	r3, r0
 800168c:	431c      	orrs	r4, r3
 800168e:	486c      	ldr	r0, [pc, #432]	; (8001840 <HAL_ADC_Init+0x2f8>)
 8001690:	f7ff fefa 	bl	8001488 <LL_ADC_IsEnabled>
 8001694:	4603      	mov	r3, r0
 8001696:	4323      	orrs	r3, r4
 8001698:	2b00      	cmp	r3, #0
 800169a:	bf0c      	ite	eq
 800169c:	2301      	moveq	r3, #1
 800169e:	2300      	movne	r3, #0
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d012      	beq.n	80016cc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016ae:	d004      	beq.n	80016ba <HAL_ADC_Init+0x172>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a5f      	ldr	r2, [pc, #380]	; (8001834 <HAL_ADC_Init+0x2ec>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d101      	bne.n	80016be <HAL_ADC_Init+0x176>
 80016ba:	4a62      	ldr	r2, [pc, #392]	; (8001844 <HAL_ADC_Init+0x2fc>)
 80016bc:	e000      	b.n	80016c0 <HAL_ADC_Init+0x178>
 80016be:	4a62      	ldr	r2, [pc, #392]	; (8001848 <HAL_ADC_Init+0x300>)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	4619      	mov	r1, r3
 80016c6:	4610      	mov	r0, r2
 80016c8:	f7ff fcd8 	bl	800107c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	7f5b      	ldrb	r3, [r3, #29]
 80016d0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016d6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80016dc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80016e2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016ea:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016ec:	4313      	orrs	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d106      	bne.n	8001708 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fe:	3b01      	subs	r3, #1
 8001700:	045b      	lsls	r3, r3, #17
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170c:	2b00      	cmp	r3, #0
 800170e:	d009      	beq.n	8001724 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001714:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	68da      	ldr	r2, [r3, #12]
 800172a:	4b48      	ldr	r3, [pc, #288]	; (800184c <HAL_ADC_Init+0x304>)
 800172c:	4013      	ands	r3, r2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6812      	ldr	r2, [r2, #0]
 8001732:	69b9      	ldr	r1, [r7, #24]
 8001734:	430b      	orrs	r3, r1
 8001736:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	430a      	orrs	r2, r1
 800174c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fee5 	bl	8001522 <LL_ADC_INJ_IsConversionOngoing>
 8001758:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d17f      	bne.n	8001860 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d17c      	bne.n	8001860 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800176a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001772:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001774:	4313      	orrs	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001782:	f023 0302 	bic.w	r3, r3, #2
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6812      	ldr	r2, [r2, #0]
 800178a:	69b9      	ldr	r1, [r7, #24]
 800178c:	430b      	orrs	r3, r1
 800178e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d017      	beq.n	80017c8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	691a      	ldr	r2, [r3, #16]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80017a6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80017b0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80017b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	6911      	ldr	r1, [r2, #16]
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	6812      	ldr	r2, [r2, #0]
 80017c0:	430b      	orrs	r3, r1
 80017c2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80017c6:	e013      	b.n	80017f0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	691a      	ldr	r2, [r3, #16]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80017d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6812      	ldr	r2, [r2, #0]
 80017e4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80017e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017ec:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d12a      	bne.n	8001850 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001804:	f023 0304 	bic.w	r3, r3, #4
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001810:	4311      	orrs	r1, r2
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001816:	4311      	orrs	r1, r2
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800181c:	430a      	orrs	r2, r1
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f042 0201 	orr.w	r2, r2, #1
 8001828:	611a      	str	r2, [r3, #16]
 800182a:	e019      	b.n	8001860 <HAL_ADC_Init+0x318>
 800182c:	20000004 	.word	0x20000004
 8001830:	053e2d63 	.word	0x053e2d63
 8001834:	50000100 	.word	0x50000100
 8001838:	50000400 	.word	0x50000400
 800183c:	50000500 	.word	0x50000500
 8001840:	50000600 	.word	0x50000600
 8001844:	50000300 	.word	0x50000300
 8001848:	50000700 	.word	0x50000700
 800184c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	691a      	ldr	r2, [r3, #16]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 0201 	bic.w	r2, r2, #1
 800185e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d10c      	bne.n	8001882 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f023 010f 	bic.w	r1, r3, #15
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	1e5a      	subs	r2, r3, #1
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	430a      	orrs	r2, r1
 800187e:	631a      	str	r2, [r3, #48]	; 0x30
 8001880:	e007      	b.n	8001892 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f022 020f 	bic.w	r2, r2, #15
 8001890:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001896:	f023 0303 	bic.w	r3, r3, #3
 800189a:	f043 0201 	orr.w	r2, r3, #1
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80018a2:	e007      	b.n	80018b4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a8:	f043 0210 	orr.w	r2, r3, #16
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80018b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3724      	adds	r7, #36	; 0x24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd90      	pop	{r4, r7, pc}
 80018be:	bf00      	nop

080018c0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018d4:	d004      	beq.n	80018e0 <HAL_ADC_Start_DMA+0x20>
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a5a      	ldr	r2, [pc, #360]	; (8001a44 <HAL_ADC_Start_DMA+0x184>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d101      	bne.n	80018e4 <HAL_ADC_Start_DMA+0x24>
 80018e0:	4b59      	ldr	r3, [pc, #356]	; (8001a48 <HAL_ADC_Start_DMA+0x188>)
 80018e2:	e000      	b.n	80018e6 <HAL_ADC_Start_DMA+0x26>
 80018e4:	4b59      	ldr	r3, [pc, #356]	; (8001a4c <HAL_ADC_Start_DMA+0x18c>)
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff fd3c 	bl	8001364 <LL_ADC_GetMultimode>
 80018ec:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fe02 	bl	80014fc <LL_ADC_REG_IsConversionOngoing>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f040 809b 	bne.w	8001a36 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001906:	2b01      	cmp	r3, #1
 8001908:	d101      	bne.n	800190e <HAL_ADC_Start_DMA+0x4e>
 800190a:	2302      	movs	r3, #2
 800190c:	e096      	b.n	8001a3c <HAL_ADC_Start_DMA+0x17c>
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a4d      	ldr	r2, [pc, #308]	; (8001a50 <HAL_ADC_Start_DMA+0x190>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d008      	beq.n	8001932 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d005      	beq.n	8001932 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	2b05      	cmp	r3, #5
 800192a:	d002      	beq.n	8001932 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	2b09      	cmp	r3, #9
 8001930:	d17a      	bne.n	8001a28 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f000 ff60 	bl	80027f8 <ADC_Enable>
 8001938:	4603      	mov	r3, r0
 800193a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800193c:	7dfb      	ldrb	r3, [r7, #23]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d16d      	bne.n	8001a1e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001946:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800194a:	f023 0301 	bic.w	r3, r3, #1
 800194e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a3a      	ldr	r2, [pc, #232]	; (8001a44 <HAL_ADC_Start_DMA+0x184>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d009      	beq.n	8001974 <HAL_ADC_Start_DMA+0xb4>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a3b      	ldr	r2, [pc, #236]	; (8001a54 <HAL_ADC_Start_DMA+0x194>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d002      	beq.n	8001970 <HAL_ADC_Start_DMA+0xb0>
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	e003      	b.n	8001978 <HAL_ADC_Start_DMA+0xb8>
 8001970:	4b39      	ldr	r3, [pc, #228]	; (8001a58 <HAL_ADC_Start_DMA+0x198>)
 8001972:	e001      	b.n	8001978 <HAL_ADC_Start_DMA+0xb8>
 8001974:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	6812      	ldr	r2, [r2, #0]
 800197c:	4293      	cmp	r3, r2
 800197e:	d002      	beq.n	8001986 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d105      	bne.n	8001992 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001996:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d006      	beq.n	80019ac <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a2:	f023 0206 	bic.w	r2, r3, #6
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	661a      	str	r2, [r3, #96]	; 0x60
 80019aa:	e002      	b.n	80019b2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b6:	4a29      	ldr	r2, [pc, #164]	; (8001a5c <HAL_ADC_Start_DMA+0x19c>)
 80019b8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019be:	4a28      	ldr	r2, [pc, #160]	; (8001a60 <HAL_ADC_Start_DMA+0x1a0>)
 80019c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c6:	4a27      	ldr	r2, [pc, #156]	; (8001a64 <HAL_ADC_Start_DMA+0x1a4>)
 80019c8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	221c      	movs	r2, #28
 80019d0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f042 0210 	orr.w	r2, r2, #16
 80019e8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68da      	ldr	r2, [r3, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f042 0201 	orr.w	r2, r2, #1
 80019f8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	3340      	adds	r3, #64	; 0x40
 8001a04:	4619      	mov	r1, r3
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f001 fc25 	bl	8003258 <HAL_DMA_Start_IT>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff fd5c 	bl	80014d4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001a1c:	e00d      	b.n	8001a3a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001a26:	e008      	b.n	8001a3a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001a34:	e001      	b.n	8001a3a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a36:	2302      	movs	r3, #2
 8001a38:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	50000100 	.word	0x50000100
 8001a48:	50000300 	.word	0x50000300
 8001a4c:	50000700 	.word	0x50000700
 8001a50:	50000600 	.word	0x50000600
 8001a54:	50000500 	.word	0x50000500
 8001a58:	50000400 	.word	0x50000400
 8001a5c:	080029e3 	.word	0x080029e3
 8001a60:	08002abb 	.word	0x08002abb
 8001a64:	08002ad7 	.word	0x08002ad7

08001a68 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	; 0x28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001a70:	2300      	movs	r3, #0
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a8c:	d004      	beq.n	8001a98 <HAL_ADC_IRQHandler+0x30>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a8e      	ldr	r2, [pc, #568]	; (8001ccc <HAL_ADC_IRQHandler+0x264>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d101      	bne.n	8001a9c <HAL_ADC_IRQHandler+0x34>
 8001a98:	4b8d      	ldr	r3, [pc, #564]	; (8001cd0 <HAL_ADC_IRQHandler+0x268>)
 8001a9a:	e000      	b.n	8001a9e <HAL_ADC_IRQHandler+0x36>
 8001a9c:	4b8d      	ldr	r3, [pc, #564]	; (8001cd4 <HAL_ADC_IRQHandler+0x26c>)
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fc60 	bl	8001364 <LL_ADC_GetMultimode>
 8001aa4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d017      	beq.n	8001ae0 <HAL_ADC_IRQHandler+0x78>
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d012      	beq.n	8001ae0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001abe:	f003 0310 	and.w	r3, r3, #16
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d105      	bne.n	8001ad2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aca:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f001 f8f6 	bl	8002cc4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2202      	movs	r2, #2
 8001ade:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d004      	beq.n	8001af4 <HAL_ADC_IRQHandler+0x8c>
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d10b      	bne.n	8001b0c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 8094 	beq.w	8001c28 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	f003 0308 	and.w	r3, r3, #8
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 808e 	beq.w	8001c28 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b10:	f003 0310 	and.w	r3, r3, #16
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d105      	bne.n	8001b24 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b1c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fb79 	bl	8001220 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d072      	beq.n	8001c1a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a64      	ldr	r2, [pc, #400]	; (8001ccc <HAL_ADC_IRQHandler+0x264>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d009      	beq.n	8001b52 <HAL_ADC_IRQHandler+0xea>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a65      	ldr	r2, [pc, #404]	; (8001cd8 <HAL_ADC_IRQHandler+0x270>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d002      	beq.n	8001b4e <HAL_ADC_IRQHandler+0xe6>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	e003      	b.n	8001b56 <HAL_ADC_IRQHandler+0xee>
 8001b4e:	4b63      	ldr	r3, [pc, #396]	; (8001cdc <HAL_ADC_IRQHandler+0x274>)
 8001b50:	e001      	b.n	8001b56 <HAL_ADC_IRQHandler+0xee>
 8001b52:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	6812      	ldr	r2, [r2, #0]
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d008      	beq.n	8001b70 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d005      	beq.n	8001b70 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	2b05      	cmp	r3, #5
 8001b68:	d002      	beq.n	8001b70 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2b09      	cmp	r3, #9
 8001b6e:	d104      	bne.n	8001b7a <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	623b      	str	r3, [r7, #32]
 8001b78:	e014      	b.n	8001ba4 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a53      	ldr	r2, [pc, #332]	; (8001ccc <HAL_ADC_IRQHandler+0x264>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d009      	beq.n	8001b98 <HAL_ADC_IRQHandler+0x130>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a53      	ldr	r2, [pc, #332]	; (8001cd8 <HAL_ADC_IRQHandler+0x270>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d002      	beq.n	8001b94 <HAL_ADC_IRQHandler+0x12c>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	e003      	b.n	8001b9c <HAL_ADC_IRQHandler+0x134>
 8001b94:	4b51      	ldr	r3, [pc, #324]	; (8001cdc <HAL_ADC_IRQHandler+0x274>)
 8001b96:	e001      	b.n	8001b9c <HAL_ADC_IRQHandler+0x134>
 8001b98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b9c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001ba4:	6a3b      	ldr	r3, [r7, #32]
 8001ba6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d135      	bne.n	8001c1a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0308 	and.w	r3, r3, #8
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	d12e      	bne.n	8001c1a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fc9b 	bl	80014fc <LL_ADC_REG_IsConversionOngoing>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d11a      	bne.n	8001c02 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 020c 	bic.w	r2, r2, #12
 8001bda:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d112      	bne.n	8001c1a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf8:	f043 0201 	orr.w	r2, r3, #1
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c00:	e00b      	b.n	8001c1a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c06:	f043 0210 	orr.w	r2, r3, #16
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c12:	f043 0201 	orr.w	r2, r3, #1
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f984 	bl	8001f28 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	220c      	movs	r2, #12
 8001c26:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f003 0320 	and.w	r3, r3, #32
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d004      	beq.n	8001c3c <HAL_ADC_IRQHandler+0x1d4>
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	f003 0320 	and.w	r3, r3, #32
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d10b      	bne.n	8001c54 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 80b3 	beq.w	8001dae <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 80ad 	beq.w	8001dae <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c58:	f003 0310 	and.w	r3, r3, #16
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d105      	bne.n	8001c6c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c64:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff fb14 	bl	800129e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001c76:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff facf 	bl	8001220 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c82:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a10      	ldr	r2, [pc, #64]	; (8001ccc <HAL_ADC_IRQHandler+0x264>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d009      	beq.n	8001ca2 <HAL_ADC_IRQHandler+0x23a>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a11      	ldr	r2, [pc, #68]	; (8001cd8 <HAL_ADC_IRQHandler+0x270>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d002      	beq.n	8001c9e <HAL_ADC_IRQHandler+0x236>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	e003      	b.n	8001ca6 <HAL_ADC_IRQHandler+0x23e>
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <HAL_ADC_IRQHandler+0x274>)
 8001ca0:	e001      	b.n	8001ca6 <HAL_ADC_IRQHandler+0x23e>
 8001ca2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6812      	ldr	r2, [r2, #0]
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d008      	beq.n	8001cc0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	2b06      	cmp	r3, #6
 8001cb8:	d002      	beq.n	8001cc0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	2b07      	cmp	r3, #7
 8001cbe:	d10f      	bne.n	8001ce0 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	623b      	str	r3, [r7, #32]
 8001cc8:	e01f      	b.n	8001d0a <HAL_ADC_IRQHandler+0x2a2>
 8001cca:	bf00      	nop
 8001ccc:	50000100 	.word	0x50000100
 8001cd0:	50000300 	.word	0x50000300
 8001cd4:	50000700 	.word	0x50000700
 8001cd8:	50000500 	.word	0x50000500
 8001cdc:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a8b      	ldr	r2, [pc, #556]	; (8001f14 <HAL_ADC_IRQHandler+0x4ac>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d009      	beq.n	8001cfe <HAL_ADC_IRQHandler+0x296>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a8a      	ldr	r2, [pc, #552]	; (8001f18 <HAL_ADC_IRQHandler+0x4b0>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d002      	beq.n	8001cfa <HAL_ADC_IRQHandler+0x292>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	e003      	b.n	8001d02 <HAL_ADC_IRQHandler+0x29a>
 8001cfa:	4b88      	ldr	r3, [pc, #544]	; (8001f1c <HAL_ADC_IRQHandler+0x4b4>)
 8001cfc:	e001      	b.n	8001d02 <HAL_ADC_IRQHandler+0x29a>
 8001cfe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d02:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d047      	beq.n	8001da0 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d007      	beq.n	8001d2a <HAL_ADC_IRQHandler+0x2c2>
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d03f      	beq.n	8001da0 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001d20:	6a3b      	ldr	r3, [r7, #32]
 8001d22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d13a      	bne.n	8001da0 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d34:	2b40      	cmp	r3, #64	; 0x40
 8001d36:	d133      	bne.n	8001da0 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001d38:	6a3b      	ldr	r3, [r7, #32]
 8001d3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d12e      	bne.n	8001da0 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff fbeb 	bl	8001522 <LL_ADC_INJ_IsConversionOngoing>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d11a      	bne.n	8001d88 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d60:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d112      	bne.n	8001da0 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7e:	f043 0201 	orr.w	r2, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d86:	e00b      	b.n	8001da0 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8c:	f043 0210 	orr.w	r2, r3, #16
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d98:	f043 0201 	orr.w	r2, r3, #1
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 ff67 	bl	8002c74 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2260      	movs	r2, #96	; 0x60
 8001dac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d011      	beq.n	8001ddc <HAL_ADC_IRQHandler+0x374>
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00c      	beq.n	8001ddc <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f8be 	bl	8001f50 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2280      	movs	r2, #128	; 0x80
 8001dda:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d012      	beq.n	8001e0c <HAL_ADC_IRQHandler+0x3a4>
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00d      	beq.n	8001e0c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 ff4d 	bl	8002c9c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e0a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d012      	beq.n	8001e3c <HAL_ADC_IRQHandler+0x3d4>
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00d      	beq.n	8001e3c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e24:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 ff3f 	bl	8002cb0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e3a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f003 0310 	and.w	r3, r3, #16
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d043      	beq.n	8001ece <HAL_ADC_IRQHandler+0x466>
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	f003 0310 	and.w	r3, r3, #16
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d03e      	beq.n	8001ece <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d102      	bne.n	8001e5e <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e5c:	e021      	b.n	8001ea2 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d015      	beq.n	8001e90 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e6c:	d004      	beq.n	8001e78 <HAL_ADC_IRQHandler+0x410>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a28      	ldr	r2, [pc, #160]	; (8001f14 <HAL_ADC_IRQHandler+0x4ac>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d101      	bne.n	8001e7c <HAL_ADC_IRQHandler+0x414>
 8001e78:	4b29      	ldr	r3, [pc, #164]	; (8001f20 <HAL_ADC_IRQHandler+0x4b8>)
 8001e7a:	e000      	b.n	8001e7e <HAL_ADC_IRQHandler+0x416>
 8001e7c:	4b29      	ldr	r3, [pc, #164]	; (8001f24 <HAL_ADC_IRQHandler+0x4bc>)
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fa7e 	bl	8001380 <LL_ADC_GetMultiDMATransfer>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00b      	beq.n	8001ea2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e8e:	e008      	b.n	8001ea2 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d10e      	bne.n	8001ec6 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eb8:	f043 0202 	orr.w	r2, r3, #2
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f84f 	bl	8001f64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2210      	movs	r2, #16
 8001ecc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d018      	beq.n	8001f0a <HAL_ADC_IRQHandler+0x4a2>
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d013      	beq.n	8001f0a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ef2:	f043 0208 	orr.w	r2, r3, #8
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f02:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 febf 	bl	8002c88 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001f0a:	bf00      	nop
 8001f0c:	3728      	adds	r7, #40	; 0x28
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	50000100 	.word	0x50000100
 8001f18:	50000500 	.word	0x50000500
 8001f1c:	50000400 	.word	0x50000400
 8001f20:	50000300 	.word	0x50000300
 8001f24:	50000700 	.word	0x50000700

08001f28 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b0b6      	sub	sp, #216	; 0xd8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d102      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x24>
 8001f96:	2302      	movs	r3, #2
 8001f98:	f000 bc13 	b.w	80027c2 <HAL_ADC_ConfigChannel+0x84a>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff faa7 	bl	80014fc <LL_ADC_REG_IsConversionOngoing>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f040 83f3 	bne.w	800279c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6818      	ldr	r0, [r3, #0]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	6859      	ldr	r1, [r3, #4]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	f7ff f93f 	bl	8001246 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff fa95 	bl	80014fc <LL_ADC_REG_IsConversionOngoing>
 8001fd2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff faa1 	bl	8001522 <LL_ADC_INJ_IsConversionOngoing>
 8001fe0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fe4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f040 81d9 	bne.w	80023a0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f040 81d4 	bne.w	80023a0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002000:	d10f      	bne.n	8002022 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6818      	ldr	r0, [r3, #0]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2200      	movs	r2, #0
 800200c:	4619      	mov	r1, r3
 800200e:	f7ff f959 	bl	80012c4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff f8ed 	bl	80011fa <LL_ADC_SetSamplingTimeCommonConfig>
 8002020:	e00e      	b.n	8002040 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6818      	ldr	r0, [r3, #0]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	6819      	ldr	r1, [r3, #0]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	461a      	mov	r2, r3
 8002030:	f7ff f948 	bl	80012c4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2100      	movs	r1, #0
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff f8dd 	bl	80011fa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	695a      	ldr	r2, [r3, #20]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	08db      	lsrs	r3, r3, #3
 800204c:	f003 0303 	and.w	r3, r3, #3
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	2b04      	cmp	r3, #4
 8002060:	d022      	beq.n	80020a8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6818      	ldr	r0, [r3, #0]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	6919      	ldr	r1, [r3, #16]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002072:	f7ff f837 	bl	80010e4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6818      	ldr	r0, [r3, #0]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	6919      	ldr	r1, [r3, #16]
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	461a      	mov	r2, r3
 8002084:	f7ff f883 	bl	800118e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6818      	ldr	r0, [r3, #0]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002094:	2b01      	cmp	r3, #1
 8002096:	d102      	bne.n	800209e <HAL_ADC_ConfigChannel+0x126>
 8002098:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800209c:	e000      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x128>
 800209e:	2300      	movs	r3, #0
 80020a0:	461a      	mov	r2, r3
 80020a2:	f7ff f88f 	bl	80011c4 <LL_ADC_SetOffsetSaturation>
 80020a6:	e17b      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2100      	movs	r1, #0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff f83c 	bl	800112c <LL_ADC_GetOffsetChannel>
 80020b4:	4603      	mov	r3, r0
 80020b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10a      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x15c>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2100      	movs	r1, #0
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff f831 	bl	800112c <LL_ADC_GetOffsetChannel>
 80020ca:	4603      	mov	r3, r0
 80020cc:	0e9b      	lsrs	r3, r3, #26
 80020ce:	f003 021f 	and.w	r2, r3, #31
 80020d2:	e01e      	b.n	8002112 <HAL_ADC_ConfigChannel+0x19a>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2100      	movs	r1, #0
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff f826 	bl	800112c <LL_ADC_GetOffsetChannel>
 80020e0:	4603      	mov	r3, r0
 80020e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80020ea:	fa93 f3a3 	rbit	r3, r3
 80020ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80020f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80020fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002102:	2320      	movs	r3, #32
 8002104:	e004      	b.n	8002110 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002106:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800210a:	fab3 f383 	clz	r3, r3
 800210e:	b2db      	uxtb	r3, r3
 8002110:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800211a:	2b00      	cmp	r3, #0
 800211c:	d105      	bne.n	800212a <HAL_ADC_ConfigChannel+0x1b2>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	0e9b      	lsrs	r3, r3, #26
 8002124:	f003 031f 	and.w	r3, r3, #31
 8002128:	e018      	b.n	800215c <HAL_ADC_ConfigChannel+0x1e4>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002132:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002136:	fa93 f3a3 	rbit	r3, r3
 800213a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800213e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002142:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002146:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800214e:	2320      	movs	r3, #32
 8002150:	e004      	b.n	800215c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002152:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002156:	fab3 f383 	clz	r3, r3
 800215a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800215c:	429a      	cmp	r2, r3
 800215e:	d106      	bne.n	800216e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2200      	movs	r2, #0
 8002166:	2100      	movs	r1, #0
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe fff5 	bl	8001158 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2101      	movs	r1, #1
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe ffd9 	bl	800112c <LL_ADC_GetOffsetChannel>
 800217a:	4603      	mov	r3, r0
 800217c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10a      	bne.n	800219a <HAL_ADC_ConfigChannel+0x222>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2101      	movs	r1, #1
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe ffce 	bl	800112c <LL_ADC_GetOffsetChannel>
 8002190:	4603      	mov	r3, r0
 8002192:	0e9b      	lsrs	r3, r3, #26
 8002194:	f003 021f 	and.w	r2, r3, #31
 8002198:	e01e      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x260>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2101      	movs	r1, #1
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe ffc3 	bl	800112c <LL_ADC_GetOffsetChannel>
 80021a6:	4603      	mov	r3, r0
 80021a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80021b0:	fa93 f3a3 	rbit	r3, r3
 80021b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80021b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80021bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80021c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80021c8:	2320      	movs	r3, #32
 80021ca:	e004      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80021cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80021d0:	fab3 f383 	clz	r3, r3
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d105      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x278>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	0e9b      	lsrs	r3, r3, #26
 80021ea:	f003 031f 	and.w	r3, r3, #31
 80021ee:	e018      	b.n	8002222 <HAL_ADC_ConfigChannel+0x2aa>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021fc:	fa93 f3a3 	rbit	r3, r3
 8002200:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002204:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002208:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800220c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002214:	2320      	movs	r3, #32
 8002216:	e004      	b.n	8002222 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002218:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800221c:	fab3 f383 	clz	r3, r3
 8002220:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002222:	429a      	cmp	r2, r3
 8002224:	d106      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2200      	movs	r2, #0
 800222c:	2101      	movs	r1, #1
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe ff92 	bl	8001158 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2102      	movs	r1, #2
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe ff76 	bl	800112c <LL_ADC_GetOffsetChannel>
 8002240:	4603      	mov	r3, r0
 8002242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10a      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x2e8>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2102      	movs	r1, #2
 8002250:	4618      	mov	r0, r3
 8002252:	f7fe ff6b 	bl	800112c <LL_ADC_GetOffsetChannel>
 8002256:	4603      	mov	r3, r0
 8002258:	0e9b      	lsrs	r3, r3, #26
 800225a:	f003 021f 	and.w	r2, r3, #31
 800225e:	e01e      	b.n	800229e <HAL_ADC_ConfigChannel+0x326>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2102      	movs	r1, #2
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe ff60 	bl	800112c <LL_ADC_GetOffsetChannel>
 800226c:	4603      	mov	r3, r0
 800226e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002276:	fa93 f3a3 	rbit	r3, r3
 800227a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800227e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002282:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002286:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800228e:	2320      	movs	r3, #32
 8002290:	e004      	b.n	800229c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002292:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002296:	fab3 f383 	clz	r3, r3
 800229a:	b2db      	uxtb	r3, r3
 800229c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d105      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x33e>
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	0e9b      	lsrs	r3, r3, #26
 80022b0:	f003 031f 	and.w	r3, r3, #31
 80022b4:	e016      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x36c>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022c2:	fa93 f3a3 	rbit	r3, r3
 80022c6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80022c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80022ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80022d6:	2320      	movs	r3, #32
 80022d8:	e004      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80022da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022de:	fab3 f383 	clz	r3, r3
 80022e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d106      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2200      	movs	r2, #0
 80022ee:	2102      	movs	r1, #2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fe ff31 	bl	8001158 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2103      	movs	r1, #3
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe ff15 	bl	800112c <LL_ADC_GetOffsetChannel>
 8002302:	4603      	mov	r3, r0
 8002304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10a      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x3aa>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2103      	movs	r1, #3
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe ff0a 	bl	800112c <LL_ADC_GetOffsetChannel>
 8002318:	4603      	mov	r3, r0
 800231a:	0e9b      	lsrs	r3, r3, #26
 800231c:	f003 021f 	and.w	r2, r3, #31
 8002320:	e017      	b.n	8002352 <HAL_ADC_ConfigChannel+0x3da>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2103      	movs	r1, #3
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe feff 	bl	800112c <LL_ADC_GetOffsetChannel>
 800232e:	4603      	mov	r3, r0
 8002330:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002332:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002334:	fa93 f3a3 	rbit	r3, r3
 8002338:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800233a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800233c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800233e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002344:	2320      	movs	r3, #32
 8002346:	e003      	b.n	8002350 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002348:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800234a:	fab3 f383 	clz	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235a:	2b00      	cmp	r3, #0
 800235c:	d105      	bne.n	800236a <HAL_ADC_ConfigChannel+0x3f2>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	0e9b      	lsrs	r3, r3, #26
 8002364:	f003 031f 	and.w	r3, r3, #31
 8002368:	e011      	b.n	800238e <HAL_ADC_ConfigChannel+0x416>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002370:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002372:	fa93 f3a3 	rbit	r3, r3
 8002376:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002378:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800237a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800237c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002382:	2320      	movs	r3, #32
 8002384:	e003      	b.n	800238e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002388:	fab3 f383 	clz	r3, r3
 800238c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800238e:	429a      	cmp	r2, r3
 8002390:	d106      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2200      	movs	r2, #0
 8002398:	2103      	movs	r1, #3
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe fedc 	bl	8001158 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff f86f 	bl	8001488 <LL_ADC_IsEnabled>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f040 813d 	bne.w	800262c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	6819      	ldr	r1, [r3, #0]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	461a      	mov	r2, r3
 80023c0:	f7fe ffac 	bl	800131c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	4aa2      	ldr	r2, [pc, #648]	; (8002654 <HAL_ADC_ConfigChannel+0x6dc>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	f040 812e 	bne.w	800262c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10b      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x480>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	0e9b      	lsrs	r3, r3, #26
 80023e6:	3301      	adds	r3, #1
 80023e8:	f003 031f 	and.w	r3, r3, #31
 80023ec:	2b09      	cmp	r3, #9
 80023ee:	bf94      	ite	ls
 80023f0:	2301      	movls	r3, #1
 80023f2:	2300      	movhi	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	e019      	b.n	800242c <HAL_ADC_ConfigChannel+0x4b4>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002400:	fa93 f3a3 	rbit	r3, r3
 8002404:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002406:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002408:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800240a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002410:	2320      	movs	r3, #32
 8002412:	e003      	b.n	800241c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002414:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002416:	fab3 f383 	clz	r3, r3
 800241a:	b2db      	uxtb	r3, r3
 800241c:	3301      	adds	r3, #1
 800241e:	f003 031f 	and.w	r3, r3, #31
 8002422:	2b09      	cmp	r3, #9
 8002424:	bf94      	ite	ls
 8002426:	2301      	movls	r3, #1
 8002428:	2300      	movhi	r3, #0
 800242a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800242c:	2b00      	cmp	r3, #0
 800242e:	d079      	beq.n	8002524 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002438:	2b00      	cmp	r3, #0
 800243a:	d107      	bne.n	800244c <HAL_ADC_ConfigChannel+0x4d4>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	0e9b      	lsrs	r3, r3, #26
 8002442:	3301      	adds	r3, #1
 8002444:	069b      	lsls	r3, r3, #26
 8002446:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800244a:	e015      	b.n	8002478 <HAL_ADC_ConfigChannel+0x500>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002454:	fa93 f3a3 	rbit	r3, r3
 8002458:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800245a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800245c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800245e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002464:	2320      	movs	r3, #32
 8002466:	e003      	b.n	8002470 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800246a:	fab3 f383 	clz	r3, r3
 800246e:	b2db      	uxtb	r3, r3
 8002470:	3301      	adds	r3, #1
 8002472:	069b      	lsls	r3, r3, #26
 8002474:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002480:	2b00      	cmp	r3, #0
 8002482:	d109      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x520>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	0e9b      	lsrs	r3, r3, #26
 800248a:	3301      	adds	r3, #1
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	2101      	movs	r1, #1
 8002492:	fa01 f303 	lsl.w	r3, r1, r3
 8002496:	e017      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x550>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024a0:	fa93 f3a3 	rbit	r3, r3
 80024a4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80024a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80024aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80024b0:	2320      	movs	r3, #32
 80024b2:	e003      	b.n	80024bc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80024b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024b6:	fab3 f383 	clz	r3, r3
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	3301      	adds	r3, #1
 80024be:	f003 031f 	and.w	r3, r3, #31
 80024c2:	2101      	movs	r1, #1
 80024c4:	fa01 f303 	lsl.w	r3, r1, r3
 80024c8:	ea42 0103 	orr.w	r1, r2, r3
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10a      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x576>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	0e9b      	lsrs	r3, r3, #26
 80024de:	3301      	adds	r3, #1
 80024e0:	f003 021f 	and.w	r2, r3, #31
 80024e4:	4613      	mov	r3, r2
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	4413      	add	r3, r2
 80024ea:	051b      	lsls	r3, r3, #20
 80024ec:	e018      	b.n	8002520 <HAL_ADC_ConfigChannel+0x5a8>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f6:	fa93 f3a3 	rbit	r3, r3
 80024fa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80024fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002506:	2320      	movs	r3, #32
 8002508:	e003      	b.n	8002512 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800250a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800250c:	fab3 f383 	clz	r3, r3
 8002510:	b2db      	uxtb	r3, r3
 8002512:	3301      	adds	r3, #1
 8002514:	f003 021f 	and.w	r2, r3, #31
 8002518:	4613      	mov	r3, r2
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	4413      	add	r3, r2
 800251e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002520:	430b      	orrs	r3, r1
 8002522:	e07e      	b.n	8002622 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800252c:	2b00      	cmp	r3, #0
 800252e:	d107      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x5c8>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	0e9b      	lsrs	r3, r3, #26
 8002536:	3301      	adds	r3, #1
 8002538:	069b      	lsls	r3, r3, #26
 800253a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800253e:	e015      	b.n	800256c <HAL_ADC_ConfigChannel+0x5f4>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002548:	fa93 f3a3 	rbit	r3, r3
 800254c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800254e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002550:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002558:	2320      	movs	r3, #32
 800255a:	e003      	b.n	8002564 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800255c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255e:	fab3 f383 	clz	r3, r3
 8002562:	b2db      	uxtb	r3, r3
 8002564:	3301      	adds	r3, #1
 8002566:	069b      	lsls	r3, r3, #26
 8002568:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002574:	2b00      	cmp	r3, #0
 8002576:	d109      	bne.n	800258c <HAL_ADC_ConfigChannel+0x614>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	0e9b      	lsrs	r3, r3, #26
 800257e:	3301      	adds	r3, #1
 8002580:	f003 031f 	and.w	r3, r3, #31
 8002584:	2101      	movs	r1, #1
 8002586:	fa01 f303 	lsl.w	r3, r1, r3
 800258a:	e017      	b.n	80025bc <HAL_ADC_ConfigChannel+0x644>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002592:	6a3b      	ldr	r3, [r7, #32]
 8002594:	fa93 f3a3 	rbit	r3, r3
 8002598:	61fb      	str	r3, [r7, #28]
  return result;
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80025a4:	2320      	movs	r3, #32
 80025a6:	e003      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	fab3 f383 	clz	r3, r3
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	3301      	adds	r3, #1
 80025b2:	f003 031f 	and.w	r3, r3, #31
 80025b6:	2101      	movs	r1, #1
 80025b8:	fa01 f303 	lsl.w	r3, r1, r3
 80025bc:	ea42 0103 	orr.w	r1, r2, r3
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10d      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x670>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	0e9b      	lsrs	r3, r3, #26
 80025d2:	3301      	adds	r3, #1
 80025d4:	f003 021f 	and.w	r2, r3, #31
 80025d8:	4613      	mov	r3, r2
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4413      	add	r3, r2
 80025de:	3b1e      	subs	r3, #30
 80025e0:	051b      	lsls	r3, r3, #20
 80025e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025e6:	e01b      	b.n	8002620 <HAL_ADC_ConfigChannel+0x6a8>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	fa93 f3a3 	rbit	r3, r3
 80025f4:	613b      	str	r3, [r7, #16]
  return result;
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002600:	2320      	movs	r3, #32
 8002602:	e003      	b.n	800260c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	fab3 f383 	clz	r3, r3
 800260a:	b2db      	uxtb	r3, r3
 800260c:	3301      	adds	r3, #1
 800260e:	f003 021f 	and.w	r2, r3, #31
 8002612:	4613      	mov	r3, r2
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4413      	add	r3, r2
 8002618:	3b1e      	subs	r3, #30
 800261a:	051b      	lsls	r3, r3, #20
 800261c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002620:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002626:	4619      	mov	r1, r3
 8002628:	f7fe fe4c 	bl	80012c4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4b09      	ldr	r3, [pc, #36]	; (8002658 <HAL_ADC_ConfigChannel+0x6e0>)
 8002632:	4013      	ands	r3, r2
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 80be 	beq.w	80027b6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002642:	d004      	beq.n	800264e <HAL_ADC_ConfigChannel+0x6d6>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a04      	ldr	r2, [pc, #16]	; (800265c <HAL_ADC_ConfigChannel+0x6e4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d10a      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x6ec>
 800264e:	4b04      	ldr	r3, [pc, #16]	; (8002660 <HAL_ADC_ConfigChannel+0x6e8>)
 8002650:	e009      	b.n	8002666 <HAL_ADC_ConfigChannel+0x6ee>
 8002652:	bf00      	nop
 8002654:	407f0000 	.word	0x407f0000
 8002658:	80080000 	.word	0x80080000
 800265c:	50000100 	.word	0x50000100
 8002660:	50000300 	.word	0x50000300
 8002664:	4b59      	ldr	r3, [pc, #356]	; (80027cc <HAL_ADC_ConfigChannel+0x854>)
 8002666:	4618      	mov	r0, r3
 8002668:	f7fe fd2e 	bl	80010c8 <LL_ADC_GetCommonPathInternalCh>
 800266c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a56      	ldr	r2, [pc, #344]	; (80027d0 <HAL_ADC_ConfigChannel+0x858>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d004      	beq.n	8002684 <HAL_ADC_ConfigChannel+0x70c>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a55      	ldr	r2, [pc, #340]	; (80027d4 <HAL_ADC_ConfigChannel+0x85c>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d13a      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002684:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002688:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d134      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002698:	d005      	beq.n	80026a6 <HAL_ADC_ConfigChannel+0x72e>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a4e      	ldr	r2, [pc, #312]	; (80027d8 <HAL_ADC_ConfigChannel+0x860>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	f040 8085 	bne.w	80027b0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026ae:	d004      	beq.n	80026ba <HAL_ADC_ConfigChannel+0x742>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a49      	ldr	r2, [pc, #292]	; (80027dc <HAL_ADC_ConfigChannel+0x864>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d101      	bne.n	80026be <HAL_ADC_ConfigChannel+0x746>
 80026ba:	4a49      	ldr	r2, [pc, #292]	; (80027e0 <HAL_ADC_ConfigChannel+0x868>)
 80026bc:	e000      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x748>
 80026be:	4a43      	ldr	r2, [pc, #268]	; (80027cc <HAL_ADC_ConfigChannel+0x854>)
 80026c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026c8:	4619      	mov	r1, r3
 80026ca:	4610      	mov	r0, r2
 80026cc:	f7fe fce9 	bl	80010a2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026d0:	4b44      	ldr	r3, [pc, #272]	; (80027e4 <HAL_ADC_ConfigChannel+0x86c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	099b      	lsrs	r3, r3, #6
 80026d6:	4a44      	ldr	r2, [pc, #272]	; (80027e8 <HAL_ADC_ConfigChannel+0x870>)
 80026d8:	fba2 2303 	umull	r2, r3, r2, r3
 80026dc:	099b      	lsrs	r3, r3, #6
 80026de:	1c5a      	adds	r2, r3, #1
 80026e0:	4613      	mov	r3, r2
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4413      	add	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80026ea:	e002      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f9      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026f8:	e05a      	b.n	80027b0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a3b      	ldr	r2, [pc, #236]	; (80027ec <HAL_ADC_ConfigChannel+0x874>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d125      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002704:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002708:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d11f      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a31      	ldr	r2, [pc, #196]	; (80027dc <HAL_ADC_ConfigChannel+0x864>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d104      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x7ac>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a34      	ldr	r2, [pc, #208]	; (80027f0 <HAL_ADC_ConfigChannel+0x878>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d047      	beq.n	80027b4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800272c:	d004      	beq.n	8002738 <HAL_ADC_ConfigChannel+0x7c0>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a2a      	ldr	r2, [pc, #168]	; (80027dc <HAL_ADC_ConfigChannel+0x864>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d101      	bne.n	800273c <HAL_ADC_ConfigChannel+0x7c4>
 8002738:	4a29      	ldr	r2, [pc, #164]	; (80027e0 <HAL_ADC_ConfigChannel+0x868>)
 800273a:	e000      	b.n	800273e <HAL_ADC_ConfigChannel+0x7c6>
 800273c:	4a23      	ldr	r2, [pc, #140]	; (80027cc <HAL_ADC_ConfigChannel+0x854>)
 800273e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002746:	4619      	mov	r1, r3
 8002748:	4610      	mov	r0, r2
 800274a:	f7fe fcaa 	bl	80010a2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800274e:	e031      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a27      	ldr	r2, [pc, #156]	; (80027f4 <HAL_ADC_ConfigChannel+0x87c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d12d      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800275a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800275e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d127      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a1c      	ldr	r2, [pc, #112]	; (80027dc <HAL_ADC_ConfigChannel+0x864>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d022      	beq.n	80027b6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002778:	d004      	beq.n	8002784 <HAL_ADC_ConfigChannel+0x80c>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a17      	ldr	r2, [pc, #92]	; (80027dc <HAL_ADC_ConfigChannel+0x864>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d101      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x810>
 8002784:	4a16      	ldr	r2, [pc, #88]	; (80027e0 <HAL_ADC_ConfigChannel+0x868>)
 8002786:	e000      	b.n	800278a <HAL_ADC_ConfigChannel+0x812>
 8002788:	4a10      	ldr	r2, [pc, #64]	; (80027cc <HAL_ADC_ConfigChannel+0x854>)
 800278a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800278e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002792:	4619      	mov	r1, r3
 8002794:	4610      	mov	r0, r2
 8002796:	f7fe fc84 	bl	80010a2 <LL_ADC_SetCommonPathInternalCh>
 800279a:	e00c      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a0:	f043 0220 	orr.w	r2, r3, #32
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80027ae:	e002      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027b0:	bf00      	nop
 80027b2:	e000      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80027be:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	37d8      	adds	r7, #216	; 0xd8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	50000700 	.word	0x50000700
 80027d0:	c3210000 	.word	0xc3210000
 80027d4:	90c00010 	.word	0x90c00010
 80027d8:	50000600 	.word	0x50000600
 80027dc:	50000100 	.word	0x50000100
 80027e0:	50000300 	.word	0x50000300
 80027e4:	20000004 	.word	0x20000004
 80027e8:	053e2d63 	.word	0x053e2d63
 80027ec:	c7520000 	.word	0xc7520000
 80027f0:	50000500 	.word	0x50000500
 80027f4:	cb840000 	.word	0xcb840000

080027f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002800:	2300      	movs	r3, #0
 8002802:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f7fe fe3d 	bl	8001488 <LL_ADC_IsEnabled>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d176      	bne.n	8002902 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	4b3c      	ldr	r3, [pc, #240]	; (800290c <ADC_Enable+0x114>)
 800281c:	4013      	ands	r3, r2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00d      	beq.n	800283e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002826:	f043 0210 	orr.w	r2, r3, #16
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002832:	f043 0201 	orr.w	r2, r3, #1
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e062      	b.n	8002904 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7fe fdf8 	bl	8001438 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002850:	d004      	beq.n	800285c <ADC_Enable+0x64>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a2e      	ldr	r2, [pc, #184]	; (8002910 <ADC_Enable+0x118>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d101      	bne.n	8002860 <ADC_Enable+0x68>
 800285c:	4b2d      	ldr	r3, [pc, #180]	; (8002914 <ADC_Enable+0x11c>)
 800285e:	e000      	b.n	8002862 <ADC_Enable+0x6a>
 8002860:	4b2d      	ldr	r3, [pc, #180]	; (8002918 <ADC_Enable+0x120>)
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe fc30 	bl	80010c8 <LL_ADC_GetCommonPathInternalCh>
 8002868:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800286a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800286e:	2b00      	cmp	r3, #0
 8002870:	d013      	beq.n	800289a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002872:	4b2a      	ldr	r3, [pc, #168]	; (800291c <ADC_Enable+0x124>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	099b      	lsrs	r3, r3, #6
 8002878:	4a29      	ldr	r2, [pc, #164]	; (8002920 <ADC_Enable+0x128>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	099b      	lsrs	r3, r3, #6
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	4613      	mov	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4413      	add	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800288c:	e002      	b.n	8002894 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	3b01      	subs	r3, #1
 8002892:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f9      	bne.n	800288e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800289a:	f7fe fbe3 	bl	8001064 <HAL_GetTick>
 800289e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028a0:	e028      	b.n	80028f4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fe fdee 	bl	8001488 <LL_ADC_IsEnabled>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d104      	bne.n	80028bc <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe fdbe 	bl	8001438 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028bc:	f7fe fbd2 	bl	8001064 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d914      	bls.n	80028f4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d00d      	beq.n	80028f4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028dc:	f043 0210 	orr.w	r2, r3, #16
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e8:	f043 0201 	orr.w	r2, r3, #1
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e007      	b.n	8002904 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d1cf      	bne.n	80028a2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	8000003f 	.word	0x8000003f
 8002910:	50000100 	.word	0x50000100
 8002914:	50000300 	.word	0x50000300
 8002918:	50000700 	.word	0x50000700
 800291c:	20000004 	.word	0x20000004
 8002920:	053e2d63 	.word	0x053e2d63

08002924 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f7fe fdbc 	bl	80014ae <LL_ADC_IsDisableOngoing>
 8002936:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f7fe fda3 	bl	8001488 <LL_ADC_IsEnabled>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d047      	beq.n	80029d8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d144      	bne.n	80029d8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 030d 	and.w	r3, r3, #13
 8002958:	2b01      	cmp	r3, #1
 800295a:	d10c      	bne.n	8002976 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f7fe fd7d 	bl	8001460 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2203      	movs	r2, #3
 800296c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800296e:	f7fe fb79 	bl	8001064 <HAL_GetTick>
 8002972:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002974:	e029      	b.n	80029ca <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297a:	f043 0210 	orr.w	r2, r3, #16
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002986:	f043 0201 	orr.w	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e023      	b.n	80029da <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002992:	f7fe fb67 	bl	8001064 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d914      	bls.n	80029ca <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00d      	beq.n	80029ca <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b2:	f043 0210 	orr.w	r2, r3, #16
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029be:	f043 0201 	orr.w	r2, r3, #1
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e007      	b.n	80029da <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1dc      	bne.n	8002992 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b084      	sub	sp, #16
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d14b      	bne.n	8002a94 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a00:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d021      	beq.n	8002a5a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fe fc00 	bl	8001220 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d032      	beq.n	8002a8c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d12b      	bne.n	8002a8c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d11f      	bne.n	8002a8c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a50:	f043 0201 	orr.w	r2, r3, #1
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a58:	e018      	b.n	8002a8c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d111      	bne.n	8002a8c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d105      	bne.n	8002a8c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a84:	f043 0201 	orr.w	r2, r3, #1
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f7ff fa4b 	bl	8001f28 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a92:	e00e      	b.n	8002ab2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a98:	f003 0310 	and.w	r3, r3, #16
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f7ff fa5f 	bl	8001f64 <HAL_ADC_ErrorCallback>
}
 8002aa6:	e004      	b.n	8002ab2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	4798      	blx	r3
}
 8002ab2:	bf00      	nop
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b084      	sub	sp, #16
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f7ff fa37 	bl	8001f3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ace:	bf00      	nop
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b084      	sub	sp, #16
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af4:	f043 0204 	orr.w	r2, r3, #4
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f7ff fa31 	bl	8001f64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b02:	bf00      	nop
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <LL_ADC_IsEnabled>:
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <LL_ADC_IsEnabled+0x18>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <LL_ADC_IsEnabled+0x1a>
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <LL_ADC_StartCalibration>:
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002b42:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	609a      	str	r2, [r3, #8]
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <LL_ADC_IsCalibrationOnGoing>:
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b76:	d101      	bne.n	8002b7c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <LL_ADC_REG_IsConversionOngoing>:
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 0304 	and.w	r3, r3, #4
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d101      	bne.n	8002ba2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_ADCEx_Calibration_Start+0x1c>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e04d      	b.n	8002c68 <HAL_ADCEx_Calibration_Start+0xb8>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f7ff fea5 	bl	8002924 <ADC_Disable>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d136      	bne.n	8002c52 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bec:	f023 0302 	bic.w	r3, r3, #2
 8002bf0:	f043 0202 	orr.w	r2, r3, #2
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6839      	ldr	r1, [r7, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff ff96 	bl	8002b30 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002c04:	e014      	b.n	8002c30 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4a18      	ldr	r2, [pc, #96]	; (8002c70 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d90d      	bls.n	8002c30 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c18:	f023 0312 	bic.w	r3, r3, #18
 8002c1c:	f043 0210 	orr.w	r2, r3, #16
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e01b      	b.n	8002c68 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff ff94 	bl	8002b62 <LL_ADC_IsCalibrationOnGoing>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1e2      	bne.n	8002c06 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c44:	f023 0303 	bic.w	r3, r3, #3
 8002c48:	f043 0201 	orr.w	r2, r3, #1
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c50:	e005      	b.n	8002c5e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c56:	f043 0210 	orr.w	r2, r3, #16
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	0004de01 	.word	0x0004de01

08002c74 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002cd8:	b590      	push	{r4, r7, lr}
 8002cda:	b0a1      	sub	sp, #132	; 0x84
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d101      	bne.n	8002cf6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e0e7      	b.n	8002ec6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002cfe:	2300      	movs	r3, #0
 8002d00:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002d02:	2300      	movs	r3, #0
 8002d04:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d0e:	d102      	bne.n	8002d16 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d10:	4b6f      	ldr	r3, [pc, #444]	; (8002ed0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d12:	60bb      	str	r3, [r7, #8]
 8002d14:	e009      	b.n	8002d2a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a6e      	ldr	r2, [pc, #440]	; (8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d102      	bne.n	8002d26 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002d20:	4b6d      	ldr	r3, [pc, #436]	; (8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002d22:	60bb      	str	r3, [r7, #8]
 8002d24:	e001      	b.n	8002d2a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002d26:	2300      	movs	r3, #0
 8002d28:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10b      	bne.n	8002d48 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d34:	f043 0220 	orr.w	r2, r3, #32
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0be      	b.n	8002ec6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff ff1d 	bl	8002b8a <LL_ADC_REG_IsConversionOngoing>
 8002d50:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff ff17 	bl	8002b8a <LL_ADC_REG_IsConversionOngoing>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f040 80a0 	bne.w	8002ea4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002d64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f040 809c 	bne.w	8002ea4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d74:	d004      	beq.n	8002d80 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a55      	ldr	r2, [pc, #340]	; (8002ed0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d101      	bne.n	8002d84 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002d80:	4b56      	ldr	r3, [pc, #344]	; (8002edc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002d82:	e000      	b.n	8002d86 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002d84:	4b56      	ldr	r3, [pc, #344]	; (8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002d86:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d04b      	beq.n	8002e28 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002d90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	6859      	ldr	r1, [r3, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002da2:	035b      	lsls	r3, r3, #13
 8002da4:	430b      	orrs	r3, r1
 8002da6:	431a      	orrs	r2, r3
 8002da8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002daa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002db4:	d004      	beq.n	8002dc0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a45      	ldr	r2, [pc, #276]	; (8002ed0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d10f      	bne.n	8002de0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002dc0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002dc4:	f7ff fea1 	bl	8002b0a <LL_ADC_IsEnabled>
 8002dc8:	4604      	mov	r4, r0
 8002dca:	4841      	ldr	r0, [pc, #260]	; (8002ed0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002dcc:	f7ff fe9d 	bl	8002b0a <LL_ADC_IsEnabled>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	4323      	orrs	r3, r4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	bf0c      	ite	eq
 8002dd8:	2301      	moveq	r3, #1
 8002dda:	2300      	movne	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	e012      	b.n	8002e06 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002de0:	483c      	ldr	r0, [pc, #240]	; (8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002de2:	f7ff fe92 	bl	8002b0a <LL_ADC_IsEnabled>
 8002de6:	4604      	mov	r4, r0
 8002de8:	483b      	ldr	r0, [pc, #236]	; (8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002dea:	f7ff fe8e 	bl	8002b0a <LL_ADC_IsEnabled>
 8002dee:	4603      	mov	r3, r0
 8002df0:	431c      	orrs	r4, r3
 8002df2:	483c      	ldr	r0, [pc, #240]	; (8002ee4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002df4:	f7ff fe89 	bl	8002b0a <LL_ADC_IsEnabled>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	4323      	orrs	r3, r4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	bf0c      	ite	eq
 8002e00:	2301      	moveq	r3, #1
 8002e02:	2300      	movne	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d056      	beq.n	8002eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e12:	f023 030f 	bic.w	r3, r3, #15
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	6811      	ldr	r1, [r2, #0]
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	6892      	ldr	r2, [r2, #8]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	431a      	orrs	r2, r3
 8002e22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e24:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e26:	e047      	b.n	8002eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e32:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e3c:	d004      	beq.n	8002e48 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a23      	ldr	r2, [pc, #140]	; (8002ed0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d10f      	bne.n	8002e68 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002e48:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002e4c:	f7ff fe5d 	bl	8002b0a <LL_ADC_IsEnabled>
 8002e50:	4604      	mov	r4, r0
 8002e52:	481f      	ldr	r0, [pc, #124]	; (8002ed0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e54:	f7ff fe59 	bl	8002b0a <LL_ADC_IsEnabled>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	4323      	orrs	r3, r4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	bf0c      	ite	eq
 8002e60:	2301      	moveq	r3, #1
 8002e62:	2300      	movne	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	e012      	b.n	8002e8e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002e68:	481a      	ldr	r0, [pc, #104]	; (8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002e6a:	f7ff fe4e 	bl	8002b0a <LL_ADC_IsEnabled>
 8002e6e:	4604      	mov	r4, r0
 8002e70:	4819      	ldr	r0, [pc, #100]	; (8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002e72:	f7ff fe4a 	bl	8002b0a <LL_ADC_IsEnabled>
 8002e76:	4603      	mov	r3, r0
 8002e78:	431c      	orrs	r4, r3
 8002e7a:	481a      	ldr	r0, [pc, #104]	; (8002ee4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002e7c:	f7ff fe45 	bl	8002b0a <LL_ADC_IsEnabled>
 8002e80:	4603      	mov	r3, r0
 8002e82:	4323      	orrs	r3, r4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	bf0c      	ite	eq
 8002e88:	2301      	moveq	r3, #1
 8002e8a:	2300      	movne	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d012      	beq.n	8002eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e9a:	f023 030f 	bic.w	r3, r3, #15
 8002e9e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002ea0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ea2:	e009      	b.n	8002eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea8:	f043 0220 	orr.w	r2, r3, #32
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002eb6:	e000      	b.n	8002eba <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002eb8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ec2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3784      	adds	r7, #132	; 0x84
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd90      	pop	{r4, r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	50000100 	.word	0x50000100
 8002ed4:	50000400 	.word	0x50000400
 8002ed8:	50000500 	.word	0x50000500
 8002edc:	50000300 	.word	0x50000300
 8002ee0:	50000700 	.word	0x50000700
 8002ee4:	50000600 	.word	0x50000600

08002ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ef8:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <__NVIC_SetPriorityGrouping+0x44>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f04:	4013      	ands	r3, r2
 8002f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f1a:	4a04      	ldr	r2, [pc, #16]	; (8002f2c <__NVIC_SetPriorityGrouping+0x44>)
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	60d3      	str	r3, [r2, #12]
}
 8002f20:	bf00      	nop
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	e000ed00 	.word	0xe000ed00

08002f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f34:	4b04      	ldr	r3, [pc, #16]	; (8002f48 <__NVIC_GetPriorityGrouping+0x18>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	0a1b      	lsrs	r3, r3, #8
 8002f3a:	f003 0307 	and.w	r3, r3, #7
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	e000ed00 	.word	0xe000ed00

08002f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	db0b      	blt.n	8002f76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f5e:	79fb      	ldrb	r3, [r7, #7]
 8002f60:	f003 021f 	and.w	r2, r3, #31
 8002f64:	4907      	ldr	r1, [pc, #28]	; (8002f84 <__NVIC_EnableIRQ+0x38>)
 8002f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	2001      	movs	r0, #1
 8002f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	e000e100 	.word	0xe000e100

08002f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	6039      	str	r1, [r7, #0]
 8002f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	db0a      	blt.n	8002fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	490c      	ldr	r1, [pc, #48]	; (8002fd4 <__NVIC_SetPriority+0x4c>)
 8002fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa6:	0112      	lsls	r2, r2, #4
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	440b      	add	r3, r1
 8002fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fb0:	e00a      	b.n	8002fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	4908      	ldr	r1, [pc, #32]	; (8002fd8 <__NVIC_SetPriority+0x50>)
 8002fb8:	79fb      	ldrb	r3, [r7, #7]
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	3b04      	subs	r3, #4
 8002fc0:	0112      	lsls	r2, r2, #4
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	761a      	strb	r2, [r3, #24]
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	e000e100 	.word	0xe000e100
 8002fd8:	e000ed00 	.word	0xe000ed00

08002fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b089      	sub	sp, #36	; 0x24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	f1c3 0307 	rsb	r3, r3, #7
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	bf28      	it	cs
 8002ffa:	2304      	movcs	r3, #4
 8002ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	3304      	adds	r3, #4
 8003002:	2b06      	cmp	r3, #6
 8003004:	d902      	bls.n	800300c <NVIC_EncodePriority+0x30>
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	3b03      	subs	r3, #3
 800300a:	e000      	b.n	800300e <NVIC_EncodePriority+0x32>
 800300c:	2300      	movs	r3, #0
 800300e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003010:	f04f 32ff 	mov.w	r2, #4294967295
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	43da      	mvns	r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	401a      	ands	r2, r3
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003024:	f04f 31ff 	mov.w	r1, #4294967295
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	fa01 f303 	lsl.w	r3, r1, r3
 800302e:	43d9      	mvns	r1, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003034:	4313      	orrs	r3, r2
         );
}
 8003036:	4618      	mov	r0, r3
 8003038:	3724      	adds	r7, #36	; 0x24
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
	...

08003044 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3b01      	subs	r3, #1
 8003050:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003054:	d301      	bcc.n	800305a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003056:	2301      	movs	r3, #1
 8003058:	e00f      	b.n	800307a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800305a:	4a0a      	ldr	r2, [pc, #40]	; (8003084 <SysTick_Config+0x40>)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3b01      	subs	r3, #1
 8003060:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003062:	210f      	movs	r1, #15
 8003064:	f04f 30ff 	mov.w	r0, #4294967295
 8003068:	f7ff ff8e 	bl	8002f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800306c:	4b05      	ldr	r3, [pc, #20]	; (8003084 <SysTick_Config+0x40>)
 800306e:	2200      	movs	r2, #0
 8003070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003072:	4b04      	ldr	r3, [pc, #16]	; (8003084 <SysTick_Config+0x40>)
 8003074:	2207      	movs	r2, #7
 8003076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	e000e010 	.word	0xe000e010

08003088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7ff ff29 	bl	8002ee8 <__NVIC_SetPriorityGrouping>
}
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b086      	sub	sp, #24
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	4603      	mov	r3, r0
 80030a6:	60b9      	str	r1, [r7, #8]
 80030a8:	607a      	str	r2, [r7, #4]
 80030aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030ac:	f7ff ff40 	bl	8002f30 <__NVIC_GetPriorityGrouping>
 80030b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	68b9      	ldr	r1, [r7, #8]
 80030b6:	6978      	ldr	r0, [r7, #20]
 80030b8:	f7ff ff90 	bl	8002fdc <NVIC_EncodePriority>
 80030bc:	4602      	mov	r2, r0
 80030be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030c2:	4611      	mov	r1, r2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff ff5f 	bl	8002f88 <__NVIC_SetPriority>
}
 80030ca:	bf00      	nop
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	4603      	mov	r3, r0
 80030da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff ff33 	bl	8002f4c <__NVIC_EnableIRQ>
}
 80030e6:	bf00      	nop
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b082      	sub	sp, #8
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7ff ffa4 	bl	8003044 <SysTick_Config>
 80030fc:	4603      	mov	r3, r0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
	...

08003108 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e08d      	b.n	8003236 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	4b47      	ldr	r3, [pc, #284]	; (8003240 <HAL_DMA_Init+0x138>)
 8003122:	429a      	cmp	r2, r3
 8003124:	d80f      	bhi.n	8003146 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	461a      	mov	r2, r3
 800312c:	4b45      	ldr	r3, [pc, #276]	; (8003244 <HAL_DMA_Init+0x13c>)
 800312e:	4413      	add	r3, r2
 8003130:	4a45      	ldr	r2, [pc, #276]	; (8003248 <HAL_DMA_Init+0x140>)
 8003132:	fba2 2303 	umull	r2, r3, r2, r3
 8003136:	091b      	lsrs	r3, r3, #4
 8003138:	009a      	lsls	r2, r3, #2
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a42      	ldr	r2, [pc, #264]	; (800324c <HAL_DMA_Init+0x144>)
 8003142:	641a      	str	r2, [r3, #64]	; 0x40
 8003144:	e00e      	b.n	8003164 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	4b40      	ldr	r3, [pc, #256]	; (8003250 <HAL_DMA_Init+0x148>)
 800314e:	4413      	add	r3, r2
 8003150:	4a3d      	ldr	r2, [pc, #244]	; (8003248 <HAL_DMA_Init+0x140>)
 8003152:	fba2 2303 	umull	r2, r3, r2, r3
 8003156:	091b      	lsrs	r3, r3, #4
 8003158:	009a      	lsls	r2, r3, #2
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a3c      	ldr	r2, [pc, #240]	; (8003254 <HAL_DMA_Init+0x14c>)
 8003162:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800317a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800317e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003188:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003194:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f9b6 	bl	8003528 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031c4:	d102      	bne.n	80031cc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80031e0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d010      	beq.n	800320c <HAL_DMA_Init+0x104>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d80c      	bhi.n	800320c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f9d6 	bl	80035a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003208:	605a      	str	r2, [r3, #4]
 800320a:	e008      	b.n	800321e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40020407 	.word	0x40020407
 8003244:	bffdfff8 	.word	0xbffdfff8
 8003248:	cccccccd 	.word	0xcccccccd
 800324c:	40020000 	.word	0x40020000
 8003250:	bffdfbf8 	.word	0xbffdfbf8
 8003254:	40020400 	.word	0x40020400

08003258 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
 8003264:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003270:	2b01      	cmp	r3, #1
 8003272:	d101      	bne.n	8003278 <HAL_DMA_Start_IT+0x20>
 8003274:	2302      	movs	r3, #2
 8003276:	e066      	b.n	8003346 <HAL_DMA_Start_IT+0xee>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b01      	cmp	r3, #1
 800328a:	d155      	bne.n	8003338 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0201 	bic.w	r2, r2, #1
 80032a8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	68b9      	ldr	r1, [r7, #8]
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 f8fb 	bl	80034ac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d008      	beq.n	80032d0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f042 020e 	orr.w	r2, r2, #14
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	e00f      	b.n	80032f0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0204 	bic.w	r2, r2, #4
 80032de:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 020a 	orr.w	r2, r2, #10
 80032ee:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d007      	beq.n	800330e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003308:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800330c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003312:	2b00      	cmp	r3, #0
 8003314:	d007      	beq.n	8003326 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003320:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003324:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0201 	orr.w	r2, r2, #1
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	e005      	b.n	8003344 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003340:	2302      	movs	r3, #2
 8003342:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003344:	7dfb      	ldrb	r3, [r7, #23]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b084      	sub	sp, #16
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336a:	f003 031f 	and.w	r3, r3, #31
 800336e:	2204      	movs	r2, #4
 8003370:	409a      	lsls	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4013      	ands	r3, r2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d026      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x7a>
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b00      	cmp	r3, #0
 8003382:	d021      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0320 	and.w	r3, r3, #32
 800338e:	2b00      	cmp	r3, #0
 8003390:	d107      	bne.n	80033a2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 0204 	bic.w	r2, r2, #4
 80033a0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a6:	f003 021f 	and.w	r2, r3, #31
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	2104      	movs	r1, #4
 80033b0:	fa01 f202 	lsl.w	r2, r1, r2
 80033b4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d071      	beq.n	80034a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80033c6:	e06c      	b.n	80034a2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033cc:	f003 031f 	and.w	r3, r3, #31
 80033d0:	2202      	movs	r2, #2
 80033d2:	409a      	lsls	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4013      	ands	r3, r2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d02e      	beq.n	800343a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d029      	beq.n	800343a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0320 	and.w	r3, r3, #32
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10b      	bne.n	800340c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 020a 	bic.w	r2, r2, #10
 8003402:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003410:	f003 021f 	and.w	r2, r3, #31
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	2102      	movs	r1, #2
 800341a:	fa01 f202 	lsl.w	r2, r1, r2
 800341e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342c:	2b00      	cmp	r3, #0
 800342e:	d038      	beq.n	80034a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003438:	e033      	b.n	80034a2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343e:	f003 031f 	and.w	r3, r3, #31
 8003442:	2208      	movs	r2, #8
 8003444:	409a      	lsls	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4013      	ands	r3, r2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d02a      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b00      	cmp	r3, #0
 8003456:	d025      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 020e 	bic.w	r2, r2, #14
 8003466:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346c:	f003 021f 	and.w	r2, r3, #31
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003474:	2101      	movs	r1, #1
 8003476:	fa01 f202 	lsl.w	r2, r1, r2
 800347a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003496:	2b00      	cmp	r3, #0
 8003498:	d004      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80034a2:	bf00      	nop
 80034a4:	bf00      	nop
}
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
 80034b8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80034c2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d004      	beq.n	80034d6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80034d4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034da:	f003 021f 	and.w	r2, r3, #31
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	2101      	movs	r1, #1
 80034e4:	fa01 f202 	lsl.w	r2, r1, r2
 80034e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	2b10      	cmp	r3, #16
 80034f8:	d108      	bne.n	800350c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800350a:	e007      	b.n	800351c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	60da      	str	r2, [r3, #12]
}
 800351c:	bf00      	nop
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003528:	b480      	push	{r7}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	461a      	mov	r2, r3
 8003536:	4b16      	ldr	r3, [pc, #88]	; (8003590 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003538:	429a      	cmp	r2, r3
 800353a:	d802      	bhi.n	8003542 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800353c:	4b15      	ldr	r3, [pc, #84]	; (8003594 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800353e:	617b      	str	r3, [r7, #20]
 8003540:	e001      	b.n	8003546 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003542:	4b15      	ldr	r3, [pc, #84]	; (8003598 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003544:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	b2db      	uxtb	r3, r3
 8003550:	3b08      	subs	r3, #8
 8003552:	4a12      	ldr	r2, [pc, #72]	; (800359c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003554:	fba2 2303 	umull	r2, r3, r2, r3
 8003558:	091b      	lsrs	r3, r3, #4
 800355a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003560:	089b      	lsrs	r3, r3, #2
 8003562:	009a      	lsls	r2, r3, #2
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	4413      	add	r3, r2
 8003568:	461a      	mov	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a0b      	ldr	r2, [pc, #44]	; (80035a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003572:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 031f 	and.w	r3, r3, #31
 800357a:	2201      	movs	r2, #1
 800357c:	409a      	lsls	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003582:	bf00      	nop
 8003584:	371c      	adds	r7, #28
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	40020407 	.word	0x40020407
 8003594:	40020800 	.word	0x40020800
 8003598:	40020820 	.word	0x40020820
 800359c:	cccccccd 	.word	0xcccccccd
 80035a0:	40020880 	.word	0x40020880

080035a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	461a      	mov	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a08      	ldr	r2, [pc, #32]	; (80035e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80035c6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	f003 031f 	and.w	r3, r3, #31
 80035d0:	2201      	movs	r2, #1
 80035d2:	409a      	lsls	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80035d8:	bf00      	nop
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	1000823f 	.word	0x1000823f
 80035e8:	40020940 	.word	0x40020940

080035ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80035fa:	e15a      	b.n	80038b2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	2101      	movs	r1, #1
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	fa01 f303 	lsl.w	r3, r1, r3
 8003608:	4013      	ands	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 814c 	beq.w	80038ac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	2b01      	cmp	r3, #1
 800361e:	d005      	beq.n	800362c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003628:	2b02      	cmp	r3, #2
 800362a:	d130      	bne.n	800368e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	2203      	movs	r2, #3
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	43db      	mvns	r3, r3
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	4013      	ands	r3, r2
 8003642:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	68da      	ldr	r2, [r3, #12]
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	4313      	orrs	r3, r2
 8003654:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003662:	2201      	movs	r2, #1
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	43db      	mvns	r3, r3
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4013      	ands	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	091b      	lsrs	r3, r3, #4
 8003678:	f003 0201 	and.w	r2, r3, #1
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	2b03      	cmp	r3, #3
 8003698:	d017      	beq.n	80036ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	2203      	movs	r2, #3
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	43db      	mvns	r3, r3
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	4013      	ands	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d123      	bne.n	800371e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	08da      	lsrs	r2, r3, #3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	3208      	adds	r2, #8
 80036de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	220f      	movs	r2, #15
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	43db      	mvns	r3, r3
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	4013      	ands	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	691a      	ldr	r2, [r3, #16]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	08da      	lsrs	r2, r3, #3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3208      	adds	r2, #8
 8003718:	6939      	ldr	r1, [r7, #16]
 800371a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	2203      	movs	r2, #3
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	43db      	mvns	r3, r3
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4013      	ands	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f003 0203 	and.w	r2, r3, #3
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	4313      	orrs	r3, r2
 800374a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 80a6 	beq.w	80038ac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003760:	4b5b      	ldr	r3, [pc, #364]	; (80038d0 <HAL_GPIO_Init+0x2e4>)
 8003762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003764:	4a5a      	ldr	r2, [pc, #360]	; (80038d0 <HAL_GPIO_Init+0x2e4>)
 8003766:	f043 0301 	orr.w	r3, r3, #1
 800376a:	6613      	str	r3, [r2, #96]	; 0x60
 800376c:	4b58      	ldr	r3, [pc, #352]	; (80038d0 <HAL_GPIO_Init+0x2e4>)
 800376e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003778:	4a56      	ldr	r2, [pc, #344]	; (80038d4 <HAL_GPIO_Init+0x2e8>)
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	089b      	lsrs	r3, r3, #2
 800377e:	3302      	adds	r3, #2
 8003780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003784:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	220f      	movs	r2, #15
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	43db      	mvns	r3, r3
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	4013      	ands	r3, r2
 800379a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80037a2:	d01f      	beq.n	80037e4 <HAL_GPIO_Init+0x1f8>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a4c      	ldr	r2, [pc, #304]	; (80038d8 <HAL_GPIO_Init+0x2ec>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d019      	beq.n	80037e0 <HAL_GPIO_Init+0x1f4>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a4b      	ldr	r2, [pc, #300]	; (80038dc <HAL_GPIO_Init+0x2f0>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d013      	beq.n	80037dc <HAL_GPIO_Init+0x1f0>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a4a      	ldr	r2, [pc, #296]	; (80038e0 <HAL_GPIO_Init+0x2f4>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d00d      	beq.n	80037d8 <HAL_GPIO_Init+0x1ec>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a49      	ldr	r2, [pc, #292]	; (80038e4 <HAL_GPIO_Init+0x2f8>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d007      	beq.n	80037d4 <HAL_GPIO_Init+0x1e8>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a48      	ldr	r2, [pc, #288]	; (80038e8 <HAL_GPIO_Init+0x2fc>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d101      	bne.n	80037d0 <HAL_GPIO_Init+0x1e4>
 80037cc:	2305      	movs	r3, #5
 80037ce:	e00a      	b.n	80037e6 <HAL_GPIO_Init+0x1fa>
 80037d0:	2306      	movs	r3, #6
 80037d2:	e008      	b.n	80037e6 <HAL_GPIO_Init+0x1fa>
 80037d4:	2304      	movs	r3, #4
 80037d6:	e006      	b.n	80037e6 <HAL_GPIO_Init+0x1fa>
 80037d8:	2303      	movs	r3, #3
 80037da:	e004      	b.n	80037e6 <HAL_GPIO_Init+0x1fa>
 80037dc:	2302      	movs	r3, #2
 80037de:	e002      	b.n	80037e6 <HAL_GPIO_Init+0x1fa>
 80037e0:	2301      	movs	r3, #1
 80037e2:	e000      	b.n	80037e6 <HAL_GPIO_Init+0x1fa>
 80037e4:	2300      	movs	r3, #0
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	f002 0203 	and.w	r2, r2, #3
 80037ec:	0092      	lsls	r2, r2, #2
 80037ee:	4093      	lsls	r3, r2
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037f6:	4937      	ldr	r1, [pc, #220]	; (80038d4 <HAL_GPIO_Init+0x2e8>)
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	089b      	lsrs	r3, r3, #2
 80037fc:	3302      	adds	r3, #2
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003804:	4b39      	ldr	r3, [pc, #228]	; (80038ec <HAL_GPIO_Init+0x300>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	43db      	mvns	r3, r3
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	4013      	ands	r3, r2
 8003812:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4313      	orrs	r3, r2
 8003826:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003828:	4a30      	ldr	r2, [pc, #192]	; (80038ec <HAL_GPIO_Init+0x300>)
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800382e:	4b2f      	ldr	r3, [pc, #188]	; (80038ec <HAL_GPIO_Init+0x300>)
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	43db      	mvns	r3, r3
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4013      	ands	r3, r2
 800383c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4313      	orrs	r3, r2
 8003850:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003852:	4a26      	ldr	r2, [pc, #152]	; (80038ec <HAL_GPIO_Init+0x300>)
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003858:	4b24      	ldr	r3, [pc, #144]	; (80038ec <HAL_GPIO_Init+0x300>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	43db      	mvns	r3, r3
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4013      	ands	r3, r2
 8003866:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	4313      	orrs	r3, r2
 800387a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800387c:	4a1b      	ldr	r2, [pc, #108]	; (80038ec <HAL_GPIO_Init+0x300>)
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003882:	4b1a      	ldr	r3, [pc, #104]	; (80038ec <HAL_GPIO_Init+0x300>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	43db      	mvns	r3, r3
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4013      	ands	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038a6:	4a11      	ldr	r2, [pc, #68]	; (80038ec <HAL_GPIO_Init+0x300>)
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	3301      	adds	r3, #1
 80038b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	fa22 f303 	lsr.w	r3, r2, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f47f ae9d 	bne.w	80035fc <HAL_GPIO_Init+0x10>
  }
}
 80038c2:	bf00      	nop
 80038c4:	bf00      	nop
 80038c6:	371c      	adds	r7, #28
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	40021000 	.word	0x40021000
 80038d4:	40010000 	.word	0x40010000
 80038d8:	48000400 	.word	0x48000400
 80038dc:	48000800 	.word	0x48000800
 80038e0:	48000c00 	.word	0x48000c00
 80038e4:	48001000 	.word	0x48001000
 80038e8:	48001400 	.word	0x48001400
 80038ec:	40010400 	.word	0x40010400

080038f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	807b      	strh	r3, [r7, #2]
 80038fc:	4613      	mov	r3, r2
 80038fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003900:	787b      	ldrb	r3, [r7, #1]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003906:	887a      	ldrh	r2, [r7, #2]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800390c:	e002      	b.n	8003914 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800390e:	887a      	ldrh	r2, [r7, #2]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800392a:	4b08      	ldr	r3, [pc, #32]	; (800394c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800392c:	695a      	ldr	r2, [r3, #20]
 800392e:	88fb      	ldrh	r3, [r7, #6]
 8003930:	4013      	ands	r3, r2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d006      	beq.n	8003944 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003936:	4a05      	ldr	r2, [pc, #20]	; (800394c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003938:	88fb      	ldrh	r3, [r7, #6]
 800393a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800393c:	88fb      	ldrh	r3, [r7, #6]
 800393e:	4618      	mov	r0, r3
 8003940:	f000 f806 	bl	8003950 <HAL_GPIO_EXTI_Callback>
  }
}
 8003944:	bf00      	nop
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40010400 	.word	0x40010400

08003950 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	4603      	mov	r3, r0
 8003958:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
	...

08003968 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d141      	bne.n	80039fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003976:	4b4b      	ldr	r3, [pc, #300]	; (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800397e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003982:	d131      	bne.n	80039e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003984:	4b47      	ldr	r3, [pc, #284]	; (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003986:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800398a:	4a46      	ldr	r2, [pc, #280]	; (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800398c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003990:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003994:	4b43      	ldr	r3, [pc, #268]	; (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800399c:	4a41      	ldr	r2, [pc, #260]	; (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800399e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039a4:	4b40      	ldr	r3, [pc, #256]	; (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2232      	movs	r2, #50	; 0x32
 80039aa:	fb02 f303 	mul.w	r3, r2, r3
 80039ae:	4a3f      	ldr	r2, [pc, #252]	; (8003aac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80039b0:	fba2 2303 	umull	r2, r3, r2, r3
 80039b4:	0c9b      	lsrs	r3, r3, #18
 80039b6:	3301      	adds	r3, #1
 80039b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039ba:	e002      	b.n	80039c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	3b01      	subs	r3, #1
 80039c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039c2:	4b38      	ldr	r3, [pc, #224]	; (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ce:	d102      	bne.n	80039d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f2      	bne.n	80039bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039d6:	4b33      	ldr	r3, [pc, #204]	; (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039e2:	d158      	bne.n	8003a96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e057      	b.n	8003a98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039e8:	4b2e      	ldr	r3, [pc, #184]	; (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039ee:	4a2d      	ldr	r2, [pc, #180]	; (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80039f8:	e04d      	b.n	8003a96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a00:	d141      	bne.n	8003a86 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a02:	4b28      	ldr	r3, [pc, #160]	; (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a0e:	d131      	bne.n	8003a74 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a10:	4b24      	ldr	r3, [pc, #144]	; (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a16:	4a23      	ldr	r2, [pc, #140]	; (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a20:	4b20      	ldr	r3, [pc, #128]	; (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a28:	4a1e      	ldr	r2, [pc, #120]	; (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a30:	4b1d      	ldr	r3, [pc, #116]	; (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2232      	movs	r2, #50	; 0x32
 8003a36:	fb02 f303 	mul.w	r3, r2, r3
 8003a3a:	4a1c      	ldr	r2, [pc, #112]	; (8003aac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a40:	0c9b      	lsrs	r3, r3, #18
 8003a42:	3301      	adds	r3, #1
 8003a44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a46:	e002      	b.n	8003a4e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a4e:	4b15      	ldr	r3, [pc, #84]	; (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a5a:	d102      	bne.n	8003a62 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1f2      	bne.n	8003a48 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a62:	4b10      	ldr	r3, [pc, #64]	; (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a6e:	d112      	bne.n	8003a96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e011      	b.n	8003a98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a74:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a7a:	4a0a      	ldr	r2, [pc, #40]	; (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003a84:	e007      	b.n	8003a96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a86:	4b07      	ldr	r3, [pc, #28]	; (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a8e:	4a05      	ldr	r2, [pc, #20]	; (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a94:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr
 8003aa4:	40007000 	.word	0x40007000
 8003aa8:	20000004 	.word	0x20000004
 8003aac:	431bde83 	.word	0x431bde83

08003ab0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003ab4:	4b05      	ldr	r3, [pc, #20]	; (8003acc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	4a04      	ldr	r2, [pc, #16]	; (8003acc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003aba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003abe:	6093      	str	r3, [r2, #8]
}
 8003ac0:	bf00      	nop
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40007000 	.word	0x40007000

08003ad0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b088      	sub	sp, #32
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e2fe      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d075      	beq.n	8003bda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aee:	4b97      	ldr	r3, [pc, #604]	; (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 030c 	and.w	r3, r3, #12
 8003af6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003af8:	4b94      	ldr	r3, [pc, #592]	; (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	f003 0303 	and.w	r3, r3, #3
 8003b00:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	2b0c      	cmp	r3, #12
 8003b06:	d102      	bne.n	8003b0e <HAL_RCC_OscConfig+0x3e>
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	2b03      	cmp	r3, #3
 8003b0c:	d002      	beq.n	8003b14 <HAL_RCC_OscConfig+0x44>
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d10b      	bne.n	8003b2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b14:	4b8d      	ldr	r3, [pc, #564]	; (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d05b      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x108>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d157      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e2d9      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b34:	d106      	bne.n	8003b44 <HAL_RCC_OscConfig+0x74>
 8003b36:	4b85      	ldr	r3, [pc, #532]	; (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a84      	ldr	r2, [pc, #528]	; (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b40:	6013      	str	r3, [r2, #0]
 8003b42:	e01d      	b.n	8003b80 <HAL_RCC_OscConfig+0xb0>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b4c:	d10c      	bne.n	8003b68 <HAL_RCC_OscConfig+0x98>
 8003b4e:	4b7f      	ldr	r3, [pc, #508]	; (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a7e      	ldr	r2, [pc, #504]	; (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	4b7c      	ldr	r3, [pc, #496]	; (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a7b      	ldr	r2, [pc, #492]	; (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	e00b      	b.n	8003b80 <HAL_RCC_OscConfig+0xb0>
 8003b68:	4b78      	ldr	r3, [pc, #480]	; (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a77      	ldr	r2, [pc, #476]	; (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b72:	6013      	str	r3, [r2, #0]
 8003b74:	4b75      	ldr	r3, [pc, #468]	; (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a74      	ldr	r2, [pc, #464]	; (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d013      	beq.n	8003bb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b88:	f7fd fa6c 	bl	8001064 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b90:	f7fd fa68 	bl	8001064 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b64      	cmp	r3, #100	; 0x64
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e29e      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ba2:	4b6a      	ldr	r3, [pc, #424]	; (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0f0      	beq.n	8003b90 <HAL_RCC_OscConfig+0xc0>
 8003bae:	e014      	b.n	8003bda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb0:	f7fd fa58 	bl	8001064 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb8:	f7fd fa54 	bl	8001064 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b64      	cmp	r3, #100	; 0x64
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e28a      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bca:	4b60      	ldr	r3, [pc, #384]	; (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1f0      	bne.n	8003bb8 <HAL_RCC_OscConfig+0xe8>
 8003bd6:	e000      	b.n	8003bda <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d075      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003be6:	4b59      	ldr	r3, [pc, #356]	; (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 030c 	and.w	r3, r3, #12
 8003bee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bf0:	4b56      	ldr	r3, [pc, #344]	; (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f003 0303 	and.w	r3, r3, #3
 8003bf8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	2b0c      	cmp	r3, #12
 8003bfe:	d102      	bne.n	8003c06 <HAL_RCC_OscConfig+0x136>
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d002      	beq.n	8003c0c <HAL_RCC_OscConfig+0x13c>
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	2b04      	cmp	r3, #4
 8003c0a:	d11f      	bne.n	8003c4c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c0c:	4b4f      	ldr	r3, [pc, #316]	; (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <HAL_RCC_OscConfig+0x154>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e25d      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c24:	4b49      	ldr	r3, [pc, #292]	; (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	061b      	lsls	r3, r3, #24
 8003c32:	4946      	ldr	r1, [pc, #280]	; (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003c38:	4b45      	ldr	r3, [pc, #276]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fd f9c5 	bl	8000fcc <HAL_InitTick>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d043      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e249      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d023      	beq.n	8003c9c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c54:	4b3d      	ldr	r3, [pc, #244]	; (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a3c      	ldr	r2, [pc, #240]	; (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c60:	f7fd fa00 	bl	8001064 <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c68:	f7fd f9fc 	bl	8001064 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e232      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c7a:	4b34      	ldr	r3, [pc, #208]	; (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0f0      	beq.n	8003c68 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c86:	4b31      	ldr	r3, [pc, #196]	; (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	061b      	lsls	r3, r3, #24
 8003c94:	492d      	ldr	r1, [pc, #180]	; (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	604b      	str	r3, [r1, #4]
 8003c9a:	e01a      	b.n	8003cd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c9c:	4b2b      	ldr	r3, [pc, #172]	; (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a2a      	ldr	r2, [pc, #168]	; (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003ca2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca8:	f7fd f9dc 	bl	8001064 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cb0:	f7fd f9d8 	bl	8001064 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e20e      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cc2:	4b22      	ldr	r3, [pc, #136]	; (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f0      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x1e0>
 8003cce:	e000      	b.n	8003cd2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cd0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d041      	beq.n	8003d62 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d01c      	beq.n	8003d20 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ce6:	4b19      	ldr	r3, [pc, #100]	; (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cec:	4a17      	ldr	r2, [pc, #92]	; (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003cee:	f043 0301 	orr.w	r3, r3, #1
 8003cf2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf6:	f7fd f9b5 	bl	8001064 <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cfe:	f7fd f9b1 	bl	8001064 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e1e7      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d10:	4b0e      	ldr	r3, [pc, #56]	; (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0ef      	beq.n	8003cfe <HAL_RCC_OscConfig+0x22e>
 8003d1e:	e020      	b.n	8003d62 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d20:	4b0a      	ldr	r3, [pc, #40]	; (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d26:	4a09      	ldr	r2, [pc, #36]	; (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003d28:	f023 0301 	bic.w	r3, r3, #1
 8003d2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d30:	f7fd f998 	bl	8001064 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d36:	e00d      	b.n	8003d54 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d38:	f7fd f994 	bl	8001064 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d906      	bls.n	8003d54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e1ca      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
 8003d4a:	bf00      	nop
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d54:	4b8c      	ldr	r3, [pc, #560]	; (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1ea      	bne.n	8003d38 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0304 	and.w	r3, r3, #4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 80a6 	beq.w	8003ebc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d70:	2300      	movs	r3, #0
 8003d72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d74:	4b84      	ldr	r3, [pc, #528]	; (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_RCC_OscConfig+0x2b4>
 8003d80:	2301      	movs	r3, #1
 8003d82:	e000      	b.n	8003d86 <HAL_RCC_OscConfig+0x2b6>
 8003d84:	2300      	movs	r3, #0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00d      	beq.n	8003da6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d8a:	4b7f      	ldr	r3, [pc, #508]	; (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8e:	4a7e      	ldr	r2, [pc, #504]	; (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d94:	6593      	str	r3, [r2, #88]	; 0x58
 8003d96:	4b7c      	ldr	r3, [pc, #496]	; (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003da2:	2301      	movs	r3, #1
 8003da4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003da6:	4b79      	ldr	r3, [pc, #484]	; (8003f8c <HAL_RCC_OscConfig+0x4bc>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d118      	bne.n	8003de4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003db2:	4b76      	ldr	r3, [pc, #472]	; (8003f8c <HAL_RCC_OscConfig+0x4bc>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a75      	ldr	r2, [pc, #468]	; (8003f8c <HAL_RCC_OscConfig+0x4bc>)
 8003db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dbe:	f7fd f951 	bl	8001064 <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc6:	f7fd f94d 	bl	8001064 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e183      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dd8:	4b6c      	ldr	r3, [pc, #432]	; (8003f8c <HAL_RCC_OscConfig+0x4bc>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0f0      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d108      	bne.n	8003dfe <HAL_RCC_OscConfig+0x32e>
 8003dec:	4b66      	ldr	r3, [pc, #408]	; (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df2:	4a65      	ldr	r2, [pc, #404]	; (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003df4:	f043 0301 	orr.w	r3, r3, #1
 8003df8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dfc:	e024      	b.n	8003e48 <HAL_RCC_OscConfig+0x378>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	2b05      	cmp	r3, #5
 8003e04:	d110      	bne.n	8003e28 <HAL_RCC_OscConfig+0x358>
 8003e06:	4b60      	ldr	r3, [pc, #384]	; (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0c:	4a5e      	ldr	r2, [pc, #376]	; (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003e0e:	f043 0304 	orr.w	r3, r3, #4
 8003e12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e16:	4b5c      	ldr	r3, [pc, #368]	; (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1c:	4a5a      	ldr	r2, [pc, #360]	; (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003e1e:	f043 0301 	orr.w	r3, r3, #1
 8003e22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e26:	e00f      	b.n	8003e48 <HAL_RCC_OscConfig+0x378>
 8003e28:	4b57      	ldr	r3, [pc, #348]	; (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2e:	4a56      	ldr	r2, [pc, #344]	; (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003e30:	f023 0301 	bic.w	r3, r3, #1
 8003e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e38:	4b53      	ldr	r3, [pc, #332]	; (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3e:	4a52      	ldr	r2, [pc, #328]	; (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003e40:	f023 0304 	bic.w	r3, r3, #4
 8003e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d016      	beq.n	8003e7e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e50:	f7fd f908 	bl	8001064 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e56:	e00a      	b.n	8003e6e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e58:	f7fd f904 	bl	8001064 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e138      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e6e:	4b46      	ldr	r3, [pc, #280]	; (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d0ed      	beq.n	8003e58 <HAL_RCC_OscConfig+0x388>
 8003e7c:	e015      	b.n	8003eaa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7e:	f7fd f8f1 	bl	8001064 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e84:	e00a      	b.n	8003e9c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e86:	f7fd f8ed 	bl	8001064 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e121      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e9c:	4b3a      	ldr	r3, [pc, #232]	; (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1ed      	bne.n	8003e86 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003eaa:	7ffb      	ldrb	r3, [r7, #31]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d105      	bne.n	8003ebc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eb0:	4b35      	ldr	r3, [pc, #212]	; (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb4:	4a34      	ldr	r2, [pc, #208]	; (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003eb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0320 	and.w	r3, r3, #32
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d03c      	beq.n	8003f42 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d01c      	beq.n	8003f0a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ed0:	4b2d      	ldr	r3, [pc, #180]	; (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003ed2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ed6:	4a2c      	ldr	r2, [pc, #176]	; (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003ed8:	f043 0301 	orr.w	r3, r3, #1
 8003edc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee0:	f7fd f8c0 	bl	8001064 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ee8:	f7fd f8bc 	bl	8001064 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e0f2      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003efa:	4b23      	ldr	r3, [pc, #140]	; (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003efc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0ef      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x418>
 8003f08:	e01b      	b.n	8003f42 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f0a:	4b1f      	ldr	r3, [pc, #124]	; (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003f0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f10:	4a1d      	ldr	r2, [pc, #116]	; (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003f12:	f023 0301 	bic.w	r3, r3, #1
 8003f16:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1a:	f7fd f8a3 	bl	8001064 <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f20:	e008      	b.n	8003f34 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f22:	f7fd f89f 	bl	8001064 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e0d5      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f34:	4b14      	ldr	r3, [pc, #80]	; (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003f36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1ef      	bne.n	8003f22 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 80c9 	beq.w	80040de <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f4c:	4b0e      	ldr	r3, [pc, #56]	; (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 030c 	and.w	r3, r3, #12
 8003f54:	2b0c      	cmp	r3, #12
 8003f56:	f000 8083 	beq.w	8004060 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d15e      	bne.n	8004020 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f62:	4b09      	ldr	r3, [pc, #36]	; (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a08      	ldr	r2, [pc, #32]	; (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003f68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6e:	f7fd f879 	bl	8001064 <HAL_GetTick>
 8003f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f74:	e00c      	b.n	8003f90 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f76:	f7fd f875 	bl	8001064 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d905      	bls.n	8003f90 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e0ab      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f90:	4b55      	ldr	r3, [pc, #340]	; (80040e8 <HAL_RCC_OscConfig+0x618>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1ec      	bne.n	8003f76 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f9c:	4b52      	ldr	r3, [pc, #328]	; (80040e8 <HAL_RCC_OscConfig+0x618>)
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	4b52      	ldr	r3, [pc, #328]	; (80040ec <HAL_RCC_OscConfig+0x61c>)
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6a11      	ldr	r1, [r2, #32]
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fac:	3a01      	subs	r2, #1
 8003fae:	0112      	lsls	r2, r2, #4
 8003fb0:	4311      	orrs	r1, r2
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003fb6:	0212      	lsls	r2, r2, #8
 8003fb8:	4311      	orrs	r1, r2
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003fbe:	0852      	lsrs	r2, r2, #1
 8003fc0:	3a01      	subs	r2, #1
 8003fc2:	0552      	lsls	r2, r2, #21
 8003fc4:	4311      	orrs	r1, r2
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003fca:	0852      	lsrs	r2, r2, #1
 8003fcc:	3a01      	subs	r2, #1
 8003fce:	0652      	lsls	r2, r2, #25
 8003fd0:	4311      	orrs	r1, r2
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003fd6:	06d2      	lsls	r2, r2, #27
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	4943      	ldr	r1, [pc, #268]	; (80040e8 <HAL_RCC_OscConfig+0x618>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fe0:	4b41      	ldr	r3, [pc, #260]	; (80040e8 <HAL_RCC_OscConfig+0x618>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a40      	ldr	r2, [pc, #256]	; (80040e8 <HAL_RCC_OscConfig+0x618>)
 8003fe6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fec:	4b3e      	ldr	r3, [pc, #248]	; (80040e8 <HAL_RCC_OscConfig+0x618>)
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	4a3d      	ldr	r2, [pc, #244]	; (80040e8 <HAL_RCC_OscConfig+0x618>)
 8003ff2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ff6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff8:	f7fd f834 	bl	8001064 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004000:	f7fd f830 	bl	8001064 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e066      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004012:	4b35      	ldr	r3, [pc, #212]	; (80040e8 <HAL_RCC_OscConfig+0x618>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0f0      	beq.n	8004000 <HAL_RCC_OscConfig+0x530>
 800401e:	e05e      	b.n	80040de <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004020:	4b31      	ldr	r3, [pc, #196]	; (80040e8 <HAL_RCC_OscConfig+0x618>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a30      	ldr	r2, [pc, #192]	; (80040e8 <HAL_RCC_OscConfig+0x618>)
 8004026:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800402a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402c:	f7fd f81a 	bl	8001064 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004034:	f7fd f816 	bl	8001064 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e04c      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004046:	4b28      	ldr	r3, [pc, #160]	; (80040e8 <HAL_RCC_OscConfig+0x618>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f0      	bne.n	8004034 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004052:	4b25      	ldr	r3, [pc, #148]	; (80040e8 <HAL_RCC_OscConfig+0x618>)
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	4924      	ldr	r1, [pc, #144]	; (80040e8 <HAL_RCC_OscConfig+0x618>)
 8004058:	4b25      	ldr	r3, [pc, #148]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 800405a:	4013      	ands	r3, r2
 800405c:	60cb      	str	r3, [r1, #12]
 800405e:	e03e      	b.n	80040de <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	69db      	ldr	r3, [r3, #28]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e039      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800406c:	4b1e      	ldr	r3, [pc, #120]	; (80040e8 <HAL_RCC_OscConfig+0x618>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f003 0203 	and.w	r2, r3, #3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	429a      	cmp	r2, r3
 800407e:	d12c      	bne.n	80040da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	3b01      	subs	r3, #1
 800408c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800408e:	429a      	cmp	r2, r3
 8004090:	d123      	bne.n	80040da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800409e:	429a      	cmp	r2, r3
 80040a0:	d11b      	bne.n	80040da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d113      	bne.n	80040da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040bc:	085b      	lsrs	r3, r3, #1
 80040be:	3b01      	subs	r3, #1
 80040c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d109      	bne.n	80040da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d0:	085b      	lsrs	r3, r3, #1
 80040d2:	3b01      	subs	r3, #1
 80040d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d001      	beq.n	80040de <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e000      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3720      	adds	r7, #32
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40021000 	.word	0x40021000
 80040ec:	019f800c 	.word	0x019f800c
 80040f0:	feeefffc 	.word	0xfeeefffc

080040f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80040fe:	2300      	movs	r3, #0
 8004100:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e11e      	b.n	800434a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800410c:	4b91      	ldr	r3, [pc, #580]	; (8004354 <HAL_RCC_ClockConfig+0x260>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 030f 	and.w	r3, r3, #15
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	429a      	cmp	r2, r3
 8004118:	d910      	bls.n	800413c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800411a:	4b8e      	ldr	r3, [pc, #568]	; (8004354 <HAL_RCC_ClockConfig+0x260>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f023 020f 	bic.w	r2, r3, #15
 8004122:	498c      	ldr	r1, [pc, #560]	; (8004354 <HAL_RCC_ClockConfig+0x260>)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	4313      	orrs	r3, r2
 8004128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800412a:	4b8a      	ldr	r3, [pc, #552]	; (8004354 <HAL_RCC_ClockConfig+0x260>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 030f 	and.w	r3, r3, #15
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d001      	beq.n	800413c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e106      	b.n	800434a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d073      	beq.n	8004230 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2b03      	cmp	r3, #3
 800414e:	d129      	bne.n	80041a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004150:	4b81      	ldr	r3, [pc, #516]	; (8004358 <HAL_RCC_ClockConfig+0x264>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e0f4      	b.n	800434a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004160:	f000 f99e 	bl	80044a0 <RCC_GetSysClockFreqFromPLLSource>
 8004164:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	4a7c      	ldr	r2, [pc, #496]	; (800435c <HAL_RCC_ClockConfig+0x268>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d93f      	bls.n	80041ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800416e:	4b7a      	ldr	r3, [pc, #488]	; (8004358 <HAL_RCC_ClockConfig+0x264>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d009      	beq.n	800418e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004182:	2b00      	cmp	r3, #0
 8004184:	d033      	beq.n	80041ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800418a:	2b00      	cmp	r3, #0
 800418c:	d12f      	bne.n	80041ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800418e:	4b72      	ldr	r3, [pc, #456]	; (8004358 <HAL_RCC_ClockConfig+0x264>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004196:	4a70      	ldr	r2, [pc, #448]	; (8004358 <HAL_RCC_ClockConfig+0x264>)
 8004198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800419c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800419e:	2380      	movs	r3, #128	; 0x80
 80041a0:	617b      	str	r3, [r7, #20]
 80041a2:	e024      	b.n	80041ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d107      	bne.n	80041bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041ac:	4b6a      	ldr	r3, [pc, #424]	; (8004358 <HAL_RCC_ClockConfig+0x264>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d109      	bne.n	80041cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e0c6      	b.n	800434a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041bc:	4b66      	ldr	r3, [pc, #408]	; (8004358 <HAL_RCC_ClockConfig+0x264>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e0be      	b.n	800434a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80041cc:	f000 f8ce 	bl	800436c <HAL_RCC_GetSysClockFreq>
 80041d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	4a61      	ldr	r2, [pc, #388]	; (800435c <HAL_RCC_ClockConfig+0x268>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d909      	bls.n	80041ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80041da:	4b5f      	ldr	r3, [pc, #380]	; (8004358 <HAL_RCC_ClockConfig+0x264>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041e2:	4a5d      	ldr	r2, [pc, #372]	; (8004358 <HAL_RCC_ClockConfig+0x264>)
 80041e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80041ea:	2380      	movs	r3, #128	; 0x80
 80041ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041ee:	4b5a      	ldr	r3, [pc, #360]	; (8004358 <HAL_RCC_ClockConfig+0x264>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f023 0203 	bic.w	r2, r3, #3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	4957      	ldr	r1, [pc, #348]	; (8004358 <HAL_RCC_ClockConfig+0x264>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004200:	f7fc ff30 	bl	8001064 <HAL_GetTick>
 8004204:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004206:	e00a      	b.n	800421e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004208:	f7fc ff2c 	bl	8001064 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	f241 3288 	movw	r2, #5000	; 0x1388
 8004216:	4293      	cmp	r3, r2
 8004218:	d901      	bls.n	800421e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e095      	b.n	800434a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800421e:	4b4e      	ldr	r3, [pc, #312]	; (8004358 <HAL_RCC_ClockConfig+0x264>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f003 020c 	and.w	r2, r3, #12
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	429a      	cmp	r2, r3
 800422e:	d1eb      	bne.n	8004208 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d023      	beq.n	8004284 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d005      	beq.n	8004254 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004248:	4b43      	ldr	r3, [pc, #268]	; (8004358 <HAL_RCC_ClockConfig+0x264>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	4a42      	ldr	r2, [pc, #264]	; (8004358 <HAL_RCC_ClockConfig+0x264>)
 800424e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004252:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0308 	and.w	r3, r3, #8
 800425c:	2b00      	cmp	r3, #0
 800425e:	d007      	beq.n	8004270 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004260:	4b3d      	ldr	r3, [pc, #244]	; (8004358 <HAL_RCC_ClockConfig+0x264>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004268:	4a3b      	ldr	r2, [pc, #236]	; (8004358 <HAL_RCC_ClockConfig+0x264>)
 800426a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800426e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004270:	4b39      	ldr	r3, [pc, #228]	; (8004358 <HAL_RCC_ClockConfig+0x264>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	4936      	ldr	r1, [pc, #216]	; (8004358 <HAL_RCC_ClockConfig+0x264>)
 800427e:	4313      	orrs	r3, r2
 8004280:	608b      	str	r3, [r1, #8]
 8004282:	e008      	b.n	8004296 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	2b80      	cmp	r3, #128	; 0x80
 8004288:	d105      	bne.n	8004296 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800428a:	4b33      	ldr	r3, [pc, #204]	; (8004358 <HAL_RCC_ClockConfig+0x264>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	4a32      	ldr	r2, [pc, #200]	; (8004358 <HAL_RCC_ClockConfig+0x264>)
 8004290:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004294:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004296:	4b2f      	ldr	r3, [pc, #188]	; (8004354 <HAL_RCC_ClockConfig+0x260>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d21d      	bcs.n	80042e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042a4:	4b2b      	ldr	r3, [pc, #172]	; (8004354 <HAL_RCC_ClockConfig+0x260>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f023 020f 	bic.w	r2, r3, #15
 80042ac:	4929      	ldr	r1, [pc, #164]	; (8004354 <HAL_RCC_ClockConfig+0x260>)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80042b4:	f7fc fed6 	bl	8001064 <HAL_GetTick>
 80042b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ba:	e00a      	b.n	80042d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042bc:	f7fc fed2 	bl	8001064 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e03b      	b.n	800434a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042d2:	4b20      	ldr	r3, [pc, #128]	; (8004354 <HAL_RCC_ClockConfig+0x260>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d1ed      	bne.n	80042bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d008      	beq.n	80042fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042ec:	4b1a      	ldr	r3, [pc, #104]	; (8004358 <HAL_RCC_ClockConfig+0x264>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	4917      	ldr	r1, [pc, #92]	; (8004358 <HAL_RCC_ClockConfig+0x264>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d009      	beq.n	800431e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800430a:	4b13      	ldr	r3, [pc, #76]	; (8004358 <HAL_RCC_ClockConfig+0x264>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	490f      	ldr	r1, [pc, #60]	; (8004358 <HAL_RCC_ClockConfig+0x264>)
 800431a:	4313      	orrs	r3, r2
 800431c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800431e:	f000 f825 	bl	800436c <HAL_RCC_GetSysClockFreq>
 8004322:	4602      	mov	r2, r0
 8004324:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <HAL_RCC_ClockConfig+0x264>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	091b      	lsrs	r3, r3, #4
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	490c      	ldr	r1, [pc, #48]	; (8004360 <HAL_RCC_ClockConfig+0x26c>)
 8004330:	5ccb      	ldrb	r3, [r1, r3]
 8004332:	f003 031f 	and.w	r3, r3, #31
 8004336:	fa22 f303 	lsr.w	r3, r2, r3
 800433a:	4a0a      	ldr	r2, [pc, #40]	; (8004364 <HAL_RCC_ClockConfig+0x270>)
 800433c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800433e:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <HAL_RCC_ClockConfig+0x274>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4618      	mov	r0, r3
 8004344:	f7fc fe42 	bl	8000fcc <HAL_InitTick>
 8004348:	4603      	mov	r3, r0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	40022000 	.word	0x40022000
 8004358:	40021000 	.word	0x40021000
 800435c:	04c4b400 	.word	0x04c4b400
 8004360:	08006308 	.word	0x08006308
 8004364:	20000004 	.word	0x20000004
 8004368:	20000008 	.word	0x20000008

0800436c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004372:	4b2c      	ldr	r3, [pc, #176]	; (8004424 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 030c 	and.w	r3, r3, #12
 800437a:	2b04      	cmp	r3, #4
 800437c:	d102      	bne.n	8004384 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800437e:	4b2a      	ldr	r3, [pc, #168]	; (8004428 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004380:	613b      	str	r3, [r7, #16]
 8004382:	e047      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004384:	4b27      	ldr	r3, [pc, #156]	; (8004424 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f003 030c 	and.w	r3, r3, #12
 800438c:	2b08      	cmp	r3, #8
 800438e:	d102      	bne.n	8004396 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004390:	4b26      	ldr	r3, [pc, #152]	; (800442c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004392:	613b      	str	r3, [r7, #16]
 8004394:	e03e      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004396:	4b23      	ldr	r3, [pc, #140]	; (8004424 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 030c 	and.w	r3, r3, #12
 800439e:	2b0c      	cmp	r3, #12
 80043a0:	d136      	bne.n	8004410 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043a2:	4b20      	ldr	r3, [pc, #128]	; (8004424 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043ac:	4b1d      	ldr	r3, [pc, #116]	; (8004424 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	091b      	lsrs	r3, r3, #4
 80043b2:	f003 030f 	and.w	r3, r3, #15
 80043b6:	3301      	adds	r3, #1
 80043b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2b03      	cmp	r3, #3
 80043be:	d10c      	bne.n	80043da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043c0:	4a1a      	ldr	r2, [pc, #104]	; (800442c <HAL_RCC_GetSysClockFreq+0xc0>)
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c8:	4a16      	ldr	r2, [pc, #88]	; (8004424 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043ca:	68d2      	ldr	r2, [r2, #12]
 80043cc:	0a12      	lsrs	r2, r2, #8
 80043ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043d2:	fb02 f303 	mul.w	r3, r2, r3
 80043d6:	617b      	str	r3, [r7, #20]
      break;
 80043d8:	e00c      	b.n	80043f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043da:	4a13      	ldr	r2, [pc, #76]	; (8004428 <HAL_RCC_GetSysClockFreq+0xbc>)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e2:	4a10      	ldr	r2, [pc, #64]	; (8004424 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043e4:	68d2      	ldr	r2, [r2, #12]
 80043e6:	0a12      	lsrs	r2, r2, #8
 80043e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043ec:	fb02 f303 	mul.w	r3, r2, r3
 80043f0:	617b      	str	r3, [r7, #20]
      break;
 80043f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043f4:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	0e5b      	lsrs	r3, r3, #25
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	3301      	adds	r3, #1
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	fbb2 f3f3 	udiv	r3, r2, r3
 800440c:	613b      	str	r3, [r7, #16]
 800440e:	e001      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004414:	693b      	ldr	r3, [r7, #16]
}
 8004416:	4618      	mov	r0, r3
 8004418:	371c      	adds	r7, #28
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	40021000 	.word	0x40021000
 8004428:	00f42400 	.word	0x00f42400
 800442c:	016e3600 	.word	0x016e3600

08004430 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004434:	4b03      	ldr	r3, [pc, #12]	; (8004444 <HAL_RCC_GetHCLKFreq+0x14>)
 8004436:	681b      	ldr	r3, [r3, #0]
}
 8004438:	4618      	mov	r0, r3
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	20000004 	.word	0x20000004

08004448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800444c:	f7ff fff0 	bl	8004430 <HAL_RCC_GetHCLKFreq>
 8004450:	4602      	mov	r2, r0
 8004452:	4b06      	ldr	r3, [pc, #24]	; (800446c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	0a1b      	lsrs	r3, r3, #8
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	4904      	ldr	r1, [pc, #16]	; (8004470 <HAL_RCC_GetPCLK1Freq+0x28>)
 800445e:	5ccb      	ldrb	r3, [r1, r3]
 8004460:	f003 031f 	and.w	r3, r3, #31
 8004464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004468:	4618      	mov	r0, r3
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40021000 	.word	0x40021000
 8004470:	08006318 	.word	0x08006318

08004474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004478:	f7ff ffda 	bl	8004430 <HAL_RCC_GetHCLKFreq>
 800447c:	4602      	mov	r2, r0
 800447e:	4b06      	ldr	r3, [pc, #24]	; (8004498 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	0adb      	lsrs	r3, r3, #11
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	4904      	ldr	r1, [pc, #16]	; (800449c <HAL_RCC_GetPCLK2Freq+0x28>)
 800448a:	5ccb      	ldrb	r3, [r1, r3]
 800448c:	f003 031f 	and.w	r3, r3, #31
 8004490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004494:	4618      	mov	r0, r3
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40021000 	.word	0x40021000
 800449c:	08006318 	.word	0x08006318

080044a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044a6:	4b1e      	ldr	r3, [pc, #120]	; (8004520 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044b0:	4b1b      	ldr	r3, [pc, #108]	; (8004520 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	091b      	lsrs	r3, r3, #4
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	3301      	adds	r3, #1
 80044bc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	2b03      	cmp	r3, #3
 80044c2:	d10c      	bne.n	80044de <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044c4:	4a17      	ldr	r2, [pc, #92]	; (8004524 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044cc:	4a14      	ldr	r2, [pc, #80]	; (8004520 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044ce:	68d2      	ldr	r2, [r2, #12]
 80044d0:	0a12      	lsrs	r2, r2, #8
 80044d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80044d6:	fb02 f303 	mul.w	r3, r2, r3
 80044da:	617b      	str	r3, [r7, #20]
    break;
 80044dc:	e00c      	b.n	80044f8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044de:	4a12      	ldr	r2, [pc, #72]	; (8004528 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e6:	4a0e      	ldr	r2, [pc, #56]	; (8004520 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044e8:	68d2      	ldr	r2, [r2, #12]
 80044ea:	0a12      	lsrs	r2, r2, #8
 80044ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80044f0:	fb02 f303 	mul.w	r3, r2, r3
 80044f4:	617b      	str	r3, [r7, #20]
    break;
 80044f6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044f8:	4b09      	ldr	r3, [pc, #36]	; (8004520 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	0e5b      	lsrs	r3, r3, #25
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	3301      	adds	r3, #1
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004510:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004512:	687b      	ldr	r3, [r7, #4]
}
 8004514:	4618      	mov	r0, r3
 8004516:	371c      	adds	r7, #28
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	40021000 	.word	0x40021000
 8004524:	016e3600 	.word	0x016e3600
 8004528:	00f42400 	.word	0x00f42400

0800452c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004534:	2300      	movs	r3, #0
 8004536:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004538:	2300      	movs	r3, #0
 800453a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 8098 	beq.w	800467a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800454a:	2300      	movs	r3, #0
 800454c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800454e:	4b43      	ldr	r3, [pc, #268]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10d      	bne.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800455a:	4b40      	ldr	r3, [pc, #256]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800455c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455e:	4a3f      	ldr	r2, [pc, #252]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004564:	6593      	str	r3, [r2, #88]	; 0x58
 8004566:	4b3d      	ldr	r3, [pc, #244]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800456e:	60bb      	str	r3, [r7, #8]
 8004570:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004572:	2301      	movs	r3, #1
 8004574:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004576:	4b3a      	ldr	r3, [pc, #232]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a39      	ldr	r2, [pc, #228]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800457c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004580:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004582:	f7fc fd6f 	bl	8001064 <HAL_GetTick>
 8004586:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004588:	e009      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800458a:	f7fc fd6b 	bl	8001064 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d902      	bls.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	74fb      	strb	r3, [r7, #19]
        break;
 800459c:	e005      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800459e:	4b30      	ldr	r3, [pc, #192]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d0ef      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80045aa:	7cfb      	ldrb	r3, [r7, #19]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d159      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045b0:	4b2a      	ldr	r3, [pc, #168]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d01e      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d019      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045cc:	4b23      	ldr	r3, [pc, #140]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045d8:	4b20      	ldr	r3, [pc, #128]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045de:	4a1f      	ldr	r2, [pc, #124]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045e8:	4b1c      	ldr	r3, [pc, #112]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ee:	4a1b      	ldr	r2, [pc, #108]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045f8:	4a18      	ldr	r2, [pc, #96]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d016      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460a:	f7fc fd2b 	bl	8001064 <HAL_GetTick>
 800460e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004610:	e00b      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004612:	f7fc fd27 	bl	8001064 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004620:	4293      	cmp	r3, r2
 8004622:	d902      	bls.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	74fb      	strb	r3, [r7, #19]
            break;
 8004628:	e006      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800462a:	4b0c      	ldr	r3, [pc, #48]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800462c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d0ec      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004638:	7cfb      	ldrb	r3, [r7, #19]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10b      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800463e:	4b07      	ldr	r3, [pc, #28]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004644:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800464c:	4903      	ldr	r1, [pc, #12]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800464e:	4313      	orrs	r3, r2
 8004650:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004654:	e008      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004656:	7cfb      	ldrb	r3, [r7, #19]
 8004658:	74bb      	strb	r3, [r7, #18]
 800465a:	e005      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800465c:	40021000 	.word	0x40021000
 8004660:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004664:	7cfb      	ldrb	r3, [r7, #19]
 8004666:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004668:	7c7b      	ldrb	r3, [r7, #17]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d105      	bne.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800466e:	4ba7      	ldr	r3, [pc, #668]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004672:	4aa6      	ldr	r2, [pc, #664]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004674:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004678:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00a      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004686:	4ba1      	ldr	r3, [pc, #644]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468c:	f023 0203 	bic.w	r2, r3, #3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	499d      	ldr	r1, [pc, #628]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004696:	4313      	orrs	r3, r2
 8004698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00a      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046a8:	4b98      	ldr	r3, [pc, #608]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ae:	f023 020c 	bic.w	r2, r3, #12
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	4995      	ldr	r1, [pc, #596]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0304 	and.w	r3, r3, #4
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046ca:	4b90      	ldr	r3, [pc, #576]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	498c      	ldr	r1, [pc, #560]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0308 	and.w	r3, r3, #8
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00a      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046ec:	4b87      	ldr	r3, [pc, #540]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	4984      	ldr	r1, [pc, #528]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0310 	and.w	r3, r3, #16
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800470e:	4b7f      	ldr	r3, [pc, #508]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004714:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	497b      	ldr	r1, [pc, #492]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800471e:	4313      	orrs	r3, r2
 8004720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0320 	and.w	r3, r3, #32
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00a      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004730:	4b76      	ldr	r3, [pc, #472]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004736:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	4973      	ldr	r1, [pc, #460]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004740:	4313      	orrs	r3, r2
 8004742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004752:	4b6e      	ldr	r3, [pc, #440]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004758:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	496a      	ldr	r1, [pc, #424]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00a      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004774:	4b65      	ldr	r3, [pc, #404]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	4962      	ldr	r1, [pc, #392]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004796:	4b5d      	ldr	r3, [pc, #372]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	4959      	ldr	r1, [pc, #356]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00a      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047b8:	4b54      	ldr	r3, [pc, #336]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047be:	f023 0203 	bic.w	r2, r3, #3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c6:	4951      	ldr	r1, [pc, #324]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047da:	4b4c      	ldr	r3, [pc, #304]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e8:	4948      	ldr	r1, [pc, #288]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d015      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047fc:	4b43      	ldr	r3, [pc, #268]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004802:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480a:	4940      	ldr	r1, [pc, #256]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800480c:	4313      	orrs	r3, r2
 800480e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004816:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800481a:	d105      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800481c:	4b3b      	ldr	r3, [pc, #236]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	4a3a      	ldr	r2, [pc, #232]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004822:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004826:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004830:	2b00      	cmp	r3, #0
 8004832:	d015      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004834:	4b35      	ldr	r3, [pc, #212]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004842:	4932      	ldr	r1, [pc, #200]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004844:	4313      	orrs	r3, r2
 8004846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004852:	d105      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004854:	4b2d      	ldr	r3, [pc, #180]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	4a2c      	ldr	r2, [pc, #176]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800485a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800485e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d015      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800486c:	4b27      	ldr	r3, [pc, #156]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800486e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004872:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487a:	4924      	ldr	r1, [pc, #144]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004886:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800488a:	d105      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800488c:	4b1f      	ldr	r3, [pc, #124]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	4a1e      	ldr	r2, [pc, #120]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004892:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004896:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d015      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048a4:	4b19      	ldr	r3, [pc, #100]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b2:	4916      	ldr	r1, [pc, #88]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048c2:	d105      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048c4:	4b11      	ldr	r3, [pc, #68]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	4a10      	ldr	r2, [pc, #64]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048ce:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d019      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048dc:	4b0b      	ldr	r3, [pc, #44]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	4908      	ldr	r1, [pc, #32]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048fa:	d109      	bne.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048fc:	4b03      	ldr	r3, [pc, #12]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	4a02      	ldr	r2, [pc, #8]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004902:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004906:	60d3      	str	r3, [r2, #12]
 8004908:	e002      	b.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800490a:	bf00      	nop
 800490c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d015      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800491c:	4b29      	ldr	r3, [pc, #164]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800491e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004922:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492a:	4926      	ldr	r1, [pc, #152]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800492c:	4313      	orrs	r3, r2
 800492e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004936:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800493a:	d105      	bne.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800493c:	4b21      	ldr	r3, [pc, #132]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	4a20      	ldr	r2, [pc, #128]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004946:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d015      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004954:	4b1b      	ldr	r3, [pc, #108]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004962:	4918      	ldr	r1, [pc, #96]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004964:	4313      	orrs	r3, r2
 8004966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800496e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004972:	d105      	bne.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004974:	4b13      	ldr	r3, [pc, #76]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	4a12      	ldr	r2, [pc, #72]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800497a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800497e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d015      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800498c:	4b0d      	ldr	r3, [pc, #52]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800498e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004992:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499a:	490a      	ldr	r1, [pc, #40]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800499c:	4313      	orrs	r3, r2
 800499e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049aa:	d105      	bne.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049ac:	4b05      	ldr	r3, [pc, #20]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	4a04      	ldr	r2, [pc, #16]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049b6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80049b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3718      	adds	r7, #24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40021000 	.word	0x40021000

080049c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e049      	b.n	8004a6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d106      	bne.n	80049f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7fc fa10 	bl	8000e14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3304      	adds	r3, #4
 8004a04:	4619      	mov	r1, r3
 8004a06:	4610      	mov	r0, r2
 8004a08:	f000 fbac 	bl	8005164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
	...

08004a78 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d001      	beq.n	8004a90 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e04c      	b.n	8004b2a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a26      	ldr	r2, [pc, #152]	; (8004b38 <HAL_TIM_Base_Start+0xc0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d022      	beq.n	8004ae8 <HAL_TIM_Base_Start+0x70>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aaa:	d01d      	beq.n	8004ae8 <HAL_TIM_Base_Start+0x70>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a22      	ldr	r2, [pc, #136]	; (8004b3c <HAL_TIM_Base_Start+0xc4>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d018      	beq.n	8004ae8 <HAL_TIM_Base_Start+0x70>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a21      	ldr	r2, [pc, #132]	; (8004b40 <HAL_TIM_Base_Start+0xc8>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d013      	beq.n	8004ae8 <HAL_TIM_Base_Start+0x70>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a1f      	ldr	r2, [pc, #124]	; (8004b44 <HAL_TIM_Base_Start+0xcc>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d00e      	beq.n	8004ae8 <HAL_TIM_Base_Start+0x70>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a1e      	ldr	r2, [pc, #120]	; (8004b48 <HAL_TIM_Base_Start+0xd0>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d009      	beq.n	8004ae8 <HAL_TIM_Base_Start+0x70>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a1c      	ldr	r2, [pc, #112]	; (8004b4c <HAL_TIM_Base_Start+0xd4>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d004      	beq.n	8004ae8 <HAL_TIM_Base_Start+0x70>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a1b      	ldr	r2, [pc, #108]	; (8004b50 <HAL_TIM_Base_Start+0xd8>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d115      	bne.n	8004b14 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689a      	ldr	r2, [r3, #8]
 8004aee:	4b19      	ldr	r3, [pc, #100]	; (8004b54 <HAL_TIM_Base_Start+0xdc>)
 8004af0:	4013      	ands	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2b06      	cmp	r3, #6
 8004af8:	d015      	beq.n	8004b26 <HAL_TIM_Base_Start+0xae>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b00:	d011      	beq.n	8004b26 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f042 0201 	orr.w	r2, r2, #1
 8004b10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b12:	e008      	b.n	8004b26 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 0201 	orr.w	r2, r2, #1
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	e000      	b.n	8004b28 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	40012c00 	.word	0x40012c00
 8004b3c:	40000400 	.word	0x40000400
 8004b40:	40000800 	.word	0x40000800
 8004b44:	40000c00 	.word	0x40000c00
 8004b48:	40013400 	.word	0x40013400
 8004b4c:	40014000 	.word	0x40014000
 8004b50:	40015000 	.word	0x40015000
 8004b54:	00010007 	.word	0x00010007

08004b58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d001      	beq.n	8004b70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e054      	b.n	8004c1a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0201 	orr.w	r2, r2, #1
 8004b86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a26      	ldr	r2, [pc, #152]	; (8004c28 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d022      	beq.n	8004bd8 <HAL_TIM_Base_Start_IT+0x80>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b9a:	d01d      	beq.n	8004bd8 <HAL_TIM_Base_Start_IT+0x80>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a22      	ldr	r2, [pc, #136]	; (8004c2c <HAL_TIM_Base_Start_IT+0xd4>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d018      	beq.n	8004bd8 <HAL_TIM_Base_Start_IT+0x80>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a21      	ldr	r2, [pc, #132]	; (8004c30 <HAL_TIM_Base_Start_IT+0xd8>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d013      	beq.n	8004bd8 <HAL_TIM_Base_Start_IT+0x80>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a1f      	ldr	r2, [pc, #124]	; (8004c34 <HAL_TIM_Base_Start_IT+0xdc>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d00e      	beq.n	8004bd8 <HAL_TIM_Base_Start_IT+0x80>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a1e      	ldr	r2, [pc, #120]	; (8004c38 <HAL_TIM_Base_Start_IT+0xe0>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d009      	beq.n	8004bd8 <HAL_TIM_Base_Start_IT+0x80>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a1c      	ldr	r2, [pc, #112]	; (8004c3c <HAL_TIM_Base_Start_IT+0xe4>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d004      	beq.n	8004bd8 <HAL_TIM_Base_Start_IT+0x80>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a1b      	ldr	r2, [pc, #108]	; (8004c40 <HAL_TIM_Base_Start_IT+0xe8>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d115      	bne.n	8004c04 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689a      	ldr	r2, [r3, #8]
 8004bde:	4b19      	ldr	r3, [pc, #100]	; (8004c44 <HAL_TIM_Base_Start_IT+0xec>)
 8004be0:	4013      	ands	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2b06      	cmp	r3, #6
 8004be8:	d015      	beq.n	8004c16 <HAL_TIM_Base_Start_IT+0xbe>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf0:	d011      	beq.n	8004c16 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f042 0201 	orr.w	r2, r2, #1
 8004c00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c02:	e008      	b.n	8004c16 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f042 0201 	orr.w	r2, r2, #1
 8004c12:	601a      	str	r2, [r3, #0]
 8004c14:	e000      	b.n	8004c18 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40012c00 	.word	0x40012c00
 8004c2c:	40000400 	.word	0x40000400
 8004c30:	40000800 	.word	0x40000800
 8004c34:	40000c00 	.word	0x40000c00
 8004c38:	40013400 	.word	0x40013400
 8004c3c:	40014000 	.word	0x40014000
 8004c40:	40015000 	.word	0x40015000
 8004c44:	00010007 	.word	0x00010007

08004c48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d020      	beq.n	8004cac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d01b      	beq.n	8004cac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f06f 0202 	mvn.w	r2, #2
 8004c7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 fa48 	bl	8005128 <HAL_TIM_IC_CaptureCallback>
 8004c98:	e005      	b.n	8004ca6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 fa3a 	bl	8005114 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 fa4b 	bl	800513c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f003 0304 	and.w	r3, r3, #4
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d020      	beq.n	8004cf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d01b      	beq.n	8004cf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f06f 0204 	mvn.w	r2, #4
 8004cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2202      	movs	r2, #2
 8004cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d003      	beq.n	8004ce6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 fa22 	bl	8005128 <HAL_TIM_IC_CaptureCallback>
 8004ce4:	e005      	b.n	8004cf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 fa14 	bl	8005114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 fa25 	bl	800513c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f003 0308 	and.w	r3, r3, #8
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d020      	beq.n	8004d44 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f003 0308 	and.w	r3, r3, #8
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d01b      	beq.n	8004d44 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f06f 0208 	mvn.w	r2, #8
 8004d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2204      	movs	r2, #4
 8004d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	69db      	ldr	r3, [r3, #28]
 8004d22:	f003 0303 	and.w	r3, r3, #3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f9fc 	bl	8005128 <HAL_TIM_IC_CaptureCallback>
 8004d30:	e005      	b.n	8004d3e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f9ee 	bl	8005114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f9ff 	bl	800513c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f003 0310 	and.w	r3, r3, #16
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d020      	beq.n	8004d90 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f003 0310 	and.w	r3, r3, #16
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d01b      	beq.n	8004d90 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f06f 0210 	mvn.w	r2, #16
 8004d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2208      	movs	r2, #8
 8004d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f9d6 	bl	8005128 <HAL_TIM_IC_CaptureCallback>
 8004d7c:	e005      	b.n	8004d8a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f9c8 	bl	8005114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f9d9 	bl	800513c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00c      	beq.n	8004db4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d007      	beq.n	8004db4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f06f 0201 	mvn.w	r2, #1
 8004dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7fb fe44 	bl	8000a3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d104      	bne.n	8004dc8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00c      	beq.n	8004de2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d007      	beq.n	8004de2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 fbb1 	bl	8005544 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00c      	beq.n	8004e06 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d007      	beq.n	8004e06 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 fba9 	bl	8005558 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00c      	beq.n	8004e2a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d007      	beq.n	8004e2a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 f993 	bl	8005150 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	f003 0320 	and.w	r3, r3, #32
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00c      	beq.n	8004e4e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f003 0320 	and.w	r3, r3, #32
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d007      	beq.n	8004e4e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f06f 0220 	mvn.w	r2, #32
 8004e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 fb71 	bl	8005530 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00c      	beq.n	8004e72 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d007      	beq.n	8004e72 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 fb7d 	bl	800556c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00c      	beq.n	8004e96 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d007      	beq.n	8004e96 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 fb75 	bl	8005580 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00c      	beq.n	8004eba <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d007      	beq.n	8004eba <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 fb6d 	bl	8005594 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00c      	beq.n	8004ede <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d007      	beq.n	8004ede <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 fb65 	bl	80055a8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ede:	bf00      	nop
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
	...

08004ee8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d101      	bne.n	8004f04 <HAL_TIM_ConfigClockSource+0x1c>
 8004f00:	2302      	movs	r3, #2
 8004f02:	e0f6      	b.n	80050f2 <HAL_TIM_ConfigClockSource+0x20a>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004f22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68ba      	ldr	r2, [r7, #8]
 8004f36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a6f      	ldr	r2, [pc, #444]	; (80050fc <HAL_TIM_ConfigClockSource+0x214>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	f000 80c1 	beq.w	80050c6 <HAL_TIM_ConfigClockSource+0x1de>
 8004f44:	4a6d      	ldr	r2, [pc, #436]	; (80050fc <HAL_TIM_ConfigClockSource+0x214>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	f200 80c6 	bhi.w	80050d8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f4c:	4a6c      	ldr	r2, [pc, #432]	; (8005100 <HAL_TIM_ConfigClockSource+0x218>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	f000 80b9 	beq.w	80050c6 <HAL_TIM_ConfigClockSource+0x1de>
 8004f54:	4a6a      	ldr	r2, [pc, #424]	; (8005100 <HAL_TIM_ConfigClockSource+0x218>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	f200 80be 	bhi.w	80050d8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f5c:	4a69      	ldr	r2, [pc, #420]	; (8005104 <HAL_TIM_ConfigClockSource+0x21c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	f000 80b1 	beq.w	80050c6 <HAL_TIM_ConfigClockSource+0x1de>
 8004f64:	4a67      	ldr	r2, [pc, #412]	; (8005104 <HAL_TIM_ConfigClockSource+0x21c>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	f200 80b6 	bhi.w	80050d8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f6c:	4a66      	ldr	r2, [pc, #408]	; (8005108 <HAL_TIM_ConfigClockSource+0x220>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	f000 80a9 	beq.w	80050c6 <HAL_TIM_ConfigClockSource+0x1de>
 8004f74:	4a64      	ldr	r2, [pc, #400]	; (8005108 <HAL_TIM_ConfigClockSource+0x220>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	f200 80ae 	bhi.w	80050d8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f7c:	4a63      	ldr	r2, [pc, #396]	; (800510c <HAL_TIM_ConfigClockSource+0x224>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	f000 80a1 	beq.w	80050c6 <HAL_TIM_ConfigClockSource+0x1de>
 8004f84:	4a61      	ldr	r2, [pc, #388]	; (800510c <HAL_TIM_ConfigClockSource+0x224>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	f200 80a6 	bhi.w	80050d8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f8c:	4a60      	ldr	r2, [pc, #384]	; (8005110 <HAL_TIM_ConfigClockSource+0x228>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	f000 8099 	beq.w	80050c6 <HAL_TIM_ConfigClockSource+0x1de>
 8004f94:	4a5e      	ldr	r2, [pc, #376]	; (8005110 <HAL_TIM_ConfigClockSource+0x228>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	f200 809e 	bhi.w	80050d8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f9c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004fa0:	f000 8091 	beq.w	80050c6 <HAL_TIM_ConfigClockSource+0x1de>
 8004fa4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004fa8:	f200 8096 	bhi.w	80050d8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fb0:	f000 8089 	beq.w	80050c6 <HAL_TIM_ConfigClockSource+0x1de>
 8004fb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fb8:	f200 808e 	bhi.w	80050d8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fc0:	d03e      	beq.n	8005040 <HAL_TIM_ConfigClockSource+0x158>
 8004fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fc6:	f200 8087 	bhi.w	80050d8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fce:	f000 8086 	beq.w	80050de <HAL_TIM_ConfigClockSource+0x1f6>
 8004fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fd6:	d87f      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fd8:	2b70      	cmp	r3, #112	; 0x70
 8004fda:	d01a      	beq.n	8005012 <HAL_TIM_ConfigClockSource+0x12a>
 8004fdc:	2b70      	cmp	r3, #112	; 0x70
 8004fde:	d87b      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fe0:	2b60      	cmp	r3, #96	; 0x60
 8004fe2:	d050      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0x19e>
 8004fe4:	2b60      	cmp	r3, #96	; 0x60
 8004fe6:	d877      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fe8:	2b50      	cmp	r3, #80	; 0x50
 8004fea:	d03c      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0x17e>
 8004fec:	2b50      	cmp	r3, #80	; 0x50
 8004fee:	d873      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ff0:	2b40      	cmp	r3, #64	; 0x40
 8004ff2:	d058      	beq.n	80050a6 <HAL_TIM_ConfigClockSource+0x1be>
 8004ff4:	2b40      	cmp	r3, #64	; 0x40
 8004ff6:	d86f      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ff8:	2b30      	cmp	r3, #48	; 0x30
 8004ffa:	d064      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0x1de>
 8004ffc:	2b30      	cmp	r3, #48	; 0x30
 8004ffe:	d86b      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x1f0>
 8005000:	2b20      	cmp	r3, #32
 8005002:	d060      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0x1de>
 8005004:	2b20      	cmp	r3, #32
 8005006:	d867      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x1f0>
 8005008:	2b00      	cmp	r3, #0
 800500a:	d05c      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0x1de>
 800500c:	2b10      	cmp	r3, #16
 800500e:	d05a      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0x1de>
 8005010:	e062      	b.n	80050d8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005022:	f000 f9cf 	bl	80053c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005034:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	609a      	str	r2, [r3, #8]
      break;
 800503e:	e04f      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005050:	f000 f9b8 	bl	80053c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689a      	ldr	r2, [r3, #8]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005062:	609a      	str	r2, [r3, #8]
      break;
 8005064:	e03c      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005072:	461a      	mov	r2, r3
 8005074:	f000 f92a 	bl	80052cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2150      	movs	r1, #80	; 0x50
 800507e:	4618      	mov	r0, r3
 8005080:	f000 f983 	bl	800538a <TIM_ITRx_SetConfig>
      break;
 8005084:	e02c      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005092:	461a      	mov	r2, r3
 8005094:	f000 f949 	bl	800532a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2160      	movs	r1, #96	; 0x60
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 f973 	bl	800538a <TIM_ITRx_SetConfig>
      break;
 80050a4:	e01c      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050b2:	461a      	mov	r2, r3
 80050b4:	f000 f90a 	bl	80052cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2140      	movs	r1, #64	; 0x40
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 f963 	bl	800538a <TIM_ITRx_SetConfig>
      break;
 80050c4:	e00c      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4619      	mov	r1, r3
 80050d0:	4610      	mov	r0, r2
 80050d2:	f000 f95a 	bl	800538a <TIM_ITRx_SetConfig>
      break;
 80050d6:	e003      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	73fb      	strb	r3, [r7, #15]
      break;
 80050dc:	e000      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80050de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	00100070 	.word	0x00100070
 8005100:	00100060 	.word	0x00100060
 8005104:	00100050 	.word	0x00100050
 8005108:	00100040 	.word	0x00100040
 800510c:	00100030 	.word	0x00100030
 8005110:	00100020 	.word	0x00100020

08005114 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a4c      	ldr	r2, [pc, #304]	; (80052a8 <TIM_Base_SetConfig+0x144>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d017      	beq.n	80051ac <TIM_Base_SetConfig+0x48>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005182:	d013      	beq.n	80051ac <TIM_Base_SetConfig+0x48>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a49      	ldr	r2, [pc, #292]	; (80052ac <TIM_Base_SetConfig+0x148>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d00f      	beq.n	80051ac <TIM_Base_SetConfig+0x48>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a48      	ldr	r2, [pc, #288]	; (80052b0 <TIM_Base_SetConfig+0x14c>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d00b      	beq.n	80051ac <TIM_Base_SetConfig+0x48>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a47      	ldr	r2, [pc, #284]	; (80052b4 <TIM_Base_SetConfig+0x150>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d007      	beq.n	80051ac <TIM_Base_SetConfig+0x48>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a46      	ldr	r2, [pc, #280]	; (80052b8 <TIM_Base_SetConfig+0x154>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d003      	beq.n	80051ac <TIM_Base_SetConfig+0x48>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a45      	ldr	r2, [pc, #276]	; (80052bc <TIM_Base_SetConfig+0x158>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d108      	bne.n	80051be <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a39      	ldr	r2, [pc, #228]	; (80052a8 <TIM_Base_SetConfig+0x144>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d023      	beq.n	800520e <TIM_Base_SetConfig+0xaa>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051cc:	d01f      	beq.n	800520e <TIM_Base_SetConfig+0xaa>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a36      	ldr	r2, [pc, #216]	; (80052ac <TIM_Base_SetConfig+0x148>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d01b      	beq.n	800520e <TIM_Base_SetConfig+0xaa>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a35      	ldr	r2, [pc, #212]	; (80052b0 <TIM_Base_SetConfig+0x14c>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d017      	beq.n	800520e <TIM_Base_SetConfig+0xaa>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a34      	ldr	r2, [pc, #208]	; (80052b4 <TIM_Base_SetConfig+0x150>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d013      	beq.n	800520e <TIM_Base_SetConfig+0xaa>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a33      	ldr	r2, [pc, #204]	; (80052b8 <TIM_Base_SetConfig+0x154>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d00f      	beq.n	800520e <TIM_Base_SetConfig+0xaa>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a33      	ldr	r2, [pc, #204]	; (80052c0 <TIM_Base_SetConfig+0x15c>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d00b      	beq.n	800520e <TIM_Base_SetConfig+0xaa>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a32      	ldr	r2, [pc, #200]	; (80052c4 <TIM_Base_SetConfig+0x160>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d007      	beq.n	800520e <TIM_Base_SetConfig+0xaa>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a31      	ldr	r2, [pc, #196]	; (80052c8 <TIM_Base_SetConfig+0x164>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d003      	beq.n	800520e <TIM_Base_SetConfig+0xaa>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a2c      	ldr	r2, [pc, #176]	; (80052bc <TIM_Base_SetConfig+0x158>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d108      	bne.n	8005220 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005214:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4313      	orrs	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	4313      	orrs	r3, r2
 800522c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a18      	ldr	r2, [pc, #96]	; (80052a8 <TIM_Base_SetConfig+0x144>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d013      	beq.n	8005274 <TIM_Base_SetConfig+0x110>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a1a      	ldr	r2, [pc, #104]	; (80052b8 <TIM_Base_SetConfig+0x154>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d00f      	beq.n	8005274 <TIM_Base_SetConfig+0x110>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a1a      	ldr	r2, [pc, #104]	; (80052c0 <TIM_Base_SetConfig+0x15c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d00b      	beq.n	8005274 <TIM_Base_SetConfig+0x110>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a19      	ldr	r2, [pc, #100]	; (80052c4 <TIM_Base_SetConfig+0x160>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d007      	beq.n	8005274 <TIM_Base_SetConfig+0x110>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a18      	ldr	r2, [pc, #96]	; (80052c8 <TIM_Base_SetConfig+0x164>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d003      	beq.n	8005274 <TIM_Base_SetConfig+0x110>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a13      	ldr	r2, [pc, #76]	; (80052bc <TIM_Base_SetConfig+0x158>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d103      	bne.n	800527c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	691a      	ldr	r2, [r3, #16]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b01      	cmp	r3, #1
 800528c:	d105      	bne.n	800529a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	f023 0201 	bic.w	r2, r3, #1
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	611a      	str	r2, [r3, #16]
  }
}
 800529a:	bf00      	nop
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	40012c00 	.word	0x40012c00
 80052ac:	40000400 	.word	0x40000400
 80052b0:	40000800 	.word	0x40000800
 80052b4:	40000c00 	.word	0x40000c00
 80052b8:	40013400 	.word	0x40013400
 80052bc:	40015000 	.word	0x40015000
 80052c0:	40014000 	.word	0x40014000
 80052c4:	40014400 	.word	0x40014400
 80052c8:	40014800 	.word	0x40014800

080052cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	f023 0201 	bic.w	r2, r3, #1
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	011b      	lsls	r3, r3, #4
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	4313      	orrs	r3, r2
 8005300:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f023 030a 	bic.w	r3, r3, #10
 8005308:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	4313      	orrs	r3, r2
 8005310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	621a      	str	r2, [r3, #32]
}
 800531e:	bf00      	nop
 8005320:	371c      	adds	r7, #28
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800532a:	b480      	push	{r7}
 800532c:	b087      	sub	sp, #28
 800532e:	af00      	add	r7, sp, #0
 8005330:	60f8      	str	r0, [r7, #12]
 8005332:	60b9      	str	r1, [r7, #8]
 8005334:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	f023 0210 	bic.w	r2, r3, #16
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005354:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	031b      	lsls	r3, r3, #12
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	4313      	orrs	r3, r2
 800535e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005366:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	011b      	lsls	r3, r3, #4
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	4313      	orrs	r3, r2
 8005370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	621a      	str	r2, [r3, #32]
}
 800537e:	bf00      	nop
 8005380:	371c      	adds	r7, #28
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800538a:	b480      	push	{r7}
 800538c:	b085      	sub	sp, #20
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
 8005392:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80053a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	f043 0307 	orr.w	r3, r3, #7
 80053b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	609a      	str	r2, [r3, #8]
}
 80053b8:	bf00      	nop
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
 80053d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	021a      	lsls	r2, r3, #8
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	431a      	orrs	r2, r3
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	609a      	str	r2, [r3, #8]
}
 80053f8:	bf00      	nop
 80053fa:	371c      	adds	r7, #28
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005414:	2b01      	cmp	r3, #1
 8005416:	d101      	bne.n	800541c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005418:	2302      	movs	r3, #2
 800541a:	e074      	b.n	8005506 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a34      	ldr	r2, [pc, #208]	; (8005514 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d009      	beq.n	800545a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a33      	ldr	r2, [pc, #204]	; (8005518 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d004      	beq.n	800545a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a31      	ldr	r2, [pc, #196]	; (800551c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d108      	bne.n	800546c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005460:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	4313      	orrs	r3, r2
 800546a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005476:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a21      	ldr	r2, [pc, #132]	; (8005514 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d022      	beq.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800549c:	d01d      	beq.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a1f      	ldr	r2, [pc, #124]	; (8005520 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d018      	beq.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a1d      	ldr	r2, [pc, #116]	; (8005524 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d013      	beq.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a1c      	ldr	r2, [pc, #112]	; (8005528 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d00e      	beq.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a15      	ldr	r2, [pc, #84]	; (8005518 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d009      	beq.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a18      	ldr	r2, [pc, #96]	; (800552c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d004      	beq.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a11      	ldr	r2, [pc, #68]	; (800551c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d10c      	bne.n	80054f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	40012c00 	.word	0x40012c00
 8005518:	40013400 	.word	0x40013400
 800551c:	40015000 	.word	0x40015000
 8005520:	40000400 	.word	0x40000400
 8005524:	40000800 	.word	0x40000800
 8005528:	40000c00 	.word	0x40000c00
 800552c:	40014000 	.word	0x40014000

08005530 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e042      	b.n	8005654 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d106      	bne.n	80055e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f7fb fbbf 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2224      	movs	r2, #36	; 0x24
 80055ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0201 	bic.w	r2, r2, #1
 80055fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005602:	2b00      	cmp	r3, #0
 8005604:	d002      	beq.n	800560c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 fb24 	bl	8005c54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 f825 	bl	800565c <UART_SetConfig>
 8005612:	4603      	mov	r3, r0
 8005614:	2b01      	cmp	r3, #1
 8005616:	d101      	bne.n	800561c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e01b      	b.n	8005654 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800562a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689a      	ldr	r2, [r3, #8]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800563a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0201 	orr.w	r2, r2, #1
 800564a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 fba3 	bl	8005d98 <UART_CheckIdleState>
 8005652:	4603      	mov	r3, r0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800565c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005660:	b08c      	sub	sp, #48	; 0x30
 8005662:	af00      	add	r7, sp, #0
 8005664:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005666:	2300      	movs	r3, #0
 8005668:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	689a      	ldr	r2, [r3, #8]
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	431a      	orrs	r2, r3
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	431a      	orrs	r2, r3
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	69db      	ldr	r3, [r3, #28]
 8005680:	4313      	orrs	r3, r2
 8005682:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	4baa      	ldr	r3, [pc, #680]	; (8005934 <UART_SetConfig+0x2d8>)
 800568c:	4013      	ands	r3, r2
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	6812      	ldr	r2, [r2, #0]
 8005692:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005694:	430b      	orrs	r3, r1
 8005696:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	68da      	ldr	r2, [r3, #12]
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a9f      	ldr	r2, [pc, #636]	; (8005938 <UART_SetConfig+0x2dc>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d004      	beq.n	80056c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056c4:	4313      	orrs	r3, r2
 80056c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80056d2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	6812      	ldr	r2, [r2, #0]
 80056da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056dc:	430b      	orrs	r3, r1
 80056de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e6:	f023 010f 	bic.w	r1, r3, #15
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a90      	ldr	r2, [pc, #576]	; (800593c <UART_SetConfig+0x2e0>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d125      	bne.n	800574c <UART_SetConfig+0xf0>
 8005700:	4b8f      	ldr	r3, [pc, #572]	; (8005940 <UART_SetConfig+0x2e4>)
 8005702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005706:	f003 0303 	and.w	r3, r3, #3
 800570a:	2b03      	cmp	r3, #3
 800570c:	d81a      	bhi.n	8005744 <UART_SetConfig+0xe8>
 800570e:	a201      	add	r2, pc, #4	; (adr r2, 8005714 <UART_SetConfig+0xb8>)
 8005710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005714:	08005725 	.word	0x08005725
 8005718:	08005735 	.word	0x08005735
 800571c:	0800572d 	.word	0x0800572d
 8005720:	0800573d 	.word	0x0800573d
 8005724:	2301      	movs	r3, #1
 8005726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800572a:	e116      	b.n	800595a <UART_SetConfig+0x2fe>
 800572c:	2302      	movs	r3, #2
 800572e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005732:	e112      	b.n	800595a <UART_SetConfig+0x2fe>
 8005734:	2304      	movs	r3, #4
 8005736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800573a:	e10e      	b.n	800595a <UART_SetConfig+0x2fe>
 800573c:	2308      	movs	r3, #8
 800573e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005742:	e10a      	b.n	800595a <UART_SetConfig+0x2fe>
 8005744:	2310      	movs	r3, #16
 8005746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800574a:	e106      	b.n	800595a <UART_SetConfig+0x2fe>
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a7c      	ldr	r2, [pc, #496]	; (8005944 <UART_SetConfig+0x2e8>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d138      	bne.n	80057c8 <UART_SetConfig+0x16c>
 8005756:	4b7a      	ldr	r3, [pc, #488]	; (8005940 <UART_SetConfig+0x2e4>)
 8005758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800575c:	f003 030c 	and.w	r3, r3, #12
 8005760:	2b0c      	cmp	r3, #12
 8005762:	d82d      	bhi.n	80057c0 <UART_SetConfig+0x164>
 8005764:	a201      	add	r2, pc, #4	; (adr r2, 800576c <UART_SetConfig+0x110>)
 8005766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576a:	bf00      	nop
 800576c:	080057a1 	.word	0x080057a1
 8005770:	080057c1 	.word	0x080057c1
 8005774:	080057c1 	.word	0x080057c1
 8005778:	080057c1 	.word	0x080057c1
 800577c:	080057b1 	.word	0x080057b1
 8005780:	080057c1 	.word	0x080057c1
 8005784:	080057c1 	.word	0x080057c1
 8005788:	080057c1 	.word	0x080057c1
 800578c:	080057a9 	.word	0x080057a9
 8005790:	080057c1 	.word	0x080057c1
 8005794:	080057c1 	.word	0x080057c1
 8005798:	080057c1 	.word	0x080057c1
 800579c:	080057b9 	.word	0x080057b9
 80057a0:	2300      	movs	r3, #0
 80057a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057a6:	e0d8      	b.n	800595a <UART_SetConfig+0x2fe>
 80057a8:	2302      	movs	r3, #2
 80057aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ae:	e0d4      	b.n	800595a <UART_SetConfig+0x2fe>
 80057b0:	2304      	movs	r3, #4
 80057b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057b6:	e0d0      	b.n	800595a <UART_SetConfig+0x2fe>
 80057b8:	2308      	movs	r3, #8
 80057ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057be:	e0cc      	b.n	800595a <UART_SetConfig+0x2fe>
 80057c0:	2310      	movs	r3, #16
 80057c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057c6:	e0c8      	b.n	800595a <UART_SetConfig+0x2fe>
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a5e      	ldr	r2, [pc, #376]	; (8005948 <UART_SetConfig+0x2ec>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d125      	bne.n	800581e <UART_SetConfig+0x1c2>
 80057d2:	4b5b      	ldr	r3, [pc, #364]	; (8005940 <UART_SetConfig+0x2e4>)
 80057d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80057dc:	2b30      	cmp	r3, #48	; 0x30
 80057de:	d016      	beq.n	800580e <UART_SetConfig+0x1b2>
 80057e0:	2b30      	cmp	r3, #48	; 0x30
 80057e2:	d818      	bhi.n	8005816 <UART_SetConfig+0x1ba>
 80057e4:	2b20      	cmp	r3, #32
 80057e6:	d00a      	beq.n	80057fe <UART_SetConfig+0x1a2>
 80057e8:	2b20      	cmp	r3, #32
 80057ea:	d814      	bhi.n	8005816 <UART_SetConfig+0x1ba>
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d002      	beq.n	80057f6 <UART_SetConfig+0x19a>
 80057f0:	2b10      	cmp	r3, #16
 80057f2:	d008      	beq.n	8005806 <UART_SetConfig+0x1aa>
 80057f4:	e00f      	b.n	8005816 <UART_SetConfig+0x1ba>
 80057f6:	2300      	movs	r3, #0
 80057f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057fc:	e0ad      	b.n	800595a <UART_SetConfig+0x2fe>
 80057fe:	2302      	movs	r3, #2
 8005800:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005804:	e0a9      	b.n	800595a <UART_SetConfig+0x2fe>
 8005806:	2304      	movs	r3, #4
 8005808:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800580c:	e0a5      	b.n	800595a <UART_SetConfig+0x2fe>
 800580e:	2308      	movs	r3, #8
 8005810:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005814:	e0a1      	b.n	800595a <UART_SetConfig+0x2fe>
 8005816:	2310      	movs	r3, #16
 8005818:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800581c:	e09d      	b.n	800595a <UART_SetConfig+0x2fe>
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a4a      	ldr	r2, [pc, #296]	; (800594c <UART_SetConfig+0x2f0>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d125      	bne.n	8005874 <UART_SetConfig+0x218>
 8005828:	4b45      	ldr	r3, [pc, #276]	; (8005940 <UART_SetConfig+0x2e4>)
 800582a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800582e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005832:	2bc0      	cmp	r3, #192	; 0xc0
 8005834:	d016      	beq.n	8005864 <UART_SetConfig+0x208>
 8005836:	2bc0      	cmp	r3, #192	; 0xc0
 8005838:	d818      	bhi.n	800586c <UART_SetConfig+0x210>
 800583a:	2b80      	cmp	r3, #128	; 0x80
 800583c:	d00a      	beq.n	8005854 <UART_SetConfig+0x1f8>
 800583e:	2b80      	cmp	r3, #128	; 0x80
 8005840:	d814      	bhi.n	800586c <UART_SetConfig+0x210>
 8005842:	2b00      	cmp	r3, #0
 8005844:	d002      	beq.n	800584c <UART_SetConfig+0x1f0>
 8005846:	2b40      	cmp	r3, #64	; 0x40
 8005848:	d008      	beq.n	800585c <UART_SetConfig+0x200>
 800584a:	e00f      	b.n	800586c <UART_SetConfig+0x210>
 800584c:	2300      	movs	r3, #0
 800584e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005852:	e082      	b.n	800595a <UART_SetConfig+0x2fe>
 8005854:	2302      	movs	r3, #2
 8005856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800585a:	e07e      	b.n	800595a <UART_SetConfig+0x2fe>
 800585c:	2304      	movs	r3, #4
 800585e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005862:	e07a      	b.n	800595a <UART_SetConfig+0x2fe>
 8005864:	2308      	movs	r3, #8
 8005866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800586a:	e076      	b.n	800595a <UART_SetConfig+0x2fe>
 800586c:	2310      	movs	r3, #16
 800586e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005872:	e072      	b.n	800595a <UART_SetConfig+0x2fe>
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a35      	ldr	r2, [pc, #212]	; (8005950 <UART_SetConfig+0x2f4>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d12a      	bne.n	80058d4 <UART_SetConfig+0x278>
 800587e:	4b30      	ldr	r3, [pc, #192]	; (8005940 <UART_SetConfig+0x2e4>)
 8005880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005884:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005888:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800588c:	d01a      	beq.n	80058c4 <UART_SetConfig+0x268>
 800588e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005892:	d81b      	bhi.n	80058cc <UART_SetConfig+0x270>
 8005894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005898:	d00c      	beq.n	80058b4 <UART_SetConfig+0x258>
 800589a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800589e:	d815      	bhi.n	80058cc <UART_SetConfig+0x270>
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <UART_SetConfig+0x250>
 80058a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058a8:	d008      	beq.n	80058bc <UART_SetConfig+0x260>
 80058aa:	e00f      	b.n	80058cc <UART_SetConfig+0x270>
 80058ac:	2300      	movs	r3, #0
 80058ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058b2:	e052      	b.n	800595a <UART_SetConfig+0x2fe>
 80058b4:	2302      	movs	r3, #2
 80058b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058ba:	e04e      	b.n	800595a <UART_SetConfig+0x2fe>
 80058bc:	2304      	movs	r3, #4
 80058be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058c2:	e04a      	b.n	800595a <UART_SetConfig+0x2fe>
 80058c4:	2308      	movs	r3, #8
 80058c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058ca:	e046      	b.n	800595a <UART_SetConfig+0x2fe>
 80058cc:	2310      	movs	r3, #16
 80058ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058d2:	e042      	b.n	800595a <UART_SetConfig+0x2fe>
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a17      	ldr	r2, [pc, #92]	; (8005938 <UART_SetConfig+0x2dc>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d13a      	bne.n	8005954 <UART_SetConfig+0x2f8>
 80058de:	4b18      	ldr	r3, [pc, #96]	; (8005940 <UART_SetConfig+0x2e4>)
 80058e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80058e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058ec:	d01a      	beq.n	8005924 <UART_SetConfig+0x2c8>
 80058ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058f2:	d81b      	bhi.n	800592c <UART_SetConfig+0x2d0>
 80058f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058f8:	d00c      	beq.n	8005914 <UART_SetConfig+0x2b8>
 80058fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058fe:	d815      	bhi.n	800592c <UART_SetConfig+0x2d0>
 8005900:	2b00      	cmp	r3, #0
 8005902:	d003      	beq.n	800590c <UART_SetConfig+0x2b0>
 8005904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005908:	d008      	beq.n	800591c <UART_SetConfig+0x2c0>
 800590a:	e00f      	b.n	800592c <UART_SetConfig+0x2d0>
 800590c:	2300      	movs	r3, #0
 800590e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005912:	e022      	b.n	800595a <UART_SetConfig+0x2fe>
 8005914:	2302      	movs	r3, #2
 8005916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800591a:	e01e      	b.n	800595a <UART_SetConfig+0x2fe>
 800591c:	2304      	movs	r3, #4
 800591e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005922:	e01a      	b.n	800595a <UART_SetConfig+0x2fe>
 8005924:	2308      	movs	r3, #8
 8005926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800592a:	e016      	b.n	800595a <UART_SetConfig+0x2fe>
 800592c:	2310      	movs	r3, #16
 800592e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005932:	e012      	b.n	800595a <UART_SetConfig+0x2fe>
 8005934:	cfff69f3 	.word	0xcfff69f3
 8005938:	40008000 	.word	0x40008000
 800593c:	40013800 	.word	0x40013800
 8005940:	40021000 	.word	0x40021000
 8005944:	40004400 	.word	0x40004400
 8005948:	40004800 	.word	0x40004800
 800594c:	40004c00 	.word	0x40004c00
 8005950:	40005000 	.word	0x40005000
 8005954:	2310      	movs	r3, #16
 8005956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4aae      	ldr	r2, [pc, #696]	; (8005c18 <UART_SetConfig+0x5bc>)
 8005960:	4293      	cmp	r3, r2
 8005962:	f040 8097 	bne.w	8005a94 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005966:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800596a:	2b08      	cmp	r3, #8
 800596c:	d823      	bhi.n	80059b6 <UART_SetConfig+0x35a>
 800596e:	a201      	add	r2, pc, #4	; (adr r2, 8005974 <UART_SetConfig+0x318>)
 8005970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005974:	08005999 	.word	0x08005999
 8005978:	080059b7 	.word	0x080059b7
 800597c:	080059a1 	.word	0x080059a1
 8005980:	080059b7 	.word	0x080059b7
 8005984:	080059a7 	.word	0x080059a7
 8005988:	080059b7 	.word	0x080059b7
 800598c:	080059b7 	.word	0x080059b7
 8005990:	080059b7 	.word	0x080059b7
 8005994:	080059af 	.word	0x080059af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005998:	f7fe fd56 	bl	8004448 <HAL_RCC_GetPCLK1Freq>
 800599c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800599e:	e010      	b.n	80059c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059a0:	4b9e      	ldr	r3, [pc, #632]	; (8005c1c <UART_SetConfig+0x5c0>)
 80059a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059a4:	e00d      	b.n	80059c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059a6:	f7fe fce1 	bl	800436c <HAL_RCC_GetSysClockFreq>
 80059aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059ac:	e009      	b.n	80059c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059b4:	e005      	b.n	80059c2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80059b6:	2300      	movs	r3, #0
 80059b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80059c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 8130 	beq.w	8005c2a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ce:	4a94      	ldr	r2, [pc, #592]	; (8005c20 <UART_SetConfig+0x5c4>)
 80059d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059d4:	461a      	mov	r2, r3
 80059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80059dc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	4613      	mov	r3, r2
 80059e4:	005b      	lsls	r3, r3, #1
 80059e6:	4413      	add	r3, r2
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d305      	bcc.n	80059fa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d903      	bls.n	8005a02 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005a00:	e113      	b.n	8005c2a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	2200      	movs	r2, #0
 8005a06:	60bb      	str	r3, [r7, #8]
 8005a08:	60fa      	str	r2, [r7, #12]
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0e:	4a84      	ldr	r2, [pc, #528]	; (8005c20 <UART_SetConfig+0x5c4>)
 8005a10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	2200      	movs	r2, #0
 8005a18:	603b      	str	r3, [r7, #0]
 8005a1a:	607a      	str	r2, [r7, #4]
 8005a1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a24:	f7fa fbf8 	bl	8000218 <__aeabi_uldivmod>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	4610      	mov	r0, r2
 8005a2e:	4619      	mov	r1, r3
 8005a30:	f04f 0200 	mov.w	r2, #0
 8005a34:	f04f 0300 	mov.w	r3, #0
 8005a38:	020b      	lsls	r3, r1, #8
 8005a3a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a3e:	0202      	lsls	r2, r0, #8
 8005a40:	6979      	ldr	r1, [r7, #20]
 8005a42:	6849      	ldr	r1, [r1, #4]
 8005a44:	0849      	lsrs	r1, r1, #1
 8005a46:	2000      	movs	r0, #0
 8005a48:	460c      	mov	r4, r1
 8005a4a:	4605      	mov	r5, r0
 8005a4c:	eb12 0804 	adds.w	r8, r2, r4
 8005a50:	eb43 0905 	adc.w	r9, r3, r5
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	469a      	mov	sl, r3
 8005a5c:	4693      	mov	fp, r2
 8005a5e:	4652      	mov	r2, sl
 8005a60:	465b      	mov	r3, fp
 8005a62:	4640      	mov	r0, r8
 8005a64:	4649      	mov	r1, r9
 8005a66:	f7fa fbd7 	bl	8000218 <__aeabi_uldivmod>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	4613      	mov	r3, r2
 8005a70:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a72:	6a3b      	ldr	r3, [r7, #32]
 8005a74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a78:	d308      	bcc.n	8005a8c <UART_SetConfig+0x430>
 8005a7a:	6a3b      	ldr	r3, [r7, #32]
 8005a7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a80:	d204      	bcs.n	8005a8c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	6a3a      	ldr	r2, [r7, #32]
 8005a88:	60da      	str	r2, [r3, #12]
 8005a8a:	e0ce      	b.n	8005c2a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005a92:	e0ca      	b.n	8005c2a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a9c:	d166      	bne.n	8005b6c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005a9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005aa2:	2b08      	cmp	r3, #8
 8005aa4:	d827      	bhi.n	8005af6 <UART_SetConfig+0x49a>
 8005aa6:	a201      	add	r2, pc, #4	; (adr r2, 8005aac <UART_SetConfig+0x450>)
 8005aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aac:	08005ad1 	.word	0x08005ad1
 8005ab0:	08005ad9 	.word	0x08005ad9
 8005ab4:	08005ae1 	.word	0x08005ae1
 8005ab8:	08005af7 	.word	0x08005af7
 8005abc:	08005ae7 	.word	0x08005ae7
 8005ac0:	08005af7 	.word	0x08005af7
 8005ac4:	08005af7 	.word	0x08005af7
 8005ac8:	08005af7 	.word	0x08005af7
 8005acc:	08005aef 	.word	0x08005aef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ad0:	f7fe fcba 	bl	8004448 <HAL_RCC_GetPCLK1Freq>
 8005ad4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ad6:	e014      	b.n	8005b02 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ad8:	f7fe fccc 	bl	8004474 <HAL_RCC_GetPCLK2Freq>
 8005adc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ade:	e010      	b.n	8005b02 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ae0:	4b4e      	ldr	r3, [pc, #312]	; (8005c1c <UART_SetConfig+0x5c0>)
 8005ae2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ae4:	e00d      	b.n	8005b02 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ae6:	f7fe fc41 	bl	800436c <HAL_RCC_GetSysClockFreq>
 8005aea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005aec:	e009      	b.n	8005b02 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005af2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005af4:	e005      	b.n	8005b02 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005af6:	2300      	movs	r3, #0
 8005af8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005b00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 8090 	beq.w	8005c2a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0e:	4a44      	ldr	r2, [pc, #272]	; (8005c20 <UART_SetConfig+0x5c4>)
 8005b10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b14:	461a      	mov	r2, r3
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b1c:	005a      	lsls	r2, r3, #1
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	085b      	lsrs	r3, r3, #1
 8005b24:	441a      	add	r2, r3
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b2e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b30:	6a3b      	ldr	r3, [r7, #32]
 8005b32:	2b0f      	cmp	r3, #15
 8005b34:	d916      	bls.n	8005b64 <UART_SetConfig+0x508>
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b3c:	d212      	bcs.n	8005b64 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b3e:	6a3b      	ldr	r3, [r7, #32]
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	f023 030f 	bic.w	r3, r3, #15
 8005b46:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	085b      	lsrs	r3, r3, #1
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	f003 0307 	and.w	r3, r3, #7
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	8bfb      	ldrh	r3, [r7, #30]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	8bfa      	ldrh	r2, [r7, #30]
 8005b60:	60da      	str	r2, [r3, #12]
 8005b62:	e062      	b.n	8005c2a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005b6a:	e05e      	b.n	8005c2a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b70:	2b08      	cmp	r3, #8
 8005b72:	d828      	bhi.n	8005bc6 <UART_SetConfig+0x56a>
 8005b74:	a201      	add	r2, pc, #4	; (adr r2, 8005b7c <UART_SetConfig+0x520>)
 8005b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7a:	bf00      	nop
 8005b7c:	08005ba1 	.word	0x08005ba1
 8005b80:	08005ba9 	.word	0x08005ba9
 8005b84:	08005bb1 	.word	0x08005bb1
 8005b88:	08005bc7 	.word	0x08005bc7
 8005b8c:	08005bb7 	.word	0x08005bb7
 8005b90:	08005bc7 	.word	0x08005bc7
 8005b94:	08005bc7 	.word	0x08005bc7
 8005b98:	08005bc7 	.word	0x08005bc7
 8005b9c:	08005bbf 	.word	0x08005bbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ba0:	f7fe fc52 	bl	8004448 <HAL_RCC_GetPCLK1Freq>
 8005ba4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ba6:	e014      	b.n	8005bd2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ba8:	f7fe fc64 	bl	8004474 <HAL_RCC_GetPCLK2Freq>
 8005bac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005bae:	e010      	b.n	8005bd2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bb0:	4b1a      	ldr	r3, [pc, #104]	; (8005c1c <UART_SetConfig+0x5c0>)
 8005bb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005bb4:	e00d      	b.n	8005bd2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bb6:	f7fe fbd9 	bl	800436c <HAL_RCC_GetSysClockFreq>
 8005bba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005bbc:	e009      	b.n	8005bd2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005bc4:	e005      	b.n	8005bd2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005bd0:	bf00      	nop
    }

    if (pclk != 0U)
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d028      	beq.n	8005c2a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	4a10      	ldr	r2, [pc, #64]	; (8005c20 <UART_SetConfig+0x5c4>)
 8005bde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005be2:	461a      	mov	r2, r3
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	fbb3 f2f2 	udiv	r2, r3, r2
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	085b      	lsrs	r3, r3, #1
 8005bf0:	441a      	add	r2, r3
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bfa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	2b0f      	cmp	r3, #15
 8005c00:	d910      	bls.n	8005c24 <UART_SetConfig+0x5c8>
 8005c02:	6a3b      	ldr	r3, [r7, #32]
 8005c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c08:	d20c      	bcs.n	8005c24 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	60da      	str	r2, [r3, #12]
 8005c14:	e009      	b.n	8005c2a <UART_SetConfig+0x5ce>
 8005c16:	bf00      	nop
 8005c18:	40008000 	.word	0x40008000
 8005c1c:	00f42400 	.word	0x00f42400
 8005c20:	08006320 	.word	0x08006320
      }
      else
      {
        ret = HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	2200      	movs	r2, #0
 8005c44:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005c46:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3730      	adds	r7, #48	; 0x30
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005c54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c60:	f003 0308 	and.w	r3, r3, #8
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00a      	beq.n	8005c7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00a      	beq.n	8005ca0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00a      	beq.n	8005cc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc6:	f003 0304 	and.w	r3, r3, #4
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00a      	beq.n	8005ce4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce8:	f003 0310 	and.w	r3, r3, #16
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00a      	beq.n	8005d06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	430a      	orrs	r2, r1
 8005d04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0a:	f003 0320 	and.w	r3, r3, #32
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00a      	beq.n	8005d28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	430a      	orrs	r2, r1
 8005d26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d01a      	beq.n	8005d6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d52:	d10a      	bne.n	8005d6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	430a      	orrs	r2, r1
 8005d68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00a      	beq.n	8005d8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	605a      	str	r2, [r3, #4]
  }
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b098      	sub	sp, #96	; 0x60
 8005d9c:	af02      	add	r7, sp, #8
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005da8:	f7fb f95c 	bl	8001064 <HAL_GetTick>
 8005dac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0308 	and.w	r3, r3, #8
 8005db8:	2b08      	cmp	r3, #8
 8005dba:	d12f      	bne.n	8005e1c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f88e 	bl	8005eec <UART_WaitOnFlagUntilTimeout>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d022      	beq.n	8005e1c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dde:	e853 3f00 	ldrex	r3, [r3]
 8005de2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dea:	653b      	str	r3, [r7, #80]	; 0x50
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	461a      	mov	r2, r3
 8005df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005df4:	647b      	str	r3, [r7, #68]	; 0x44
 8005df6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dfc:	e841 2300 	strex	r3, r2, [r1]
 8005e00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1e6      	bne.n	8005dd6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2220      	movs	r2, #32
 8005e0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e063      	b.n	8005ee4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0304 	and.w	r3, r3, #4
 8005e26:	2b04      	cmp	r3, #4
 8005e28:	d149      	bne.n	8005ebe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e32:	2200      	movs	r2, #0
 8005e34:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f857 	bl	8005eec <UART_WaitOnFlagUntilTimeout>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d03c      	beq.n	8005ebe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4c:	e853 3f00 	ldrex	r3, [r3]
 8005e50:	623b      	str	r3, [r7, #32]
   return(result);
 8005e52:	6a3b      	ldr	r3, [r7, #32]
 8005e54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	461a      	mov	r2, r3
 8005e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e62:	633b      	str	r3, [r7, #48]	; 0x30
 8005e64:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e6a:	e841 2300 	strex	r3, r2, [r1]
 8005e6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1e6      	bne.n	8005e44 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	3308      	adds	r3, #8
 8005e7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	e853 3f00 	ldrex	r3, [r3]
 8005e84:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f023 0301 	bic.w	r3, r3, #1
 8005e8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	3308      	adds	r3, #8
 8005e94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e96:	61fa      	str	r2, [r7, #28]
 8005e98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9a:	69b9      	ldr	r1, [r7, #24]
 8005e9c:	69fa      	ldr	r2, [r7, #28]
 8005e9e:	e841 2300 	strex	r3, r2, [r1]
 8005ea2:	617b      	str	r3, [r7, #20]
   return(result);
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1e5      	bne.n	8005e76 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2220      	movs	r2, #32
 8005eae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e012      	b.n	8005ee4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2220      	movs	r2, #32
 8005ec2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3758      	adds	r7, #88	; 0x58
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	603b      	str	r3, [r7, #0]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005efc:	e04f      	b.n	8005f9e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f04:	d04b      	beq.n	8005f9e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f06:	f7fb f8ad 	bl	8001064 <HAL_GetTick>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d302      	bcc.n	8005f1c <UART_WaitOnFlagUntilTimeout+0x30>
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d101      	bne.n	8005f20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e04e      	b.n	8005fbe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0304 	and.w	r3, r3, #4
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d037      	beq.n	8005f9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2b80      	cmp	r3, #128	; 0x80
 8005f32:	d034      	beq.n	8005f9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	2b40      	cmp	r3, #64	; 0x40
 8005f38:	d031      	beq.n	8005f9e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	69db      	ldr	r3, [r3, #28]
 8005f40:	f003 0308 	and.w	r3, r3, #8
 8005f44:	2b08      	cmp	r3, #8
 8005f46:	d110      	bne.n	8005f6a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2208      	movs	r2, #8
 8005f4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f000 f838 	bl	8005fc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2208      	movs	r2, #8
 8005f5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e029      	b.n	8005fbe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f78:	d111      	bne.n	8005f9e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f000 f81e 	bl	8005fc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e00f      	b.n	8005fbe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	69da      	ldr	r2, [r3, #28]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	bf0c      	ite	eq
 8005fae:	2301      	moveq	r3, #1
 8005fb0:	2300      	movne	r3, #0
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	79fb      	ldrb	r3, [r7, #7]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d0a0      	beq.n	8005efe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b095      	sub	sp, #84	; 0x54
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd6:	e853 3f00 	ldrex	r3, [r3]
 8005fda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	461a      	mov	r2, r3
 8005fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fec:	643b      	str	r3, [r7, #64]	; 0x40
 8005fee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ff2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ff4:	e841 2300 	strex	r3, r2, [r1]
 8005ff8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1e6      	bne.n	8005fce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3308      	adds	r3, #8
 8006006:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	e853 3f00 	ldrex	r3, [r3]
 800600e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006016:	f023 0301 	bic.w	r3, r3, #1
 800601a:	64bb      	str	r3, [r7, #72]	; 0x48
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	3308      	adds	r3, #8
 8006022:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006024:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006026:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006028:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800602a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800602c:	e841 2300 	strex	r3, r2, [r1]
 8006030:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1e3      	bne.n	8006000 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800603c:	2b01      	cmp	r3, #1
 800603e:	d118      	bne.n	8006072 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	e853 3f00 	ldrex	r3, [r3]
 800604c:	60bb      	str	r3, [r7, #8]
   return(result);
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	f023 0310 	bic.w	r3, r3, #16
 8006054:	647b      	str	r3, [r7, #68]	; 0x44
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	461a      	mov	r2, r3
 800605c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800605e:	61bb      	str	r3, [r7, #24]
 8006060:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006062:	6979      	ldr	r1, [r7, #20]
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	e841 2300 	strex	r3, r2, [r1]
 800606a:	613b      	str	r3, [r7, #16]
   return(result);
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1e6      	bne.n	8006040 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2220      	movs	r2, #32
 8006076:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006086:	bf00      	nop
 8006088:	3754      	adds	r7, #84	; 0x54
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006092:	b480      	push	{r7}
 8006094:	b085      	sub	sp, #20
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d101      	bne.n	80060a8 <HAL_UARTEx_DisableFifoMode+0x16>
 80060a4:	2302      	movs	r3, #2
 80060a6:	e027      	b.n	80060f8 <HAL_UARTEx_DisableFifoMode+0x66>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2224      	movs	r2, #36	; 0x24
 80060b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f022 0201 	bic.w	r2, r2, #1
 80060ce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80060d6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2220      	movs	r2, #32
 80060ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3714      	adds	r7, #20
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006114:	2b01      	cmp	r3, #1
 8006116:	d101      	bne.n	800611c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006118:	2302      	movs	r3, #2
 800611a:	e02d      	b.n	8006178 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2224      	movs	r2, #36	; 0x24
 8006128:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f022 0201 	bic.w	r2, r2, #1
 8006142:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	430a      	orrs	r2, r1
 8006156:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 f84f 	bl	80061fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2220      	movs	r2, #32
 800616a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006190:	2b01      	cmp	r3, #1
 8006192:	d101      	bne.n	8006198 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006194:	2302      	movs	r3, #2
 8006196:	e02d      	b.n	80061f4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2224      	movs	r2, #36	; 0x24
 80061a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f022 0201 	bic.w	r2, r2, #1
 80061be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 f811 	bl	80061fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2220      	movs	r2, #32
 80061e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006208:	2b00      	cmp	r3, #0
 800620a:	d108      	bne.n	800621e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800621c:	e031      	b.n	8006282 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800621e:	2308      	movs	r3, #8
 8006220:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006222:	2308      	movs	r3, #8
 8006224:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	0e5b      	lsrs	r3, r3, #25
 800622e:	b2db      	uxtb	r3, r3
 8006230:	f003 0307 	and.w	r3, r3, #7
 8006234:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	0f5b      	lsrs	r3, r3, #29
 800623e:	b2db      	uxtb	r3, r3
 8006240:	f003 0307 	and.w	r3, r3, #7
 8006244:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006246:	7bbb      	ldrb	r3, [r7, #14]
 8006248:	7b3a      	ldrb	r2, [r7, #12]
 800624a:	4911      	ldr	r1, [pc, #68]	; (8006290 <UARTEx_SetNbDataToProcess+0x94>)
 800624c:	5c8a      	ldrb	r2, [r1, r2]
 800624e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006252:	7b3a      	ldrb	r2, [r7, #12]
 8006254:	490f      	ldr	r1, [pc, #60]	; (8006294 <UARTEx_SetNbDataToProcess+0x98>)
 8006256:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006258:	fb93 f3f2 	sdiv	r3, r3, r2
 800625c:	b29a      	uxth	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006264:	7bfb      	ldrb	r3, [r7, #15]
 8006266:	7b7a      	ldrb	r2, [r7, #13]
 8006268:	4909      	ldr	r1, [pc, #36]	; (8006290 <UARTEx_SetNbDataToProcess+0x94>)
 800626a:	5c8a      	ldrb	r2, [r1, r2]
 800626c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006270:	7b7a      	ldrb	r2, [r7, #13]
 8006272:	4908      	ldr	r1, [pc, #32]	; (8006294 <UARTEx_SetNbDataToProcess+0x98>)
 8006274:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006276:	fb93 f3f2 	sdiv	r3, r3, r2
 800627a:	b29a      	uxth	r2, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006282:	bf00      	nop
 8006284:	3714      	adds	r7, #20
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	08006338 	.word	0x08006338
 8006294:	08006340 	.word	0x08006340

08006298 <memset>:
 8006298:	4402      	add	r2, r0
 800629a:	4603      	mov	r3, r0
 800629c:	4293      	cmp	r3, r2
 800629e:	d100      	bne.n	80062a2 <memset+0xa>
 80062a0:	4770      	bx	lr
 80062a2:	f803 1b01 	strb.w	r1, [r3], #1
 80062a6:	e7f9      	b.n	800629c <memset+0x4>

080062a8 <__libc_init_array>:
 80062a8:	b570      	push	{r4, r5, r6, lr}
 80062aa:	4d0d      	ldr	r5, [pc, #52]	; (80062e0 <__libc_init_array+0x38>)
 80062ac:	4c0d      	ldr	r4, [pc, #52]	; (80062e4 <__libc_init_array+0x3c>)
 80062ae:	1b64      	subs	r4, r4, r5
 80062b0:	10a4      	asrs	r4, r4, #2
 80062b2:	2600      	movs	r6, #0
 80062b4:	42a6      	cmp	r6, r4
 80062b6:	d109      	bne.n	80062cc <__libc_init_array+0x24>
 80062b8:	4d0b      	ldr	r5, [pc, #44]	; (80062e8 <__libc_init_array+0x40>)
 80062ba:	4c0c      	ldr	r4, [pc, #48]	; (80062ec <__libc_init_array+0x44>)
 80062bc:	f000 f818 	bl	80062f0 <_init>
 80062c0:	1b64      	subs	r4, r4, r5
 80062c2:	10a4      	asrs	r4, r4, #2
 80062c4:	2600      	movs	r6, #0
 80062c6:	42a6      	cmp	r6, r4
 80062c8:	d105      	bne.n	80062d6 <__libc_init_array+0x2e>
 80062ca:	bd70      	pop	{r4, r5, r6, pc}
 80062cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80062d0:	4798      	blx	r3
 80062d2:	3601      	adds	r6, #1
 80062d4:	e7ee      	b.n	80062b4 <__libc_init_array+0xc>
 80062d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80062da:	4798      	blx	r3
 80062dc:	3601      	adds	r6, #1
 80062de:	e7f2      	b.n	80062c6 <__libc_init_array+0x1e>
 80062e0:	08006350 	.word	0x08006350
 80062e4:	08006350 	.word	0x08006350
 80062e8:	08006350 	.word	0x08006350
 80062ec:	08006354 	.word	0x08006354

080062f0 <_init>:
 80062f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f2:	bf00      	nop
 80062f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062f6:	bc08      	pop	{r3}
 80062f8:	469e      	mov	lr, r3
 80062fa:	4770      	bx	lr

080062fc <_fini>:
 80062fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062fe:	bf00      	nop
 8006300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006302:	bc08      	pop	{r3}
 8006304:	469e      	mov	lr, r3
 8006306:	4770      	bx	lr
