
LAB1_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007110  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080072e8  080072e8  000172e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007328  08007328  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08007328  08007328  00017328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007330  08007330  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007330  08007330  00017330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007334  08007334  00017334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000530  20000018  0800734c  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000548  0800734c  00020548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001780d  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a86  00000000  00000000  00037894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a8  00000000  00000000  0003a320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000102b  00000000  00000000  0003b7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a28  00000000  00000000  0003c7f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017629  00000000  00000000  0006421b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e9cf  00000000  00000000  0007b844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000059e0  00000000  00000000  0018a214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0018fbf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080072d0 	.word	0x080072d0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	080072d0 	.word	0x080072d0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 ff63 	bl	80013e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f842 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 fb26 	bl	8000b70 <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 fafa 	bl	8000b1c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000528:	f000 f922 	bl	8000770 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 800052c:	f000 f96a 	bl	8000804 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000530:	f000 f884 	bl	800063c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000534:	f000 f9b4 	bl	80008a0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000538:	f000 fa00 	bl	800093c <MX_TIM4_Init>
  MX_TIM5_Init();
 800053c:	f000 fa76 	bl	8000a2c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2); //Interrupt
 8000540:	4812      	ldr	r0, [pc, #72]	; (800058c <main+0x78>)
 8000542:	f004 fd21 	bl	8004f88 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000546:	217f      	movs	r1, #127	; 0x7f
 8000548:	4811      	ldr	r0, [pc, #68]	; (8000590 <main+0x7c>)
 800054a:	f002 fd55 	bl	8002ff8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 300);
 800054e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000552:	4910      	ldr	r1, [pc, #64]	; (8000594 <main+0x80>)
 8000554:	480e      	ldr	r0, [pc, #56]	; (8000590 <main+0x7c>)
 8000556:	f001 fbd7 	bl	8001d08 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 800055a:	480f      	ldr	r0, [pc, #60]	; (8000598 <main+0x84>)
 800055c:	f004 fca4 	bl	8004ea8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 8000560:	480e      	ldr	r0, [pc, #56]	; (800059c <main+0x88>)
 8000562:	f004 fca1 	bl	8004ea8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000566:	2100      	movs	r1, #0
 8000568:	480c      	ldr	r0, [pc, #48]	; (800059c <main+0x88>)
 800056a:	f004 fde7 	bl	800513c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim5);
 800056e:	480c      	ldr	r0, [pc, #48]	; (80005a0 <main+0x8c>)
 8000570:	f004 fc9a 	bl	8004ea8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000574:	2100      	movs	r1, #0
 8000576:	480a      	ldr	r0, [pc, #40]	; (80005a0 <main+0x8c>)
 8000578:	f004 fde0 	bl	800513c <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  micros();
 800057c:	f000 fb7e 	bl	8000c7c <micros>
	  avg();
 8000580:	f000 fbc2 	bl	8000d08 <avg>
	  pot();
 8000584:	f000 fc28 	bl	8000dd8 <pot>
	  micros();
 8000588:	e7f8      	b.n	800057c <main+0x68>
 800058a:	bf00      	nop
 800058c:	20000194 	.word	0x20000194
 8000590:	20000034 	.word	0x20000034
 8000594:	200002d0 	.word	0x200002d0
 8000598:	200001e0 	.word	0x200001e0
 800059c:	2000022c 	.word	0x2000022c
 80005a0:	20000278 	.word	0x20000278

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	; 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0318 	add.w	r3, r7, #24
 80005ae:	2238      	movs	r2, #56	; 0x38
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f006 fe60 	bl	8007278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005c6:	2000      	movs	r0, #0
 80005c8:	f003 fbe6 	bl	8003d98 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005cc:	2302      	movs	r3, #2
 80005ce:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d6:	2340      	movs	r3, #64	; 0x40
 80005d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005da:	2302      	movs	r3, #2
 80005dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005de:	2302      	movs	r3, #2
 80005e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005e2:	2304      	movs	r3, #4
 80005e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005e6:	2355      	movs	r3, #85	; 0x55
 80005e8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ea:	2302      	movs	r3, #2
 80005ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f6:	f107 0318 	add.w	r3, r7, #24
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 fc80 	bl	8003f00 <HAL_RCC_OscConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000606:	f000 fc7d 	bl	8000f04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060a:	230f      	movs	r3, #15
 800060c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060e:	2303      	movs	r3, #3
 8000610:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2104      	movs	r1, #4
 8000622:	4618      	mov	r0, r3
 8000624:	f003 ff7e 	bl	8004524 <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800062e:	f000 fc69 	bl	8000f04 <Error_Handler>
  }
}
 8000632:	bf00      	nop
 8000634:	3750      	adds	r7, #80	; 0x50
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
	...

0800063c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08c      	sub	sp, #48	; 0x30
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2220      	movs	r2, #32
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f006 fe0f 	bl	8007278 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800065a:	4b41      	ldr	r3, [pc, #260]	; (8000760 <MX_ADC1_Init+0x124>)
 800065c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000660:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000662:	4b3f      	ldr	r3, [pc, #252]	; (8000760 <MX_ADC1_Init+0x124>)
 8000664:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000668:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800066a:	4b3d      	ldr	r3, [pc, #244]	; (8000760 <MX_ADC1_Init+0x124>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000670:	4b3b      	ldr	r3, [pc, #236]	; (8000760 <MX_ADC1_Init+0x124>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000676:	4b3a      	ldr	r3, [pc, #232]	; (8000760 <MX_ADC1_Init+0x124>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800067c:	4b38      	ldr	r3, [pc, #224]	; (8000760 <MX_ADC1_Init+0x124>)
 800067e:	2201      	movs	r2, #1
 8000680:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000682:	4b37      	ldr	r3, [pc, #220]	; (8000760 <MX_ADC1_Init+0x124>)
 8000684:	2204      	movs	r2, #4
 8000686:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000688:	4b35      	ldr	r3, [pc, #212]	; (8000760 <MX_ADC1_Init+0x124>)
 800068a:	2200      	movs	r2, #0
 800068c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800068e:	4b34      	ldr	r3, [pc, #208]	; (8000760 <MX_ADC1_Init+0x124>)
 8000690:	2201      	movs	r2, #1
 8000692:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8000694:	4b32      	ldr	r3, [pc, #200]	; (8000760 <MX_ADC1_Init+0x124>)
 8000696:	2203      	movs	r2, #3
 8000698:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800069a:	4b31      	ldr	r3, [pc, #196]	; (8000760 <MX_ADC1_Init+0x124>)
 800069c:	2200      	movs	r2, #0
 800069e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80006a2:	4b2f      	ldr	r3, [pc, #188]	; (8000760 <MX_ADC1_Init+0x124>)
 80006a4:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80006a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006aa:	4b2d      	ldr	r3, [pc, #180]	; (8000760 <MX_ADC1_Init+0x124>)
 80006ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006b0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006b2:	4b2b      	ldr	r3, [pc, #172]	; (8000760 <MX_ADC1_Init+0x124>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006ba:	4b29      	ldr	r3, [pc, #164]	; (8000760 <MX_ADC1_Init+0x124>)
 80006bc:	2200      	movs	r2, #0
 80006be:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80006c0:	4b27      	ldr	r3, [pc, #156]	; (8000760 <MX_ADC1_Init+0x124>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006c8:	4825      	ldr	r0, [pc, #148]	; (8000760 <MX_ADC1_Init+0x124>)
 80006ca:	f001 f961 	bl	8001990 <HAL_ADC_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80006d4:	f000 fc16 	bl	8000f04 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e0:	4619      	mov	r1, r3
 80006e2:	481f      	ldr	r0, [pc, #124]	; (8000760 <MX_ADC1_Init+0x124>)
 80006e4:	f002 fd1c 	bl	8003120 <HAL_ADCEx_MultiModeConfigChannel>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80006ee:	f000 fc09 	bl	8000f04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006f2:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <MX_ADC1_Init+0x128>)
 80006f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006f6:	2306      	movs	r3, #6
 80006f8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80006fa:	2307      	movs	r3, #7
 80006fc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006fe:	237f      	movs	r3, #127	; 0x7f
 8000700:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000702:	2304      	movs	r3, #4
 8000704:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	4619      	mov	r1, r3
 800070e:	4814      	ldr	r0, [pc, #80]	; (8000760 <MX_ADC1_Init+0x124>)
 8000710:	f001 fe56 	bl	80023c0 <HAL_ADC_ConfigChannel>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800071a:	f000 fbf3 	bl	8000f04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800071e:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_ADC1_Init+0x12c>)
 8000720:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000722:	230c      	movs	r3, #12
 8000724:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	4619      	mov	r1, r3
 800072a:	480d      	ldr	r0, [pc, #52]	; (8000760 <MX_ADC1_Init+0x124>)
 800072c:	f001 fe48 	bl	80023c0 <HAL_ADC_ConfigChannel>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000736:	f000 fbe5 	bl	8000f04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_ADC1_Init+0x130>)
 800073c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800073e:	2312      	movs	r3, #18
 8000740:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	4619      	mov	r1, r3
 8000746:	4806      	ldr	r0, [pc, #24]	; (8000760 <MX_ADC1_Init+0x124>)
 8000748:	f001 fe3a 	bl	80023c0 <HAL_ADC_ConfigChannel>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000752:	f000 fbd7 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	3730      	adds	r7, #48	; 0x30
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000034 	.word	0x20000034
 8000764:	04300002 	.word	0x04300002
 8000768:	08600004 	.word	0x08600004
 800076c:	3ef08000 	.word	0x3ef08000

08000770 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000774:	4b21      	ldr	r3, [pc, #132]	; (80007fc <MX_LPUART1_UART_Init+0x8c>)
 8000776:	4a22      	ldr	r2, [pc, #136]	; (8000800 <MX_LPUART1_UART_Init+0x90>)
 8000778:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800077a:	4b20      	ldr	r3, [pc, #128]	; (80007fc <MX_LPUART1_UART_Init+0x8c>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <MX_LPUART1_UART_Init+0x8c>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <MX_LPUART1_UART_Init+0x8c>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800078e:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <MX_LPUART1_UART_Init+0x8c>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b19      	ldr	r3, [pc, #100]	; (80007fc <MX_LPUART1_UART_Init+0x8c>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b18      	ldr	r3, [pc, #96]	; (80007fc <MX_LPUART1_UART_Init+0x8c>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a0:	4b16      	ldr	r3, [pc, #88]	; (80007fc <MX_LPUART1_UART_Init+0x8c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007a6:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MX_LPUART1_UART_Init+0x8c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ac:	4b13      	ldr	r3, [pc, #76]	; (80007fc <MX_LPUART1_UART_Init+0x8c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007b2:	4812      	ldr	r0, [pc, #72]	; (80007fc <MX_LPUART1_UART_Init+0x8c>)
 80007b4:	f005 fef2 	bl	800659c <HAL_UART_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80007be:	f000 fba1 	bl	8000f04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007c2:	2100      	movs	r1, #0
 80007c4:	480d      	ldr	r0, [pc, #52]	; (80007fc <MX_LPUART1_UART_Init+0x8c>)
 80007c6:	f006 fc8d 	bl	80070e4 <HAL_UARTEx_SetTxFifoThreshold>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80007d0:	f000 fb98 	bl	8000f04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007d4:	2100      	movs	r1, #0
 80007d6:	4809      	ldr	r0, [pc, #36]	; (80007fc <MX_LPUART1_UART_Init+0x8c>)
 80007d8:	f006 fcc2 	bl	8007160 <HAL_UARTEx_SetRxFifoThreshold>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80007e2:	f000 fb8f 	bl	8000f04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_LPUART1_UART_Init+0x8c>)
 80007e8:	f006 fc43 	bl	8007072 <HAL_UARTEx_DisableFifoMode>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80007f2:	f000 fb87 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000100 	.word	0x20000100
 8000800:	40008000 	.word	0x40008000

08000804 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b088      	sub	sp, #32
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800080a:	f107 0310 	add.w	r3, r7, #16
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000822:	4b1e      	ldr	r3, [pc, #120]	; (800089c <MX_TIM2_Init+0x98>)
 8000824:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000828:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800082a:	4b1c      	ldr	r3, [pc, #112]	; (800089c <MX_TIM2_Init+0x98>)
 800082c:	22a9      	movs	r2, #169	; 0xa9
 800082e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000830:	4b1a      	ldr	r3, [pc, #104]	; (800089c <MX_TIM2_Init+0x98>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8000836:	4b19      	ldr	r3, [pc, #100]	; (800089c <MX_TIM2_Init+0x98>)
 8000838:	f04f 32ff 	mov.w	r2, #4294967295
 800083c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <MX_TIM2_Init+0x98>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <MX_TIM2_Init+0x98>)
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800084a:	4814      	ldr	r0, [pc, #80]	; (800089c <MX_TIM2_Init+0x98>)
 800084c:	f004 fad4 	bl	8004df8 <HAL_TIM_Base_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000856:	f000 fb55 	bl	8000f04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800085a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000860:	f107 0310 	add.w	r3, r7, #16
 8000864:	4619      	mov	r1, r3
 8000866:	480d      	ldr	r0, [pc, #52]	; (800089c <MX_TIM2_Init+0x98>)
 8000868:	f004 ffde 	bl	8005828 <HAL_TIM_ConfigClockSource>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000872:	f000 fb47 	bl	8000f04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	4619      	mov	r1, r3
 8000882:	4806      	ldr	r0, [pc, #24]	; (800089c <MX_TIM2_Init+0x98>)
 8000884:	f005 fdae 	bl	80063e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800088e:	f000 fb39 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	3720      	adds	r7, #32
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000194 	.word	0x20000194

080008a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008a6:	f107 0310 	add.w	r3, r7, #16
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008be:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <MX_TIM3_Init+0x94>)
 80008c0:	4a1d      	ldr	r2, [pc, #116]	; (8000938 <MX_TIM3_Init+0x98>)
 80008c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 56666;
 80008c4:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <MX_TIM3_Init+0x94>)
 80008c6:	f64d 525a 	movw	r2, #56666	; 0xdd5a
 80008ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008cc:	4b19      	ldr	r3, [pc, #100]	; (8000934 <MX_TIM3_Init+0x94>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 80008d2:	4b18      	ldr	r3, [pc, #96]	; (8000934 <MX_TIM3_Init+0x94>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d8:	4b16      	ldr	r3, [pc, #88]	; (8000934 <MX_TIM3_Init+0x94>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <MX_TIM3_Init+0x94>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008e4:	4813      	ldr	r0, [pc, #76]	; (8000934 <MX_TIM3_Init+0x94>)
 80008e6:	f004 fa87 	bl	8004df8 <HAL_TIM_Base_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80008f0:	f000 fb08 	bl	8000f04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008fa:	f107 0310 	add.w	r3, r7, #16
 80008fe:	4619      	mov	r1, r3
 8000900:	480c      	ldr	r0, [pc, #48]	; (8000934 <MX_TIM3_Init+0x94>)
 8000902:	f004 ff91 	bl	8005828 <HAL_TIM_ConfigClockSource>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800090c:	f000 fafa 	bl	8000f04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000910:	2320      	movs	r3, #32
 8000912:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	4619      	mov	r1, r3
 800091c:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_TIM3_Init+0x94>)
 800091e:	f005 fd61 	bl	80063e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000928:	f000 faec 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	3720      	adds	r7, #32
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200001e0 	.word	0x200001e0
 8000938:	40000400 	.word	0x40000400

0800093c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08e      	sub	sp, #56	; 0x38
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000942:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800095c:	463b      	mov	r3, r7
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]
 800096a:	615a      	str	r2, [r3, #20]
 800096c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800096e:	4b2d      	ldr	r3, [pc, #180]	; (8000a24 <MX_TIM4_Init+0xe8>)
 8000970:	4a2d      	ldr	r2, [pc, #180]	; (8000a28 <MX_TIM4_Init+0xec>)
 8000972:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8000974:	4b2b      	ldr	r3, [pc, #172]	; (8000a24 <MX_TIM4_Init+0xe8>)
 8000976:	22a9      	movs	r2, #169	; 0xa9
 8000978:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097a:	4b2a      	ldr	r3, [pc, #168]	; (8000a24 <MX_TIM4_Init+0xe8>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8000980:	4b28      	ldr	r3, [pc, #160]	; (8000a24 <MX_TIM4_Init+0xe8>)
 8000982:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000986:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000988:	4b26      	ldr	r3, [pc, #152]	; (8000a24 <MX_TIM4_Init+0xe8>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098e:	4b25      	ldr	r3, [pc, #148]	; (8000a24 <MX_TIM4_Init+0xe8>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000994:	4823      	ldr	r0, [pc, #140]	; (8000a24 <MX_TIM4_Init+0xe8>)
 8000996:	f004 fa2f 	bl	8004df8 <HAL_TIM_Base_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80009a0:	f000 fab0 	bl	8000f04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80009aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ae:	4619      	mov	r1, r3
 80009b0:	481c      	ldr	r0, [pc, #112]	; (8000a24 <MX_TIM4_Init+0xe8>)
 80009b2:	f004 ff39 	bl	8005828 <HAL_TIM_ConfigClockSource>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80009bc:	f000 faa2 	bl	8000f04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009c0:	4818      	ldr	r0, [pc, #96]	; (8000a24 <MX_TIM4_Init+0xe8>)
 80009c2:	f004 fb59 	bl	8005078 <HAL_TIM_PWM_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80009cc:	f000 fa9a 	bl	8000f04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	4811      	ldr	r0, [pc, #68]	; (8000a24 <MX_TIM4_Init+0xe8>)
 80009e0:	f005 fd00 	bl	80063e4 <HAL_TIMEx_MasterConfigSynchronization>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80009ea:	f000 fa8b 	bl	8000f04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ee:	2360      	movs	r3, #96	; 0x60
 80009f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 80009f2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80009f6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a00:	463b      	mov	r3, r7
 8000a02:	2200      	movs	r2, #0
 8000a04:	4619      	mov	r1, r3
 8000a06:	4807      	ldr	r0, [pc, #28]	; (8000a24 <MX_TIM4_Init+0xe8>)
 8000a08:	f004 fdfa 	bl	8005600 <HAL_TIM_PWM_ConfigChannel>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000a12:	f000 fa77 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a16:	4803      	ldr	r0, [pc, #12]	; (8000a24 <MX_TIM4_Init+0xe8>)
 8000a18:	f000 fbfa 	bl	8001210 <HAL_TIM_MspPostInit>

}
 8000a1c:	bf00      	nop
 8000a1e:	3738      	adds	r7, #56	; 0x38
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	2000022c 	.word	0x2000022c
 8000a28:	40000800 	.word	0x40000800

08000a2c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08e      	sub	sp, #56	; 0x38
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]
 8000a5a:	615a      	str	r2, [r3, #20]
 8000a5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000a5e:	4b2d      	ldr	r3, [pc, #180]	; (8000b14 <MX_TIM5_Init+0xe8>)
 8000a60:	4a2d      	ldr	r2, [pc, #180]	; (8000b18 <MX_TIM5_Init+0xec>)
 8000a62:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8000a64:	4b2b      	ldr	r3, [pc, #172]	; (8000b14 <MX_TIM5_Init+0xe8>)
 8000a66:	22a9      	movs	r2, #169	; 0xa9
 8000a68:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6a:	4b2a      	ldr	r3, [pc, #168]	; (8000b14 <MX_TIM5_Init+0xe8>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19999;
 8000a70:	4b28      	ldr	r3, [pc, #160]	; (8000b14 <MX_TIM5_Init+0xe8>)
 8000a72:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000a76:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a78:	4b26      	ldr	r3, [pc, #152]	; (8000b14 <MX_TIM5_Init+0xe8>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7e:	4b25      	ldr	r3, [pc, #148]	; (8000b14 <MX_TIM5_Init+0xe8>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000a84:	4823      	ldr	r0, [pc, #140]	; (8000b14 <MX_TIM5_Init+0xe8>)
 8000a86:	f004 f9b7 	bl	8004df8 <HAL_TIM_Base_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8000a90:	f000 fa38 	bl	8000f04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000a9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	481c      	ldr	r0, [pc, #112]	; (8000b14 <MX_TIM5_Init+0xe8>)
 8000aa2:	f004 fec1 	bl	8005828 <HAL_TIM_ConfigClockSource>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8000aac:	f000 fa2a 	bl	8000f04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000ab0:	4818      	ldr	r0, [pc, #96]	; (8000b14 <MX_TIM5_Init+0xe8>)
 8000ab2:	f004 fae1 	bl	8005078 <HAL_TIM_PWM_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8000abc:	f000 fa22 	bl	8000f04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	4811      	ldr	r0, [pc, #68]	; (8000b14 <MX_TIM5_Init+0xe8>)
 8000ad0:	f005 fc88 	bl	80063e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8000ada:	f000 fa13 	bl	8000f04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ade:	2360      	movs	r3, #96	; 0x60
 8000ae0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aee:	463b      	mov	r3, r7
 8000af0:	2200      	movs	r2, #0
 8000af2:	4619      	mov	r1, r3
 8000af4:	4807      	ldr	r0, [pc, #28]	; (8000b14 <MX_TIM5_Init+0xe8>)
 8000af6:	f004 fd83 	bl	8005600 <HAL_TIM_PWM_ConfigChannel>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8000b00:	f000 fa00 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000b04:	4803      	ldr	r0, [pc, #12]	; (8000b14 <MX_TIM5_Init+0xe8>)
 8000b06:	f000 fb83 	bl	8001210 <HAL_TIM_MspPostInit>

}
 8000b0a:	bf00      	nop
 8000b0c:	3738      	adds	r7, #56	; 0x38
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000278 	.word	0x20000278
 8000b18:	40000c00 	.word	0x40000c00

08000b1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <MX_DMA_Init+0x50>)
 8000b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b26:	4a11      	ldr	r2, [pc, #68]	; (8000b6c <MX_DMA_Init+0x50>)
 8000b28:	f043 0304 	orr.w	r3, r3, #4
 8000b2c:	6493      	str	r3, [r2, #72]	; 0x48
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <MX_DMA_Init+0x50>)
 8000b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b32:	f003 0304 	and.w	r3, r3, #4
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <MX_DMA_Init+0x50>)
 8000b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b3e:	4a0b      	ldr	r2, [pc, #44]	; (8000b6c <MX_DMA_Init+0x50>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6493      	str	r3, [r2, #72]	; 0x48
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <MX_DMA_Init+0x50>)
 8000b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2100      	movs	r1, #0
 8000b56:	200b      	movs	r0, #11
 8000b58:	f002 fcc5 	bl	80034e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b5c:	200b      	movs	r0, #11
 8000b5e:	f002 fcdc 	bl	800351a <HAL_NVIC_EnableIRQ>

}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40021000 	.word	0x40021000

08000b70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	; 0x28
 8000b74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b86:	4b2f      	ldr	r3, [pc, #188]	; (8000c44 <MX_GPIO_Init+0xd4>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8a:	4a2e      	ldr	r2, [pc, #184]	; (8000c44 <MX_GPIO_Init+0xd4>)
 8000b8c:	f043 0304 	orr.w	r3, r3, #4
 8000b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b92:	4b2c      	ldr	r3, [pc, #176]	; (8000c44 <MX_GPIO_Init+0xd4>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b96:	f003 0304 	and.w	r3, r3, #4
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b9e:	4b29      	ldr	r3, [pc, #164]	; (8000c44 <MX_GPIO_Init+0xd4>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba2:	4a28      	ldr	r2, [pc, #160]	; (8000c44 <MX_GPIO_Init+0xd4>)
 8000ba4:	f043 0320 	orr.w	r3, r3, #32
 8000ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000baa:	4b26      	ldr	r3, [pc, #152]	; (8000c44 <MX_GPIO_Init+0xd4>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	f003 0320 	and.w	r3, r3, #32
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb6:	4b23      	ldr	r3, [pc, #140]	; (8000c44 <MX_GPIO_Init+0xd4>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bba:	4a22      	ldr	r2, [pc, #136]	; (8000c44 <MX_GPIO_Init+0xd4>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc2:	4b20      	ldr	r3, [pc, #128]	; (8000c44 <MX_GPIO_Init+0xd4>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bce:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <MX_GPIO_Init+0xd4>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a1c      	ldr	r2, [pc, #112]	; (8000c44 <MX_GPIO_Init+0xd4>)
 8000bd4:	f043 0302 	orr.w	r3, r3, #2
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <MX_GPIO_Init+0xd4>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2120      	movs	r1, #32
 8000bea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bee:	f003 f8a3 	bl	8003d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bf8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	4619      	mov	r1, r3
 8000c08:	480f      	ldr	r0, [pc, #60]	; (8000c48 <MX_GPIO_Init+0xd8>)
 8000c0a:	f002 ff13 	bl	8003a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c0e:	2320      	movs	r3, #32
 8000c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c28:	f002 ff04 	bl	8003a34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2100      	movs	r1, #0
 8000c30:	2028      	movs	r0, #40	; 0x28
 8000c32:	f002 fc58 	bl	80034e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c36:	2028      	movs	r0, #40	; 0x28
 8000c38:	f002 fc6f 	bl	800351a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c3c:	bf00      	nop
 8000c3e:	3728      	adds	r7, #40	; 0x28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40021000 	.word	0x40021000
 8000c48:	48000800 	.word	0x48000800

08000c4c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a07      	ldr	r2, [pc, #28]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d104      	bne.n	8000c66 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		counter++;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	3301      	adds	r3, #1
 8000c62:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000c64:	6013      	str	r3, [r2, #0]
	}
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	20000194 	.word	0x20000194
 8000c78:	20000000 	.word	0x20000000

08000c7c <micros>:
void micros()
{
 8000c7c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000c80:	b087      	sub	sp, #28
 8000c82:	af00      	add	r7, sp, #0
	timestamp = counter*(4294967295) + __HAL_TIM_GET_COUNTER(&htim2);
 8000c84:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <micros+0x80>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	4698      	mov	r8, r3
 8000c8c:	4691      	mov	r9, r2
 8000c8e:	4642      	mov	r2, r8
 8000c90:	464b      	mov	r3, r9
 8000c92:	f04f 0400 	mov.w	r4, #0
 8000c96:	f04f 0500 	mov.w	r5, #0
 8000c9a:	07dd      	lsls	r5, r3, #31
 8000c9c:	ea45 0552 	orr.w	r5, r5, r2, lsr #1
 8000ca0:	07d4      	lsls	r4, r2, #31
 8000ca2:	4622      	mov	r2, r4
 8000ca4:	462b      	mov	r3, r5
 8000ca6:	ebb2 0008 	subs.w	r0, r2, r8
 8000caa:	eb63 0109 	sbc.w	r1, r3, r9
 8000cae:	1803      	adds	r3, r0, r0
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	eb41 0301 	adc.w	r3, r1, r1
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000cbc:	eb10 0a08 	adds.w	sl, r0, r8
 8000cc0:	eb41 0b09 	adc.w	fp, r1, r9
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <micros+0x84>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cca:	2200      	movs	r2, #0
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	617a      	str	r2, [r7, #20]
 8000cd0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	eb1a 0303 	adds.w	r3, sl, r3
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	eb4b 0303 	adc.w	r3, fp, r3
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ce8:	4906      	ldr	r1, [pc, #24]	; (8000d04 <micros+0x88>)
 8000cea:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000cee:	bf00      	nop
 8000cf0:	371c      	adds	r7, #28
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000000 	.word	0x20000000
 8000d00:	20000194 	.word	0x20000194
 8000d04:	200002c8 	.word	0x200002c8

08000d08 <avg>:
void avg()
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 100; i++)
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	e028      	b.n	8000d66 <avg+0x5e>
	{
		sum[0] += ADC_RawRead[(3*i)];
 8000d14:	4b2c      	ldr	r3, [pc, #176]	; (8000dc8 <avg+0xc0>)
 8000d16:	6819      	ldr	r1, [r3, #0]
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	4413      	add	r3, r2
 8000d20:	4a2a      	ldr	r2, [pc, #168]	; (8000dcc <avg+0xc4>)
 8000d22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d26:	440b      	add	r3, r1
 8000d28:	4a27      	ldr	r2, [pc, #156]	; (8000dc8 <avg+0xc0>)
 8000d2a:	6013      	str	r3, [r2, #0]
		sum[1] += ADC_RawRead[(3*i) + 1];
 8000d2c:	4b26      	ldr	r3, [pc, #152]	; (8000dc8 <avg+0xc0>)
 8000d2e:	6859      	ldr	r1, [r3, #4]
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	4613      	mov	r3, r2
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	4413      	add	r3, r2
 8000d38:	3301      	adds	r3, #1
 8000d3a:	4a24      	ldr	r2, [pc, #144]	; (8000dcc <avg+0xc4>)
 8000d3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d40:	440b      	add	r3, r1
 8000d42:	4a21      	ldr	r2, [pc, #132]	; (8000dc8 <avg+0xc0>)
 8000d44:	6053      	str	r3, [r2, #4]
		sum[2] += ADC_RawRead[(3*i) + 2];
 8000d46:	4b20      	ldr	r3, [pc, #128]	; (8000dc8 <avg+0xc0>)
 8000d48:	6899      	ldr	r1, [r3, #8]
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	4413      	add	r3, r2
 8000d52:	3302      	adds	r3, #2
 8000d54:	4a1d      	ldr	r2, [pc, #116]	; (8000dcc <avg+0xc4>)
 8000d56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d5a:	440b      	add	r3, r1
 8000d5c:	4a1a      	ldr	r2, [pc, #104]	; (8000dc8 <avg+0xc0>)
 8000d5e:	6093      	str	r3, [r2, #8]
	for (int i = 0; i < 100; i++)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3301      	adds	r3, #1
 8000d64:	607b      	str	r3, [r7, #4]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b63      	cmp	r3, #99	; 0x63
 8000d6a:	ddd3      	ble.n	8000d14 <avg+0xc>
	}
		Avg[0] = sum[0]/100;
 8000d6c:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <avg+0xc0>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a17      	ldr	r2, [pc, #92]	; (8000dd0 <avg+0xc8>)
 8000d72:	fb82 1203 	smull	r1, r2, r2, r3
 8000d76:	1152      	asrs	r2, r2, #5
 8000d78:	17db      	asrs	r3, r3, #31
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	4a15      	ldr	r2, [pc, #84]	; (8000dd4 <avg+0xcc>)
 8000d7e:	6013      	str	r3, [r2, #0]
		Avg[1] = sum[1]/100;
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <avg+0xc0>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	4a12      	ldr	r2, [pc, #72]	; (8000dd0 <avg+0xc8>)
 8000d86:	fb82 1203 	smull	r1, r2, r2, r3
 8000d8a:	1152      	asrs	r2, r2, #5
 8000d8c:	17db      	asrs	r3, r3, #31
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	4a10      	ldr	r2, [pc, #64]	; (8000dd4 <avg+0xcc>)
 8000d92:	6053      	str	r3, [r2, #4]
		Avg[2] = sum[2]/100;
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <avg+0xc0>)
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	4a0d      	ldr	r2, [pc, #52]	; (8000dd0 <avg+0xc8>)
 8000d9a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d9e:	1152      	asrs	r2, r2, #5
 8000da0:	17db      	asrs	r3, r3, #31
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <avg+0xcc>)
 8000da6:	6093      	str	r3, [r2, #8]
		//return 0
		sum[0] = 0;
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <avg+0xc0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
		sum[1] = 0;
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <avg+0xc0>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	605a      	str	r2, [r3, #4]
		sum[2] = 0;
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <avg+0xc0>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000528 	.word	0x20000528
 8000dcc:	200002d0 	.word	0x200002d0
 8000dd0:	51eb851f 	.word	0x51eb851f
 8000dd4:	20000534 	.word	0x20000534

08000dd8 <pot>:
void pot()
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
	if (mode == 1)
 8000ddc:	4b33      	ldr	r3, [pc, #204]	; (8000eac <pot+0xd4>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d14c      	bne.n	8000e7e <pot+0xa6>
	{
		if (Avg[0] < 1024)
 8000de4:	4b32      	ldr	r3, [pc, #200]	; (8000eb0 <pot+0xd8>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dec:	da08      	bge.n	8000e00 <pot+0x28>
		{
			state = 1;
 8000dee:	4b31      	ldr	r3, [pc, #196]	; (8000eb4 <pot+0xdc>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 500);
 8000df4:	4b30      	ldr	r3, [pc, #192]	; (8000eb8 <pot+0xe0>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000dfc:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, ((Avg[1]  * 1100)/4095) + 900);
	}
}
 8000dfe:	e050      	b.n	8000ea2 <pot+0xca>
		else if (Avg[0] < 2048)
 8000e00:	4b2b      	ldr	r3, [pc, #172]	; (8000eb0 <pot+0xd8>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e08:	da15      	bge.n	8000e36 <pot+0x5e>
			state = 2;
 8000e0a:	4b2a      	ldr	r3, [pc, #168]	; (8000eb4 <pot+0xdc>)
 8000e0c:	2202      	movs	r2, #2
 8000e0e:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ((Avg[1]  * 2000)/4095) + 500);
 8000e10:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <pot+0xd8>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000e18:	fb02 f303 	mul.w	r3, r2, r3
 8000e1c:	4a27      	ldr	r2, [pc, #156]	; (8000ebc <pot+0xe4>)
 8000e1e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e22:	441a      	add	r2, r3
 8000e24:	12d2      	asrs	r2, r2, #11
 8000e26:	17db      	asrs	r3, r3, #31
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8000e2e:	4b22      	ldr	r3, [pc, #136]	; (8000eb8 <pot+0xe0>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e34:	e035      	b.n	8000ea2 <pot+0xca>
		else if (Avg[0] < 3072)
 8000e36:	4b1e      	ldr	r3, [pc, #120]	; (8000eb0 <pot+0xd8>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8000e3e:	da15      	bge.n	8000e6c <pot+0x94>
			state = 3;
 8000e40:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <pot+0xdc>)
 8000e42:	2203      	movs	r2, #3
 8000e44:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ((Avg[2]  * 2000)/4095) + 500);
 8000e46:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <pot+0xd8>)
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000e4e:	fb02 f303 	mul.w	r3, r2, r3
 8000e52:	4a1a      	ldr	r2, [pc, #104]	; (8000ebc <pot+0xe4>)
 8000e54:	fb82 1203 	smull	r1, r2, r2, r3
 8000e58:	441a      	add	r2, r3
 8000e5a:	12d2      	asrs	r2, r2, #11
 8000e5c:	17db      	asrs	r3, r3, #31
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8000e64:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <pot+0xe0>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e6a:	e01a      	b.n	8000ea2 <pot+0xca>
			state = 4;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <pot+0xdc>)
 8000e6e:	2204      	movs	r2, #4
 8000e70:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 2500);
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <pot+0xe0>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000e7a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e7c:	e011      	b.n	8000ea2 <pot+0xca>
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, ((Avg[1]  * 1100)/4095) + 900);
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <pot+0xd8>)
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f240 424c 	movw	r2, #1100	; 0x44c
 8000e86:	fb02 f303 	mul.w	r3, r2, r3
 8000e8a:	4a0c      	ldr	r2, [pc, #48]	; (8000ebc <pot+0xe4>)
 8000e8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e90:	441a      	add	r2, r3
 8000e92:	12d2      	asrs	r2, r2, #11
 8000e94:	17db      	asrs	r3, r3, #31
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	f503 7261 	add.w	r2, r3, #900	; 0x384
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <pot+0xe8>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	20000004 	.word	0x20000004
 8000eb0:	20000534 	.word	0x20000534
 8000eb4:	20000540 	.word	0x20000540
 8000eb8:	2000022c 	.word	0x2000022c
 8000ebc:	80080081 	.word	0x80080081
 8000ec0:	20000278 	.word	0x20000278

08000ec4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_13)
 8000ece:	88fb      	ldrh	r3, [r7, #6]
 8000ed0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ed4:	d10e      	bne.n	8000ef4 <HAL_GPIO_EXTI_Callback+0x30>
    {
        if(mode==1){mode=2;}
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d103      	bne.n	8000ee6 <HAL_GPIO_EXTI_Callback+0x22>
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	601a      	str	r2, [r3, #0]
        else if(mode==2){mode=1;}
    }
}
 8000ee4:	e006      	b.n	8000ef4 <HAL_GPIO_EXTI_Callback+0x30>
        else if(mode==2){mode=1;}
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d102      	bne.n	8000ef4 <HAL_GPIO_EXTI_Callback+0x30>
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	601a      	str	r2, [r3, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	20000004 	.word	0x20000004

08000f04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f08:	b672      	cpsid	i
}
 8000f0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <Error_Handler+0x8>
	...

08000f10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <HAL_MspInit+0x44>)
 8000f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f1a:	4a0e      	ldr	r2, [pc, #56]	; (8000f54 <HAL_MspInit+0x44>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6613      	str	r3, [r2, #96]	; 0x60
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <HAL_MspInit+0x44>)
 8000f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <HAL_MspInit+0x44>)
 8000f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f32:	4a08      	ldr	r2, [pc, #32]	; (8000f54 <HAL_MspInit+0x44>)
 8000f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f38:	6593      	str	r3, [r2, #88]	; 0x58
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_MspInit+0x44>)
 8000f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f46:	f002 ffcb 	bl	8003ee0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40021000 	.word	0x40021000

08000f58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b0a0      	sub	sp, #128	; 0x80
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f70:	f107 0318 	add.w	r3, r7, #24
 8000f74:	2254      	movs	r2, #84	; 0x54
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f006 f97d 	bl	8007278 <memset>
  if(hadc->Instance==ADC1)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f86:	d17f      	bne.n	8001088 <HAL_ADC_MspInit+0x130>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000f88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f8c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000f8e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000f92:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f94:	f107 0318 	add.w	r3, r7, #24
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f003 fcdf 	bl	800495c <HAL_RCCEx_PeriphCLKConfig>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000fa4:	f7ff ffae 	bl	8000f04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000fa8:	4b39      	ldr	r3, [pc, #228]	; (8001090 <HAL_ADC_MspInit+0x138>)
 8000faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fac:	4a38      	ldr	r2, [pc, #224]	; (8001090 <HAL_ADC_MspInit+0x138>)
 8000fae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb4:	4b36      	ldr	r3, [pc, #216]	; (8001090 <HAL_ADC_MspInit+0x138>)
 8000fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc0:	4b33      	ldr	r3, [pc, #204]	; (8001090 <HAL_ADC_MspInit+0x138>)
 8000fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc4:	4a32      	ldr	r2, [pc, #200]	; (8001090 <HAL_ADC_MspInit+0x138>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fcc:	4b30      	ldr	r3, [pc, #192]	; (8001090 <HAL_ADC_MspInit+0x138>)
 8000fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd8:	4b2d      	ldr	r3, [pc, #180]	; (8001090 <HAL_ADC_MspInit+0x138>)
 8000fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fdc:	4a2c      	ldr	r2, [pc, #176]	; (8001090 <HAL_ADC_MspInit+0x138>)
 8000fde:	f043 0302 	orr.w	r3, r3, #2
 8000fe2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe4:	4b2a      	ldr	r3, [pc, #168]	; (8001090 <HAL_ADC_MspInit+0x138>)
 8000fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001000:	4619      	mov	r1, r3
 8001002:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001006:	f002 fd15 	bl	8003a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800100a:	2301      	movs	r3, #1
 800100c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800100e:	2303      	movs	r3, #3
 8001010:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001016:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800101a:	4619      	mov	r1, r3
 800101c:	481d      	ldr	r0, [pc, #116]	; (8001094 <HAL_ADC_MspInit+0x13c>)
 800101e:	f002 fd09 	bl	8003a34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001022:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <HAL_ADC_MspInit+0x140>)
 8001024:	4a1d      	ldr	r2, [pc, #116]	; (800109c <HAL_ADC_MspInit+0x144>)
 8001026:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001028:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <HAL_ADC_MspInit+0x140>)
 800102a:	2205      	movs	r2, #5
 800102c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800102e:	4b1a      	ldr	r3, [pc, #104]	; (8001098 <HAL_ADC_MspInit+0x140>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001034:	4b18      	ldr	r3, [pc, #96]	; (8001098 <HAL_ADC_MspInit+0x140>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800103a:	4b17      	ldr	r3, [pc, #92]	; (8001098 <HAL_ADC_MspInit+0x140>)
 800103c:	2280      	movs	r2, #128	; 0x80
 800103e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001040:	4b15      	ldr	r3, [pc, #84]	; (8001098 <HAL_ADC_MspInit+0x140>)
 8001042:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001046:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001048:	4b13      	ldr	r3, [pc, #76]	; (8001098 <HAL_ADC_MspInit+0x140>)
 800104a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800104e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <HAL_ADC_MspInit+0x140>)
 8001052:	2220      	movs	r2, #32
 8001054:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <HAL_ADC_MspInit+0x140>)
 8001058:	2200      	movs	r2, #0
 800105a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800105c:	480e      	ldr	r0, [pc, #56]	; (8001098 <HAL_ADC_MspInit+0x140>)
 800105e:	f002 fa77 	bl	8003550 <HAL_DMA_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8001068:	f7ff ff4c 	bl	8000f04 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <HAL_ADC_MspInit+0x140>)
 8001070:	655a      	str	r2, [r3, #84]	; 0x54
 8001072:	4a09      	ldr	r2, [pc, #36]	; (8001098 <HAL_ADC_MspInit+0x140>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001078:	2200      	movs	r2, #0
 800107a:	2100      	movs	r1, #0
 800107c:	2012      	movs	r0, #18
 800107e:	f002 fa32 	bl	80034e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001082:	2012      	movs	r0, #18
 8001084:	f002 fa49 	bl	800351a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001088:	bf00      	nop
 800108a:	3780      	adds	r7, #128	; 0x80
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40021000 	.word	0x40021000
 8001094:	48000400 	.word	0x48000400
 8001098:	200000a0 	.word	0x200000a0
 800109c:	40020008 	.word	0x40020008

080010a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b09e      	sub	sp, #120	; 0x78
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	2254      	movs	r2, #84	; 0x54
 80010be:	2100      	movs	r1, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f006 f8d9 	bl	8007278 <memset>
  if(huart->Instance==LPUART1)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a1f      	ldr	r2, [pc, #124]	; (8001148 <HAL_UART_MspInit+0xa8>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d136      	bne.n	800113e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80010d0:	2320      	movs	r3, #32
 80010d2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	4618      	mov	r0, r3
 80010de:	f003 fc3d 	bl	800495c <HAL_RCCEx_PeriphCLKConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010e8:	f7ff ff0c 	bl	8000f04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <HAL_UART_MspInit+0xac>)
 80010ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010f0:	4a16      	ldr	r2, [pc, #88]	; (800114c <HAL_UART_MspInit+0xac>)
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <HAL_UART_MspInit+0xac>)
 80010fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <HAL_UART_MspInit+0xac>)
 8001106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001108:	4a10      	ldr	r2, [pc, #64]	; (800114c <HAL_UART_MspInit+0xac>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001110:	4b0e      	ldr	r3, [pc, #56]	; (800114c <HAL_UART_MspInit+0xac>)
 8001112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800111c:	230c      	movs	r3, #12
 800111e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800112c:	230c      	movs	r3, #12
 800112e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001130:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001134:	4619      	mov	r1, r3
 8001136:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113a:	f002 fc7b 	bl	8003a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800113e:	bf00      	nop
 8001140:	3778      	adds	r7, #120	; 0x78
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40008000 	.word	0x40008000
 800114c:	40021000 	.word	0x40021000

08001150 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001160:	d114      	bne.n	800118c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001162:	4b27      	ldr	r3, [pc, #156]	; (8001200 <HAL_TIM_Base_MspInit+0xb0>)
 8001164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001166:	4a26      	ldr	r2, [pc, #152]	; (8001200 <HAL_TIM_Base_MspInit+0xb0>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6593      	str	r3, [r2, #88]	; 0x58
 800116e:	4b24      	ldr	r3, [pc, #144]	; (8001200 <HAL_TIM_Base_MspInit+0xb0>)
 8001170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800117a:	2200      	movs	r2, #0
 800117c:	2100      	movs	r1, #0
 800117e:	201c      	movs	r0, #28
 8001180:	f002 f9b1 	bl	80034e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001184:	201c      	movs	r0, #28
 8001186:	f002 f9c8 	bl	800351a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800118a:	e034      	b.n	80011f6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a1c      	ldr	r2, [pc, #112]	; (8001204 <HAL_TIM_Base_MspInit+0xb4>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d10c      	bne.n	80011b0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001196:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <HAL_TIM_Base_MspInit+0xb0>)
 8001198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119a:	4a19      	ldr	r2, [pc, #100]	; (8001200 <HAL_TIM_Base_MspInit+0xb0>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	6593      	str	r3, [r2, #88]	; 0x58
 80011a2:	4b17      	ldr	r3, [pc, #92]	; (8001200 <HAL_TIM_Base_MspInit+0xb0>)
 80011a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]
}
 80011ae:	e022      	b.n	80011f6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a14      	ldr	r2, [pc, #80]	; (8001208 <HAL_TIM_Base_MspInit+0xb8>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d10c      	bne.n	80011d4 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <HAL_TIM_Base_MspInit+0xb0>)
 80011bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011be:	4a10      	ldr	r2, [pc, #64]	; (8001200 <HAL_TIM_Base_MspInit+0xb0>)
 80011c0:	f043 0304 	orr.w	r3, r3, #4
 80011c4:	6593      	str	r3, [r2, #88]	; 0x58
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <HAL_TIM_Base_MspInit+0xb0>)
 80011c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ca:	f003 0304 	and.w	r3, r3, #4
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
}
 80011d2:	e010      	b.n	80011f6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM5)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a0c      	ldr	r2, [pc, #48]	; (800120c <HAL_TIM_Base_MspInit+0xbc>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d10b      	bne.n	80011f6 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <HAL_TIM_Base_MspInit+0xb0>)
 80011e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e2:	4a07      	ldr	r2, [pc, #28]	; (8001200 <HAL_TIM_Base_MspInit+0xb0>)
 80011e4:	f043 0308 	orr.w	r3, r3, #8
 80011e8:	6593      	str	r3, [r2, #88]	; 0x58
 80011ea:	4b05      	ldr	r3, [pc, #20]	; (8001200 <HAL_TIM_Base_MspInit+0xb0>)
 80011ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ee:	f003 0308 	and.w	r3, r3, #8
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
}
 80011f6:	bf00      	nop
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40021000 	.word	0x40021000
 8001204:	40000400 	.word	0x40000400
 8001208:	40000800 	.word	0x40000800
 800120c:	40000c00 	.word	0x40000c00

08001210 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a23      	ldr	r2, [pc, #140]	; (80012bc <HAL_TIM_MspPostInit+0xac>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d11e      	bne.n	8001270 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <HAL_TIM_MspPostInit+0xb0>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	4a22      	ldr	r2, [pc, #136]	; (80012c0 <HAL_TIM_MspPostInit+0xb0>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123e:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <HAL_TIM_MspPostInit+0xb0>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800124a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800124e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2300      	movs	r3, #0
 800125a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800125c:	230a      	movs	r3, #10
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	4619      	mov	r1, r3
 8001266:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126a:	f002 fbe3 	bl	8003a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800126e:	e020      	b.n	80012b2 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM5)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a13      	ldr	r2, [pc, #76]	; (80012c4 <HAL_TIM_MspPostInit+0xb4>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d11b      	bne.n	80012b2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <HAL_TIM_MspPostInit+0xb0>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	4a10      	ldr	r2, [pc, #64]	; (80012c0 <HAL_TIM_MspPostInit+0xb0>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <HAL_TIM_MspPostInit+0xb0>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001292:	2304      	movs	r3, #4
 8001294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80012a2:	2302      	movs	r3, #2
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	4806      	ldr	r0, [pc, #24]	; (80012c8 <HAL_TIM_MspPostInit+0xb8>)
 80012ae:	f002 fbc1 	bl	8003a34 <HAL_GPIO_Init>
}
 80012b2:	bf00      	nop
 80012b4:	3728      	adds	r7, #40	; 0x28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40000800 	.word	0x40000800
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40000c00 	.word	0x40000c00
 80012c8:	48000400 	.word	0x48000400

080012cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012d0:	e7fe      	b.n	80012d0 <NMI_Handler+0x4>

080012d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <HardFault_Handler+0x4>

080012d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <MemManage_Handler+0x4>

080012de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <BusFault_Handler+0x4>

080012e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <UsageFault_Handler+0x4>

080012ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001318:	f000 f8b6 	bl	8001488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}

08001320 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001324:	4802      	ldr	r0, [pc, #8]	; (8001330 <DMA1_Channel1_IRQHandler+0x10>)
 8001326:	f002 fa36 	bl	8003796 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200000a0 	.word	0x200000a0

08001334 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001338:	4802      	ldr	r0, [pc, #8]	; (8001344 <ADC1_2_IRQHandler+0x10>)
 800133a:	f000 fdb9 	bl	8001eb0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000034 	.word	0x20000034

08001348 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800134c:	4802      	ldr	r0, [pc, #8]	; (8001358 <TIM2_IRQHandler+0x10>)
 800134e:	f004 f807 	bl	8005360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000194 	.word	0x20000194

0800135c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001360:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001364:	f002 fd00 	bl	8003d68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}

0800136c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <SystemInit+0x20>)
 8001372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001376:	4a05      	ldr	r2, [pc, #20]	; (800138c <SystemInit+0x20>)
 8001378:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800137c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001390:	480d      	ldr	r0, [pc, #52]	; (80013c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001392:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001394:	f7ff ffea 	bl	800136c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001398:	480c      	ldr	r0, [pc, #48]	; (80013cc <LoopForever+0x6>)
  ldr r1, =_edata
 800139a:	490d      	ldr	r1, [pc, #52]	; (80013d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800139c:	4a0d      	ldr	r2, [pc, #52]	; (80013d4 <LoopForever+0xe>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80013a0:	e002      	b.n	80013a8 <LoopCopyDataInit>

080013a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013a6:	3304      	adds	r3, #4

080013a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ac:	d3f9      	bcc.n	80013a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013b0:	4c0a      	ldr	r4, [pc, #40]	; (80013dc <LoopForever+0x16>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b4:	e001      	b.n	80013ba <LoopFillZerobss>

080013b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b8:	3204      	adds	r2, #4

080013ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013bc:	d3fb      	bcc.n	80013b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013be:	f005 ff63 	bl	8007288 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013c2:	f7ff f8a7 	bl	8000514 <main>

080013c6 <LoopForever>:

LoopForever:
    b LoopForever
 80013c6:	e7fe      	b.n	80013c6 <LoopForever>
  ldr   r0, =_estack
 80013c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80013d4:	08007338 	.word	0x08007338
  ldr r2, =_sbss
 80013d8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80013dc:	20000548 	.word	0x20000548

080013e0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013e0:	e7fe      	b.n	80013e0 <ADC3_IRQHandler>

080013e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013e8:	2300      	movs	r3, #0
 80013ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ec:	2003      	movs	r0, #3
 80013ee:	f002 f86f 	bl	80034d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013f2:	2000      	movs	r0, #0
 80013f4:	f000 f80e 	bl	8001414 <HAL_InitTick>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d002      	beq.n	8001404 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	71fb      	strb	r3, [r7, #7]
 8001402:	e001      	b.n	8001408 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001404:	f7ff fd84 	bl	8000f10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001408:	79fb      	ldrb	r3, [r7, #7]

}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800141c:	2300      	movs	r3, #0
 800141e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001420:	4b16      	ldr	r3, [pc, #88]	; (800147c <HAL_InitTick+0x68>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d022      	beq.n	800146e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001428:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_InitTick+0x6c>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b13      	ldr	r3, [pc, #76]	; (800147c <HAL_InitTick+0x68>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001434:	fbb1 f3f3 	udiv	r3, r1, r3
 8001438:	fbb2 f3f3 	udiv	r3, r2, r3
 800143c:	4618      	mov	r0, r3
 800143e:	f002 f87a 	bl	8003536 <HAL_SYSTICK_Config>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d10f      	bne.n	8001468 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b0f      	cmp	r3, #15
 800144c:	d809      	bhi.n	8001462 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800144e:	2200      	movs	r2, #0
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	f04f 30ff 	mov.w	r0, #4294967295
 8001456:	f002 f846 	bl	80034e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800145a:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <HAL_InitTick+0x70>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	e007      	b.n	8001472 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	e004      	b.n	8001472 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	73fb      	strb	r3, [r7, #15]
 800146c:	e001      	b.n	8001472 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001472:	7bfb      	ldrb	r3, [r7, #15]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000010 	.word	0x20000010
 8001480:	20000008 	.word	0x20000008
 8001484:	2000000c 	.word	0x2000000c

08001488 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <HAL_IncTick+0x1c>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <HAL_IncTick+0x20>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4413      	add	r3, r2
 8001496:	4a03      	ldr	r2, [pc, #12]	; (80014a4 <HAL_IncTick+0x1c>)
 8001498:	6013      	str	r3, [r2, #0]
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	20000544 	.word	0x20000544
 80014a8:	20000010 	.word	0x20000010

080014ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return uwTick;
 80014b0:	4b03      	ldr	r3, [pc, #12]	; (80014c0 <HAL_GetTick+0x14>)
 80014b2:	681b      	ldr	r3, [r3, #0]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	20000544 	.word	0x20000544

080014c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	431a      	orrs	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	609a      	str	r2, [r3, #8]
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
 80014f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	431a      	orrs	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	609a      	str	r2, [r3, #8]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800152c:	b480      	push	{r7}
 800152e:	b087      	sub	sp, #28
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
 8001538:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	3360      	adds	r3, #96	; 0x60
 800153e:	461a      	mov	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <LL_ADC_SetOffset+0x44>)
 800154e:	4013      	ands	r3, r2
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	430a      	orrs	r2, r1
 800155a:	4313      	orrs	r3, r2
 800155c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001564:	bf00      	nop
 8001566:	371c      	adds	r7, #28
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	03fff000 	.word	0x03fff000

08001574 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3360      	adds	r3, #96	; 0x60
 8001582:	461a      	mov	r2, r3
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001594:	4618      	mov	r0, r3
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b087      	sub	sp, #28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	3360      	adds	r3, #96	; 0x60
 80015b0:	461a      	mov	r2, r3
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	431a      	orrs	r2, r3
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80015ca:	bf00      	nop
 80015cc:	371c      	adds	r7, #28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b087      	sub	sp, #28
 80015da:	af00      	add	r7, sp, #0
 80015dc:	60f8      	str	r0, [r7, #12]
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	3360      	adds	r3, #96	; 0x60
 80015e6:	461a      	mov	r2, r3
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	431a      	orrs	r2, r3
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001600:	bf00      	nop
 8001602:	371c      	adds	r7, #28
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800160c:	b480      	push	{r7}
 800160e:	b087      	sub	sp, #28
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	3360      	adds	r3, #96	; 0x60
 800161c:	461a      	mov	r2, r3
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	431a      	orrs	r2, r3
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001636:	bf00      	nop
 8001638:	371c      	adds	r7, #28
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	431a      	orrs	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	615a      	str	r2, [r3, #20]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001678:	2b00      	cmp	r3, #0
 800167a:	d101      	bne.n	8001680 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800167c:	2301      	movs	r3, #1
 800167e:	e000      	b.n	8001682 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800168e:	b480      	push	{r7}
 8001690:	b087      	sub	sp, #28
 8001692:	af00      	add	r7, sp, #0
 8001694:	60f8      	str	r0, [r7, #12]
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	3330      	adds	r3, #48	; 0x30
 800169e:	461a      	mov	r2, r3
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	0a1b      	lsrs	r3, r3, #8
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	f003 030c 	and.w	r3, r3, #12
 80016aa:	4413      	add	r3, r2
 80016ac:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	f003 031f 	and.w	r3, r3, #31
 80016b8:	211f      	movs	r1, #31
 80016ba:	fa01 f303 	lsl.w	r3, r1, r3
 80016be:	43db      	mvns	r3, r3
 80016c0:	401a      	ands	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	0e9b      	lsrs	r3, r3, #26
 80016c6:	f003 011f 	and.w	r1, r3, #31
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	f003 031f 	and.w	r3, r3, #31
 80016d0:	fa01 f303 	lsl.w	r3, r1, r3
 80016d4:	431a      	orrs	r2, r3
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016da:	bf00      	nop
 80016dc:	371c      	adds	r7, #28
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80016fa:	2301      	movs	r3, #1
 80016fc:	e000      	b.n	8001700 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800170c:	b480      	push	{r7}
 800170e:	b087      	sub	sp, #28
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	3314      	adds	r3, #20
 800171c:	461a      	mov	r2, r3
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	0e5b      	lsrs	r3, r3, #25
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	4413      	add	r3, r2
 800172a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	0d1b      	lsrs	r3, r3, #20
 8001734:	f003 031f 	and.w	r3, r3, #31
 8001738:	2107      	movs	r1, #7
 800173a:	fa01 f303 	lsl.w	r3, r1, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	401a      	ands	r2, r3
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	0d1b      	lsrs	r3, r3, #20
 8001746:	f003 031f 	and.w	r3, r3, #31
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	fa01 f303 	lsl.w	r3, r1, r3
 8001750:	431a      	orrs	r2, r3
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001756:	bf00      	nop
 8001758:	371c      	adds	r7, #28
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800177c:	43db      	mvns	r3, r3
 800177e:	401a      	ands	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f003 0318 	and.w	r3, r3, #24
 8001786:	4908      	ldr	r1, [pc, #32]	; (80017a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001788:	40d9      	lsrs	r1, r3
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	400b      	ands	r3, r1
 800178e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001792:	431a      	orrs	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	0007ffff 	.word	0x0007ffff

080017ac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 031f 	and.w	r3, r3, #31
}
 80017bc:	4618      	mov	r0, r3
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80017d8:	4618      	mov	r0, r3
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80017f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6093      	str	r3, [r2, #8]
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001818:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800181c:	d101      	bne.n	8001822 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800181e:	2301      	movs	r3, #1
 8001820:	e000      	b.n	8001824 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001840:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001844:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001868:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800186c:	d101      	bne.n	8001872 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800186e:	2301      	movs	r3, #1
 8001870:	e000      	b.n	8001874 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001890:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001894:	f043 0201 	orr.w	r2, r3, #1
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018bc:	f043 0202 	orr.w	r2, r3, #2
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d101      	bne.n	80018e8 <LL_ADC_IsEnabled+0x18>
 80018e4:	2301      	movs	r3, #1
 80018e6:	e000      	b.n	80018ea <LL_ADC_IsEnabled+0x1a>
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b02      	cmp	r3, #2
 8001908:	d101      	bne.n	800190e <LL_ADC_IsDisableOngoing+0x18>
 800190a:	2301      	movs	r3, #1
 800190c:	e000      	b.n	8001910 <LL_ADC_IsDisableOngoing+0x1a>
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800192c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001930:	f043 0204 	orr.w	r2, r3, #4
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b04      	cmp	r3, #4
 8001956:	d101      	bne.n	800195c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001958:	2301      	movs	r3, #1
 800195a:	e000      	b.n	800195e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	2b08      	cmp	r3, #8
 800197c:	d101      	bne.n	8001982 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800197e:	2301      	movs	r3, #1
 8001980:	e000      	b.n	8001984 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001990:	b590      	push	{r4, r7, lr}
 8001992:	b089      	sub	sp, #36	; 0x24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800199c:	2300      	movs	r3, #0
 800199e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e1a9      	b.n	8001cfe <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d109      	bne.n	80019cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff facd 	bl	8000f58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff19 	bl	8001808 <LL_ADC_IsDeepPowerDownEnabled>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d004      	beq.n	80019e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff feff 	bl	80017e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff ff34 	bl	8001858 <LL_ADC_IsInternalRegulatorEnabled>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d115      	bne.n	8001a22 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff ff18 	bl	8001830 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a00:	4b9c      	ldr	r3, [pc, #624]	; (8001c74 <HAL_ADC_Init+0x2e4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	099b      	lsrs	r3, r3, #6
 8001a06:	4a9c      	ldr	r2, [pc, #624]	; (8001c78 <HAL_ADC_Init+0x2e8>)
 8001a08:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0c:	099b      	lsrs	r3, r3, #6
 8001a0e:	3301      	adds	r3, #1
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a14:	e002      	b.n	8001a1c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f9      	bne.n	8001a16 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff ff16 	bl	8001858 <LL_ADC_IsInternalRegulatorEnabled>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d10d      	bne.n	8001a4e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a36:	f043 0210 	orr.w	r2, r3, #16
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a42:	f043 0201 	orr.w	r2, r3, #1
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff ff76 	bl	8001944 <LL_ADC_REG_IsConversionOngoing>
 8001a58:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a5e:	f003 0310 	and.w	r3, r3, #16
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f040 8142 	bne.w	8001cec <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f040 813e 	bne.w	8001cec <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a74:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a78:	f043 0202 	orr.w	r2, r3, #2
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff23 	bl	80018d0 <LL_ADC_IsEnabled>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d141      	bne.n	8001b14 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a98:	d004      	beq.n	8001aa4 <HAL_ADC_Init+0x114>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a77      	ldr	r2, [pc, #476]	; (8001c7c <HAL_ADC_Init+0x2ec>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d10f      	bne.n	8001ac4 <HAL_ADC_Init+0x134>
 8001aa4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001aa8:	f7ff ff12 	bl	80018d0 <LL_ADC_IsEnabled>
 8001aac:	4604      	mov	r4, r0
 8001aae:	4873      	ldr	r0, [pc, #460]	; (8001c7c <HAL_ADC_Init+0x2ec>)
 8001ab0:	f7ff ff0e 	bl	80018d0 <LL_ADC_IsEnabled>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	4323      	orrs	r3, r4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	bf0c      	ite	eq
 8001abc:	2301      	moveq	r3, #1
 8001abe:	2300      	movne	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	e012      	b.n	8001aea <HAL_ADC_Init+0x15a>
 8001ac4:	486e      	ldr	r0, [pc, #440]	; (8001c80 <HAL_ADC_Init+0x2f0>)
 8001ac6:	f7ff ff03 	bl	80018d0 <LL_ADC_IsEnabled>
 8001aca:	4604      	mov	r4, r0
 8001acc:	486d      	ldr	r0, [pc, #436]	; (8001c84 <HAL_ADC_Init+0x2f4>)
 8001ace:	f7ff feff 	bl	80018d0 <LL_ADC_IsEnabled>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	431c      	orrs	r4, r3
 8001ad6:	486c      	ldr	r0, [pc, #432]	; (8001c88 <HAL_ADC_Init+0x2f8>)
 8001ad8:	f7ff fefa 	bl	80018d0 <LL_ADC_IsEnabled>
 8001adc:	4603      	mov	r3, r0
 8001ade:	4323      	orrs	r3, r4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	bf0c      	ite	eq
 8001ae4:	2301      	moveq	r3, #1
 8001ae6:	2300      	movne	r3, #0
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d012      	beq.n	8001b14 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001af6:	d004      	beq.n	8001b02 <HAL_ADC_Init+0x172>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a5f      	ldr	r2, [pc, #380]	; (8001c7c <HAL_ADC_Init+0x2ec>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d101      	bne.n	8001b06 <HAL_ADC_Init+0x176>
 8001b02:	4a62      	ldr	r2, [pc, #392]	; (8001c8c <HAL_ADC_Init+0x2fc>)
 8001b04:	e000      	b.n	8001b08 <HAL_ADC_Init+0x178>
 8001b06:	4a62      	ldr	r2, [pc, #392]	; (8001c90 <HAL_ADC_Init+0x300>)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4610      	mov	r0, r2
 8001b10:	f7ff fcd8 	bl	80014c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	7f5b      	ldrb	r3, [r3, #29]
 8001b18:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b1e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001b24:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001b2a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b32:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d106      	bne.n	8001b50 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b46:	3b01      	subs	r3, #1
 8001b48:	045b      	lsls	r3, r3, #17
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d009      	beq.n	8001b6c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b64:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68da      	ldr	r2, [r3, #12]
 8001b72:	4b48      	ldr	r3, [pc, #288]	; (8001c94 <HAL_ADC_Init+0x304>)
 8001b74:	4013      	ands	r3, r2
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6812      	ldr	r2, [r2, #0]
 8001b7a:	69b9      	ldr	r1, [r7, #24]
 8001b7c:	430b      	orrs	r3, r1
 8001b7e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff fee5 	bl	800196a <LL_ADC_INJ_IsConversionOngoing>
 8001ba0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d17f      	bne.n	8001ca8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d17c      	bne.n	8001ca8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bb2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bba:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bca:	f023 0302 	bic.w	r3, r3, #2
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6812      	ldr	r2, [r2, #0]
 8001bd2:	69b9      	ldr	r1, [r7, #24]
 8001bd4:	430b      	orrs	r3, r1
 8001bd6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d017      	beq.n	8001c10 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	691a      	ldr	r2, [r3, #16]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001bee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001bf8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001bfc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6911      	ldr	r1, [r2, #16]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	6812      	ldr	r2, [r2, #0]
 8001c08:	430b      	orrs	r3, r1
 8001c0a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001c0e:	e013      	b.n	8001c38 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	691a      	ldr	r2, [r3, #16]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c1e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6812      	ldr	r2, [r2, #0]
 8001c2c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c34:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d12a      	bne.n	8001c98 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c4c:	f023 0304 	bic.w	r3, r3, #4
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c58:	4311      	orrs	r1, r2
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001c5e:	4311      	orrs	r1, r2
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c64:	430a      	orrs	r2, r1
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f042 0201 	orr.w	r2, r2, #1
 8001c70:	611a      	str	r2, [r3, #16]
 8001c72:	e019      	b.n	8001ca8 <HAL_ADC_Init+0x318>
 8001c74:	20000008 	.word	0x20000008
 8001c78:	053e2d63 	.word	0x053e2d63
 8001c7c:	50000100 	.word	0x50000100
 8001c80:	50000400 	.word	0x50000400
 8001c84:	50000500 	.word	0x50000500
 8001c88:	50000600 	.word	0x50000600
 8001c8c:	50000300 	.word	0x50000300
 8001c90:	50000700 	.word	0x50000700
 8001c94:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	691a      	ldr	r2, [r3, #16]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0201 	bic.w	r2, r2, #1
 8001ca6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d10c      	bne.n	8001cca <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f023 010f 	bic.w	r1, r3, #15
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	1e5a      	subs	r2, r3, #1
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	631a      	str	r2, [r3, #48]	; 0x30
 8001cc8:	e007      	b.n	8001cda <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 020f 	bic.w	r2, r2, #15
 8001cd8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cde:	f023 0303 	bic.w	r3, r3, #3
 8001ce2:	f043 0201 	orr.w	r2, r3, #1
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cea:	e007      	b.n	8001cfc <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf0:	f043 0210 	orr.w	r2, r3, #16
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cfc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3724      	adds	r7, #36	; 0x24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd90      	pop	{r4, r7, pc}
 8001d06:	bf00      	nop

08001d08 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d1c:	d004      	beq.n	8001d28 <HAL_ADC_Start_DMA+0x20>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a5a      	ldr	r2, [pc, #360]	; (8001e8c <HAL_ADC_Start_DMA+0x184>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d101      	bne.n	8001d2c <HAL_ADC_Start_DMA+0x24>
 8001d28:	4b59      	ldr	r3, [pc, #356]	; (8001e90 <HAL_ADC_Start_DMA+0x188>)
 8001d2a:	e000      	b.n	8001d2e <HAL_ADC_Start_DMA+0x26>
 8001d2c:	4b59      	ldr	r3, [pc, #356]	; (8001e94 <HAL_ADC_Start_DMA+0x18c>)
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fd3c 	bl	80017ac <LL_ADC_GetMultimode>
 8001d34:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff fe02 	bl	8001944 <LL_ADC_REG_IsConversionOngoing>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f040 809b 	bne.w	8001e7e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d101      	bne.n	8001d56 <HAL_ADC_Start_DMA+0x4e>
 8001d52:	2302      	movs	r3, #2
 8001d54:	e096      	b.n	8001e84 <HAL_ADC_Start_DMA+0x17c>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a4d      	ldr	r2, [pc, #308]	; (8001e98 <HAL_ADC_Start_DMA+0x190>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d008      	beq.n	8001d7a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d005      	beq.n	8001d7a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	2b05      	cmp	r3, #5
 8001d72:	d002      	beq.n	8001d7a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	2b09      	cmp	r3, #9
 8001d78:	d17a      	bne.n	8001e70 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 ff60 	bl	8002c40 <ADC_Enable>
 8001d80:	4603      	mov	r3, r0
 8001d82:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001d84:	7dfb      	ldrb	r3, [r7, #23]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d16d      	bne.n	8001e66 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d92:	f023 0301 	bic.w	r3, r3, #1
 8001d96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a3a      	ldr	r2, [pc, #232]	; (8001e8c <HAL_ADC_Start_DMA+0x184>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d009      	beq.n	8001dbc <HAL_ADC_Start_DMA+0xb4>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a3b      	ldr	r2, [pc, #236]	; (8001e9c <HAL_ADC_Start_DMA+0x194>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d002      	beq.n	8001db8 <HAL_ADC_Start_DMA+0xb0>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	e003      	b.n	8001dc0 <HAL_ADC_Start_DMA+0xb8>
 8001db8:	4b39      	ldr	r3, [pc, #228]	; (8001ea0 <HAL_ADC_Start_DMA+0x198>)
 8001dba:	e001      	b.n	8001dc0 <HAL_ADC_Start_DMA+0xb8>
 8001dbc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	6812      	ldr	r2, [r2, #0]
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d002      	beq.n	8001dce <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d105      	bne.n	8001dda <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d006      	beq.n	8001df4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dea:	f023 0206 	bic.w	r2, r3, #6
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	661a      	str	r2, [r3, #96]	; 0x60
 8001df2:	e002      	b.n	8001dfa <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfe:	4a29      	ldr	r2, [pc, #164]	; (8001ea4 <HAL_ADC_Start_DMA+0x19c>)
 8001e00:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e06:	4a28      	ldr	r2, [pc, #160]	; (8001ea8 <HAL_ADC_Start_DMA+0x1a0>)
 8001e08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0e:	4a27      	ldr	r2, [pc, #156]	; (8001eac <HAL_ADC_Start_DMA+0x1a4>)
 8001e10:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	221c      	movs	r2, #28
 8001e18:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f042 0210 	orr.w	r2, r2, #16
 8001e30:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68da      	ldr	r2, [r3, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f042 0201 	orr.w	r2, r2, #1
 8001e40:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	3340      	adds	r3, #64	; 0x40
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f001 fc25 	bl	80036a0 <HAL_DMA_Start_IT>
 8001e56:	4603      	mov	r3, r0
 8001e58:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fd5c 	bl	800191c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001e64:	e00d      	b.n	8001e82 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001e6e:	e008      	b.n	8001e82 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001e7c:	e001      	b.n	8001e82 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	50000100 	.word	0x50000100
 8001e90:	50000300 	.word	0x50000300
 8001e94:	50000700 	.word	0x50000700
 8001e98:	50000600 	.word	0x50000600
 8001e9c:	50000500 	.word	0x50000500
 8001ea0:	50000400 	.word	0x50000400
 8001ea4:	08002e2b 	.word	0x08002e2b
 8001ea8:	08002f03 	.word	0x08002f03
 8001eac:	08002f1f 	.word	0x08002f1f

08001eb0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08a      	sub	sp, #40	; 0x28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001eb8:	2300      	movs	r3, #0
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ed4:	d004      	beq.n	8001ee0 <HAL_ADC_IRQHandler+0x30>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a8e      	ldr	r2, [pc, #568]	; (8002114 <HAL_ADC_IRQHandler+0x264>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d101      	bne.n	8001ee4 <HAL_ADC_IRQHandler+0x34>
 8001ee0:	4b8d      	ldr	r3, [pc, #564]	; (8002118 <HAL_ADC_IRQHandler+0x268>)
 8001ee2:	e000      	b.n	8001ee6 <HAL_ADC_IRQHandler+0x36>
 8001ee4:	4b8d      	ldr	r3, [pc, #564]	; (800211c <HAL_ADC_IRQHandler+0x26c>)
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fc60 	bl	80017ac <LL_ADC_GetMultimode>
 8001eec:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d017      	beq.n	8001f28 <HAL_ADC_IRQHandler+0x78>
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d012      	beq.n	8001f28 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f06:	f003 0310 	and.w	r3, r3, #16
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d105      	bne.n	8001f1a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f12:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f001 f8f6 	bl	800310c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2202      	movs	r2, #2
 8001f26:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d004      	beq.n	8001f3c <HAL_ADC_IRQHandler+0x8c>
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10b      	bne.n	8001f54 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 8094 	beq.w	8002070 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 808e 	beq.w	8002070 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f58:	f003 0310 	and.w	r3, r3, #16
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d105      	bne.n	8001f6c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f64:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff fb79 	bl	8001668 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d072      	beq.n	8002062 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a64      	ldr	r2, [pc, #400]	; (8002114 <HAL_ADC_IRQHandler+0x264>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d009      	beq.n	8001f9a <HAL_ADC_IRQHandler+0xea>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a65      	ldr	r2, [pc, #404]	; (8002120 <HAL_ADC_IRQHandler+0x270>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d002      	beq.n	8001f96 <HAL_ADC_IRQHandler+0xe6>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	e003      	b.n	8001f9e <HAL_ADC_IRQHandler+0xee>
 8001f96:	4b63      	ldr	r3, [pc, #396]	; (8002124 <HAL_ADC_IRQHandler+0x274>)
 8001f98:	e001      	b.n	8001f9e <HAL_ADC_IRQHandler+0xee>
 8001f9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6812      	ldr	r2, [r2, #0]
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d008      	beq.n	8001fb8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d005      	beq.n	8001fb8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	2b05      	cmp	r3, #5
 8001fb0:	d002      	beq.n	8001fb8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	2b09      	cmp	r3, #9
 8001fb6:	d104      	bne.n	8001fc2 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	623b      	str	r3, [r7, #32]
 8001fc0:	e014      	b.n	8001fec <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a53      	ldr	r2, [pc, #332]	; (8002114 <HAL_ADC_IRQHandler+0x264>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d009      	beq.n	8001fe0 <HAL_ADC_IRQHandler+0x130>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a53      	ldr	r2, [pc, #332]	; (8002120 <HAL_ADC_IRQHandler+0x270>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d002      	beq.n	8001fdc <HAL_ADC_IRQHandler+0x12c>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	e003      	b.n	8001fe4 <HAL_ADC_IRQHandler+0x134>
 8001fdc:	4b51      	ldr	r3, [pc, #324]	; (8002124 <HAL_ADC_IRQHandler+0x274>)
 8001fde:	e001      	b.n	8001fe4 <HAL_ADC_IRQHandler+0x134>
 8001fe0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001fe4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d135      	bne.n	8002062 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	2b08      	cmp	r3, #8
 8002002:	d12e      	bne.n	8002062 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff fc9b 	bl	8001944 <LL_ADC_REG_IsConversionOngoing>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d11a      	bne.n	800204a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 020c 	bic.w	r2, r2, #12
 8002022:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002028:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002034:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d112      	bne.n	8002062 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002040:	f043 0201 	orr.w	r2, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	65da      	str	r2, [r3, #92]	; 0x5c
 8002048:	e00b      	b.n	8002062 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204e:	f043 0210 	orr.w	r2, r3, #16
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800205a:	f043 0201 	orr.w	r2, r3, #1
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f984 	bl	8002370 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	220c      	movs	r2, #12
 800206e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f003 0320 	and.w	r3, r3, #32
 8002076:	2b00      	cmp	r3, #0
 8002078:	d004      	beq.n	8002084 <HAL_ADC_IRQHandler+0x1d4>
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	f003 0320 	and.w	r3, r3, #32
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10b      	bne.n	800209c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 80b3 	beq.w	80021f6 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 80ad 	beq.w	80021f6 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a0:	f003 0310 	and.w	r3, r3, #16
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d105      	bne.n	80020b4 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff fb14 	bl	80016e6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80020be:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff facf 	bl	8001668 <LL_ADC_REG_IsTriggerSourceSWStart>
 80020ca:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a10      	ldr	r2, [pc, #64]	; (8002114 <HAL_ADC_IRQHandler+0x264>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d009      	beq.n	80020ea <HAL_ADC_IRQHandler+0x23a>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a11      	ldr	r2, [pc, #68]	; (8002120 <HAL_ADC_IRQHandler+0x270>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d002      	beq.n	80020e6 <HAL_ADC_IRQHandler+0x236>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	e003      	b.n	80020ee <HAL_ADC_IRQHandler+0x23e>
 80020e6:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <HAL_ADC_IRQHandler+0x274>)
 80020e8:	e001      	b.n	80020ee <HAL_ADC_IRQHandler+0x23e>
 80020ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6812      	ldr	r2, [r2, #0]
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d008      	beq.n	8002108 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d002      	beq.n	8002108 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2b07      	cmp	r3, #7
 8002106:	d10f      	bne.n	8002128 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	623b      	str	r3, [r7, #32]
 8002110:	e01f      	b.n	8002152 <HAL_ADC_IRQHandler+0x2a2>
 8002112:	bf00      	nop
 8002114:	50000100 	.word	0x50000100
 8002118:	50000300 	.word	0x50000300
 800211c:	50000700 	.word	0x50000700
 8002120:	50000500 	.word	0x50000500
 8002124:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a8b      	ldr	r2, [pc, #556]	; (800235c <HAL_ADC_IRQHandler+0x4ac>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d009      	beq.n	8002146 <HAL_ADC_IRQHandler+0x296>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a8a      	ldr	r2, [pc, #552]	; (8002360 <HAL_ADC_IRQHandler+0x4b0>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d002      	beq.n	8002142 <HAL_ADC_IRQHandler+0x292>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	e003      	b.n	800214a <HAL_ADC_IRQHandler+0x29a>
 8002142:	4b88      	ldr	r3, [pc, #544]	; (8002364 <HAL_ADC_IRQHandler+0x4b4>)
 8002144:	e001      	b.n	800214a <HAL_ADC_IRQHandler+0x29a>
 8002146:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800214a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d047      	beq.n	80021e8 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002158:	6a3b      	ldr	r3, [r7, #32]
 800215a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d007      	beq.n	8002172 <HAL_ADC_IRQHandler+0x2c2>
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d03f      	beq.n	80021e8 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002168:	6a3b      	ldr	r3, [r7, #32]
 800216a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800216e:	2b00      	cmp	r3, #0
 8002170:	d13a      	bne.n	80021e8 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800217c:	2b40      	cmp	r3, #64	; 0x40
 800217e:	d133      	bne.n	80021e8 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002180:	6a3b      	ldr	r3, [r7, #32]
 8002182:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d12e      	bne.n	80021e8 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff fbeb 	bl	800196a <LL_ADC_INJ_IsConversionOngoing>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d11a      	bne.n	80021d0 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80021a8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d112      	bne.n	80021e8 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c6:	f043 0201 	orr.w	r2, r3, #1
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80021ce:	e00b      	b.n	80021e8 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d4:	f043 0210 	orr.w	r2, r3, #16
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e0:	f043 0201 	orr.w	r2, r3, #1
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 ff67 	bl	80030bc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2260      	movs	r2, #96	; 0x60
 80021f4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d011      	beq.n	8002224 <HAL_ADC_IRQHandler+0x374>
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00c      	beq.n	8002224 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f8be 	bl	8002398 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2280      	movs	r2, #128	; 0x80
 8002222:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222a:	2b00      	cmp	r3, #0
 800222c:	d012      	beq.n	8002254 <HAL_ADC_IRQHandler+0x3a4>
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00d      	beq.n	8002254 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 ff4d 	bl	80030e4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002252:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800225a:	2b00      	cmp	r3, #0
 800225c:	d012      	beq.n	8002284 <HAL_ADC_IRQHandler+0x3d4>
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00d      	beq.n	8002284 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 ff3f 	bl	80030f8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002282:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f003 0310 	and.w	r3, r3, #16
 800228a:	2b00      	cmp	r3, #0
 800228c:	d043      	beq.n	8002316 <HAL_ADC_IRQHandler+0x466>
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	f003 0310 	and.w	r3, r3, #16
 8002294:	2b00      	cmp	r3, #0
 8002296:	d03e      	beq.n	8002316 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229c:	2b00      	cmp	r3, #0
 800229e:	d102      	bne.n	80022a6 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80022a0:	2301      	movs	r3, #1
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
 80022a4:	e021      	b.n	80022ea <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d015      	beq.n	80022d8 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022b4:	d004      	beq.n	80022c0 <HAL_ADC_IRQHandler+0x410>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a28      	ldr	r2, [pc, #160]	; (800235c <HAL_ADC_IRQHandler+0x4ac>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d101      	bne.n	80022c4 <HAL_ADC_IRQHandler+0x414>
 80022c0:	4b29      	ldr	r3, [pc, #164]	; (8002368 <HAL_ADC_IRQHandler+0x4b8>)
 80022c2:	e000      	b.n	80022c6 <HAL_ADC_IRQHandler+0x416>
 80022c4:	4b29      	ldr	r3, [pc, #164]	; (800236c <HAL_ADC_IRQHandler+0x4bc>)
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff fa7e 	bl	80017c8 <LL_ADC_GetMultiDMATransfer>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00b      	beq.n	80022ea <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80022d2:	2301      	movs	r3, #1
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
 80022d6:	e008      	b.n	80022ea <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80022e6:	2301      	movs	r3, #1
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d10e      	bne.n	800230e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002300:	f043 0202 	orr.w	r2, r3, #2
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 f84f 	bl	80023ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2210      	movs	r2, #16
 8002314:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800231c:	2b00      	cmp	r3, #0
 800231e:	d018      	beq.n	8002352 <HAL_ADC_IRQHandler+0x4a2>
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002326:	2b00      	cmp	r3, #0
 8002328:	d013      	beq.n	8002352 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800233a:	f043 0208 	orr.w	r2, r3, #8
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800234a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 febf 	bl	80030d0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002352:	bf00      	nop
 8002354:	3728      	adds	r7, #40	; 0x28
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	50000100 	.word	0x50000100
 8002360:	50000500 	.word	0x50000500
 8002364:	50000400 	.word	0x50000400
 8002368:	50000300 	.word	0x50000300
 800236c:	50000700 	.word	0x50000700

08002370 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b0b6      	sub	sp, #216	; 0xd8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d102      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x24>
 80023de:	2302      	movs	r3, #2
 80023e0:	f000 bc13 	b.w	8002c0a <HAL_ADC_ConfigChannel+0x84a>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff faa7 	bl	8001944 <LL_ADC_REG_IsConversionOngoing>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f040 83f3 	bne.w	8002be4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6818      	ldr	r0, [r3, #0]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	6859      	ldr	r1, [r3, #4]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	f7ff f93f 	bl	800168e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fa95 	bl	8001944 <LL_ADC_REG_IsConversionOngoing>
 800241a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff faa1 	bl	800196a <LL_ADC_INJ_IsConversionOngoing>
 8002428:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800242c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002430:	2b00      	cmp	r3, #0
 8002432:	f040 81d9 	bne.w	80027e8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002436:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800243a:	2b00      	cmp	r3, #0
 800243c:	f040 81d4 	bne.w	80027e8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002448:	d10f      	bne.n	800246a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2200      	movs	r2, #0
 8002454:	4619      	mov	r1, r3
 8002456:	f7ff f959 	bl	800170c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff f8ed 	bl	8001642 <LL_ADC_SetSamplingTimeCommonConfig>
 8002468:	e00e      	b.n	8002488 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6818      	ldr	r0, [r3, #0]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	6819      	ldr	r1, [r3, #0]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	461a      	mov	r2, r3
 8002478:	f7ff f948 	bl	800170c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2100      	movs	r1, #0
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff f8dd 	bl	8001642 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	695a      	ldr	r2, [r3, #20]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	08db      	lsrs	r3, r3, #3
 8002494:	f003 0303 	and.w	r3, r3, #3
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d022      	beq.n	80024f0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6818      	ldr	r0, [r3, #0]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	6919      	ldr	r1, [r3, #16]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80024ba:	f7ff f837 	bl	800152c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6818      	ldr	r0, [r3, #0]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	6919      	ldr	r1, [r3, #16]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	461a      	mov	r2, r3
 80024cc:	f7ff f883 	bl	80015d6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6818      	ldr	r0, [r3, #0]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d102      	bne.n	80024e6 <HAL_ADC_ConfigChannel+0x126>
 80024e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024e4:	e000      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x128>
 80024e6:	2300      	movs	r3, #0
 80024e8:	461a      	mov	r2, r3
 80024ea:	f7ff f88f 	bl	800160c <LL_ADC_SetOffsetSaturation>
 80024ee:	e17b      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2100      	movs	r1, #0
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff f83c 	bl	8001574 <LL_ADC_GetOffsetChannel>
 80024fc:	4603      	mov	r3, r0
 80024fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10a      	bne.n	800251c <HAL_ADC_ConfigChannel+0x15c>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2100      	movs	r1, #0
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff f831 	bl	8001574 <LL_ADC_GetOffsetChannel>
 8002512:	4603      	mov	r3, r0
 8002514:	0e9b      	lsrs	r3, r3, #26
 8002516:	f003 021f 	and.w	r2, r3, #31
 800251a:	e01e      	b.n	800255a <HAL_ADC_ConfigChannel+0x19a>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2100      	movs	r1, #0
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff f826 	bl	8001574 <LL_ADC_GetOffsetChannel>
 8002528:	4603      	mov	r3, r0
 800252a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002532:	fa93 f3a3 	rbit	r3, r3
 8002536:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800253a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800253e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002542:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800254a:	2320      	movs	r3, #32
 800254c:	e004      	b.n	8002558 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800254e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002552:	fab3 f383 	clz	r3, r3
 8002556:	b2db      	uxtb	r3, r3
 8002558:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002562:	2b00      	cmp	r3, #0
 8002564:	d105      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x1b2>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	0e9b      	lsrs	r3, r3, #26
 800256c:	f003 031f 	and.w	r3, r3, #31
 8002570:	e018      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x1e4>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800257e:	fa93 f3a3 	rbit	r3, r3
 8002582:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002586:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800258a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800258e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002596:	2320      	movs	r3, #32
 8002598:	e004      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800259a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d106      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2200      	movs	r2, #0
 80025ae:	2100      	movs	r1, #0
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fe fff5 	bl	80015a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2101      	movs	r1, #1
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fe ffd9 	bl	8001574 <LL_ADC_GetOffsetChannel>
 80025c2:	4603      	mov	r3, r0
 80025c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10a      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x222>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2101      	movs	r1, #1
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe ffce 	bl	8001574 <LL_ADC_GetOffsetChannel>
 80025d8:	4603      	mov	r3, r0
 80025da:	0e9b      	lsrs	r3, r3, #26
 80025dc:	f003 021f 	and.w	r2, r3, #31
 80025e0:	e01e      	b.n	8002620 <HAL_ADC_ConfigChannel+0x260>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2101      	movs	r1, #1
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fe ffc3 	bl	8001574 <LL_ADC_GetOffsetChannel>
 80025ee:	4603      	mov	r3, r0
 80025f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80025f8:	fa93 f3a3 	rbit	r3, r3
 80025fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002600:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002604:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002608:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002610:	2320      	movs	r3, #32
 8002612:	e004      	b.n	800261e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002614:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002618:	fab3 f383 	clz	r3, r3
 800261c:	b2db      	uxtb	r3, r3
 800261e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002628:	2b00      	cmp	r3, #0
 800262a:	d105      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x278>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	0e9b      	lsrs	r3, r3, #26
 8002632:	f003 031f 	and.w	r3, r3, #31
 8002636:	e018      	b.n	800266a <HAL_ADC_ConfigChannel+0x2aa>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002640:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002644:	fa93 f3a3 	rbit	r3, r3
 8002648:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800264c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002650:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002654:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800265c:	2320      	movs	r3, #32
 800265e:	e004      	b.n	800266a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002660:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002664:	fab3 f383 	clz	r3, r3
 8002668:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800266a:	429a      	cmp	r2, r3
 800266c:	d106      	bne.n	800267c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2200      	movs	r2, #0
 8002674:	2101      	movs	r1, #1
 8002676:	4618      	mov	r0, r3
 8002678:	f7fe ff92 	bl	80015a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2102      	movs	r1, #2
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe ff76 	bl	8001574 <LL_ADC_GetOffsetChannel>
 8002688:	4603      	mov	r3, r0
 800268a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10a      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x2e8>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2102      	movs	r1, #2
 8002698:	4618      	mov	r0, r3
 800269a:	f7fe ff6b 	bl	8001574 <LL_ADC_GetOffsetChannel>
 800269e:	4603      	mov	r3, r0
 80026a0:	0e9b      	lsrs	r3, r3, #26
 80026a2:	f003 021f 	and.w	r2, r3, #31
 80026a6:	e01e      	b.n	80026e6 <HAL_ADC_ConfigChannel+0x326>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2102      	movs	r1, #2
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe ff60 	bl	8001574 <LL_ADC_GetOffsetChannel>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026be:	fa93 f3a3 	rbit	r3, r3
 80026c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80026c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80026ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80026d6:	2320      	movs	r3, #32
 80026d8:	e004      	b.n	80026e4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80026da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026de:	fab3 f383 	clz	r3, r3
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d105      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x33e>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	0e9b      	lsrs	r3, r3, #26
 80026f8:	f003 031f 	and.w	r3, r3, #31
 80026fc:	e016      	b.n	800272c <HAL_ADC_ConfigChannel+0x36c>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002706:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800270a:	fa93 f3a3 	rbit	r3, r3
 800270e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002710:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002712:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002716:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800271e:	2320      	movs	r3, #32
 8002720:	e004      	b.n	800272c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002722:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002726:	fab3 f383 	clz	r3, r3
 800272a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800272c:	429a      	cmp	r2, r3
 800272e:	d106      	bne.n	800273e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2200      	movs	r2, #0
 8002736:	2102      	movs	r1, #2
 8002738:	4618      	mov	r0, r3
 800273a:	f7fe ff31 	bl	80015a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2103      	movs	r1, #3
 8002744:	4618      	mov	r0, r3
 8002746:	f7fe ff15 	bl	8001574 <LL_ADC_GetOffsetChannel>
 800274a:	4603      	mov	r3, r0
 800274c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10a      	bne.n	800276a <HAL_ADC_ConfigChannel+0x3aa>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2103      	movs	r1, #3
 800275a:	4618      	mov	r0, r3
 800275c:	f7fe ff0a 	bl	8001574 <LL_ADC_GetOffsetChannel>
 8002760:	4603      	mov	r3, r0
 8002762:	0e9b      	lsrs	r3, r3, #26
 8002764:	f003 021f 	and.w	r2, r3, #31
 8002768:	e017      	b.n	800279a <HAL_ADC_ConfigChannel+0x3da>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2103      	movs	r1, #3
 8002770:	4618      	mov	r0, r3
 8002772:	f7fe feff 	bl	8001574 <LL_ADC_GetOffsetChannel>
 8002776:	4603      	mov	r3, r0
 8002778:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800277c:	fa93 f3a3 	rbit	r3, r3
 8002780:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002782:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002784:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002786:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800278c:	2320      	movs	r3, #32
 800278e:	e003      	b.n	8002798 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002790:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002792:	fab3 f383 	clz	r3, r3
 8002796:	b2db      	uxtb	r3, r3
 8002798:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d105      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x3f2>
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	0e9b      	lsrs	r3, r3, #26
 80027ac:	f003 031f 	and.w	r3, r3, #31
 80027b0:	e011      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x416>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027ba:	fa93 f3a3 	rbit	r3, r3
 80027be:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80027c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80027c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80027ca:	2320      	movs	r3, #32
 80027cc:	e003      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80027ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027d0:	fab3 f383 	clz	r3, r3
 80027d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d106      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2200      	movs	r2, #0
 80027e0:	2103      	movs	r1, #3
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fe fedc 	bl	80015a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff f86f 	bl	80018d0 <LL_ADC_IsEnabled>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f040 813d 	bne.w	8002a74 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	6819      	ldr	r1, [r3, #0]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	461a      	mov	r2, r3
 8002808:	f7fe ffac 	bl	8001764 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	4aa2      	ldr	r2, [pc, #648]	; (8002a9c <HAL_ADC_ConfigChannel+0x6dc>)
 8002812:	4293      	cmp	r3, r2
 8002814:	f040 812e 	bne.w	8002a74 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10b      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x480>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	0e9b      	lsrs	r3, r3, #26
 800282e:	3301      	adds	r3, #1
 8002830:	f003 031f 	and.w	r3, r3, #31
 8002834:	2b09      	cmp	r3, #9
 8002836:	bf94      	ite	ls
 8002838:	2301      	movls	r3, #1
 800283a:	2300      	movhi	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	e019      	b.n	8002874 <HAL_ADC_ConfigChannel+0x4b4>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002848:	fa93 f3a3 	rbit	r3, r3
 800284c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800284e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002850:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002852:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002858:	2320      	movs	r3, #32
 800285a:	e003      	b.n	8002864 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800285c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800285e:	fab3 f383 	clz	r3, r3
 8002862:	b2db      	uxtb	r3, r3
 8002864:	3301      	adds	r3, #1
 8002866:	f003 031f 	and.w	r3, r3, #31
 800286a:	2b09      	cmp	r3, #9
 800286c:	bf94      	ite	ls
 800286e:	2301      	movls	r3, #1
 8002870:	2300      	movhi	r3, #0
 8002872:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002874:	2b00      	cmp	r3, #0
 8002876:	d079      	beq.n	800296c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002880:	2b00      	cmp	r3, #0
 8002882:	d107      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x4d4>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	0e9b      	lsrs	r3, r3, #26
 800288a:	3301      	adds	r3, #1
 800288c:	069b      	lsls	r3, r3, #26
 800288e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002892:	e015      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x500>
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800289c:	fa93 f3a3 	rbit	r3, r3
 80028a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80028a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80028a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80028ac:	2320      	movs	r3, #32
 80028ae:	e003      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80028b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028b2:	fab3 f383 	clz	r3, r3
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	3301      	adds	r3, #1
 80028ba:	069b      	lsls	r3, r3, #26
 80028bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d109      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x520>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	0e9b      	lsrs	r3, r3, #26
 80028d2:	3301      	adds	r3, #1
 80028d4:	f003 031f 	and.w	r3, r3, #31
 80028d8:	2101      	movs	r1, #1
 80028da:	fa01 f303 	lsl.w	r3, r1, r3
 80028de:	e017      	b.n	8002910 <HAL_ADC_ConfigChannel+0x550>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028e8:	fa93 f3a3 	rbit	r3, r3
 80028ec:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80028ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028f0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80028f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80028f8:	2320      	movs	r3, #32
 80028fa:	e003      	b.n	8002904 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80028fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028fe:	fab3 f383 	clz	r3, r3
 8002902:	b2db      	uxtb	r3, r3
 8002904:	3301      	adds	r3, #1
 8002906:	f003 031f 	and.w	r3, r3, #31
 800290a:	2101      	movs	r1, #1
 800290c:	fa01 f303 	lsl.w	r3, r1, r3
 8002910:	ea42 0103 	orr.w	r1, r2, r3
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10a      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x576>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	0e9b      	lsrs	r3, r3, #26
 8002926:	3301      	adds	r3, #1
 8002928:	f003 021f 	and.w	r2, r3, #31
 800292c:	4613      	mov	r3, r2
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	4413      	add	r3, r2
 8002932:	051b      	lsls	r3, r3, #20
 8002934:	e018      	b.n	8002968 <HAL_ADC_ConfigChannel+0x5a8>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800293e:	fa93 f3a3 	rbit	r3, r3
 8002942:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002946:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800294e:	2320      	movs	r3, #32
 8002950:	e003      	b.n	800295a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002954:	fab3 f383 	clz	r3, r3
 8002958:	b2db      	uxtb	r3, r3
 800295a:	3301      	adds	r3, #1
 800295c:	f003 021f 	and.w	r2, r3, #31
 8002960:	4613      	mov	r3, r2
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	4413      	add	r3, r2
 8002966:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002968:	430b      	orrs	r3, r1
 800296a:	e07e      	b.n	8002a6a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002974:	2b00      	cmp	r3, #0
 8002976:	d107      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x5c8>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	0e9b      	lsrs	r3, r3, #26
 800297e:	3301      	adds	r3, #1
 8002980:	069b      	lsls	r3, r3, #26
 8002982:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002986:	e015      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x5f4>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002990:	fa93 f3a3 	rbit	r3, r3
 8002994:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002998:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800299a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80029a0:	2320      	movs	r3, #32
 80029a2:	e003      	b.n	80029ac <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80029a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a6:	fab3 f383 	clz	r3, r3
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	3301      	adds	r3, #1
 80029ae:	069b      	lsls	r3, r3, #26
 80029b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d109      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x614>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	0e9b      	lsrs	r3, r3, #26
 80029c6:	3301      	adds	r3, #1
 80029c8:	f003 031f 	and.w	r3, r3, #31
 80029cc:	2101      	movs	r1, #1
 80029ce:	fa01 f303 	lsl.w	r3, r1, r3
 80029d2:	e017      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x644>
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	fa93 f3a3 	rbit	r3, r3
 80029e0:	61fb      	str	r3, [r7, #28]
  return result;
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80029ec:	2320      	movs	r3, #32
 80029ee:	e003      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	fab3 f383 	clz	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	3301      	adds	r3, #1
 80029fa:	f003 031f 	and.w	r3, r3, #31
 80029fe:	2101      	movs	r1, #1
 8002a00:	fa01 f303 	lsl.w	r3, r1, r3
 8002a04:	ea42 0103 	orr.w	r1, r2, r3
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10d      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x670>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	0e9b      	lsrs	r3, r3, #26
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	f003 021f 	and.w	r2, r3, #31
 8002a20:	4613      	mov	r3, r2
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	4413      	add	r3, r2
 8002a26:	3b1e      	subs	r3, #30
 8002a28:	051b      	lsls	r3, r3, #20
 8002a2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a2e:	e01b      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x6a8>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	fa93 f3a3 	rbit	r3, r3
 8002a3c:	613b      	str	r3, [r7, #16]
  return result;
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002a48:	2320      	movs	r3, #32
 8002a4a:	e003      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	fab3 f383 	clz	r3, r3
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	3301      	adds	r3, #1
 8002a56:	f003 021f 	and.w	r2, r3, #31
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	4413      	add	r3, r2
 8002a60:	3b1e      	subs	r3, #30
 8002a62:	051b      	lsls	r3, r3, #20
 8002a64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a68:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a6e:	4619      	mov	r1, r3
 8002a70:	f7fe fe4c 	bl	800170c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <HAL_ADC_ConfigChannel+0x6e0>)
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 80be 	beq.w	8002bfe <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a8a:	d004      	beq.n	8002a96 <HAL_ADC_ConfigChannel+0x6d6>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a04      	ldr	r2, [pc, #16]	; (8002aa4 <HAL_ADC_ConfigChannel+0x6e4>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d10a      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x6ec>
 8002a96:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <HAL_ADC_ConfigChannel+0x6e8>)
 8002a98:	e009      	b.n	8002aae <HAL_ADC_ConfigChannel+0x6ee>
 8002a9a:	bf00      	nop
 8002a9c:	407f0000 	.word	0x407f0000
 8002aa0:	80080000 	.word	0x80080000
 8002aa4:	50000100 	.word	0x50000100
 8002aa8:	50000300 	.word	0x50000300
 8002aac:	4b59      	ldr	r3, [pc, #356]	; (8002c14 <HAL_ADC_ConfigChannel+0x854>)
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fe fd2e 	bl	8001510 <LL_ADC_GetCommonPathInternalCh>
 8002ab4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a56      	ldr	r2, [pc, #344]	; (8002c18 <HAL_ADC_ConfigChannel+0x858>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d004      	beq.n	8002acc <HAL_ADC_ConfigChannel+0x70c>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a55      	ldr	r2, [pc, #340]	; (8002c1c <HAL_ADC_ConfigChannel+0x85c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d13a      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002acc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ad0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d134      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ae0:	d005      	beq.n	8002aee <HAL_ADC_ConfigChannel+0x72e>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a4e      	ldr	r2, [pc, #312]	; (8002c20 <HAL_ADC_ConfigChannel+0x860>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	f040 8085 	bne.w	8002bf8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002af6:	d004      	beq.n	8002b02 <HAL_ADC_ConfigChannel+0x742>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a49      	ldr	r2, [pc, #292]	; (8002c24 <HAL_ADC_ConfigChannel+0x864>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d101      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x746>
 8002b02:	4a49      	ldr	r2, [pc, #292]	; (8002c28 <HAL_ADC_ConfigChannel+0x868>)
 8002b04:	e000      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x748>
 8002b06:	4a43      	ldr	r2, [pc, #268]	; (8002c14 <HAL_ADC_ConfigChannel+0x854>)
 8002b08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b10:	4619      	mov	r1, r3
 8002b12:	4610      	mov	r0, r2
 8002b14:	f7fe fce9 	bl	80014ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b18:	4b44      	ldr	r3, [pc, #272]	; (8002c2c <HAL_ADC_ConfigChannel+0x86c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	099b      	lsrs	r3, r3, #6
 8002b1e:	4a44      	ldr	r2, [pc, #272]	; (8002c30 <HAL_ADC_ConfigChannel+0x870>)
 8002b20:	fba2 2303 	umull	r2, r3, r2, r3
 8002b24:	099b      	lsrs	r3, r3, #6
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	4613      	mov	r3, r2
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	4413      	add	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b32:	e002      	b.n	8002b3a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1f9      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b40:	e05a      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a3b      	ldr	r2, [pc, #236]	; (8002c34 <HAL_ADC_ConfigChannel+0x874>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d125      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d11f      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a31      	ldr	r2, [pc, #196]	; (8002c24 <HAL_ADC_ConfigChannel+0x864>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d104      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x7ac>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a34      	ldr	r2, [pc, #208]	; (8002c38 <HAL_ADC_ConfigChannel+0x878>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d047      	beq.n	8002bfc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b74:	d004      	beq.n	8002b80 <HAL_ADC_ConfigChannel+0x7c0>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a2a      	ldr	r2, [pc, #168]	; (8002c24 <HAL_ADC_ConfigChannel+0x864>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d101      	bne.n	8002b84 <HAL_ADC_ConfigChannel+0x7c4>
 8002b80:	4a29      	ldr	r2, [pc, #164]	; (8002c28 <HAL_ADC_ConfigChannel+0x868>)
 8002b82:	e000      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x7c6>
 8002b84:	4a23      	ldr	r2, [pc, #140]	; (8002c14 <HAL_ADC_ConfigChannel+0x854>)
 8002b86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4610      	mov	r0, r2
 8002b92:	f7fe fcaa 	bl	80014ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b96:	e031      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a27      	ldr	r2, [pc, #156]	; (8002c3c <HAL_ADC_ConfigChannel+0x87c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d12d      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ba2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d127      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a1c      	ldr	r2, [pc, #112]	; (8002c24 <HAL_ADC_ConfigChannel+0x864>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d022      	beq.n	8002bfe <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bc0:	d004      	beq.n	8002bcc <HAL_ADC_ConfigChannel+0x80c>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a17      	ldr	r2, [pc, #92]	; (8002c24 <HAL_ADC_ConfigChannel+0x864>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d101      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x810>
 8002bcc:	4a16      	ldr	r2, [pc, #88]	; (8002c28 <HAL_ADC_ConfigChannel+0x868>)
 8002bce:	e000      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x812>
 8002bd0:	4a10      	ldr	r2, [pc, #64]	; (8002c14 <HAL_ADC_ConfigChannel+0x854>)
 8002bd2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4610      	mov	r0, r2
 8002bde:	f7fe fc84 	bl	80014ea <LL_ADC_SetCommonPathInternalCh>
 8002be2:	e00c      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be8:	f043 0220 	orr.w	r2, r3, #32
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002bf6:	e002      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bf8:	bf00      	nop
 8002bfa:	e000      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bfc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002c06:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	37d8      	adds	r7, #216	; 0xd8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	50000700 	.word	0x50000700
 8002c18:	c3210000 	.word	0xc3210000
 8002c1c:	90c00010 	.word	0x90c00010
 8002c20:	50000600 	.word	0x50000600
 8002c24:	50000100 	.word	0x50000100
 8002c28:	50000300 	.word	0x50000300
 8002c2c:	20000008 	.word	0x20000008
 8002c30:	053e2d63 	.word	0x053e2d63
 8002c34:	c7520000 	.word	0xc7520000
 8002c38:	50000500 	.word	0x50000500
 8002c3c:	cb840000 	.word	0xcb840000

08002c40 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fe fe3d 	bl	80018d0 <LL_ADC_IsEnabled>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d176      	bne.n	8002d4a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	4b3c      	ldr	r3, [pc, #240]	; (8002d54 <ADC_Enable+0x114>)
 8002c64:	4013      	ands	r3, r2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00d      	beq.n	8002c86 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6e:	f043 0210 	orr.w	r2, r3, #16
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c7a:	f043 0201 	orr.w	r2, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e062      	b.n	8002d4c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fe fdf8 	bl	8001880 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c98:	d004      	beq.n	8002ca4 <ADC_Enable+0x64>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a2e      	ldr	r2, [pc, #184]	; (8002d58 <ADC_Enable+0x118>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d101      	bne.n	8002ca8 <ADC_Enable+0x68>
 8002ca4:	4b2d      	ldr	r3, [pc, #180]	; (8002d5c <ADC_Enable+0x11c>)
 8002ca6:	e000      	b.n	8002caa <ADC_Enable+0x6a>
 8002ca8:	4b2d      	ldr	r3, [pc, #180]	; (8002d60 <ADC_Enable+0x120>)
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fe fc30 	bl	8001510 <LL_ADC_GetCommonPathInternalCh>
 8002cb0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002cb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d013      	beq.n	8002ce2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cba:	4b2a      	ldr	r3, [pc, #168]	; (8002d64 <ADC_Enable+0x124>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	099b      	lsrs	r3, r3, #6
 8002cc0:	4a29      	ldr	r2, [pc, #164]	; (8002d68 <ADC_Enable+0x128>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	099b      	lsrs	r3, r3, #6
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	4613      	mov	r3, r2
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	4413      	add	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002cd4:	e002      	b.n	8002cdc <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1f9      	bne.n	8002cd6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ce2:	f7fe fbe3 	bl	80014ac <HAL_GetTick>
 8002ce6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ce8:	e028      	b.n	8002d3c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fe fdee 	bl	80018d0 <LL_ADC_IsEnabled>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d104      	bne.n	8002d04 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fe fdbe 	bl	8001880 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d04:	f7fe fbd2 	bl	80014ac <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d914      	bls.n	8002d3c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d00d      	beq.n	8002d3c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d24:	f043 0210 	orr.w	r2, r3, #16
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d30:	f043 0201 	orr.w	r2, r3, #1
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e007      	b.n	8002d4c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d1cf      	bne.n	8002cea <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	8000003f 	.word	0x8000003f
 8002d58:	50000100 	.word	0x50000100
 8002d5c:	50000300 	.word	0x50000300
 8002d60:	50000700 	.word	0x50000700
 8002d64:	20000008 	.word	0x20000008
 8002d68:	053e2d63 	.word	0x053e2d63

08002d6c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fe fdbc 	bl	80018f6 <LL_ADC_IsDisableOngoing>
 8002d7e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fe fda3 	bl	80018d0 <LL_ADC_IsEnabled>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d047      	beq.n	8002e20 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d144      	bne.n	8002e20 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f003 030d 	and.w	r3, r3, #13
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d10c      	bne.n	8002dbe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fe fd7d 	bl	80018a8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2203      	movs	r2, #3
 8002db4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002db6:	f7fe fb79 	bl	80014ac <HAL_GetTick>
 8002dba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002dbc:	e029      	b.n	8002e12 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc2:	f043 0210 	orr.w	r2, r3, #16
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dce:	f043 0201 	orr.w	r2, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e023      	b.n	8002e22 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002dda:	f7fe fb67 	bl	80014ac <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d914      	bls.n	8002e12 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00d      	beq.n	8002e12 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfa:	f043 0210 	orr.w	r2, r3, #16
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e06:	f043 0201 	orr.w	r2, r3, #1
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e007      	b.n	8002e22 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1dc      	bne.n	8002dda <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b084      	sub	sp, #16
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e36:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d14b      	bne.n	8002edc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0308 	and.w	r3, r3, #8
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d021      	beq.n	8002ea2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fe fc00 	bl	8001668 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d032      	beq.n	8002ed4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d12b      	bne.n	8002ed4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d11f      	bne.n	8002ed4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e98:	f043 0201 	orr.w	r2, r3, #1
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ea0:	e018      	b.n	8002ed4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d111      	bne.n	8002ed4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d105      	bne.n	8002ed4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ecc:	f043 0201 	orr.w	r2, r3, #1
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f7ff fa4b 	bl	8002370 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002eda:	e00e      	b.n	8002efa <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee0:	f003 0310 	and.w	r3, r3, #16
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f7ff fa5f 	bl	80023ac <HAL_ADC_ErrorCallback>
}
 8002eee:	e004      	b.n	8002efa <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	4798      	blx	r3
}
 8002efa:	bf00      	nop
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b084      	sub	sp, #16
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f7ff fa37 	bl	8002384 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f16:	bf00      	nop
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b084      	sub	sp, #16
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f3c:	f043 0204 	orr.w	r2, r3, #4
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f7ff fa31 	bl	80023ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f4a:	bf00      	nop
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <LL_ADC_IsEnabled>:
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <LL_ADC_IsEnabled+0x18>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <LL_ADC_IsEnabled+0x1a>
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <LL_ADC_StartCalibration>:
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002f8a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002f94:	4313      	orrs	r3, r2
 8002f96:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	609a      	str	r2, [r3, #8]
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <LL_ADC_IsCalibrationOnGoing>:
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fbe:	d101      	bne.n	8002fc4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e000      	b.n	8002fc6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <LL_ADC_REG_IsConversionOngoing>:
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 0304 	and.w	r3, r3, #4
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d101      	bne.n	8002fea <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e000      	b.n	8002fec <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003002:	2300      	movs	r3, #0
 8003004:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_ADCEx_Calibration_Start+0x1c>
 8003010:	2302      	movs	r3, #2
 8003012:	e04d      	b.n	80030b0 <HAL_ADCEx_Calibration_Start+0xb8>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7ff fea5 	bl	8002d6c <ADC_Disable>
 8003022:	4603      	mov	r3, r0
 8003024:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003026:	7bfb      	ldrb	r3, [r7, #15]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d136      	bne.n	800309a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003030:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003034:	f023 0302 	bic.w	r3, r3, #2
 8003038:	f043 0202 	orr.w	r2, r3, #2
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6839      	ldr	r1, [r7, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff ff96 	bl	8002f78 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800304c:	e014      	b.n	8003078 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	3301      	adds	r3, #1
 8003052:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	4a18      	ldr	r2, [pc, #96]	; (80030b8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d90d      	bls.n	8003078 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003060:	f023 0312 	bic.w	r3, r3, #18
 8003064:	f043 0210 	orr.w	r2, r3, #16
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e01b      	b.n	80030b0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff ff94 	bl	8002faa <LL_ADC_IsCalibrationOnGoing>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1e2      	bne.n	800304e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308c:	f023 0303 	bic.w	r3, r3, #3
 8003090:	f043 0201 	orr.w	r2, r3, #1
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	65da      	str	r2, [r3, #92]	; 0x5c
 8003098:	e005      	b.n	80030a6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309e:	f043 0210 	orr.w	r2, r3, #16
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	0004de01 	.word	0x0004de01

080030bc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003120:	b590      	push	{r4, r7, lr}
 8003122:	b0a1      	sub	sp, #132	; 0x84
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003136:	2b01      	cmp	r3, #1
 8003138:	d101      	bne.n	800313e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800313a:	2302      	movs	r3, #2
 800313c:	e0e7      	b.n	800330e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003146:	2300      	movs	r3, #0
 8003148:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800314a:	2300      	movs	r3, #0
 800314c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003156:	d102      	bne.n	800315e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003158:	4b6f      	ldr	r3, [pc, #444]	; (8003318 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800315a:	60bb      	str	r3, [r7, #8]
 800315c:	e009      	b.n	8003172 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a6e      	ldr	r2, [pc, #440]	; (800331c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d102      	bne.n	800316e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003168:	4b6d      	ldr	r3, [pc, #436]	; (8003320 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800316a:	60bb      	str	r3, [r7, #8]
 800316c:	e001      	b.n	8003172 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800316e:	2300      	movs	r3, #0
 8003170:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10b      	bne.n	8003190 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317c:	f043 0220 	orr.w	r2, r3, #32
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e0be      	b.n	800330e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff ff1d 	bl	8002fd2 <LL_ADC_REG_IsConversionOngoing>
 8003198:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff ff17 	bl	8002fd2 <LL_ADC_REG_IsConversionOngoing>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f040 80a0 	bne.w	80032ec <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80031ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f040 809c 	bne.w	80032ec <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031bc:	d004      	beq.n	80031c8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a55      	ldr	r2, [pc, #340]	; (8003318 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d101      	bne.n	80031cc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80031c8:	4b56      	ldr	r3, [pc, #344]	; (8003324 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80031ca:	e000      	b.n	80031ce <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80031cc:	4b56      	ldr	r3, [pc, #344]	; (8003328 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80031ce:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d04b      	beq.n	8003270 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80031d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	6859      	ldr	r1, [r3, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031ea:	035b      	lsls	r3, r3, #13
 80031ec:	430b      	orrs	r3, r1
 80031ee:	431a      	orrs	r2, r3
 80031f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031f2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031fc:	d004      	beq.n	8003208 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a45      	ldr	r2, [pc, #276]	; (8003318 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d10f      	bne.n	8003228 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003208:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800320c:	f7ff fea1 	bl	8002f52 <LL_ADC_IsEnabled>
 8003210:	4604      	mov	r4, r0
 8003212:	4841      	ldr	r0, [pc, #260]	; (8003318 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003214:	f7ff fe9d 	bl	8002f52 <LL_ADC_IsEnabled>
 8003218:	4603      	mov	r3, r0
 800321a:	4323      	orrs	r3, r4
 800321c:	2b00      	cmp	r3, #0
 800321e:	bf0c      	ite	eq
 8003220:	2301      	moveq	r3, #1
 8003222:	2300      	movne	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	e012      	b.n	800324e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003228:	483c      	ldr	r0, [pc, #240]	; (800331c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800322a:	f7ff fe92 	bl	8002f52 <LL_ADC_IsEnabled>
 800322e:	4604      	mov	r4, r0
 8003230:	483b      	ldr	r0, [pc, #236]	; (8003320 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003232:	f7ff fe8e 	bl	8002f52 <LL_ADC_IsEnabled>
 8003236:	4603      	mov	r3, r0
 8003238:	431c      	orrs	r4, r3
 800323a:	483c      	ldr	r0, [pc, #240]	; (800332c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800323c:	f7ff fe89 	bl	8002f52 <LL_ADC_IsEnabled>
 8003240:	4603      	mov	r3, r0
 8003242:	4323      	orrs	r3, r4
 8003244:	2b00      	cmp	r3, #0
 8003246:	bf0c      	ite	eq
 8003248:	2301      	moveq	r3, #1
 800324a:	2300      	movne	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d056      	beq.n	8003300 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003252:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800325a:	f023 030f 	bic.w	r3, r3, #15
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	6811      	ldr	r1, [r2, #0]
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	6892      	ldr	r2, [r2, #8]
 8003266:	430a      	orrs	r2, r1
 8003268:	431a      	orrs	r2, r3
 800326a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800326c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800326e:	e047      	b.n	8003300 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003270:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003278:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800327a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003284:	d004      	beq.n	8003290 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a23      	ldr	r2, [pc, #140]	; (8003318 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d10f      	bne.n	80032b0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003290:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003294:	f7ff fe5d 	bl	8002f52 <LL_ADC_IsEnabled>
 8003298:	4604      	mov	r4, r0
 800329a:	481f      	ldr	r0, [pc, #124]	; (8003318 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800329c:	f7ff fe59 	bl	8002f52 <LL_ADC_IsEnabled>
 80032a0:	4603      	mov	r3, r0
 80032a2:	4323      	orrs	r3, r4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	bf0c      	ite	eq
 80032a8:	2301      	moveq	r3, #1
 80032aa:	2300      	movne	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	e012      	b.n	80032d6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80032b0:	481a      	ldr	r0, [pc, #104]	; (800331c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80032b2:	f7ff fe4e 	bl	8002f52 <LL_ADC_IsEnabled>
 80032b6:	4604      	mov	r4, r0
 80032b8:	4819      	ldr	r0, [pc, #100]	; (8003320 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80032ba:	f7ff fe4a 	bl	8002f52 <LL_ADC_IsEnabled>
 80032be:	4603      	mov	r3, r0
 80032c0:	431c      	orrs	r4, r3
 80032c2:	481a      	ldr	r0, [pc, #104]	; (800332c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80032c4:	f7ff fe45 	bl	8002f52 <LL_ADC_IsEnabled>
 80032c8:	4603      	mov	r3, r0
 80032ca:	4323      	orrs	r3, r4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	bf0c      	ite	eq
 80032d0:	2301      	moveq	r3, #1
 80032d2:	2300      	movne	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d012      	beq.n	8003300 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80032da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80032e2:	f023 030f 	bic.w	r3, r3, #15
 80032e6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80032e8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032ea:	e009      	b.n	8003300 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f0:	f043 0220 	orr.w	r2, r3, #32
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80032fe:	e000      	b.n	8003302 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003300:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800330a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800330e:	4618      	mov	r0, r3
 8003310:	3784      	adds	r7, #132	; 0x84
 8003312:	46bd      	mov	sp, r7
 8003314:	bd90      	pop	{r4, r7, pc}
 8003316:	bf00      	nop
 8003318:	50000100 	.word	0x50000100
 800331c:	50000400 	.word	0x50000400
 8003320:	50000500 	.word	0x50000500
 8003324:	50000300 	.word	0x50000300
 8003328:	50000700 	.word	0x50000700
 800332c:	50000600 	.word	0x50000600

08003330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003340:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <__NVIC_SetPriorityGrouping+0x44>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800334c:	4013      	ands	r3, r2
 800334e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003358:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800335c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003362:	4a04      	ldr	r2, [pc, #16]	; (8003374 <__NVIC_SetPriorityGrouping+0x44>)
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	60d3      	str	r3, [r2, #12]
}
 8003368:	bf00      	nop
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	e000ed00 	.word	0xe000ed00

08003378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800337c:	4b04      	ldr	r3, [pc, #16]	; (8003390 <__NVIC_GetPriorityGrouping+0x18>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	0a1b      	lsrs	r3, r3, #8
 8003382:	f003 0307 	and.w	r3, r3, #7
}
 8003386:	4618      	mov	r0, r3
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	e000ed00 	.word	0xe000ed00

08003394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800339e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	db0b      	blt.n	80033be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033a6:	79fb      	ldrb	r3, [r7, #7]
 80033a8:	f003 021f 	and.w	r2, r3, #31
 80033ac:	4907      	ldr	r1, [pc, #28]	; (80033cc <__NVIC_EnableIRQ+0x38>)
 80033ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	2001      	movs	r0, #1
 80033b6:	fa00 f202 	lsl.w	r2, r0, r2
 80033ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	e000e100 	.word	0xe000e100

080033d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	4603      	mov	r3, r0
 80033d8:	6039      	str	r1, [r7, #0]
 80033da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	db0a      	blt.n	80033fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	490c      	ldr	r1, [pc, #48]	; (800341c <__NVIC_SetPriority+0x4c>)
 80033ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ee:	0112      	lsls	r2, r2, #4
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	440b      	add	r3, r1
 80033f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033f8:	e00a      	b.n	8003410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	4908      	ldr	r1, [pc, #32]	; (8003420 <__NVIC_SetPriority+0x50>)
 8003400:	79fb      	ldrb	r3, [r7, #7]
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	3b04      	subs	r3, #4
 8003408:	0112      	lsls	r2, r2, #4
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	440b      	add	r3, r1
 800340e:	761a      	strb	r2, [r3, #24]
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	e000e100 	.word	0xe000e100
 8003420:	e000ed00 	.word	0xe000ed00

08003424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003424:	b480      	push	{r7}
 8003426:	b089      	sub	sp, #36	; 0x24
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f1c3 0307 	rsb	r3, r3, #7
 800343e:	2b04      	cmp	r3, #4
 8003440:	bf28      	it	cs
 8003442:	2304      	movcs	r3, #4
 8003444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	3304      	adds	r3, #4
 800344a:	2b06      	cmp	r3, #6
 800344c:	d902      	bls.n	8003454 <NVIC_EncodePriority+0x30>
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	3b03      	subs	r3, #3
 8003452:	e000      	b.n	8003456 <NVIC_EncodePriority+0x32>
 8003454:	2300      	movs	r3, #0
 8003456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003458:	f04f 32ff 	mov.w	r2, #4294967295
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43da      	mvns	r2, r3
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	401a      	ands	r2, r3
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800346c:	f04f 31ff 	mov.w	r1, #4294967295
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	fa01 f303 	lsl.w	r3, r1, r3
 8003476:	43d9      	mvns	r1, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800347c:	4313      	orrs	r3, r2
         );
}
 800347e:	4618      	mov	r0, r3
 8003480:	3724      	adds	r7, #36	; 0x24
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
	...

0800348c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3b01      	subs	r3, #1
 8003498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800349c:	d301      	bcc.n	80034a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800349e:	2301      	movs	r3, #1
 80034a0:	e00f      	b.n	80034c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034a2:	4a0a      	ldr	r2, [pc, #40]	; (80034cc <SysTick_Config+0x40>)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034aa:	210f      	movs	r1, #15
 80034ac:	f04f 30ff 	mov.w	r0, #4294967295
 80034b0:	f7ff ff8e 	bl	80033d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034b4:	4b05      	ldr	r3, [pc, #20]	; (80034cc <SysTick_Config+0x40>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ba:	4b04      	ldr	r3, [pc, #16]	; (80034cc <SysTick_Config+0x40>)
 80034bc:	2207      	movs	r2, #7
 80034be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	e000e010 	.word	0xe000e010

080034d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7ff ff29 	bl	8003330 <__NVIC_SetPriorityGrouping>
}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b086      	sub	sp, #24
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	4603      	mov	r3, r0
 80034ee:	60b9      	str	r1, [r7, #8]
 80034f0:	607a      	str	r2, [r7, #4]
 80034f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034f4:	f7ff ff40 	bl	8003378 <__NVIC_GetPriorityGrouping>
 80034f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	68b9      	ldr	r1, [r7, #8]
 80034fe:	6978      	ldr	r0, [r7, #20]
 8003500:	f7ff ff90 	bl	8003424 <NVIC_EncodePriority>
 8003504:	4602      	mov	r2, r0
 8003506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800350a:	4611      	mov	r1, r2
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff ff5f 	bl	80033d0 <__NVIC_SetPriority>
}
 8003512:	bf00      	nop
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	4603      	mov	r3, r0
 8003522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff ff33 	bl	8003394 <__NVIC_EnableIRQ>
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b082      	sub	sp, #8
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7ff ffa4 	bl	800348c <SysTick_Config>
 8003544:	4603      	mov	r3, r0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
	...

08003550 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e08d      	b.n	800367e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	4b47      	ldr	r3, [pc, #284]	; (8003688 <HAL_DMA_Init+0x138>)
 800356a:	429a      	cmp	r2, r3
 800356c:	d80f      	bhi.n	800358e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	461a      	mov	r2, r3
 8003574:	4b45      	ldr	r3, [pc, #276]	; (800368c <HAL_DMA_Init+0x13c>)
 8003576:	4413      	add	r3, r2
 8003578:	4a45      	ldr	r2, [pc, #276]	; (8003690 <HAL_DMA_Init+0x140>)
 800357a:	fba2 2303 	umull	r2, r3, r2, r3
 800357e:	091b      	lsrs	r3, r3, #4
 8003580:	009a      	lsls	r2, r3, #2
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a42      	ldr	r2, [pc, #264]	; (8003694 <HAL_DMA_Init+0x144>)
 800358a:	641a      	str	r2, [r3, #64]	; 0x40
 800358c:	e00e      	b.n	80035ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	4b40      	ldr	r3, [pc, #256]	; (8003698 <HAL_DMA_Init+0x148>)
 8003596:	4413      	add	r3, r2
 8003598:	4a3d      	ldr	r2, [pc, #244]	; (8003690 <HAL_DMA_Init+0x140>)
 800359a:	fba2 2303 	umull	r2, r3, r2, r3
 800359e:	091b      	lsrs	r3, r3, #4
 80035a0:	009a      	lsls	r2, r3, #2
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a3c      	ldr	r2, [pc, #240]	; (800369c <HAL_DMA_Init+0x14c>)
 80035aa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80035c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80035d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f9b6 	bl	8003970 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800360c:	d102      	bne.n	8003614 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003628:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d010      	beq.n	8003654 <HAL_DMA_Init+0x104>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b04      	cmp	r3, #4
 8003638:	d80c      	bhi.n	8003654 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f9d6 	bl	80039ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003650:	605a      	str	r2, [r3, #4]
 8003652:	e008      	b.n	8003666 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40020407 	.word	0x40020407
 800368c:	bffdfff8 	.word	0xbffdfff8
 8003690:	cccccccd 	.word	0xcccccccd
 8003694:	40020000 	.word	0x40020000
 8003698:	bffdfbf8 	.word	0xbffdfbf8
 800369c:	40020400 	.word	0x40020400

080036a0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
 80036ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ae:	2300      	movs	r3, #0
 80036b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d101      	bne.n	80036c0 <HAL_DMA_Start_IT+0x20>
 80036bc:	2302      	movs	r3, #2
 80036be:	e066      	b.n	800378e <HAL_DMA_Start_IT+0xee>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d155      	bne.n	8003780 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0201 	bic.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	68b9      	ldr	r1, [r7, #8]
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 f8fb 	bl	80038f4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	2b00      	cmp	r3, #0
 8003704:	d008      	beq.n	8003718 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f042 020e 	orr.w	r2, r2, #14
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	e00f      	b.n	8003738 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0204 	bic.w	r2, r2, #4
 8003726:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 020a 	orr.w	r2, r2, #10
 8003736:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d007      	beq.n	8003756 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003750:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003754:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375a:	2b00      	cmp	r3, #0
 800375c:	d007      	beq.n	800376e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003768:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800376c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f042 0201 	orr.w	r2, r2, #1
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	e005      	b.n	800378c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003788:	2302      	movs	r3, #2
 800378a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800378c:	7dfb      	ldrb	r3, [r7, #23]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b084      	sub	sp, #16
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b2:	f003 031f 	and.w	r3, r3, #31
 80037b6:	2204      	movs	r2, #4
 80037b8:	409a      	lsls	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	4013      	ands	r3, r2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d026      	beq.n	8003810 <HAL_DMA_IRQHandler+0x7a>
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d021      	beq.n	8003810 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d107      	bne.n	80037ea <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0204 	bic.w	r2, r2, #4
 80037e8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ee:	f003 021f 	and.w	r2, r3, #31
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	2104      	movs	r1, #4
 80037f8:	fa01 f202 	lsl.w	r2, r1, r2
 80037fc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	2b00      	cmp	r3, #0
 8003804:	d071      	beq.n	80038ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800380e:	e06c      	b.n	80038ea <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003814:	f003 031f 	and.w	r3, r3, #31
 8003818:	2202      	movs	r2, #2
 800381a:	409a      	lsls	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4013      	ands	r3, r2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d02e      	beq.n	8003882 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d029      	beq.n	8003882 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0320 	and.w	r3, r3, #32
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10b      	bne.n	8003854 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 020a 	bic.w	r2, r2, #10
 800384a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003858:	f003 021f 	and.w	r2, r3, #31
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003860:	2102      	movs	r1, #2
 8003862:	fa01 f202 	lsl.w	r2, r1, r2
 8003866:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003874:	2b00      	cmp	r3, #0
 8003876:	d038      	beq.n	80038ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003880:	e033      	b.n	80038ea <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003886:	f003 031f 	and.w	r3, r3, #31
 800388a:	2208      	movs	r2, #8
 800388c:	409a      	lsls	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4013      	ands	r3, r2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d02a      	beq.n	80038ec <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	2b00      	cmp	r3, #0
 800389e:	d025      	beq.n	80038ec <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 020e 	bic.w	r2, r2, #14
 80038ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b4:	f003 021f 	and.w	r2, r3, #31
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	2101      	movs	r1, #1
 80038be:	fa01 f202 	lsl.w	r2, r1, r2
 80038c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d004      	beq.n	80038ec <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80038ea:	bf00      	nop
 80038ec:	bf00      	nop
}
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
 8003900:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800390a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003910:	2b00      	cmp	r3, #0
 8003912:	d004      	beq.n	800391e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800391c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003922:	f003 021f 	and.w	r2, r3, #31
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	2101      	movs	r1, #1
 800392c:	fa01 f202 	lsl.w	r2, r1, r2
 8003930:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	2b10      	cmp	r3, #16
 8003940:	d108      	bne.n	8003954 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003952:	e007      	b.n	8003964 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	60da      	str	r2, [r3, #12]
}
 8003964:	bf00      	nop
 8003966:	3714      	adds	r7, #20
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	461a      	mov	r2, r3
 800397e:	4b16      	ldr	r3, [pc, #88]	; (80039d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003980:	429a      	cmp	r2, r3
 8003982:	d802      	bhi.n	800398a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003984:	4b15      	ldr	r3, [pc, #84]	; (80039dc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003986:	617b      	str	r3, [r7, #20]
 8003988:	e001      	b.n	800398e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800398a:	4b15      	ldr	r3, [pc, #84]	; (80039e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800398c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	b2db      	uxtb	r3, r3
 8003998:	3b08      	subs	r3, #8
 800399a:	4a12      	ldr	r2, [pc, #72]	; (80039e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800399c:	fba2 2303 	umull	r2, r3, r2, r3
 80039a0:	091b      	lsrs	r3, r3, #4
 80039a2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a8:	089b      	lsrs	r3, r3, #2
 80039aa:	009a      	lsls	r2, r3, #2
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	4413      	add	r3, r2
 80039b0:	461a      	mov	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a0b      	ldr	r2, [pc, #44]	; (80039e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80039ba:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 031f 	and.w	r3, r3, #31
 80039c2:	2201      	movs	r2, #1
 80039c4:	409a      	lsls	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039ca:	bf00      	nop
 80039cc:	371c      	adds	r7, #28
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40020407 	.word	0x40020407
 80039dc:	40020800 	.word	0x40020800
 80039e0:	40020820 	.word	0x40020820
 80039e4:	cccccccd 	.word	0xcccccccd
 80039e8:	40020880 	.word	0x40020880

080039ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	461a      	mov	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a08      	ldr	r2, [pc, #32]	; (8003a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003a0e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	f003 031f 	and.w	r3, r3, #31
 8003a18:	2201      	movs	r2, #1
 8003a1a:	409a      	lsls	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003a20:	bf00      	nop
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	1000823f 	.word	0x1000823f
 8003a30:	40020940 	.word	0x40020940

08003a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a42:	e15a      	b.n	8003cfa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	2101      	movs	r1, #1
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a50:	4013      	ands	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 814c 	beq.w	8003cf4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f003 0303 	and.w	r3, r3, #3
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d005      	beq.n	8003a74 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d130      	bne.n	8003ad6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	2203      	movs	r2, #3
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	43db      	mvns	r3, r3
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003aaa:	2201      	movs	r2, #1
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	091b      	lsrs	r3, r3, #4
 8003ac0:	f003 0201 	and.w	r2, r3, #1
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f003 0303 	and.w	r3, r3, #3
 8003ade:	2b03      	cmp	r3, #3
 8003ae0:	d017      	beq.n	8003b12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	2203      	movs	r2, #3
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	43db      	mvns	r3, r3
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	4013      	ands	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	689a      	ldr	r2, [r3, #8]
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f003 0303 	and.w	r3, r3, #3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d123      	bne.n	8003b66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	08da      	lsrs	r2, r3, #3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	3208      	adds	r2, #8
 8003b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	220f      	movs	r2, #15
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	691a      	ldr	r2, [r3, #16]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	08da      	lsrs	r2, r3, #3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3208      	adds	r2, #8
 8003b60:	6939      	ldr	r1, [r7, #16]
 8003b62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	2203      	movs	r2, #3
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	43db      	mvns	r3, r3
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f003 0203 	and.w	r2, r3, #3
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 80a6 	beq.w	8003cf4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ba8:	4b5b      	ldr	r3, [pc, #364]	; (8003d18 <HAL_GPIO_Init+0x2e4>)
 8003baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bac:	4a5a      	ldr	r2, [pc, #360]	; (8003d18 <HAL_GPIO_Init+0x2e4>)
 8003bae:	f043 0301 	orr.w	r3, r3, #1
 8003bb2:	6613      	str	r3, [r2, #96]	; 0x60
 8003bb4:	4b58      	ldr	r3, [pc, #352]	; (8003d18 <HAL_GPIO_Init+0x2e4>)
 8003bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	60bb      	str	r3, [r7, #8]
 8003bbe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bc0:	4a56      	ldr	r2, [pc, #344]	; (8003d1c <HAL_GPIO_Init+0x2e8>)
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	089b      	lsrs	r3, r3, #2
 8003bc6:	3302      	adds	r3, #2
 8003bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f003 0303 	and.w	r3, r3, #3
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	220f      	movs	r2, #15
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	4013      	ands	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003bea:	d01f      	beq.n	8003c2c <HAL_GPIO_Init+0x1f8>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a4c      	ldr	r2, [pc, #304]	; (8003d20 <HAL_GPIO_Init+0x2ec>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d019      	beq.n	8003c28 <HAL_GPIO_Init+0x1f4>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a4b      	ldr	r2, [pc, #300]	; (8003d24 <HAL_GPIO_Init+0x2f0>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d013      	beq.n	8003c24 <HAL_GPIO_Init+0x1f0>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a4a      	ldr	r2, [pc, #296]	; (8003d28 <HAL_GPIO_Init+0x2f4>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d00d      	beq.n	8003c20 <HAL_GPIO_Init+0x1ec>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a49      	ldr	r2, [pc, #292]	; (8003d2c <HAL_GPIO_Init+0x2f8>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d007      	beq.n	8003c1c <HAL_GPIO_Init+0x1e8>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a48      	ldr	r2, [pc, #288]	; (8003d30 <HAL_GPIO_Init+0x2fc>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d101      	bne.n	8003c18 <HAL_GPIO_Init+0x1e4>
 8003c14:	2305      	movs	r3, #5
 8003c16:	e00a      	b.n	8003c2e <HAL_GPIO_Init+0x1fa>
 8003c18:	2306      	movs	r3, #6
 8003c1a:	e008      	b.n	8003c2e <HAL_GPIO_Init+0x1fa>
 8003c1c:	2304      	movs	r3, #4
 8003c1e:	e006      	b.n	8003c2e <HAL_GPIO_Init+0x1fa>
 8003c20:	2303      	movs	r3, #3
 8003c22:	e004      	b.n	8003c2e <HAL_GPIO_Init+0x1fa>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e002      	b.n	8003c2e <HAL_GPIO_Init+0x1fa>
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e000      	b.n	8003c2e <HAL_GPIO_Init+0x1fa>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	f002 0203 	and.w	r2, r2, #3
 8003c34:	0092      	lsls	r2, r2, #2
 8003c36:	4093      	lsls	r3, r2
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c3e:	4937      	ldr	r1, [pc, #220]	; (8003d1c <HAL_GPIO_Init+0x2e8>)
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	089b      	lsrs	r3, r3, #2
 8003c44:	3302      	adds	r3, #2
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c4c:	4b39      	ldr	r3, [pc, #228]	; (8003d34 <HAL_GPIO_Init+0x300>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	43db      	mvns	r3, r3
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c70:	4a30      	ldr	r2, [pc, #192]	; (8003d34 <HAL_GPIO_Init+0x300>)
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c76:	4b2f      	ldr	r3, [pc, #188]	; (8003d34 <HAL_GPIO_Init+0x300>)
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	43db      	mvns	r3, r3
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	4013      	ands	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c9a:	4a26      	ldr	r2, [pc, #152]	; (8003d34 <HAL_GPIO_Init+0x300>)
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003ca0:	4b24      	ldr	r3, [pc, #144]	; (8003d34 <HAL_GPIO_Init+0x300>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	4013      	ands	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003cc4:	4a1b      	ldr	r2, [pc, #108]	; (8003d34 <HAL_GPIO_Init+0x300>)
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003cca:	4b1a      	ldr	r3, [pc, #104]	; (8003d34 <HAL_GPIO_Init+0x300>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	43db      	mvns	r3, r3
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cee:	4a11      	ldr	r2, [pc, #68]	; (8003d34 <HAL_GPIO_Init+0x300>)
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	fa22 f303 	lsr.w	r3, r2, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f47f ae9d 	bne.w	8003a44 <HAL_GPIO_Init+0x10>
  }
}
 8003d0a:	bf00      	nop
 8003d0c:	bf00      	nop
 8003d0e:	371c      	adds	r7, #28
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	40010000 	.word	0x40010000
 8003d20:	48000400 	.word	0x48000400
 8003d24:	48000800 	.word	0x48000800
 8003d28:	48000c00 	.word	0x48000c00
 8003d2c:	48001000 	.word	0x48001000
 8003d30:	48001400 	.word	0x48001400
 8003d34:	40010400 	.word	0x40010400

08003d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	807b      	strh	r3, [r7, #2]
 8003d44:	4613      	mov	r3, r2
 8003d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d48:	787b      	ldrb	r3, [r7, #1]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d4e:	887a      	ldrh	r2, [r7, #2]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d54:	e002      	b.n	8003d5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d56:	887a      	ldrh	r2, [r7, #2]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d72:	4b08      	ldr	r3, [pc, #32]	; (8003d94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d74:	695a      	ldr	r2, [r3, #20]
 8003d76:	88fb      	ldrh	r3, [r7, #6]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d006      	beq.n	8003d8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d7e:	4a05      	ldr	r2, [pc, #20]	; (8003d94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d80:	88fb      	ldrh	r3, [r7, #6]
 8003d82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d84:	88fb      	ldrh	r3, [r7, #6]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fd f89c 	bl	8000ec4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d8c:	bf00      	nop
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40010400 	.word	0x40010400

08003d98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d141      	bne.n	8003e2a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003da6:	4b4b      	ldr	r3, [pc, #300]	; (8003ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db2:	d131      	bne.n	8003e18 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003db4:	4b47      	ldr	r3, [pc, #284]	; (8003ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dba:	4a46      	ldr	r2, [pc, #280]	; (8003ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dc4:	4b43      	ldr	r3, [pc, #268]	; (8003ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dcc:	4a41      	ldr	r2, [pc, #260]	; (8003ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dd2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003dd4:	4b40      	ldr	r3, [pc, #256]	; (8003ed8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2232      	movs	r2, #50	; 0x32
 8003dda:	fb02 f303 	mul.w	r3, r2, r3
 8003dde:	4a3f      	ldr	r2, [pc, #252]	; (8003edc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003de0:	fba2 2303 	umull	r2, r3, r2, r3
 8003de4:	0c9b      	lsrs	r3, r3, #18
 8003de6:	3301      	adds	r3, #1
 8003de8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dea:	e002      	b.n	8003df2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	3b01      	subs	r3, #1
 8003df0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003df2:	4b38      	ldr	r3, [pc, #224]	; (8003ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dfe:	d102      	bne.n	8003e06 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1f2      	bne.n	8003dec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e06:	4b33      	ldr	r3, [pc, #204]	; (8003ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e12:	d158      	bne.n	8003ec6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e057      	b.n	8003ec8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e18:	4b2e      	ldr	r3, [pc, #184]	; (8003ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e1e:	4a2d      	ldr	r2, [pc, #180]	; (8003ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e28:	e04d      	b.n	8003ec6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e30:	d141      	bne.n	8003eb6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e32:	4b28      	ldr	r3, [pc, #160]	; (8003ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e3e:	d131      	bne.n	8003ea4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e40:	4b24      	ldr	r3, [pc, #144]	; (8003ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e46:	4a23      	ldr	r2, [pc, #140]	; (8003ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e50:	4b20      	ldr	r3, [pc, #128]	; (8003ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e58:	4a1e      	ldr	r2, [pc, #120]	; (8003ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e60:	4b1d      	ldr	r3, [pc, #116]	; (8003ed8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2232      	movs	r2, #50	; 0x32
 8003e66:	fb02 f303 	mul.w	r3, r2, r3
 8003e6a:	4a1c      	ldr	r2, [pc, #112]	; (8003edc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e70:	0c9b      	lsrs	r3, r3, #18
 8003e72:	3301      	adds	r3, #1
 8003e74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e76:	e002      	b.n	8003e7e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e7e:	4b15      	ldr	r3, [pc, #84]	; (8003ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e8a:	d102      	bne.n	8003e92 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f2      	bne.n	8003e78 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e92:	4b10      	ldr	r3, [pc, #64]	; (8003ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e9e:	d112      	bne.n	8003ec6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e011      	b.n	8003ec8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ea4:	4b0b      	ldr	r3, [pc, #44]	; (8003ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eaa:	4a0a      	ldr	r2, [pc, #40]	; (8003ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eb0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003eb4:	e007      	b.n	8003ec6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003eb6:	4b07      	ldr	r3, [pc, #28]	; (8003ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ebe:	4a05      	ldr	r2, [pc, #20]	; (8003ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ec4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	40007000 	.word	0x40007000
 8003ed8:	20000008 	.word	0x20000008
 8003edc:	431bde83 	.word	0x431bde83

08003ee0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003ee4:	4b05      	ldr	r3, [pc, #20]	; (8003efc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	4a04      	ldr	r2, [pc, #16]	; (8003efc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003eea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003eee:	6093      	str	r3, [r2, #8]
}
 8003ef0:	bf00      	nop
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	40007000 	.word	0x40007000

08003f00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b088      	sub	sp, #32
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e2fe      	b.n	8004510 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d075      	beq.n	800400a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f1e:	4b97      	ldr	r3, [pc, #604]	; (800417c <HAL_RCC_OscConfig+0x27c>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 030c 	and.w	r3, r3, #12
 8003f26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f28:	4b94      	ldr	r3, [pc, #592]	; (800417c <HAL_RCC_OscConfig+0x27c>)
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f003 0303 	and.w	r3, r3, #3
 8003f30:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	2b0c      	cmp	r3, #12
 8003f36:	d102      	bne.n	8003f3e <HAL_RCC_OscConfig+0x3e>
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	2b03      	cmp	r3, #3
 8003f3c:	d002      	beq.n	8003f44 <HAL_RCC_OscConfig+0x44>
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d10b      	bne.n	8003f5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f44:	4b8d      	ldr	r3, [pc, #564]	; (800417c <HAL_RCC_OscConfig+0x27c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d05b      	beq.n	8004008 <HAL_RCC_OscConfig+0x108>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d157      	bne.n	8004008 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e2d9      	b.n	8004510 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f64:	d106      	bne.n	8003f74 <HAL_RCC_OscConfig+0x74>
 8003f66:	4b85      	ldr	r3, [pc, #532]	; (800417c <HAL_RCC_OscConfig+0x27c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a84      	ldr	r2, [pc, #528]	; (800417c <HAL_RCC_OscConfig+0x27c>)
 8003f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f70:	6013      	str	r3, [r2, #0]
 8003f72:	e01d      	b.n	8003fb0 <HAL_RCC_OscConfig+0xb0>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f7c:	d10c      	bne.n	8003f98 <HAL_RCC_OscConfig+0x98>
 8003f7e:	4b7f      	ldr	r3, [pc, #508]	; (800417c <HAL_RCC_OscConfig+0x27c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a7e      	ldr	r2, [pc, #504]	; (800417c <HAL_RCC_OscConfig+0x27c>)
 8003f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f88:	6013      	str	r3, [r2, #0]
 8003f8a:	4b7c      	ldr	r3, [pc, #496]	; (800417c <HAL_RCC_OscConfig+0x27c>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a7b      	ldr	r2, [pc, #492]	; (800417c <HAL_RCC_OscConfig+0x27c>)
 8003f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f94:	6013      	str	r3, [r2, #0]
 8003f96:	e00b      	b.n	8003fb0 <HAL_RCC_OscConfig+0xb0>
 8003f98:	4b78      	ldr	r3, [pc, #480]	; (800417c <HAL_RCC_OscConfig+0x27c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a77      	ldr	r2, [pc, #476]	; (800417c <HAL_RCC_OscConfig+0x27c>)
 8003f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fa2:	6013      	str	r3, [r2, #0]
 8003fa4:	4b75      	ldr	r3, [pc, #468]	; (800417c <HAL_RCC_OscConfig+0x27c>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a74      	ldr	r2, [pc, #464]	; (800417c <HAL_RCC_OscConfig+0x27c>)
 8003faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d013      	beq.n	8003fe0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb8:	f7fd fa78 	bl	80014ac <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fc0:	f7fd fa74 	bl	80014ac <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b64      	cmp	r3, #100	; 0x64
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e29e      	b.n	8004510 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fd2:	4b6a      	ldr	r3, [pc, #424]	; (800417c <HAL_RCC_OscConfig+0x27c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0f0      	beq.n	8003fc0 <HAL_RCC_OscConfig+0xc0>
 8003fde:	e014      	b.n	800400a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe0:	f7fd fa64 	bl	80014ac <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fe8:	f7fd fa60 	bl	80014ac <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b64      	cmp	r3, #100	; 0x64
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e28a      	b.n	8004510 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ffa:	4b60      	ldr	r3, [pc, #384]	; (800417c <HAL_RCC_OscConfig+0x27c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1f0      	bne.n	8003fe8 <HAL_RCC_OscConfig+0xe8>
 8004006:	e000      	b.n	800400a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d075      	beq.n	8004102 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004016:	4b59      	ldr	r3, [pc, #356]	; (800417c <HAL_RCC_OscConfig+0x27c>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 030c 	and.w	r3, r3, #12
 800401e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004020:	4b56      	ldr	r3, [pc, #344]	; (800417c <HAL_RCC_OscConfig+0x27c>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f003 0303 	and.w	r3, r3, #3
 8004028:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	2b0c      	cmp	r3, #12
 800402e:	d102      	bne.n	8004036 <HAL_RCC_OscConfig+0x136>
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	2b02      	cmp	r3, #2
 8004034:	d002      	beq.n	800403c <HAL_RCC_OscConfig+0x13c>
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	2b04      	cmp	r3, #4
 800403a:	d11f      	bne.n	800407c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800403c:	4b4f      	ldr	r3, [pc, #316]	; (800417c <HAL_RCC_OscConfig+0x27c>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004044:	2b00      	cmp	r3, #0
 8004046:	d005      	beq.n	8004054 <HAL_RCC_OscConfig+0x154>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d101      	bne.n	8004054 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e25d      	b.n	8004510 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004054:	4b49      	ldr	r3, [pc, #292]	; (800417c <HAL_RCC_OscConfig+0x27c>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	061b      	lsls	r3, r3, #24
 8004062:	4946      	ldr	r1, [pc, #280]	; (800417c <HAL_RCC_OscConfig+0x27c>)
 8004064:	4313      	orrs	r3, r2
 8004066:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004068:	4b45      	ldr	r3, [pc, #276]	; (8004180 <HAL_RCC_OscConfig+0x280>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4618      	mov	r0, r3
 800406e:	f7fd f9d1 	bl	8001414 <HAL_InitTick>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d043      	beq.n	8004100 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e249      	b.n	8004510 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d023      	beq.n	80040cc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004084:	4b3d      	ldr	r3, [pc, #244]	; (800417c <HAL_RCC_OscConfig+0x27c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a3c      	ldr	r2, [pc, #240]	; (800417c <HAL_RCC_OscConfig+0x27c>)
 800408a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800408e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004090:	f7fd fa0c 	bl	80014ac <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004098:	f7fd fa08 	bl	80014ac <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e232      	b.n	8004510 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040aa:	4b34      	ldr	r3, [pc, #208]	; (800417c <HAL_RCC_OscConfig+0x27c>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0f0      	beq.n	8004098 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b6:	4b31      	ldr	r3, [pc, #196]	; (800417c <HAL_RCC_OscConfig+0x27c>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	061b      	lsls	r3, r3, #24
 80040c4:	492d      	ldr	r1, [pc, #180]	; (800417c <HAL_RCC_OscConfig+0x27c>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	604b      	str	r3, [r1, #4]
 80040ca:	e01a      	b.n	8004102 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040cc:	4b2b      	ldr	r3, [pc, #172]	; (800417c <HAL_RCC_OscConfig+0x27c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a2a      	ldr	r2, [pc, #168]	; (800417c <HAL_RCC_OscConfig+0x27c>)
 80040d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d8:	f7fd f9e8 	bl	80014ac <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040e0:	f7fd f9e4 	bl	80014ac <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e20e      	b.n	8004510 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040f2:	4b22      	ldr	r3, [pc, #136]	; (800417c <HAL_RCC_OscConfig+0x27c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1f0      	bne.n	80040e0 <HAL_RCC_OscConfig+0x1e0>
 80040fe:	e000      	b.n	8004102 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004100:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0308 	and.w	r3, r3, #8
 800410a:	2b00      	cmp	r3, #0
 800410c:	d041      	beq.n	8004192 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d01c      	beq.n	8004150 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004116:	4b19      	ldr	r3, [pc, #100]	; (800417c <HAL_RCC_OscConfig+0x27c>)
 8004118:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800411c:	4a17      	ldr	r2, [pc, #92]	; (800417c <HAL_RCC_OscConfig+0x27c>)
 800411e:	f043 0301 	orr.w	r3, r3, #1
 8004122:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004126:	f7fd f9c1 	bl	80014ac <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800412c:	e008      	b.n	8004140 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800412e:	f7fd f9bd 	bl	80014ac <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e1e7      	b.n	8004510 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004140:	4b0e      	ldr	r3, [pc, #56]	; (800417c <HAL_RCC_OscConfig+0x27c>)
 8004142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0ef      	beq.n	800412e <HAL_RCC_OscConfig+0x22e>
 800414e:	e020      	b.n	8004192 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004150:	4b0a      	ldr	r3, [pc, #40]	; (800417c <HAL_RCC_OscConfig+0x27c>)
 8004152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004156:	4a09      	ldr	r2, [pc, #36]	; (800417c <HAL_RCC_OscConfig+0x27c>)
 8004158:	f023 0301 	bic.w	r3, r3, #1
 800415c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004160:	f7fd f9a4 	bl	80014ac <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004166:	e00d      	b.n	8004184 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004168:	f7fd f9a0 	bl	80014ac <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d906      	bls.n	8004184 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e1ca      	b.n	8004510 <HAL_RCC_OscConfig+0x610>
 800417a:	bf00      	nop
 800417c:	40021000 	.word	0x40021000
 8004180:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004184:	4b8c      	ldr	r3, [pc, #560]	; (80043b8 <HAL_RCC_OscConfig+0x4b8>)
 8004186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1ea      	bne.n	8004168 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 80a6 	beq.w	80042ec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041a0:	2300      	movs	r3, #0
 80041a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041a4:	4b84      	ldr	r3, [pc, #528]	; (80043b8 <HAL_RCC_OscConfig+0x4b8>)
 80041a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <HAL_RCC_OscConfig+0x2b4>
 80041b0:	2301      	movs	r3, #1
 80041b2:	e000      	b.n	80041b6 <HAL_RCC_OscConfig+0x2b6>
 80041b4:	2300      	movs	r3, #0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00d      	beq.n	80041d6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ba:	4b7f      	ldr	r3, [pc, #508]	; (80043b8 <HAL_RCC_OscConfig+0x4b8>)
 80041bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041be:	4a7e      	ldr	r2, [pc, #504]	; (80043b8 <HAL_RCC_OscConfig+0x4b8>)
 80041c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c4:	6593      	str	r3, [r2, #88]	; 0x58
 80041c6:	4b7c      	ldr	r3, [pc, #496]	; (80043b8 <HAL_RCC_OscConfig+0x4b8>)
 80041c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80041d2:	2301      	movs	r3, #1
 80041d4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041d6:	4b79      	ldr	r3, [pc, #484]	; (80043bc <HAL_RCC_OscConfig+0x4bc>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d118      	bne.n	8004214 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041e2:	4b76      	ldr	r3, [pc, #472]	; (80043bc <HAL_RCC_OscConfig+0x4bc>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a75      	ldr	r2, [pc, #468]	; (80043bc <HAL_RCC_OscConfig+0x4bc>)
 80041e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ee:	f7fd f95d 	bl	80014ac <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041f4:	e008      	b.n	8004208 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f6:	f7fd f959 	bl	80014ac <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e183      	b.n	8004510 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004208:	4b6c      	ldr	r3, [pc, #432]	; (80043bc <HAL_RCC_OscConfig+0x4bc>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0f0      	beq.n	80041f6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d108      	bne.n	800422e <HAL_RCC_OscConfig+0x32e>
 800421c:	4b66      	ldr	r3, [pc, #408]	; (80043b8 <HAL_RCC_OscConfig+0x4b8>)
 800421e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004222:	4a65      	ldr	r2, [pc, #404]	; (80043b8 <HAL_RCC_OscConfig+0x4b8>)
 8004224:	f043 0301 	orr.w	r3, r3, #1
 8004228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800422c:	e024      	b.n	8004278 <HAL_RCC_OscConfig+0x378>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	2b05      	cmp	r3, #5
 8004234:	d110      	bne.n	8004258 <HAL_RCC_OscConfig+0x358>
 8004236:	4b60      	ldr	r3, [pc, #384]	; (80043b8 <HAL_RCC_OscConfig+0x4b8>)
 8004238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423c:	4a5e      	ldr	r2, [pc, #376]	; (80043b8 <HAL_RCC_OscConfig+0x4b8>)
 800423e:	f043 0304 	orr.w	r3, r3, #4
 8004242:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004246:	4b5c      	ldr	r3, [pc, #368]	; (80043b8 <HAL_RCC_OscConfig+0x4b8>)
 8004248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424c:	4a5a      	ldr	r2, [pc, #360]	; (80043b8 <HAL_RCC_OscConfig+0x4b8>)
 800424e:	f043 0301 	orr.w	r3, r3, #1
 8004252:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004256:	e00f      	b.n	8004278 <HAL_RCC_OscConfig+0x378>
 8004258:	4b57      	ldr	r3, [pc, #348]	; (80043b8 <HAL_RCC_OscConfig+0x4b8>)
 800425a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425e:	4a56      	ldr	r2, [pc, #344]	; (80043b8 <HAL_RCC_OscConfig+0x4b8>)
 8004260:	f023 0301 	bic.w	r3, r3, #1
 8004264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004268:	4b53      	ldr	r3, [pc, #332]	; (80043b8 <HAL_RCC_OscConfig+0x4b8>)
 800426a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426e:	4a52      	ldr	r2, [pc, #328]	; (80043b8 <HAL_RCC_OscConfig+0x4b8>)
 8004270:	f023 0304 	bic.w	r3, r3, #4
 8004274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d016      	beq.n	80042ae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004280:	f7fd f914 	bl	80014ac <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004286:	e00a      	b.n	800429e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004288:	f7fd f910 	bl	80014ac <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	f241 3288 	movw	r2, #5000	; 0x1388
 8004296:	4293      	cmp	r3, r2
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e138      	b.n	8004510 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800429e:	4b46      	ldr	r3, [pc, #280]	; (80043b8 <HAL_RCC_OscConfig+0x4b8>)
 80042a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0ed      	beq.n	8004288 <HAL_RCC_OscConfig+0x388>
 80042ac:	e015      	b.n	80042da <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ae:	f7fd f8fd 	bl	80014ac <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042b4:	e00a      	b.n	80042cc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042b6:	f7fd f8f9 	bl	80014ac <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e121      	b.n	8004510 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042cc:	4b3a      	ldr	r3, [pc, #232]	; (80043b8 <HAL_RCC_OscConfig+0x4b8>)
 80042ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1ed      	bne.n	80042b6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042da:	7ffb      	ldrb	r3, [r7, #31]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d105      	bne.n	80042ec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042e0:	4b35      	ldr	r3, [pc, #212]	; (80043b8 <HAL_RCC_OscConfig+0x4b8>)
 80042e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e4:	4a34      	ldr	r2, [pc, #208]	; (80043b8 <HAL_RCC_OscConfig+0x4b8>)
 80042e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0320 	and.w	r3, r3, #32
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d03c      	beq.n	8004372 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d01c      	beq.n	800433a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004300:	4b2d      	ldr	r3, [pc, #180]	; (80043b8 <HAL_RCC_OscConfig+0x4b8>)
 8004302:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004306:	4a2c      	ldr	r2, [pc, #176]	; (80043b8 <HAL_RCC_OscConfig+0x4b8>)
 8004308:	f043 0301 	orr.w	r3, r3, #1
 800430c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004310:	f7fd f8cc 	bl	80014ac <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004318:	f7fd f8c8 	bl	80014ac <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e0f2      	b.n	8004510 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800432a:	4b23      	ldr	r3, [pc, #140]	; (80043b8 <HAL_RCC_OscConfig+0x4b8>)
 800432c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d0ef      	beq.n	8004318 <HAL_RCC_OscConfig+0x418>
 8004338:	e01b      	b.n	8004372 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800433a:	4b1f      	ldr	r3, [pc, #124]	; (80043b8 <HAL_RCC_OscConfig+0x4b8>)
 800433c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004340:	4a1d      	ldr	r2, [pc, #116]	; (80043b8 <HAL_RCC_OscConfig+0x4b8>)
 8004342:	f023 0301 	bic.w	r3, r3, #1
 8004346:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800434a:	f7fd f8af 	bl	80014ac <HAL_GetTick>
 800434e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004350:	e008      	b.n	8004364 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004352:	f7fd f8ab 	bl	80014ac <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e0d5      	b.n	8004510 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004364:	4b14      	ldr	r3, [pc, #80]	; (80043b8 <HAL_RCC_OscConfig+0x4b8>)
 8004366:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1ef      	bne.n	8004352 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 80c9 	beq.w	800450e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800437c:	4b0e      	ldr	r3, [pc, #56]	; (80043b8 <HAL_RCC_OscConfig+0x4b8>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 030c 	and.w	r3, r3, #12
 8004384:	2b0c      	cmp	r3, #12
 8004386:	f000 8083 	beq.w	8004490 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	2b02      	cmp	r3, #2
 8004390:	d15e      	bne.n	8004450 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004392:	4b09      	ldr	r3, [pc, #36]	; (80043b8 <HAL_RCC_OscConfig+0x4b8>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a08      	ldr	r2, [pc, #32]	; (80043b8 <HAL_RCC_OscConfig+0x4b8>)
 8004398:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800439c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439e:	f7fd f885 	bl	80014ac <HAL_GetTick>
 80043a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043a4:	e00c      	b.n	80043c0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a6:	f7fd f881 	bl	80014ac <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d905      	bls.n	80043c0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e0ab      	b.n	8004510 <HAL_RCC_OscConfig+0x610>
 80043b8:	40021000 	.word	0x40021000
 80043bc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043c0:	4b55      	ldr	r3, [pc, #340]	; (8004518 <HAL_RCC_OscConfig+0x618>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1ec      	bne.n	80043a6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043cc:	4b52      	ldr	r3, [pc, #328]	; (8004518 <HAL_RCC_OscConfig+0x618>)
 80043ce:	68da      	ldr	r2, [r3, #12]
 80043d0:	4b52      	ldr	r3, [pc, #328]	; (800451c <HAL_RCC_OscConfig+0x61c>)
 80043d2:	4013      	ands	r3, r2
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6a11      	ldr	r1, [r2, #32]
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043dc:	3a01      	subs	r2, #1
 80043de:	0112      	lsls	r2, r2, #4
 80043e0:	4311      	orrs	r1, r2
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80043e6:	0212      	lsls	r2, r2, #8
 80043e8:	4311      	orrs	r1, r2
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80043ee:	0852      	lsrs	r2, r2, #1
 80043f0:	3a01      	subs	r2, #1
 80043f2:	0552      	lsls	r2, r2, #21
 80043f4:	4311      	orrs	r1, r2
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043fa:	0852      	lsrs	r2, r2, #1
 80043fc:	3a01      	subs	r2, #1
 80043fe:	0652      	lsls	r2, r2, #25
 8004400:	4311      	orrs	r1, r2
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004406:	06d2      	lsls	r2, r2, #27
 8004408:	430a      	orrs	r2, r1
 800440a:	4943      	ldr	r1, [pc, #268]	; (8004518 <HAL_RCC_OscConfig+0x618>)
 800440c:	4313      	orrs	r3, r2
 800440e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004410:	4b41      	ldr	r3, [pc, #260]	; (8004518 <HAL_RCC_OscConfig+0x618>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a40      	ldr	r2, [pc, #256]	; (8004518 <HAL_RCC_OscConfig+0x618>)
 8004416:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800441a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800441c:	4b3e      	ldr	r3, [pc, #248]	; (8004518 <HAL_RCC_OscConfig+0x618>)
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	4a3d      	ldr	r2, [pc, #244]	; (8004518 <HAL_RCC_OscConfig+0x618>)
 8004422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004426:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004428:	f7fd f840 	bl	80014ac <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004430:	f7fd f83c 	bl	80014ac <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e066      	b.n	8004510 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004442:	4b35      	ldr	r3, [pc, #212]	; (8004518 <HAL_RCC_OscConfig+0x618>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0f0      	beq.n	8004430 <HAL_RCC_OscConfig+0x530>
 800444e:	e05e      	b.n	800450e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004450:	4b31      	ldr	r3, [pc, #196]	; (8004518 <HAL_RCC_OscConfig+0x618>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a30      	ldr	r2, [pc, #192]	; (8004518 <HAL_RCC_OscConfig+0x618>)
 8004456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800445a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445c:	f7fd f826 	bl	80014ac <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004464:	f7fd f822 	bl	80014ac <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e04c      	b.n	8004510 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004476:	4b28      	ldr	r3, [pc, #160]	; (8004518 <HAL_RCC_OscConfig+0x618>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1f0      	bne.n	8004464 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004482:	4b25      	ldr	r3, [pc, #148]	; (8004518 <HAL_RCC_OscConfig+0x618>)
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	4924      	ldr	r1, [pc, #144]	; (8004518 <HAL_RCC_OscConfig+0x618>)
 8004488:	4b25      	ldr	r3, [pc, #148]	; (8004520 <HAL_RCC_OscConfig+0x620>)
 800448a:	4013      	ands	r3, r2
 800448c:	60cb      	str	r3, [r1, #12]
 800448e:	e03e      	b.n	800450e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d101      	bne.n	800449c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e039      	b.n	8004510 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800449c:	4b1e      	ldr	r3, [pc, #120]	; (8004518 <HAL_RCC_OscConfig+0x618>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f003 0203 	and.w	r2, r3, #3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d12c      	bne.n	800450a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	3b01      	subs	r3, #1
 80044bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044be:	429a      	cmp	r2, r3
 80044c0:	d123      	bne.n	800450a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d11b      	bne.n	800450a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044dc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80044de:	429a      	cmp	r2, r3
 80044e0:	d113      	bne.n	800450a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ec:	085b      	lsrs	r3, r3, #1
 80044ee:	3b01      	subs	r3, #1
 80044f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d109      	bne.n	800450a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004500:	085b      	lsrs	r3, r3, #1
 8004502:	3b01      	subs	r3, #1
 8004504:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004506:	429a      	cmp	r2, r3
 8004508:	d001      	beq.n	800450e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3720      	adds	r7, #32
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40021000 	.word	0x40021000
 800451c:	019f800c 	.word	0x019f800c
 8004520:	feeefffc 	.word	0xfeeefffc

08004524 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800452e:	2300      	movs	r3, #0
 8004530:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e11e      	b.n	800477a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800453c:	4b91      	ldr	r3, [pc, #580]	; (8004784 <HAL_RCC_ClockConfig+0x260>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 030f 	and.w	r3, r3, #15
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	429a      	cmp	r2, r3
 8004548:	d910      	bls.n	800456c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454a:	4b8e      	ldr	r3, [pc, #568]	; (8004784 <HAL_RCC_ClockConfig+0x260>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f023 020f 	bic.w	r2, r3, #15
 8004552:	498c      	ldr	r1, [pc, #560]	; (8004784 <HAL_RCC_ClockConfig+0x260>)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	4313      	orrs	r3, r2
 8004558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800455a:	4b8a      	ldr	r3, [pc, #552]	; (8004784 <HAL_RCC_ClockConfig+0x260>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	429a      	cmp	r2, r3
 8004566:	d001      	beq.n	800456c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e106      	b.n	800477a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b00      	cmp	r3, #0
 8004576:	d073      	beq.n	8004660 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2b03      	cmp	r3, #3
 800457e:	d129      	bne.n	80045d4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004580:	4b81      	ldr	r3, [pc, #516]	; (8004788 <HAL_RCC_ClockConfig+0x264>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e0f4      	b.n	800477a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004590:	f000 f99e 	bl	80048d0 <RCC_GetSysClockFreqFromPLLSource>
 8004594:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	4a7c      	ldr	r2, [pc, #496]	; (800478c <HAL_RCC_ClockConfig+0x268>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d93f      	bls.n	800461e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800459e:	4b7a      	ldr	r3, [pc, #488]	; (8004788 <HAL_RCC_ClockConfig+0x264>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d009      	beq.n	80045be <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d033      	beq.n	800461e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d12f      	bne.n	800461e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045be:	4b72      	ldr	r3, [pc, #456]	; (8004788 <HAL_RCC_ClockConfig+0x264>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045c6:	4a70      	ldr	r2, [pc, #448]	; (8004788 <HAL_RCC_ClockConfig+0x264>)
 80045c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045cc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80045ce:	2380      	movs	r3, #128	; 0x80
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	e024      	b.n	800461e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d107      	bne.n	80045ec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045dc:	4b6a      	ldr	r3, [pc, #424]	; (8004788 <HAL_RCC_ClockConfig+0x264>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d109      	bne.n	80045fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e0c6      	b.n	800477a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045ec:	4b66      	ldr	r3, [pc, #408]	; (8004788 <HAL_RCC_ClockConfig+0x264>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e0be      	b.n	800477a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80045fc:	f000 f8ce 	bl	800479c <HAL_RCC_GetSysClockFreq>
 8004600:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	4a61      	ldr	r2, [pc, #388]	; (800478c <HAL_RCC_ClockConfig+0x268>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d909      	bls.n	800461e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800460a:	4b5f      	ldr	r3, [pc, #380]	; (8004788 <HAL_RCC_ClockConfig+0x264>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004612:	4a5d      	ldr	r2, [pc, #372]	; (8004788 <HAL_RCC_ClockConfig+0x264>)
 8004614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004618:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800461a:	2380      	movs	r3, #128	; 0x80
 800461c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800461e:	4b5a      	ldr	r3, [pc, #360]	; (8004788 <HAL_RCC_ClockConfig+0x264>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f023 0203 	bic.w	r2, r3, #3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	4957      	ldr	r1, [pc, #348]	; (8004788 <HAL_RCC_ClockConfig+0x264>)
 800462c:	4313      	orrs	r3, r2
 800462e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004630:	f7fc ff3c 	bl	80014ac <HAL_GetTick>
 8004634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004636:	e00a      	b.n	800464e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004638:	f7fc ff38 	bl	80014ac <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	f241 3288 	movw	r2, #5000	; 0x1388
 8004646:	4293      	cmp	r3, r2
 8004648:	d901      	bls.n	800464e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e095      	b.n	800477a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800464e:	4b4e      	ldr	r3, [pc, #312]	; (8004788 <HAL_RCC_ClockConfig+0x264>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 020c 	and.w	r2, r3, #12
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	429a      	cmp	r2, r3
 800465e:	d1eb      	bne.n	8004638 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d023      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b00      	cmp	r3, #0
 8004676:	d005      	beq.n	8004684 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004678:	4b43      	ldr	r3, [pc, #268]	; (8004788 <HAL_RCC_ClockConfig+0x264>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	4a42      	ldr	r2, [pc, #264]	; (8004788 <HAL_RCC_ClockConfig+0x264>)
 800467e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004682:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0308 	and.w	r3, r3, #8
 800468c:	2b00      	cmp	r3, #0
 800468e:	d007      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004690:	4b3d      	ldr	r3, [pc, #244]	; (8004788 <HAL_RCC_ClockConfig+0x264>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004698:	4a3b      	ldr	r2, [pc, #236]	; (8004788 <HAL_RCC_ClockConfig+0x264>)
 800469a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800469e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046a0:	4b39      	ldr	r3, [pc, #228]	; (8004788 <HAL_RCC_ClockConfig+0x264>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	4936      	ldr	r1, [pc, #216]	; (8004788 <HAL_RCC_ClockConfig+0x264>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	608b      	str	r3, [r1, #8]
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	2b80      	cmp	r3, #128	; 0x80
 80046b8:	d105      	bne.n	80046c6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80046ba:	4b33      	ldr	r3, [pc, #204]	; (8004788 <HAL_RCC_ClockConfig+0x264>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	4a32      	ldr	r2, [pc, #200]	; (8004788 <HAL_RCC_ClockConfig+0x264>)
 80046c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046c4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046c6:	4b2f      	ldr	r3, [pc, #188]	; (8004784 <HAL_RCC_ClockConfig+0x260>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 030f 	and.w	r3, r3, #15
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d21d      	bcs.n	8004710 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d4:	4b2b      	ldr	r3, [pc, #172]	; (8004784 <HAL_RCC_ClockConfig+0x260>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f023 020f 	bic.w	r2, r3, #15
 80046dc:	4929      	ldr	r1, [pc, #164]	; (8004784 <HAL_RCC_ClockConfig+0x260>)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80046e4:	f7fc fee2 	bl	80014ac <HAL_GetTick>
 80046e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ea:	e00a      	b.n	8004702 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046ec:	f7fc fede 	bl	80014ac <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e03b      	b.n	800477a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004702:	4b20      	ldr	r3, [pc, #128]	; (8004784 <HAL_RCC_ClockConfig+0x260>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 030f 	and.w	r3, r3, #15
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	429a      	cmp	r2, r3
 800470e:	d1ed      	bne.n	80046ec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	d008      	beq.n	800472e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800471c:	4b1a      	ldr	r3, [pc, #104]	; (8004788 <HAL_RCC_ClockConfig+0x264>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	4917      	ldr	r1, [pc, #92]	; (8004788 <HAL_RCC_ClockConfig+0x264>)
 800472a:	4313      	orrs	r3, r2
 800472c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b00      	cmp	r3, #0
 8004738:	d009      	beq.n	800474e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800473a:	4b13      	ldr	r3, [pc, #76]	; (8004788 <HAL_RCC_ClockConfig+0x264>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	490f      	ldr	r1, [pc, #60]	; (8004788 <HAL_RCC_ClockConfig+0x264>)
 800474a:	4313      	orrs	r3, r2
 800474c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800474e:	f000 f825 	bl	800479c <HAL_RCC_GetSysClockFreq>
 8004752:	4602      	mov	r2, r0
 8004754:	4b0c      	ldr	r3, [pc, #48]	; (8004788 <HAL_RCC_ClockConfig+0x264>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	091b      	lsrs	r3, r3, #4
 800475a:	f003 030f 	and.w	r3, r3, #15
 800475e:	490c      	ldr	r1, [pc, #48]	; (8004790 <HAL_RCC_ClockConfig+0x26c>)
 8004760:	5ccb      	ldrb	r3, [r1, r3]
 8004762:	f003 031f 	and.w	r3, r3, #31
 8004766:	fa22 f303 	lsr.w	r3, r2, r3
 800476a:	4a0a      	ldr	r2, [pc, #40]	; (8004794 <HAL_RCC_ClockConfig+0x270>)
 800476c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800476e:	4b0a      	ldr	r3, [pc, #40]	; (8004798 <HAL_RCC_ClockConfig+0x274>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4618      	mov	r0, r3
 8004774:	f7fc fe4e 	bl	8001414 <HAL_InitTick>
 8004778:	4603      	mov	r3, r0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	40022000 	.word	0x40022000
 8004788:	40021000 	.word	0x40021000
 800478c:	04c4b400 	.word	0x04c4b400
 8004790:	080072e8 	.word	0x080072e8
 8004794:	20000008 	.word	0x20000008
 8004798:	2000000c 	.word	0x2000000c

0800479c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800479c:	b480      	push	{r7}
 800479e:	b087      	sub	sp, #28
 80047a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80047a2:	4b2c      	ldr	r3, [pc, #176]	; (8004854 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 030c 	and.w	r3, r3, #12
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	d102      	bne.n	80047b4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047ae:	4b2a      	ldr	r3, [pc, #168]	; (8004858 <HAL_RCC_GetSysClockFreq+0xbc>)
 80047b0:	613b      	str	r3, [r7, #16]
 80047b2:	e047      	b.n	8004844 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80047b4:	4b27      	ldr	r3, [pc, #156]	; (8004854 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f003 030c 	and.w	r3, r3, #12
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d102      	bne.n	80047c6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047c0:	4b26      	ldr	r3, [pc, #152]	; (800485c <HAL_RCC_GetSysClockFreq+0xc0>)
 80047c2:	613b      	str	r3, [r7, #16]
 80047c4:	e03e      	b.n	8004844 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80047c6:	4b23      	ldr	r3, [pc, #140]	; (8004854 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 030c 	and.w	r3, r3, #12
 80047ce:	2b0c      	cmp	r3, #12
 80047d0:	d136      	bne.n	8004840 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047d2:	4b20      	ldr	r3, [pc, #128]	; (8004854 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047dc:	4b1d      	ldr	r3, [pc, #116]	; (8004854 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	091b      	lsrs	r3, r3, #4
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	3301      	adds	r3, #1
 80047e8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2b03      	cmp	r3, #3
 80047ee:	d10c      	bne.n	800480a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047f0:	4a1a      	ldr	r2, [pc, #104]	; (800485c <HAL_RCC_GetSysClockFreq+0xc0>)
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f8:	4a16      	ldr	r2, [pc, #88]	; (8004854 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047fa:	68d2      	ldr	r2, [r2, #12]
 80047fc:	0a12      	lsrs	r2, r2, #8
 80047fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004802:	fb02 f303 	mul.w	r3, r2, r3
 8004806:	617b      	str	r3, [r7, #20]
      break;
 8004808:	e00c      	b.n	8004824 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800480a:	4a13      	ldr	r2, [pc, #76]	; (8004858 <HAL_RCC_GetSysClockFreq+0xbc>)
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004812:	4a10      	ldr	r2, [pc, #64]	; (8004854 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004814:	68d2      	ldr	r2, [r2, #12]
 8004816:	0a12      	lsrs	r2, r2, #8
 8004818:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800481c:	fb02 f303 	mul.w	r3, r2, r3
 8004820:	617b      	str	r3, [r7, #20]
      break;
 8004822:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004824:	4b0b      	ldr	r3, [pc, #44]	; (8004854 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	0e5b      	lsrs	r3, r3, #25
 800482a:	f003 0303 	and.w	r3, r3, #3
 800482e:	3301      	adds	r3, #1
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	fbb2 f3f3 	udiv	r3, r2, r3
 800483c:	613b      	str	r3, [r7, #16]
 800483e:	e001      	b.n	8004844 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004844:	693b      	ldr	r3, [r7, #16]
}
 8004846:	4618      	mov	r0, r3
 8004848:	371c      	adds	r7, #28
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	40021000 	.word	0x40021000
 8004858:	00f42400 	.word	0x00f42400
 800485c:	016e3600 	.word	0x016e3600

08004860 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004864:	4b03      	ldr	r3, [pc, #12]	; (8004874 <HAL_RCC_GetHCLKFreq+0x14>)
 8004866:	681b      	ldr	r3, [r3, #0]
}
 8004868:	4618      	mov	r0, r3
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	20000008 	.word	0x20000008

08004878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800487c:	f7ff fff0 	bl	8004860 <HAL_RCC_GetHCLKFreq>
 8004880:	4602      	mov	r2, r0
 8004882:	4b06      	ldr	r3, [pc, #24]	; (800489c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	0a1b      	lsrs	r3, r3, #8
 8004888:	f003 0307 	and.w	r3, r3, #7
 800488c:	4904      	ldr	r1, [pc, #16]	; (80048a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800488e:	5ccb      	ldrb	r3, [r1, r3]
 8004890:	f003 031f 	and.w	r3, r3, #31
 8004894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004898:	4618      	mov	r0, r3
 800489a:	bd80      	pop	{r7, pc}
 800489c:	40021000 	.word	0x40021000
 80048a0:	080072f8 	.word	0x080072f8

080048a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048a8:	f7ff ffda 	bl	8004860 <HAL_RCC_GetHCLKFreq>
 80048ac:	4602      	mov	r2, r0
 80048ae:	4b06      	ldr	r3, [pc, #24]	; (80048c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	0adb      	lsrs	r3, r3, #11
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	4904      	ldr	r1, [pc, #16]	; (80048cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80048ba:	5ccb      	ldrb	r3, [r1, r3]
 80048bc:	f003 031f 	and.w	r3, r3, #31
 80048c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	40021000 	.word	0x40021000
 80048cc:	080072f8 	.word	0x080072f8

080048d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b087      	sub	sp, #28
 80048d4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048d6:	4b1e      	ldr	r3, [pc, #120]	; (8004950 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f003 0303 	and.w	r3, r3, #3
 80048de:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048e0:	4b1b      	ldr	r3, [pc, #108]	; (8004950 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	091b      	lsrs	r3, r3, #4
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	3301      	adds	r3, #1
 80048ec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	2b03      	cmp	r3, #3
 80048f2:	d10c      	bne.n	800490e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048f4:	4a17      	ldr	r2, [pc, #92]	; (8004954 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fc:	4a14      	ldr	r2, [pc, #80]	; (8004950 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048fe:	68d2      	ldr	r2, [r2, #12]
 8004900:	0a12      	lsrs	r2, r2, #8
 8004902:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004906:	fb02 f303 	mul.w	r3, r2, r3
 800490a:	617b      	str	r3, [r7, #20]
    break;
 800490c:	e00c      	b.n	8004928 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800490e:	4a12      	ldr	r2, [pc, #72]	; (8004958 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	fbb2 f3f3 	udiv	r3, r2, r3
 8004916:	4a0e      	ldr	r2, [pc, #56]	; (8004950 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004918:	68d2      	ldr	r2, [r2, #12]
 800491a:	0a12      	lsrs	r2, r2, #8
 800491c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004920:	fb02 f303 	mul.w	r3, r2, r3
 8004924:	617b      	str	r3, [r7, #20]
    break;
 8004926:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004928:	4b09      	ldr	r3, [pc, #36]	; (8004950 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	0e5b      	lsrs	r3, r3, #25
 800492e:	f003 0303 	and.w	r3, r3, #3
 8004932:	3301      	adds	r3, #1
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004940:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004942:	687b      	ldr	r3, [r7, #4]
}
 8004944:	4618      	mov	r0, r3
 8004946:	371c      	adds	r7, #28
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	40021000 	.word	0x40021000
 8004954:	016e3600 	.word	0x016e3600
 8004958:	00f42400 	.word	0x00f42400

0800495c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004964:	2300      	movs	r3, #0
 8004966:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004968:	2300      	movs	r3, #0
 800496a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 8098 	beq.w	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800497a:	2300      	movs	r3, #0
 800497c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800497e:	4b43      	ldr	r3, [pc, #268]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10d      	bne.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800498a:	4b40      	ldr	r3, [pc, #256]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800498c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498e:	4a3f      	ldr	r2, [pc, #252]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004994:	6593      	str	r3, [r2, #88]	; 0x58
 8004996:	4b3d      	ldr	r3, [pc, #244]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800499a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800499e:	60bb      	str	r3, [r7, #8]
 80049a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049a2:	2301      	movs	r3, #1
 80049a4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049a6:	4b3a      	ldr	r3, [pc, #232]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a39      	ldr	r2, [pc, #228]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049b2:	f7fc fd7b 	bl	80014ac <HAL_GetTick>
 80049b6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049b8:	e009      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ba:	f7fc fd77 	bl	80014ac <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d902      	bls.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	74fb      	strb	r3, [r7, #19]
        break;
 80049cc:	e005      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049ce:	4b30      	ldr	r3, [pc, #192]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0ef      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80049da:	7cfb      	ldrb	r3, [r7, #19]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d159      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049e0:	4b2a      	ldr	r3, [pc, #168]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d01e      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d019      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049fc:	4b23      	ldr	r3, [pc, #140]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a06:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a08:	4b20      	ldr	r3, [pc, #128]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0e:	4a1f      	ldr	r2, [pc, #124]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a18:	4b1c      	ldr	r3, [pc, #112]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1e:	4a1b      	ldr	r2, [pc, #108]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a28:	4a18      	ldr	r2, [pc, #96]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d016      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3a:	f7fc fd37 	bl	80014ac <HAL_GetTick>
 8004a3e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a40:	e00b      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a42:	f7fc fd33 	bl	80014ac <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d902      	bls.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	74fb      	strb	r3, [r7, #19]
            break;
 8004a58:	e006      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a5a:	4b0c      	ldr	r3, [pc, #48]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0ec      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004a68:	7cfb      	ldrb	r3, [r7, #19]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10b      	bne.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a6e:	4b07      	ldr	r3, [pc, #28]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a7c:	4903      	ldr	r1, [pc, #12]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a84:	e008      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a86:	7cfb      	ldrb	r3, [r7, #19]
 8004a88:	74bb      	strb	r3, [r7, #18]
 8004a8a:	e005      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004a8c:	40021000 	.word	0x40021000
 8004a90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a94:	7cfb      	ldrb	r3, [r7, #19]
 8004a96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a98:	7c7b      	ldrb	r3, [r7, #17]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d105      	bne.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a9e:	4ba7      	ldr	r3, [pc, #668]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa2:	4aa6      	ldr	r2, [pc, #664]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aa8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00a      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ab6:	4ba1      	ldr	r3, [pc, #644]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004abc:	f023 0203 	bic.w	r2, r3, #3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	499d      	ldr	r1, [pc, #628]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00a      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ad8:	4b98      	ldr	r3, [pc, #608]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ade:	f023 020c 	bic.w	r2, r3, #12
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	4995      	ldr	r1, [pc, #596]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0304 	and.w	r3, r3, #4
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00a      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004afa:	4b90      	ldr	r3, [pc, #576]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b00:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	498c      	ldr	r1, [pc, #560]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0308 	and.w	r3, r3, #8
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00a      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b1c:	4b87      	ldr	r3, [pc, #540]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	4984      	ldr	r1, [pc, #528]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0310 	and.w	r3, r3, #16
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00a      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b3e:	4b7f      	ldr	r3, [pc, #508]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	497b      	ldr	r1, [pc, #492]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0320 	and.w	r3, r3, #32
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00a      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b60:	4b76      	ldr	r3, [pc, #472]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	4973      	ldr	r1, [pc, #460]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00a      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b82:	4b6e      	ldr	r3, [pc, #440]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b88:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	496a      	ldr	r1, [pc, #424]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00a      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ba4:	4b65      	ldr	r3, [pc, #404]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004baa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	4962      	ldr	r1, [pc, #392]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00a      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bc6:	4b5d      	ldr	r3, [pc, #372]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bcc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	4959      	ldr	r1, [pc, #356]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00a      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004be8:	4b54      	ldr	r3, [pc, #336]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bee:	f023 0203 	bic.w	r2, r3, #3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf6:	4951      	ldr	r1, [pc, #324]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00a      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c0a:	4b4c      	ldr	r3, [pc, #304]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c18:	4948      	ldr	r1, [pc, #288]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d015      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c2c:	4b43      	ldr	r3, [pc, #268]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3a:	4940      	ldr	r1, [pc, #256]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c4a:	d105      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c4c:	4b3b      	ldr	r3, [pc, #236]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	4a3a      	ldr	r2, [pc, #232]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c56:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d015      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c64:	4b35      	ldr	r3, [pc, #212]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c72:	4932      	ldr	r1, [pc, #200]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c82:	d105      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c84:	4b2d      	ldr	r3, [pc, #180]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	4a2c      	ldr	r2, [pc, #176]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c8e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d015      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c9c:	4b27      	ldr	r3, [pc, #156]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004caa:	4924      	ldr	r1, [pc, #144]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cba:	d105      	bne.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cbc:	4b1f      	ldr	r3, [pc, #124]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	4a1e      	ldr	r2, [pc, #120]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cc6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d015      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cd4:	4b19      	ldr	r3, [pc, #100]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce2:	4916      	ldr	r1, [pc, #88]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cf2:	d105      	bne.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cf4:	4b11      	ldr	r3, [pc, #68]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	4a10      	ldr	r2, [pc, #64]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cfe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d019      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d0c:	4b0b      	ldr	r3, [pc, #44]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	4908      	ldr	r1, [pc, #32]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d2a:	d109      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d2c:	4b03      	ldr	r3, [pc, #12]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	4a02      	ldr	r2, [pc, #8]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d36:	60d3      	str	r3, [r2, #12]
 8004d38:	e002      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004d3a:	bf00      	nop
 8004d3c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d015      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004d4c:	4b29      	ldr	r3, [pc, #164]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d52:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5a:	4926      	ldr	r1, [pc, #152]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d6a:	d105      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d6c:	4b21      	ldr	r3, [pc, #132]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	4a20      	ldr	r2, [pc, #128]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d76:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d015      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004d84:	4b1b      	ldr	r3, [pc, #108]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d92:	4918      	ldr	r1, [pc, #96]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da2:	d105      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004da4:	4b13      	ldr	r3, [pc, #76]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	4a12      	ldr	r2, [pc, #72]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004daa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dae:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d015      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004dbc:	4b0d      	ldr	r3, [pc, #52]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004dbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dca:	490a      	ldr	r1, [pc, #40]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dda:	d105      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ddc:	4b05      	ldr	r3, [pc, #20]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	4a04      	ldr	r2, [pc, #16]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004de2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004de6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004de8:	7cbb      	ldrb	r3, [r7, #18]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3718      	adds	r7, #24
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	40021000 	.word	0x40021000

08004df8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e049      	b.n	8004e9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d106      	bne.n	8004e24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7fc f996 	bl	8001150 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2202      	movs	r2, #2
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	3304      	adds	r3, #4
 8004e34:	4619      	mov	r1, r3
 8004e36:	4610      	mov	r0, r2
 8004e38:	f000 fe34 	bl	8005aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
	...

08004ea8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d001      	beq.n	8004ec0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e04c      	b.n	8004f5a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a26      	ldr	r2, [pc, #152]	; (8004f68 <HAL_TIM_Base_Start+0xc0>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d022      	beq.n	8004f18 <HAL_TIM_Base_Start+0x70>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eda:	d01d      	beq.n	8004f18 <HAL_TIM_Base_Start+0x70>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a22      	ldr	r2, [pc, #136]	; (8004f6c <HAL_TIM_Base_Start+0xc4>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d018      	beq.n	8004f18 <HAL_TIM_Base_Start+0x70>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a21      	ldr	r2, [pc, #132]	; (8004f70 <HAL_TIM_Base_Start+0xc8>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d013      	beq.n	8004f18 <HAL_TIM_Base_Start+0x70>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a1f      	ldr	r2, [pc, #124]	; (8004f74 <HAL_TIM_Base_Start+0xcc>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d00e      	beq.n	8004f18 <HAL_TIM_Base_Start+0x70>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a1e      	ldr	r2, [pc, #120]	; (8004f78 <HAL_TIM_Base_Start+0xd0>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d009      	beq.n	8004f18 <HAL_TIM_Base_Start+0x70>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a1c      	ldr	r2, [pc, #112]	; (8004f7c <HAL_TIM_Base_Start+0xd4>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d004      	beq.n	8004f18 <HAL_TIM_Base_Start+0x70>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a1b      	ldr	r2, [pc, #108]	; (8004f80 <HAL_TIM_Base_Start+0xd8>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d115      	bne.n	8004f44 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689a      	ldr	r2, [r3, #8]
 8004f1e:	4b19      	ldr	r3, [pc, #100]	; (8004f84 <HAL_TIM_Base_Start+0xdc>)
 8004f20:	4013      	ands	r3, r2
 8004f22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2b06      	cmp	r3, #6
 8004f28:	d015      	beq.n	8004f56 <HAL_TIM_Base_Start+0xae>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f30:	d011      	beq.n	8004f56 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0201 	orr.w	r2, r2, #1
 8004f40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f42:	e008      	b.n	8004f56 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0201 	orr.w	r2, r2, #1
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	e000      	b.n	8004f58 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3714      	adds	r7, #20
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	40012c00 	.word	0x40012c00
 8004f6c:	40000400 	.word	0x40000400
 8004f70:	40000800 	.word	0x40000800
 8004f74:	40000c00 	.word	0x40000c00
 8004f78:	40013400 	.word	0x40013400
 8004f7c:	40014000 	.word	0x40014000
 8004f80:	40015000 	.word	0x40015000
 8004f84:	00010007 	.word	0x00010007

08004f88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d001      	beq.n	8004fa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e054      	b.n	800504a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f042 0201 	orr.w	r2, r2, #1
 8004fb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a26      	ldr	r2, [pc, #152]	; (8005058 <HAL_TIM_Base_Start_IT+0xd0>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d022      	beq.n	8005008 <HAL_TIM_Base_Start_IT+0x80>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fca:	d01d      	beq.n	8005008 <HAL_TIM_Base_Start_IT+0x80>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a22      	ldr	r2, [pc, #136]	; (800505c <HAL_TIM_Base_Start_IT+0xd4>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d018      	beq.n	8005008 <HAL_TIM_Base_Start_IT+0x80>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a21      	ldr	r2, [pc, #132]	; (8005060 <HAL_TIM_Base_Start_IT+0xd8>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d013      	beq.n	8005008 <HAL_TIM_Base_Start_IT+0x80>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a1f      	ldr	r2, [pc, #124]	; (8005064 <HAL_TIM_Base_Start_IT+0xdc>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d00e      	beq.n	8005008 <HAL_TIM_Base_Start_IT+0x80>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a1e      	ldr	r2, [pc, #120]	; (8005068 <HAL_TIM_Base_Start_IT+0xe0>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d009      	beq.n	8005008 <HAL_TIM_Base_Start_IT+0x80>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a1c      	ldr	r2, [pc, #112]	; (800506c <HAL_TIM_Base_Start_IT+0xe4>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d004      	beq.n	8005008 <HAL_TIM_Base_Start_IT+0x80>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a1b      	ldr	r2, [pc, #108]	; (8005070 <HAL_TIM_Base_Start_IT+0xe8>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d115      	bne.n	8005034 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689a      	ldr	r2, [r3, #8]
 800500e:	4b19      	ldr	r3, [pc, #100]	; (8005074 <HAL_TIM_Base_Start_IT+0xec>)
 8005010:	4013      	ands	r3, r2
 8005012:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2b06      	cmp	r3, #6
 8005018:	d015      	beq.n	8005046 <HAL_TIM_Base_Start_IT+0xbe>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005020:	d011      	beq.n	8005046 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f042 0201 	orr.w	r2, r2, #1
 8005030:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005032:	e008      	b.n	8005046 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0201 	orr.w	r2, r2, #1
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	e000      	b.n	8005048 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005046:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	40012c00 	.word	0x40012c00
 800505c:	40000400 	.word	0x40000400
 8005060:	40000800 	.word	0x40000800
 8005064:	40000c00 	.word	0x40000c00
 8005068:	40013400 	.word	0x40013400
 800506c:	40014000 	.word	0x40014000
 8005070:	40015000 	.word	0x40015000
 8005074:	00010007 	.word	0x00010007

08005078 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e049      	b.n	800511e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d106      	bne.n	80050a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f841 	bl	8005126 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2202      	movs	r2, #2
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3304      	adds	r3, #4
 80050b4:	4619      	mov	r1, r3
 80050b6:	4610      	mov	r0, r2
 80050b8:	f000 fcf4 	bl	8005aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005126:	b480      	push	{r7}
 8005128:	b083      	sub	sp, #12
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800512e:	bf00      	nop
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
	...

0800513c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d109      	bne.n	8005160 <HAL_TIM_PWM_Start+0x24>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b01      	cmp	r3, #1
 8005156:	bf14      	ite	ne
 8005158:	2301      	movne	r3, #1
 800515a:	2300      	moveq	r3, #0
 800515c:	b2db      	uxtb	r3, r3
 800515e:	e03c      	b.n	80051da <HAL_TIM_PWM_Start+0x9e>
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	2b04      	cmp	r3, #4
 8005164:	d109      	bne.n	800517a <HAL_TIM_PWM_Start+0x3e>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b01      	cmp	r3, #1
 8005170:	bf14      	ite	ne
 8005172:	2301      	movne	r3, #1
 8005174:	2300      	moveq	r3, #0
 8005176:	b2db      	uxtb	r3, r3
 8005178:	e02f      	b.n	80051da <HAL_TIM_PWM_Start+0x9e>
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b08      	cmp	r3, #8
 800517e:	d109      	bne.n	8005194 <HAL_TIM_PWM_Start+0x58>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b01      	cmp	r3, #1
 800518a:	bf14      	ite	ne
 800518c:	2301      	movne	r3, #1
 800518e:	2300      	moveq	r3, #0
 8005190:	b2db      	uxtb	r3, r3
 8005192:	e022      	b.n	80051da <HAL_TIM_PWM_Start+0x9e>
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	2b0c      	cmp	r3, #12
 8005198:	d109      	bne.n	80051ae <HAL_TIM_PWM_Start+0x72>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	bf14      	ite	ne
 80051a6:	2301      	movne	r3, #1
 80051a8:	2300      	moveq	r3, #0
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	e015      	b.n	80051da <HAL_TIM_PWM_Start+0x9e>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b10      	cmp	r3, #16
 80051b2:	d109      	bne.n	80051c8 <HAL_TIM_PWM_Start+0x8c>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b01      	cmp	r3, #1
 80051be:	bf14      	ite	ne
 80051c0:	2301      	movne	r3, #1
 80051c2:	2300      	moveq	r3, #0
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	e008      	b.n	80051da <HAL_TIM_PWM_Start+0x9e>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	bf14      	ite	ne
 80051d4:	2301      	movne	r3, #1
 80051d6:	2300      	moveq	r3, #0
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e0a6      	b.n	8005330 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d104      	bne.n	80051f2 <HAL_TIM_PWM_Start+0xb6>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051f0:	e023      	b.n	800523a <HAL_TIM_PWM_Start+0xfe>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	d104      	bne.n	8005202 <HAL_TIM_PWM_Start+0xc6>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2202      	movs	r2, #2
 80051fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005200:	e01b      	b.n	800523a <HAL_TIM_PWM_Start+0xfe>
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2b08      	cmp	r3, #8
 8005206:	d104      	bne.n	8005212 <HAL_TIM_PWM_Start+0xd6>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005210:	e013      	b.n	800523a <HAL_TIM_PWM_Start+0xfe>
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b0c      	cmp	r3, #12
 8005216:	d104      	bne.n	8005222 <HAL_TIM_PWM_Start+0xe6>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2202      	movs	r2, #2
 800521c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005220:	e00b      	b.n	800523a <HAL_TIM_PWM_Start+0xfe>
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b10      	cmp	r3, #16
 8005226:	d104      	bne.n	8005232 <HAL_TIM_PWM_Start+0xf6>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2202      	movs	r2, #2
 800522c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005230:	e003      	b.n	800523a <HAL_TIM_PWM_Start+0xfe>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2202      	movs	r2, #2
 8005236:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2201      	movs	r2, #1
 8005240:	6839      	ldr	r1, [r7, #0]
 8005242:	4618      	mov	r0, r3
 8005244:	f001 f8a8 	bl	8006398 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a3a      	ldr	r2, [pc, #232]	; (8005338 <HAL_TIM_PWM_Start+0x1fc>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d018      	beq.n	8005284 <HAL_TIM_PWM_Start+0x148>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a39      	ldr	r2, [pc, #228]	; (800533c <HAL_TIM_PWM_Start+0x200>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d013      	beq.n	8005284 <HAL_TIM_PWM_Start+0x148>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a37      	ldr	r2, [pc, #220]	; (8005340 <HAL_TIM_PWM_Start+0x204>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d00e      	beq.n	8005284 <HAL_TIM_PWM_Start+0x148>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a36      	ldr	r2, [pc, #216]	; (8005344 <HAL_TIM_PWM_Start+0x208>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d009      	beq.n	8005284 <HAL_TIM_PWM_Start+0x148>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a34      	ldr	r2, [pc, #208]	; (8005348 <HAL_TIM_PWM_Start+0x20c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d004      	beq.n	8005284 <HAL_TIM_PWM_Start+0x148>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a33      	ldr	r2, [pc, #204]	; (800534c <HAL_TIM_PWM_Start+0x210>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d101      	bne.n	8005288 <HAL_TIM_PWM_Start+0x14c>
 8005284:	2301      	movs	r3, #1
 8005286:	e000      	b.n	800528a <HAL_TIM_PWM_Start+0x14e>
 8005288:	2300      	movs	r3, #0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d007      	beq.n	800529e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800529c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a25      	ldr	r2, [pc, #148]	; (8005338 <HAL_TIM_PWM_Start+0x1fc>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d022      	beq.n	80052ee <HAL_TIM_PWM_Start+0x1b2>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b0:	d01d      	beq.n	80052ee <HAL_TIM_PWM_Start+0x1b2>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a26      	ldr	r2, [pc, #152]	; (8005350 <HAL_TIM_PWM_Start+0x214>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d018      	beq.n	80052ee <HAL_TIM_PWM_Start+0x1b2>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a24      	ldr	r2, [pc, #144]	; (8005354 <HAL_TIM_PWM_Start+0x218>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d013      	beq.n	80052ee <HAL_TIM_PWM_Start+0x1b2>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a23      	ldr	r2, [pc, #140]	; (8005358 <HAL_TIM_PWM_Start+0x21c>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d00e      	beq.n	80052ee <HAL_TIM_PWM_Start+0x1b2>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a19      	ldr	r2, [pc, #100]	; (800533c <HAL_TIM_PWM_Start+0x200>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d009      	beq.n	80052ee <HAL_TIM_PWM_Start+0x1b2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a18      	ldr	r2, [pc, #96]	; (8005340 <HAL_TIM_PWM_Start+0x204>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d004      	beq.n	80052ee <HAL_TIM_PWM_Start+0x1b2>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a18      	ldr	r2, [pc, #96]	; (800534c <HAL_TIM_PWM_Start+0x210>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d115      	bne.n	800531a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	4b19      	ldr	r3, [pc, #100]	; (800535c <HAL_TIM_PWM_Start+0x220>)
 80052f6:	4013      	ands	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2b06      	cmp	r3, #6
 80052fe:	d015      	beq.n	800532c <HAL_TIM_PWM_Start+0x1f0>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005306:	d011      	beq.n	800532c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0201 	orr.w	r2, r2, #1
 8005316:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005318:	e008      	b.n	800532c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f042 0201 	orr.w	r2, r2, #1
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	e000      	b.n	800532e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800532c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	40012c00 	.word	0x40012c00
 800533c:	40013400 	.word	0x40013400
 8005340:	40014000 	.word	0x40014000
 8005344:	40014400 	.word	0x40014400
 8005348:	40014800 	.word	0x40014800
 800534c:	40015000 	.word	0x40015000
 8005350:	40000400 	.word	0x40000400
 8005354:	40000800 	.word	0x40000800
 8005358:	40000c00 	.word	0x40000c00
 800535c:	00010007 	.word	0x00010007

08005360 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d020      	beq.n	80053c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d01b      	beq.n	80053c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f06f 0202 	mvn.w	r2, #2
 8005394:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	f003 0303 	and.w	r3, r3, #3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fb5c 	bl	8005a68 <HAL_TIM_IC_CaptureCallback>
 80053b0:	e005      	b.n	80053be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fb4e 	bl	8005a54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 fb5f 	bl	8005a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f003 0304 	and.w	r3, r3, #4
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d020      	beq.n	8005410 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f003 0304 	and.w	r3, r3, #4
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d01b      	beq.n	8005410 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f06f 0204 	mvn.w	r2, #4
 80053e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2202      	movs	r2, #2
 80053e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 fb36 	bl	8005a68 <HAL_TIM_IC_CaptureCallback>
 80053fc:	e005      	b.n	800540a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 fb28 	bl	8005a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fb39 	bl	8005a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	f003 0308 	and.w	r3, r3, #8
 8005416:	2b00      	cmp	r3, #0
 8005418:	d020      	beq.n	800545c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f003 0308 	and.w	r3, r3, #8
 8005420:	2b00      	cmp	r3, #0
 8005422:	d01b      	beq.n	800545c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f06f 0208 	mvn.w	r2, #8
 800542c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2204      	movs	r2, #4
 8005432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	f003 0303 	and.w	r3, r3, #3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 fb10 	bl	8005a68 <HAL_TIM_IC_CaptureCallback>
 8005448:	e005      	b.n	8005456 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 fb02 	bl	8005a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 fb13 	bl	8005a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	f003 0310 	and.w	r3, r3, #16
 8005462:	2b00      	cmp	r3, #0
 8005464:	d020      	beq.n	80054a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f003 0310 	and.w	r3, r3, #16
 800546c:	2b00      	cmp	r3, #0
 800546e:	d01b      	beq.n	80054a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f06f 0210 	mvn.w	r2, #16
 8005478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2208      	movs	r2, #8
 800547e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800548a:	2b00      	cmp	r3, #0
 800548c:	d003      	beq.n	8005496 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 faea 	bl	8005a68 <HAL_TIM_IC_CaptureCallback>
 8005494:	e005      	b.n	80054a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 fadc 	bl	8005a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 faed 	bl	8005a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00c      	beq.n	80054cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d007      	beq.n	80054cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f06f 0201 	mvn.w	r2, #1
 80054c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7fb fbc0 	bl	8000c4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d104      	bne.n	80054e0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00c      	beq.n	80054fa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d007      	beq.n	80054fa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80054f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f001 f815 	bl	8006524 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00c      	beq.n	800551e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550a:	2b00      	cmp	r3, #0
 800550c:	d007      	beq.n	800551e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f001 f80d 	bl	8006538 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00c      	beq.n	8005542 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552e:	2b00      	cmp	r3, #0
 8005530:	d007      	beq.n	8005542 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800553a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 faa7 	bl	8005a90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	f003 0320 	and.w	r3, r3, #32
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00c      	beq.n	8005566 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f003 0320 	and.w	r3, r3, #32
 8005552:	2b00      	cmp	r3, #0
 8005554:	d007      	beq.n	8005566 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f06f 0220 	mvn.w	r2, #32
 800555e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 ffd5 	bl	8006510 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00c      	beq.n	800558a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d007      	beq.n	800558a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 ffe1 	bl	800654c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00c      	beq.n	80055ae <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d007      	beq.n	80055ae <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80055a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 ffd9 	bl	8006560 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00c      	beq.n	80055d2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d007      	beq.n	80055d2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80055ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 ffd1 	bl	8006574 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00c      	beq.n	80055f6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d007      	beq.n	80055f6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80055ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 ffc9 	bl	8006588 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055f6:	bf00      	nop
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
	...

08005600 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800560c:	2300      	movs	r3, #0
 800560e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005616:	2b01      	cmp	r3, #1
 8005618:	d101      	bne.n	800561e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800561a:	2302      	movs	r3, #2
 800561c:	e0ff      	b.n	800581e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b14      	cmp	r3, #20
 800562a:	f200 80f0 	bhi.w	800580e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800562e:	a201      	add	r2, pc, #4	; (adr r2, 8005634 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005634:	08005689 	.word	0x08005689
 8005638:	0800580f 	.word	0x0800580f
 800563c:	0800580f 	.word	0x0800580f
 8005640:	0800580f 	.word	0x0800580f
 8005644:	080056c9 	.word	0x080056c9
 8005648:	0800580f 	.word	0x0800580f
 800564c:	0800580f 	.word	0x0800580f
 8005650:	0800580f 	.word	0x0800580f
 8005654:	0800570b 	.word	0x0800570b
 8005658:	0800580f 	.word	0x0800580f
 800565c:	0800580f 	.word	0x0800580f
 8005660:	0800580f 	.word	0x0800580f
 8005664:	0800574b 	.word	0x0800574b
 8005668:	0800580f 	.word	0x0800580f
 800566c:	0800580f 	.word	0x0800580f
 8005670:	0800580f 	.word	0x0800580f
 8005674:	0800578d 	.word	0x0800578d
 8005678:	0800580f 	.word	0x0800580f
 800567c:	0800580f 	.word	0x0800580f
 8005680:	0800580f 	.word	0x0800580f
 8005684:	080057cd 	.word	0x080057cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68b9      	ldr	r1, [r7, #8]
 800568e:	4618      	mov	r0, r3
 8005690:	f000 fabc 	bl	8005c0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	699a      	ldr	r2, [r3, #24]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f042 0208 	orr.w	r2, r2, #8
 80056a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699a      	ldr	r2, [r3, #24]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 0204 	bic.w	r2, r2, #4
 80056b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6999      	ldr	r1, [r3, #24]
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	691a      	ldr	r2, [r3, #16]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	619a      	str	r2, [r3, #24]
      break;
 80056c6:	e0a5      	b.n	8005814 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68b9      	ldr	r1, [r7, #8]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 fb36 	bl	8005d40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	699a      	ldr	r2, [r3, #24]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	699a      	ldr	r2, [r3, #24]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6999      	ldr	r1, [r3, #24]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	021a      	lsls	r2, r3, #8
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	430a      	orrs	r2, r1
 8005706:	619a      	str	r2, [r3, #24]
      break;
 8005708:	e084      	b.n	8005814 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68b9      	ldr	r1, [r7, #8]
 8005710:	4618      	mov	r0, r3
 8005712:	f000 fba9 	bl	8005e68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69da      	ldr	r2, [r3, #28]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f042 0208 	orr.w	r2, r2, #8
 8005724:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	69da      	ldr	r2, [r3, #28]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 0204 	bic.w	r2, r2, #4
 8005734:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	69d9      	ldr	r1, [r3, #28]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	691a      	ldr	r2, [r3, #16]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	430a      	orrs	r2, r1
 8005746:	61da      	str	r2, [r3, #28]
      break;
 8005748:	e064      	b.n	8005814 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68b9      	ldr	r1, [r7, #8]
 8005750:	4618      	mov	r0, r3
 8005752:	f000 fc1b 	bl	8005f8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	69da      	ldr	r2, [r3, #28]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005764:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	69da      	ldr	r2, [r3, #28]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	69d9      	ldr	r1, [r3, #28]
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	021a      	lsls	r2, r3, #8
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	430a      	orrs	r2, r1
 8005788:	61da      	str	r2, [r3, #28]
      break;
 800578a:	e043      	b.n	8005814 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68b9      	ldr	r1, [r7, #8]
 8005792:	4618      	mov	r0, r3
 8005794:	f000 fc8e 	bl	80060b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f042 0208 	orr.w	r2, r2, #8
 80057a6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 0204 	bic.w	r2, r2, #4
 80057b6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	691a      	ldr	r2, [r3, #16]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	430a      	orrs	r2, r1
 80057c8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80057ca:	e023      	b.n	8005814 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68b9      	ldr	r1, [r7, #8]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 fcd8 	bl	8006188 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057f6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	021a      	lsls	r2, r3, #8
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	430a      	orrs	r2, r1
 800580a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800580c:	e002      	b.n	8005814 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	75fb      	strb	r3, [r7, #23]
      break;
 8005812:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800581c:	7dfb      	ldrb	r3, [r7, #23]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3718      	adds	r7, #24
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop

08005828 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005832:	2300      	movs	r3, #0
 8005834:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_TIM_ConfigClockSource+0x1c>
 8005840:	2302      	movs	r3, #2
 8005842:	e0f6      	b.n	8005a32 <HAL_TIM_ConfigClockSource+0x20a>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2202      	movs	r2, #2
 8005850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005862:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800586e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a6f      	ldr	r2, [pc, #444]	; (8005a3c <HAL_TIM_ConfigClockSource+0x214>)
 800587e:	4293      	cmp	r3, r2
 8005880:	f000 80c1 	beq.w	8005a06 <HAL_TIM_ConfigClockSource+0x1de>
 8005884:	4a6d      	ldr	r2, [pc, #436]	; (8005a3c <HAL_TIM_ConfigClockSource+0x214>)
 8005886:	4293      	cmp	r3, r2
 8005888:	f200 80c6 	bhi.w	8005a18 <HAL_TIM_ConfigClockSource+0x1f0>
 800588c:	4a6c      	ldr	r2, [pc, #432]	; (8005a40 <HAL_TIM_ConfigClockSource+0x218>)
 800588e:	4293      	cmp	r3, r2
 8005890:	f000 80b9 	beq.w	8005a06 <HAL_TIM_ConfigClockSource+0x1de>
 8005894:	4a6a      	ldr	r2, [pc, #424]	; (8005a40 <HAL_TIM_ConfigClockSource+0x218>)
 8005896:	4293      	cmp	r3, r2
 8005898:	f200 80be 	bhi.w	8005a18 <HAL_TIM_ConfigClockSource+0x1f0>
 800589c:	4a69      	ldr	r2, [pc, #420]	; (8005a44 <HAL_TIM_ConfigClockSource+0x21c>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	f000 80b1 	beq.w	8005a06 <HAL_TIM_ConfigClockSource+0x1de>
 80058a4:	4a67      	ldr	r2, [pc, #412]	; (8005a44 <HAL_TIM_ConfigClockSource+0x21c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	f200 80b6 	bhi.w	8005a18 <HAL_TIM_ConfigClockSource+0x1f0>
 80058ac:	4a66      	ldr	r2, [pc, #408]	; (8005a48 <HAL_TIM_ConfigClockSource+0x220>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	f000 80a9 	beq.w	8005a06 <HAL_TIM_ConfigClockSource+0x1de>
 80058b4:	4a64      	ldr	r2, [pc, #400]	; (8005a48 <HAL_TIM_ConfigClockSource+0x220>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	f200 80ae 	bhi.w	8005a18 <HAL_TIM_ConfigClockSource+0x1f0>
 80058bc:	4a63      	ldr	r2, [pc, #396]	; (8005a4c <HAL_TIM_ConfigClockSource+0x224>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	f000 80a1 	beq.w	8005a06 <HAL_TIM_ConfigClockSource+0x1de>
 80058c4:	4a61      	ldr	r2, [pc, #388]	; (8005a4c <HAL_TIM_ConfigClockSource+0x224>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	f200 80a6 	bhi.w	8005a18 <HAL_TIM_ConfigClockSource+0x1f0>
 80058cc:	4a60      	ldr	r2, [pc, #384]	; (8005a50 <HAL_TIM_ConfigClockSource+0x228>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	f000 8099 	beq.w	8005a06 <HAL_TIM_ConfigClockSource+0x1de>
 80058d4:	4a5e      	ldr	r2, [pc, #376]	; (8005a50 <HAL_TIM_ConfigClockSource+0x228>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	f200 809e 	bhi.w	8005a18 <HAL_TIM_ConfigClockSource+0x1f0>
 80058dc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80058e0:	f000 8091 	beq.w	8005a06 <HAL_TIM_ConfigClockSource+0x1de>
 80058e4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80058e8:	f200 8096 	bhi.w	8005a18 <HAL_TIM_ConfigClockSource+0x1f0>
 80058ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058f0:	f000 8089 	beq.w	8005a06 <HAL_TIM_ConfigClockSource+0x1de>
 80058f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058f8:	f200 808e 	bhi.w	8005a18 <HAL_TIM_ConfigClockSource+0x1f0>
 80058fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005900:	d03e      	beq.n	8005980 <HAL_TIM_ConfigClockSource+0x158>
 8005902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005906:	f200 8087 	bhi.w	8005a18 <HAL_TIM_ConfigClockSource+0x1f0>
 800590a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800590e:	f000 8086 	beq.w	8005a1e <HAL_TIM_ConfigClockSource+0x1f6>
 8005912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005916:	d87f      	bhi.n	8005a18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005918:	2b70      	cmp	r3, #112	; 0x70
 800591a:	d01a      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0x12a>
 800591c:	2b70      	cmp	r3, #112	; 0x70
 800591e:	d87b      	bhi.n	8005a18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005920:	2b60      	cmp	r3, #96	; 0x60
 8005922:	d050      	beq.n	80059c6 <HAL_TIM_ConfigClockSource+0x19e>
 8005924:	2b60      	cmp	r3, #96	; 0x60
 8005926:	d877      	bhi.n	8005a18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005928:	2b50      	cmp	r3, #80	; 0x50
 800592a:	d03c      	beq.n	80059a6 <HAL_TIM_ConfigClockSource+0x17e>
 800592c:	2b50      	cmp	r3, #80	; 0x50
 800592e:	d873      	bhi.n	8005a18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005930:	2b40      	cmp	r3, #64	; 0x40
 8005932:	d058      	beq.n	80059e6 <HAL_TIM_ConfigClockSource+0x1be>
 8005934:	2b40      	cmp	r3, #64	; 0x40
 8005936:	d86f      	bhi.n	8005a18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005938:	2b30      	cmp	r3, #48	; 0x30
 800593a:	d064      	beq.n	8005a06 <HAL_TIM_ConfigClockSource+0x1de>
 800593c:	2b30      	cmp	r3, #48	; 0x30
 800593e:	d86b      	bhi.n	8005a18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005940:	2b20      	cmp	r3, #32
 8005942:	d060      	beq.n	8005a06 <HAL_TIM_ConfigClockSource+0x1de>
 8005944:	2b20      	cmp	r3, #32
 8005946:	d867      	bhi.n	8005a18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005948:	2b00      	cmp	r3, #0
 800594a:	d05c      	beq.n	8005a06 <HAL_TIM_ConfigClockSource+0x1de>
 800594c:	2b10      	cmp	r3, #16
 800594e:	d05a      	beq.n	8005a06 <HAL_TIM_ConfigClockSource+0x1de>
 8005950:	e062      	b.n	8005a18 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005962:	f000 fcf9 	bl	8006358 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005974:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	609a      	str	r2, [r3, #8]
      break;
 800597e:	e04f      	b.n	8005a20 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005990:	f000 fce2 	bl	8006358 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	689a      	ldr	r2, [r3, #8]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059a2:	609a      	str	r2, [r3, #8]
      break;
 80059a4:	e03c      	b.n	8005a20 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059b2:	461a      	mov	r2, r3
 80059b4:	f000 fc54 	bl	8006260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2150      	movs	r1, #80	; 0x50
 80059be:	4618      	mov	r0, r3
 80059c0:	f000 fcad 	bl	800631e <TIM_ITRx_SetConfig>
      break;
 80059c4:	e02c      	b.n	8005a20 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80059d2:	461a      	mov	r2, r3
 80059d4:	f000 fc73 	bl	80062be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2160      	movs	r1, #96	; 0x60
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 fc9d 	bl	800631e <TIM_ITRx_SetConfig>
      break;
 80059e4:	e01c      	b.n	8005a20 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059f2:	461a      	mov	r2, r3
 80059f4:	f000 fc34 	bl	8006260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2140      	movs	r1, #64	; 0x40
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 fc8d 	bl	800631e <TIM_ITRx_SetConfig>
      break;
 8005a04:	e00c      	b.n	8005a20 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4619      	mov	r1, r3
 8005a10:	4610      	mov	r0, r2
 8005a12:	f000 fc84 	bl	800631e <TIM_ITRx_SetConfig>
      break;
 8005a16:	e003      	b.n	8005a20 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a1c:	e000      	b.n	8005a20 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005a1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	00100070 	.word	0x00100070
 8005a40:	00100060 	.word	0x00100060
 8005a44:	00100050 	.word	0x00100050
 8005a48:	00100040 	.word	0x00100040
 8005a4c:	00100030 	.word	0x00100030
 8005a50:	00100020 	.word	0x00100020

08005a54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a4c      	ldr	r2, [pc, #304]	; (8005be8 <TIM_Base_SetConfig+0x144>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d017      	beq.n	8005aec <TIM_Base_SetConfig+0x48>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ac2:	d013      	beq.n	8005aec <TIM_Base_SetConfig+0x48>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a49      	ldr	r2, [pc, #292]	; (8005bec <TIM_Base_SetConfig+0x148>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d00f      	beq.n	8005aec <TIM_Base_SetConfig+0x48>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a48      	ldr	r2, [pc, #288]	; (8005bf0 <TIM_Base_SetConfig+0x14c>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d00b      	beq.n	8005aec <TIM_Base_SetConfig+0x48>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a47      	ldr	r2, [pc, #284]	; (8005bf4 <TIM_Base_SetConfig+0x150>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d007      	beq.n	8005aec <TIM_Base_SetConfig+0x48>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a46      	ldr	r2, [pc, #280]	; (8005bf8 <TIM_Base_SetConfig+0x154>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d003      	beq.n	8005aec <TIM_Base_SetConfig+0x48>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a45      	ldr	r2, [pc, #276]	; (8005bfc <TIM_Base_SetConfig+0x158>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d108      	bne.n	8005afe <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a39      	ldr	r2, [pc, #228]	; (8005be8 <TIM_Base_SetConfig+0x144>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d023      	beq.n	8005b4e <TIM_Base_SetConfig+0xaa>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b0c:	d01f      	beq.n	8005b4e <TIM_Base_SetConfig+0xaa>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a36      	ldr	r2, [pc, #216]	; (8005bec <TIM_Base_SetConfig+0x148>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d01b      	beq.n	8005b4e <TIM_Base_SetConfig+0xaa>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a35      	ldr	r2, [pc, #212]	; (8005bf0 <TIM_Base_SetConfig+0x14c>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d017      	beq.n	8005b4e <TIM_Base_SetConfig+0xaa>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a34      	ldr	r2, [pc, #208]	; (8005bf4 <TIM_Base_SetConfig+0x150>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d013      	beq.n	8005b4e <TIM_Base_SetConfig+0xaa>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a33      	ldr	r2, [pc, #204]	; (8005bf8 <TIM_Base_SetConfig+0x154>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d00f      	beq.n	8005b4e <TIM_Base_SetConfig+0xaa>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a33      	ldr	r2, [pc, #204]	; (8005c00 <TIM_Base_SetConfig+0x15c>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d00b      	beq.n	8005b4e <TIM_Base_SetConfig+0xaa>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a32      	ldr	r2, [pc, #200]	; (8005c04 <TIM_Base_SetConfig+0x160>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d007      	beq.n	8005b4e <TIM_Base_SetConfig+0xaa>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a31      	ldr	r2, [pc, #196]	; (8005c08 <TIM_Base_SetConfig+0x164>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d003      	beq.n	8005b4e <TIM_Base_SetConfig+0xaa>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a2c      	ldr	r2, [pc, #176]	; (8005bfc <TIM_Base_SetConfig+0x158>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d108      	bne.n	8005b60 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	689a      	ldr	r2, [r3, #8]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a18      	ldr	r2, [pc, #96]	; (8005be8 <TIM_Base_SetConfig+0x144>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d013      	beq.n	8005bb4 <TIM_Base_SetConfig+0x110>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a1a      	ldr	r2, [pc, #104]	; (8005bf8 <TIM_Base_SetConfig+0x154>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d00f      	beq.n	8005bb4 <TIM_Base_SetConfig+0x110>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a1a      	ldr	r2, [pc, #104]	; (8005c00 <TIM_Base_SetConfig+0x15c>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d00b      	beq.n	8005bb4 <TIM_Base_SetConfig+0x110>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a19      	ldr	r2, [pc, #100]	; (8005c04 <TIM_Base_SetConfig+0x160>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d007      	beq.n	8005bb4 <TIM_Base_SetConfig+0x110>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a18      	ldr	r2, [pc, #96]	; (8005c08 <TIM_Base_SetConfig+0x164>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d003      	beq.n	8005bb4 <TIM_Base_SetConfig+0x110>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a13      	ldr	r2, [pc, #76]	; (8005bfc <TIM_Base_SetConfig+0x158>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d103      	bne.n	8005bbc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	691a      	ldr	r2, [r3, #16]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d105      	bne.n	8005bda <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	f023 0201 	bic.w	r2, r3, #1
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	611a      	str	r2, [r3, #16]
  }
}
 8005bda:	bf00      	nop
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	40012c00 	.word	0x40012c00
 8005bec:	40000400 	.word	0x40000400
 8005bf0:	40000800 	.word	0x40000800
 8005bf4:	40000c00 	.word	0x40000c00
 8005bf8:	40013400 	.word	0x40013400
 8005bfc:	40015000 	.word	0x40015000
 8005c00:	40014000 	.word	0x40014000
 8005c04:	40014400 	.word	0x40014400
 8005c08:	40014800 	.word	0x40014800

08005c0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b087      	sub	sp, #28
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a1b      	ldr	r3, [r3, #32]
 8005c20:	f023 0201 	bic.w	r2, r3, #1
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f023 0303 	bic.w	r3, r3, #3
 8005c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f023 0302 	bic.w	r3, r3, #2
 8005c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a30      	ldr	r2, [pc, #192]	; (8005d28 <TIM_OC1_SetConfig+0x11c>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d013      	beq.n	8005c94 <TIM_OC1_SetConfig+0x88>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a2f      	ldr	r2, [pc, #188]	; (8005d2c <TIM_OC1_SetConfig+0x120>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d00f      	beq.n	8005c94 <TIM_OC1_SetConfig+0x88>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a2e      	ldr	r2, [pc, #184]	; (8005d30 <TIM_OC1_SetConfig+0x124>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d00b      	beq.n	8005c94 <TIM_OC1_SetConfig+0x88>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a2d      	ldr	r2, [pc, #180]	; (8005d34 <TIM_OC1_SetConfig+0x128>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d007      	beq.n	8005c94 <TIM_OC1_SetConfig+0x88>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a2c      	ldr	r2, [pc, #176]	; (8005d38 <TIM_OC1_SetConfig+0x12c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d003      	beq.n	8005c94 <TIM_OC1_SetConfig+0x88>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a2b      	ldr	r2, [pc, #172]	; (8005d3c <TIM_OC1_SetConfig+0x130>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d10c      	bne.n	8005cae <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f023 0308 	bic.w	r3, r3, #8
 8005c9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f023 0304 	bic.w	r3, r3, #4
 8005cac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a1d      	ldr	r2, [pc, #116]	; (8005d28 <TIM_OC1_SetConfig+0x11c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d013      	beq.n	8005cde <TIM_OC1_SetConfig+0xd2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a1c      	ldr	r2, [pc, #112]	; (8005d2c <TIM_OC1_SetConfig+0x120>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d00f      	beq.n	8005cde <TIM_OC1_SetConfig+0xd2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a1b      	ldr	r2, [pc, #108]	; (8005d30 <TIM_OC1_SetConfig+0x124>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d00b      	beq.n	8005cde <TIM_OC1_SetConfig+0xd2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a1a      	ldr	r2, [pc, #104]	; (8005d34 <TIM_OC1_SetConfig+0x128>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d007      	beq.n	8005cde <TIM_OC1_SetConfig+0xd2>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a19      	ldr	r2, [pc, #100]	; (8005d38 <TIM_OC1_SetConfig+0x12c>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d003      	beq.n	8005cde <TIM_OC1_SetConfig+0xd2>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a18      	ldr	r2, [pc, #96]	; (8005d3c <TIM_OC1_SetConfig+0x130>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d111      	bne.n	8005d02 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	621a      	str	r2, [r3, #32]
}
 8005d1c:	bf00      	nop
 8005d1e:	371c      	adds	r7, #28
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	40012c00 	.word	0x40012c00
 8005d2c:	40013400 	.word	0x40013400
 8005d30:	40014000 	.word	0x40014000
 8005d34:	40014400 	.word	0x40014400
 8005d38:	40014800 	.word	0x40014800
 8005d3c:	40015000 	.word	0x40015000

08005d40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b087      	sub	sp, #28
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	f023 0210 	bic.w	r2, r3, #16
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	021b      	lsls	r3, r3, #8
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	f023 0320 	bic.w	r3, r3, #32
 8005d8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	011b      	lsls	r3, r3, #4
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a2c      	ldr	r2, [pc, #176]	; (8005e50 <TIM_OC2_SetConfig+0x110>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d007      	beq.n	8005db4 <TIM_OC2_SetConfig+0x74>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a2b      	ldr	r2, [pc, #172]	; (8005e54 <TIM_OC2_SetConfig+0x114>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d003      	beq.n	8005db4 <TIM_OC2_SetConfig+0x74>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a2a      	ldr	r2, [pc, #168]	; (8005e58 <TIM_OC2_SetConfig+0x118>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d10d      	bne.n	8005dd0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	011b      	lsls	r3, r3, #4
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a1f      	ldr	r2, [pc, #124]	; (8005e50 <TIM_OC2_SetConfig+0x110>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d013      	beq.n	8005e00 <TIM_OC2_SetConfig+0xc0>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a1e      	ldr	r2, [pc, #120]	; (8005e54 <TIM_OC2_SetConfig+0x114>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d00f      	beq.n	8005e00 <TIM_OC2_SetConfig+0xc0>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a1e      	ldr	r2, [pc, #120]	; (8005e5c <TIM_OC2_SetConfig+0x11c>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d00b      	beq.n	8005e00 <TIM_OC2_SetConfig+0xc0>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a1d      	ldr	r2, [pc, #116]	; (8005e60 <TIM_OC2_SetConfig+0x120>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d007      	beq.n	8005e00 <TIM_OC2_SetConfig+0xc0>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a1c      	ldr	r2, [pc, #112]	; (8005e64 <TIM_OC2_SetConfig+0x124>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d003      	beq.n	8005e00 <TIM_OC2_SetConfig+0xc0>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a17      	ldr	r2, [pc, #92]	; (8005e58 <TIM_OC2_SetConfig+0x118>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d113      	bne.n	8005e28 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	695b      	ldr	r3, [r3, #20]
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	621a      	str	r2, [r3, #32]
}
 8005e42:	bf00      	nop
 8005e44:	371c      	adds	r7, #28
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	40012c00 	.word	0x40012c00
 8005e54:	40013400 	.word	0x40013400
 8005e58:	40015000 	.word	0x40015000
 8005e5c:	40014000 	.word	0x40014000
 8005e60:	40014400 	.word	0x40014400
 8005e64:	40014800 	.word	0x40014800

08005e68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a1b      	ldr	r3, [r3, #32]
 8005e7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f023 0303 	bic.w	r3, r3, #3
 8005ea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005eb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	021b      	lsls	r3, r3, #8
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a2b      	ldr	r2, [pc, #172]	; (8005f74 <TIM_OC3_SetConfig+0x10c>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d007      	beq.n	8005eda <TIM_OC3_SetConfig+0x72>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a2a      	ldr	r2, [pc, #168]	; (8005f78 <TIM_OC3_SetConfig+0x110>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d003      	beq.n	8005eda <TIM_OC3_SetConfig+0x72>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a29      	ldr	r2, [pc, #164]	; (8005f7c <TIM_OC3_SetConfig+0x114>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d10d      	bne.n	8005ef6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ee0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	021b      	lsls	r3, r3, #8
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ef4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a1e      	ldr	r2, [pc, #120]	; (8005f74 <TIM_OC3_SetConfig+0x10c>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d013      	beq.n	8005f26 <TIM_OC3_SetConfig+0xbe>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a1d      	ldr	r2, [pc, #116]	; (8005f78 <TIM_OC3_SetConfig+0x110>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d00f      	beq.n	8005f26 <TIM_OC3_SetConfig+0xbe>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a1d      	ldr	r2, [pc, #116]	; (8005f80 <TIM_OC3_SetConfig+0x118>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d00b      	beq.n	8005f26 <TIM_OC3_SetConfig+0xbe>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a1c      	ldr	r2, [pc, #112]	; (8005f84 <TIM_OC3_SetConfig+0x11c>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d007      	beq.n	8005f26 <TIM_OC3_SetConfig+0xbe>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a1b      	ldr	r2, [pc, #108]	; (8005f88 <TIM_OC3_SetConfig+0x120>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d003      	beq.n	8005f26 <TIM_OC3_SetConfig+0xbe>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a16      	ldr	r2, [pc, #88]	; (8005f7c <TIM_OC3_SetConfig+0x114>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d113      	bne.n	8005f4e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	011b      	lsls	r3, r3, #4
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	011b      	lsls	r3, r3, #4
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	621a      	str	r2, [r3, #32]
}
 8005f68:	bf00      	nop
 8005f6a:	371c      	adds	r7, #28
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	40012c00 	.word	0x40012c00
 8005f78:	40013400 	.word	0x40013400
 8005f7c:	40015000 	.word	0x40015000
 8005f80:	40014000 	.word	0x40014000
 8005f84:	40014400 	.word	0x40014400
 8005f88:	40014800 	.word	0x40014800

08005f8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b087      	sub	sp, #28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a1b      	ldr	r3, [r3, #32]
 8005fa0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	69db      	ldr	r3, [r3, #28]
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	021b      	lsls	r3, r3, #8
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	031b      	lsls	r3, r3, #12
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a2c      	ldr	r2, [pc, #176]	; (800609c <TIM_OC4_SetConfig+0x110>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d007      	beq.n	8006000 <TIM_OC4_SetConfig+0x74>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a2b      	ldr	r2, [pc, #172]	; (80060a0 <TIM_OC4_SetConfig+0x114>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d003      	beq.n	8006000 <TIM_OC4_SetConfig+0x74>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a2a      	ldr	r2, [pc, #168]	; (80060a4 <TIM_OC4_SetConfig+0x118>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d10d      	bne.n	800601c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006006:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	031b      	lsls	r3, r3, #12
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	4313      	orrs	r3, r2
 8006012:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800601a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a1f      	ldr	r2, [pc, #124]	; (800609c <TIM_OC4_SetConfig+0x110>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d013      	beq.n	800604c <TIM_OC4_SetConfig+0xc0>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a1e      	ldr	r2, [pc, #120]	; (80060a0 <TIM_OC4_SetConfig+0x114>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d00f      	beq.n	800604c <TIM_OC4_SetConfig+0xc0>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a1e      	ldr	r2, [pc, #120]	; (80060a8 <TIM_OC4_SetConfig+0x11c>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d00b      	beq.n	800604c <TIM_OC4_SetConfig+0xc0>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a1d      	ldr	r2, [pc, #116]	; (80060ac <TIM_OC4_SetConfig+0x120>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d007      	beq.n	800604c <TIM_OC4_SetConfig+0xc0>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a1c      	ldr	r2, [pc, #112]	; (80060b0 <TIM_OC4_SetConfig+0x124>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d003      	beq.n	800604c <TIM_OC4_SetConfig+0xc0>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a17      	ldr	r2, [pc, #92]	; (80060a4 <TIM_OC4_SetConfig+0x118>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d113      	bne.n	8006074 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006052:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800605a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	019b      	lsls	r3, r3, #6
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	4313      	orrs	r3, r2
 8006066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	019b      	lsls	r3, r3, #6
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	4313      	orrs	r3, r2
 8006072:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	621a      	str	r2, [r3, #32]
}
 800608e:	bf00      	nop
 8006090:	371c      	adds	r7, #28
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	40012c00 	.word	0x40012c00
 80060a0:	40013400 	.word	0x40013400
 80060a4:	40015000 	.word	0x40015000
 80060a8:	40014000 	.word	0x40014000
 80060ac:	40014400 	.word	0x40014400
 80060b0:	40014800 	.word	0x40014800

080060b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b087      	sub	sp, #28
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a1b      	ldr	r3, [r3, #32]
 80060c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80060f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	041b      	lsls	r3, r3, #16
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	4313      	orrs	r3, r2
 8006104:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a19      	ldr	r2, [pc, #100]	; (8006170 <TIM_OC5_SetConfig+0xbc>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d013      	beq.n	8006136 <TIM_OC5_SetConfig+0x82>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a18      	ldr	r2, [pc, #96]	; (8006174 <TIM_OC5_SetConfig+0xc0>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d00f      	beq.n	8006136 <TIM_OC5_SetConfig+0x82>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a17      	ldr	r2, [pc, #92]	; (8006178 <TIM_OC5_SetConfig+0xc4>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d00b      	beq.n	8006136 <TIM_OC5_SetConfig+0x82>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a16      	ldr	r2, [pc, #88]	; (800617c <TIM_OC5_SetConfig+0xc8>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d007      	beq.n	8006136 <TIM_OC5_SetConfig+0x82>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a15      	ldr	r2, [pc, #84]	; (8006180 <TIM_OC5_SetConfig+0xcc>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d003      	beq.n	8006136 <TIM_OC5_SetConfig+0x82>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a14      	ldr	r2, [pc, #80]	; (8006184 <TIM_OC5_SetConfig+0xd0>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d109      	bne.n	800614a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800613c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	021b      	lsls	r3, r3, #8
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	4313      	orrs	r3, r2
 8006148:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	685a      	ldr	r2, [r3, #4]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	621a      	str	r2, [r3, #32]
}
 8006164:	bf00      	nop
 8006166:	371c      	adds	r7, #28
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	40012c00 	.word	0x40012c00
 8006174:	40013400 	.word	0x40013400
 8006178:	40014000 	.word	0x40014000
 800617c:	40014400 	.word	0x40014400
 8006180:	40014800 	.word	0x40014800
 8006184:	40015000 	.word	0x40015000

08006188 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006188:	b480      	push	{r7}
 800618a:	b087      	sub	sp, #28
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	021b      	lsls	r3, r3, #8
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	051b      	lsls	r3, r3, #20
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	4313      	orrs	r3, r2
 80061da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a1a      	ldr	r2, [pc, #104]	; (8006248 <TIM_OC6_SetConfig+0xc0>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d013      	beq.n	800620c <TIM_OC6_SetConfig+0x84>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a19      	ldr	r2, [pc, #100]	; (800624c <TIM_OC6_SetConfig+0xc4>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d00f      	beq.n	800620c <TIM_OC6_SetConfig+0x84>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a18      	ldr	r2, [pc, #96]	; (8006250 <TIM_OC6_SetConfig+0xc8>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d00b      	beq.n	800620c <TIM_OC6_SetConfig+0x84>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a17      	ldr	r2, [pc, #92]	; (8006254 <TIM_OC6_SetConfig+0xcc>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d007      	beq.n	800620c <TIM_OC6_SetConfig+0x84>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a16      	ldr	r2, [pc, #88]	; (8006258 <TIM_OC6_SetConfig+0xd0>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d003      	beq.n	800620c <TIM_OC6_SetConfig+0x84>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a15      	ldr	r2, [pc, #84]	; (800625c <TIM_OC6_SetConfig+0xd4>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d109      	bne.n	8006220 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006212:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	029b      	lsls	r3, r3, #10
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	4313      	orrs	r3, r2
 800621e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	621a      	str	r2, [r3, #32]
}
 800623a:	bf00      	nop
 800623c:	371c      	adds	r7, #28
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	40012c00 	.word	0x40012c00
 800624c:	40013400 	.word	0x40013400
 8006250:	40014000 	.word	0x40014000
 8006254:	40014400 	.word	0x40014400
 8006258:	40014800 	.word	0x40014800
 800625c:	40015000 	.word	0x40015000

08006260 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006260:	b480      	push	{r7}
 8006262:	b087      	sub	sp, #28
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6a1b      	ldr	r3, [r3, #32]
 8006270:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	f023 0201 	bic.w	r2, r3, #1
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800628a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	011b      	lsls	r3, r3, #4
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	4313      	orrs	r3, r2
 8006294:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f023 030a 	bic.w	r3, r3, #10
 800629c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	621a      	str	r2, [r3, #32]
}
 80062b2:	bf00      	nop
 80062b4:	371c      	adds	r7, #28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062be:	b480      	push	{r7}
 80062c0:	b087      	sub	sp, #28
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	60f8      	str	r0, [r7, #12]
 80062c6:	60b9      	str	r1, [r7, #8]
 80062c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6a1b      	ldr	r3, [r3, #32]
 80062d4:	f023 0210 	bic.w	r2, r3, #16
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	031b      	lsls	r3, r3, #12
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062fa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	011b      	lsls	r3, r3, #4
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	4313      	orrs	r3, r2
 8006304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	621a      	str	r2, [r3, #32]
}
 8006312:	bf00      	nop
 8006314:	371c      	adds	r7, #28
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800631e:	b480      	push	{r7}
 8006320:	b085      	sub	sp, #20
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
 8006326:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006338:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	4313      	orrs	r3, r2
 8006340:	f043 0307 	orr.w	r3, r3, #7
 8006344:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	609a      	str	r2, [r3, #8]
}
 800634c:	bf00      	nop
 800634e:	3714      	adds	r7, #20
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006358:	b480      	push	{r7}
 800635a:	b087      	sub	sp, #28
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
 8006364:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006372:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	021a      	lsls	r2, r3, #8
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	431a      	orrs	r2, r3
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	4313      	orrs	r3, r2
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	4313      	orrs	r3, r2
 8006384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	697a      	ldr	r2, [r7, #20]
 800638a:	609a      	str	r2, [r3, #8]
}
 800638c:	bf00      	nop
 800638e:	371c      	adds	r7, #28
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006398:	b480      	push	{r7}
 800639a:	b087      	sub	sp, #28
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	f003 031f 	and.w	r3, r3, #31
 80063aa:	2201      	movs	r2, #1
 80063ac:	fa02 f303 	lsl.w	r3, r2, r3
 80063b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6a1a      	ldr	r2, [r3, #32]
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	43db      	mvns	r3, r3
 80063ba:	401a      	ands	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6a1a      	ldr	r2, [r3, #32]
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	f003 031f 	and.w	r3, r3, #31
 80063ca:	6879      	ldr	r1, [r7, #4]
 80063cc:	fa01 f303 	lsl.w	r3, r1, r3
 80063d0:	431a      	orrs	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	621a      	str	r2, [r3, #32]
}
 80063d6:	bf00      	nop
 80063d8:	371c      	adds	r7, #28
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
	...

080063e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d101      	bne.n	80063fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063f8:	2302      	movs	r3, #2
 80063fa:	e074      	b.n	80064e6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2202      	movs	r2, #2
 8006408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a34      	ldr	r2, [pc, #208]	; (80064f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d009      	beq.n	800643a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a33      	ldr	r2, [pc, #204]	; (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d004      	beq.n	800643a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a31      	ldr	r2, [pc, #196]	; (80064fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d108      	bne.n	800644c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006440:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	4313      	orrs	r3, r2
 800644a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006456:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	4313      	orrs	r3, r2
 8006460:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a21      	ldr	r2, [pc, #132]	; (80064f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d022      	beq.n	80064ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800647c:	d01d      	beq.n	80064ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a1f      	ldr	r2, [pc, #124]	; (8006500 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d018      	beq.n	80064ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a1d      	ldr	r2, [pc, #116]	; (8006504 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d013      	beq.n	80064ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a1c      	ldr	r2, [pc, #112]	; (8006508 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d00e      	beq.n	80064ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a15      	ldr	r2, [pc, #84]	; (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d009      	beq.n	80064ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a18      	ldr	r2, [pc, #96]	; (800650c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d004      	beq.n	80064ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a11      	ldr	r2, [pc, #68]	; (80064fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d10c      	bne.n	80064d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3714      	adds	r7, #20
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	40012c00 	.word	0x40012c00
 80064f8:	40013400 	.word	0x40013400
 80064fc:	40015000 	.word	0x40015000
 8006500:	40000400 	.word	0x40000400
 8006504:	40000800 	.word	0x40000800
 8006508:	40000c00 	.word	0x40000c00
 800650c:	40014000 	.word	0x40014000

08006510 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006518:	bf00      	nop
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e042      	b.n	8006634 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d106      	bne.n	80065c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f7fa fd6d 	bl	80010a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2224      	movs	r2, #36	; 0x24
 80065ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f022 0201 	bic.w	r2, r2, #1
 80065dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d002      	beq.n	80065ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 fb24 	bl	8006c34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 f825 	bl	800663c <UART_SetConfig>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d101      	bne.n	80065fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e01b      	b.n	8006634 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	685a      	ldr	r2, [r3, #4]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800660a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	689a      	ldr	r2, [r3, #8]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800661a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f042 0201 	orr.w	r2, r2, #1
 800662a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 fba3 	bl	8006d78 <UART_CheckIdleState>
 8006632:	4603      	mov	r3, r0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3708      	adds	r7, #8
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800663c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006640:	b08c      	sub	sp, #48	; 0x30
 8006642:	af00      	add	r7, sp, #0
 8006644:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006646:	2300      	movs	r3, #0
 8006648:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	689a      	ldr	r2, [r3, #8]
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	431a      	orrs	r2, r3
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	431a      	orrs	r2, r3
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	69db      	ldr	r3, [r3, #28]
 8006660:	4313      	orrs	r3, r2
 8006662:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	4baa      	ldr	r3, [pc, #680]	; (8006914 <UART_SetConfig+0x2d8>)
 800666c:	4013      	ands	r3, r2
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	6812      	ldr	r2, [r2, #0]
 8006672:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006674:	430b      	orrs	r3, r1
 8006676:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	68da      	ldr	r2, [r3, #12]
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	430a      	orrs	r2, r1
 800668c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a9f      	ldr	r2, [pc, #636]	; (8006918 <UART_SetConfig+0x2dc>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d004      	beq.n	80066a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066a4:	4313      	orrs	r3, r2
 80066a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80066b2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	6812      	ldr	r2, [r2, #0]
 80066ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066bc:	430b      	orrs	r3, r1
 80066be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c6:	f023 010f 	bic.w	r1, r3, #15
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a90      	ldr	r2, [pc, #576]	; (800691c <UART_SetConfig+0x2e0>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d125      	bne.n	800672c <UART_SetConfig+0xf0>
 80066e0:	4b8f      	ldr	r3, [pc, #572]	; (8006920 <UART_SetConfig+0x2e4>)
 80066e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e6:	f003 0303 	and.w	r3, r3, #3
 80066ea:	2b03      	cmp	r3, #3
 80066ec:	d81a      	bhi.n	8006724 <UART_SetConfig+0xe8>
 80066ee:	a201      	add	r2, pc, #4	; (adr r2, 80066f4 <UART_SetConfig+0xb8>)
 80066f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f4:	08006705 	.word	0x08006705
 80066f8:	08006715 	.word	0x08006715
 80066fc:	0800670d 	.word	0x0800670d
 8006700:	0800671d 	.word	0x0800671d
 8006704:	2301      	movs	r3, #1
 8006706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800670a:	e116      	b.n	800693a <UART_SetConfig+0x2fe>
 800670c:	2302      	movs	r3, #2
 800670e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006712:	e112      	b.n	800693a <UART_SetConfig+0x2fe>
 8006714:	2304      	movs	r3, #4
 8006716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800671a:	e10e      	b.n	800693a <UART_SetConfig+0x2fe>
 800671c:	2308      	movs	r3, #8
 800671e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006722:	e10a      	b.n	800693a <UART_SetConfig+0x2fe>
 8006724:	2310      	movs	r3, #16
 8006726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800672a:	e106      	b.n	800693a <UART_SetConfig+0x2fe>
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a7c      	ldr	r2, [pc, #496]	; (8006924 <UART_SetConfig+0x2e8>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d138      	bne.n	80067a8 <UART_SetConfig+0x16c>
 8006736:	4b7a      	ldr	r3, [pc, #488]	; (8006920 <UART_SetConfig+0x2e4>)
 8006738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800673c:	f003 030c 	and.w	r3, r3, #12
 8006740:	2b0c      	cmp	r3, #12
 8006742:	d82d      	bhi.n	80067a0 <UART_SetConfig+0x164>
 8006744:	a201      	add	r2, pc, #4	; (adr r2, 800674c <UART_SetConfig+0x110>)
 8006746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800674a:	bf00      	nop
 800674c:	08006781 	.word	0x08006781
 8006750:	080067a1 	.word	0x080067a1
 8006754:	080067a1 	.word	0x080067a1
 8006758:	080067a1 	.word	0x080067a1
 800675c:	08006791 	.word	0x08006791
 8006760:	080067a1 	.word	0x080067a1
 8006764:	080067a1 	.word	0x080067a1
 8006768:	080067a1 	.word	0x080067a1
 800676c:	08006789 	.word	0x08006789
 8006770:	080067a1 	.word	0x080067a1
 8006774:	080067a1 	.word	0x080067a1
 8006778:	080067a1 	.word	0x080067a1
 800677c:	08006799 	.word	0x08006799
 8006780:	2300      	movs	r3, #0
 8006782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006786:	e0d8      	b.n	800693a <UART_SetConfig+0x2fe>
 8006788:	2302      	movs	r3, #2
 800678a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800678e:	e0d4      	b.n	800693a <UART_SetConfig+0x2fe>
 8006790:	2304      	movs	r3, #4
 8006792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006796:	e0d0      	b.n	800693a <UART_SetConfig+0x2fe>
 8006798:	2308      	movs	r3, #8
 800679a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800679e:	e0cc      	b.n	800693a <UART_SetConfig+0x2fe>
 80067a0:	2310      	movs	r3, #16
 80067a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067a6:	e0c8      	b.n	800693a <UART_SetConfig+0x2fe>
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a5e      	ldr	r2, [pc, #376]	; (8006928 <UART_SetConfig+0x2ec>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d125      	bne.n	80067fe <UART_SetConfig+0x1c2>
 80067b2:	4b5b      	ldr	r3, [pc, #364]	; (8006920 <UART_SetConfig+0x2e4>)
 80067b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80067bc:	2b30      	cmp	r3, #48	; 0x30
 80067be:	d016      	beq.n	80067ee <UART_SetConfig+0x1b2>
 80067c0:	2b30      	cmp	r3, #48	; 0x30
 80067c2:	d818      	bhi.n	80067f6 <UART_SetConfig+0x1ba>
 80067c4:	2b20      	cmp	r3, #32
 80067c6:	d00a      	beq.n	80067de <UART_SetConfig+0x1a2>
 80067c8:	2b20      	cmp	r3, #32
 80067ca:	d814      	bhi.n	80067f6 <UART_SetConfig+0x1ba>
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d002      	beq.n	80067d6 <UART_SetConfig+0x19a>
 80067d0:	2b10      	cmp	r3, #16
 80067d2:	d008      	beq.n	80067e6 <UART_SetConfig+0x1aa>
 80067d4:	e00f      	b.n	80067f6 <UART_SetConfig+0x1ba>
 80067d6:	2300      	movs	r3, #0
 80067d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067dc:	e0ad      	b.n	800693a <UART_SetConfig+0x2fe>
 80067de:	2302      	movs	r3, #2
 80067e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067e4:	e0a9      	b.n	800693a <UART_SetConfig+0x2fe>
 80067e6:	2304      	movs	r3, #4
 80067e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067ec:	e0a5      	b.n	800693a <UART_SetConfig+0x2fe>
 80067ee:	2308      	movs	r3, #8
 80067f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067f4:	e0a1      	b.n	800693a <UART_SetConfig+0x2fe>
 80067f6:	2310      	movs	r3, #16
 80067f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067fc:	e09d      	b.n	800693a <UART_SetConfig+0x2fe>
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a4a      	ldr	r2, [pc, #296]	; (800692c <UART_SetConfig+0x2f0>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d125      	bne.n	8006854 <UART_SetConfig+0x218>
 8006808:	4b45      	ldr	r3, [pc, #276]	; (8006920 <UART_SetConfig+0x2e4>)
 800680a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800680e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006812:	2bc0      	cmp	r3, #192	; 0xc0
 8006814:	d016      	beq.n	8006844 <UART_SetConfig+0x208>
 8006816:	2bc0      	cmp	r3, #192	; 0xc0
 8006818:	d818      	bhi.n	800684c <UART_SetConfig+0x210>
 800681a:	2b80      	cmp	r3, #128	; 0x80
 800681c:	d00a      	beq.n	8006834 <UART_SetConfig+0x1f8>
 800681e:	2b80      	cmp	r3, #128	; 0x80
 8006820:	d814      	bhi.n	800684c <UART_SetConfig+0x210>
 8006822:	2b00      	cmp	r3, #0
 8006824:	d002      	beq.n	800682c <UART_SetConfig+0x1f0>
 8006826:	2b40      	cmp	r3, #64	; 0x40
 8006828:	d008      	beq.n	800683c <UART_SetConfig+0x200>
 800682a:	e00f      	b.n	800684c <UART_SetConfig+0x210>
 800682c:	2300      	movs	r3, #0
 800682e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006832:	e082      	b.n	800693a <UART_SetConfig+0x2fe>
 8006834:	2302      	movs	r3, #2
 8006836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800683a:	e07e      	b.n	800693a <UART_SetConfig+0x2fe>
 800683c:	2304      	movs	r3, #4
 800683e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006842:	e07a      	b.n	800693a <UART_SetConfig+0x2fe>
 8006844:	2308      	movs	r3, #8
 8006846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800684a:	e076      	b.n	800693a <UART_SetConfig+0x2fe>
 800684c:	2310      	movs	r3, #16
 800684e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006852:	e072      	b.n	800693a <UART_SetConfig+0x2fe>
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a35      	ldr	r2, [pc, #212]	; (8006930 <UART_SetConfig+0x2f4>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d12a      	bne.n	80068b4 <UART_SetConfig+0x278>
 800685e:	4b30      	ldr	r3, [pc, #192]	; (8006920 <UART_SetConfig+0x2e4>)
 8006860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006864:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006868:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800686c:	d01a      	beq.n	80068a4 <UART_SetConfig+0x268>
 800686e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006872:	d81b      	bhi.n	80068ac <UART_SetConfig+0x270>
 8006874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006878:	d00c      	beq.n	8006894 <UART_SetConfig+0x258>
 800687a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800687e:	d815      	bhi.n	80068ac <UART_SetConfig+0x270>
 8006880:	2b00      	cmp	r3, #0
 8006882:	d003      	beq.n	800688c <UART_SetConfig+0x250>
 8006884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006888:	d008      	beq.n	800689c <UART_SetConfig+0x260>
 800688a:	e00f      	b.n	80068ac <UART_SetConfig+0x270>
 800688c:	2300      	movs	r3, #0
 800688e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006892:	e052      	b.n	800693a <UART_SetConfig+0x2fe>
 8006894:	2302      	movs	r3, #2
 8006896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800689a:	e04e      	b.n	800693a <UART_SetConfig+0x2fe>
 800689c:	2304      	movs	r3, #4
 800689e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068a2:	e04a      	b.n	800693a <UART_SetConfig+0x2fe>
 80068a4:	2308      	movs	r3, #8
 80068a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068aa:	e046      	b.n	800693a <UART_SetConfig+0x2fe>
 80068ac:	2310      	movs	r3, #16
 80068ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068b2:	e042      	b.n	800693a <UART_SetConfig+0x2fe>
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a17      	ldr	r2, [pc, #92]	; (8006918 <UART_SetConfig+0x2dc>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d13a      	bne.n	8006934 <UART_SetConfig+0x2f8>
 80068be:	4b18      	ldr	r3, [pc, #96]	; (8006920 <UART_SetConfig+0x2e4>)
 80068c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80068c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068cc:	d01a      	beq.n	8006904 <UART_SetConfig+0x2c8>
 80068ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068d2:	d81b      	bhi.n	800690c <UART_SetConfig+0x2d0>
 80068d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068d8:	d00c      	beq.n	80068f4 <UART_SetConfig+0x2b8>
 80068da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068de:	d815      	bhi.n	800690c <UART_SetConfig+0x2d0>
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d003      	beq.n	80068ec <UART_SetConfig+0x2b0>
 80068e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068e8:	d008      	beq.n	80068fc <UART_SetConfig+0x2c0>
 80068ea:	e00f      	b.n	800690c <UART_SetConfig+0x2d0>
 80068ec:	2300      	movs	r3, #0
 80068ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068f2:	e022      	b.n	800693a <UART_SetConfig+0x2fe>
 80068f4:	2302      	movs	r3, #2
 80068f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068fa:	e01e      	b.n	800693a <UART_SetConfig+0x2fe>
 80068fc:	2304      	movs	r3, #4
 80068fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006902:	e01a      	b.n	800693a <UART_SetConfig+0x2fe>
 8006904:	2308      	movs	r3, #8
 8006906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800690a:	e016      	b.n	800693a <UART_SetConfig+0x2fe>
 800690c:	2310      	movs	r3, #16
 800690e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006912:	e012      	b.n	800693a <UART_SetConfig+0x2fe>
 8006914:	cfff69f3 	.word	0xcfff69f3
 8006918:	40008000 	.word	0x40008000
 800691c:	40013800 	.word	0x40013800
 8006920:	40021000 	.word	0x40021000
 8006924:	40004400 	.word	0x40004400
 8006928:	40004800 	.word	0x40004800
 800692c:	40004c00 	.word	0x40004c00
 8006930:	40005000 	.word	0x40005000
 8006934:	2310      	movs	r3, #16
 8006936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4aae      	ldr	r2, [pc, #696]	; (8006bf8 <UART_SetConfig+0x5bc>)
 8006940:	4293      	cmp	r3, r2
 8006942:	f040 8097 	bne.w	8006a74 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006946:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800694a:	2b08      	cmp	r3, #8
 800694c:	d823      	bhi.n	8006996 <UART_SetConfig+0x35a>
 800694e:	a201      	add	r2, pc, #4	; (adr r2, 8006954 <UART_SetConfig+0x318>)
 8006950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006954:	08006979 	.word	0x08006979
 8006958:	08006997 	.word	0x08006997
 800695c:	08006981 	.word	0x08006981
 8006960:	08006997 	.word	0x08006997
 8006964:	08006987 	.word	0x08006987
 8006968:	08006997 	.word	0x08006997
 800696c:	08006997 	.word	0x08006997
 8006970:	08006997 	.word	0x08006997
 8006974:	0800698f 	.word	0x0800698f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006978:	f7fd ff7e 	bl	8004878 <HAL_RCC_GetPCLK1Freq>
 800697c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800697e:	e010      	b.n	80069a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006980:	4b9e      	ldr	r3, [pc, #632]	; (8006bfc <UART_SetConfig+0x5c0>)
 8006982:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006984:	e00d      	b.n	80069a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006986:	f7fd ff09 	bl	800479c <HAL_RCC_GetSysClockFreq>
 800698a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800698c:	e009      	b.n	80069a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800698e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006992:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006994:	e005      	b.n	80069a2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006996:	2300      	movs	r3, #0
 8006998:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80069a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 8130 	beq.w	8006c0a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ae:	4a94      	ldr	r2, [pc, #592]	; (8006c00 <UART_SetConfig+0x5c4>)
 80069b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069b4:	461a      	mov	r2, r3
 80069b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80069bc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	4613      	mov	r3, r2
 80069c4:	005b      	lsls	r3, r3, #1
 80069c6:	4413      	add	r3, r2
 80069c8:	69ba      	ldr	r2, [r7, #24]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d305      	bcc.n	80069da <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069d4:	69ba      	ldr	r2, [r7, #24]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d903      	bls.n	80069e2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80069e0:	e113      	b.n	8006c0a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e4:	2200      	movs	r2, #0
 80069e6:	60bb      	str	r3, [r7, #8]
 80069e8:	60fa      	str	r2, [r7, #12]
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ee:	4a84      	ldr	r2, [pc, #528]	; (8006c00 <UART_SetConfig+0x5c4>)
 80069f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	2200      	movs	r2, #0
 80069f8:	603b      	str	r3, [r7, #0]
 80069fa:	607a      	str	r2, [r7, #4]
 80069fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a04:	f7f9 fc08 	bl	8000218 <__aeabi_uldivmod>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	4610      	mov	r0, r2
 8006a0e:	4619      	mov	r1, r3
 8006a10:	f04f 0200 	mov.w	r2, #0
 8006a14:	f04f 0300 	mov.w	r3, #0
 8006a18:	020b      	lsls	r3, r1, #8
 8006a1a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006a1e:	0202      	lsls	r2, r0, #8
 8006a20:	6979      	ldr	r1, [r7, #20]
 8006a22:	6849      	ldr	r1, [r1, #4]
 8006a24:	0849      	lsrs	r1, r1, #1
 8006a26:	2000      	movs	r0, #0
 8006a28:	460c      	mov	r4, r1
 8006a2a:	4605      	mov	r5, r0
 8006a2c:	eb12 0804 	adds.w	r8, r2, r4
 8006a30:	eb43 0905 	adc.w	r9, r3, r5
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	469a      	mov	sl, r3
 8006a3c:	4693      	mov	fp, r2
 8006a3e:	4652      	mov	r2, sl
 8006a40:	465b      	mov	r3, fp
 8006a42:	4640      	mov	r0, r8
 8006a44:	4649      	mov	r1, r9
 8006a46:	f7f9 fbe7 	bl	8000218 <__aeabi_uldivmod>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	4613      	mov	r3, r2
 8006a50:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a52:	6a3b      	ldr	r3, [r7, #32]
 8006a54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a58:	d308      	bcc.n	8006a6c <UART_SetConfig+0x430>
 8006a5a:	6a3b      	ldr	r3, [r7, #32]
 8006a5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a60:	d204      	bcs.n	8006a6c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6a3a      	ldr	r2, [r7, #32]
 8006a68:	60da      	str	r2, [r3, #12]
 8006a6a:	e0ce      	b.n	8006c0a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006a72:	e0ca      	b.n	8006c0a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	69db      	ldr	r3, [r3, #28]
 8006a78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a7c:	d166      	bne.n	8006b4c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006a7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a82:	2b08      	cmp	r3, #8
 8006a84:	d827      	bhi.n	8006ad6 <UART_SetConfig+0x49a>
 8006a86:	a201      	add	r2, pc, #4	; (adr r2, 8006a8c <UART_SetConfig+0x450>)
 8006a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8c:	08006ab1 	.word	0x08006ab1
 8006a90:	08006ab9 	.word	0x08006ab9
 8006a94:	08006ac1 	.word	0x08006ac1
 8006a98:	08006ad7 	.word	0x08006ad7
 8006a9c:	08006ac7 	.word	0x08006ac7
 8006aa0:	08006ad7 	.word	0x08006ad7
 8006aa4:	08006ad7 	.word	0x08006ad7
 8006aa8:	08006ad7 	.word	0x08006ad7
 8006aac:	08006acf 	.word	0x08006acf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ab0:	f7fd fee2 	bl	8004878 <HAL_RCC_GetPCLK1Freq>
 8006ab4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ab6:	e014      	b.n	8006ae2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ab8:	f7fd fef4 	bl	80048a4 <HAL_RCC_GetPCLK2Freq>
 8006abc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006abe:	e010      	b.n	8006ae2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ac0:	4b4e      	ldr	r3, [pc, #312]	; (8006bfc <UART_SetConfig+0x5c0>)
 8006ac2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ac4:	e00d      	b.n	8006ae2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ac6:	f7fd fe69 	bl	800479c <HAL_RCC_GetSysClockFreq>
 8006aca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006acc:	e009      	b.n	8006ae2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ad2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ad4:	e005      	b.n	8006ae2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006ae0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 8090 	beq.w	8006c0a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aee:	4a44      	ldr	r2, [pc, #272]	; (8006c00 <UART_SetConfig+0x5c4>)
 8006af0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006af4:	461a      	mov	r2, r3
 8006af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006afc:	005a      	lsls	r2, r3, #1
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	085b      	lsrs	r3, r3, #1
 8006b04:	441a      	add	r2, r3
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b0e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b10:	6a3b      	ldr	r3, [r7, #32]
 8006b12:	2b0f      	cmp	r3, #15
 8006b14:	d916      	bls.n	8006b44 <UART_SetConfig+0x508>
 8006b16:	6a3b      	ldr	r3, [r7, #32]
 8006b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b1c:	d212      	bcs.n	8006b44 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b1e:	6a3b      	ldr	r3, [r7, #32]
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	f023 030f 	bic.w	r3, r3, #15
 8006b26:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b28:	6a3b      	ldr	r3, [r7, #32]
 8006b2a:	085b      	lsrs	r3, r3, #1
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	f003 0307 	and.w	r3, r3, #7
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	8bfb      	ldrh	r3, [r7, #30]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	8bfa      	ldrh	r2, [r7, #30]
 8006b40:	60da      	str	r2, [r3, #12]
 8006b42:	e062      	b.n	8006c0a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006b4a:	e05e      	b.n	8006c0a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006b50:	2b08      	cmp	r3, #8
 8006b52:	d828      	bhi.n	8006ba6 <UART_SetConfig+0x56a>
 8006b54:	a201      	add	r2, pc, #4	; (adr r2, 8006b5c <UART_SetConfig+0x520>)
 8006b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5a:	bf00      	nop
 8006b5c:	08006b81 	.word	0x08006b81
 8006b60:	08006b89 	.word	0x08006b89
 8006b64:	08006b91 	.word	0x08006b91
 8006b68:	08006ba7 	.word	0x08006ba7
 8006b6c:	08006b97 	.word	0x08006b97
 8006b70:	08006ba7 	.word	0x08006ba7
 8006b74:	08006ba7 	.word	0x08006ba7
 8006b78:	08006ba7 	.word	0x08006ba7
 8006b7c:	08006b9f 	.word	0x08006b9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b80:	f7fd fe7a 	bl	8004878 <HAL_RCC_GetPCLK1Freq>
 8006b84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b86:	e014      	b.n	8006bb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b88:	f7fd fe8c 	bl	80048a4 <HAL_RCC_GetPCLK2Freq>
 8006b8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b8e:	e010      	b.n	8006bb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b90:	4b1a      	ldr	r3, [pc, #104]	; (8006bfc <UART_SetConfig+0x5c0>)
 8006b92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b94:	e00d      	b.n	8006bb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b96:	f7fd fe01 	bl	800479c <HAL_RCC_GetSysClockFreq>
 8006b9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b9c:	e009      	b.n	8006bb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ba2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ba4:	e005      	b.n	8006bb2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006bb0:	bf00      	nop
    }

    if (pclk != 0U)
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d028      	beq.n	8006c0a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbc:	4a10      	ldr	r2, [pc, #64]	; (8006c00 <UART_SetConfig+0x5c4>)
 8006bbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	fbb3 f2f2 	udiv	r2, r3, r2
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	085b      	lsrs	r3, r3, #1
 8006bd0:	441a      	add	r2, r3
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bda:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bdc:	6a3b      	ldr	r3, [r7, #32]
 8006bde:	2b0f      	cmp	r3, #15
 8006be0:	d910      	bls.n	8006c04 <UART_SetConfig+0x5c8>
 8006be2:	6a3b      	ldr	r3, [r7, #32]
 8006be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006be8:	d20c      	bcs.n	8006c04 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bea:	6a3b      	ldr	r3, [r7, #32]
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	60da      	str	r2, [r3, #12]
 8006bf4:	e009      	b.n	8006c0a <UART_SetConfig+0x5ce>
 8006bf6:	bf00      	nop
 8006bf8:	40008000 	.word	0x40008000
 8006bfc:	00f42400 	.word	0x00f42400
 8006c00:	08007300 	.word	0x08007300
      }
      else
      {
        ret = HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	2200      	movs	r2, #0
 8006c24:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006c26:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3730      	adds	r7, #48	; 0x30
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006c34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c40:	f003 0308 	and.w	r3, r3, #8
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00a      	beq.n	8006c5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	430a      	orrs	r2, r1
 8006c5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00a      	beq.n	8006c80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	430a      	orrs	r2, r1
 8006c7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c84:	f003 0302 	and.w	r3, r3, #2
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00a      	beq.n	8006ca2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca6:	f003 0304 	and.w	r3, r3, #4
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00a      	beq.n	8006cc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc8:	f003 0310 	and.w	r3, r3, #16
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00a      	beq.n	8006ce6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cea:	f003 0320 	and.w	r3, r3, #32
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00a      	beq.n	8006d08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	430a      	orrs	r2, r1
 8006d06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d01a      	beq.n	8006d4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	430a      	orrs	r2, r1
 8006d28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d32:	d10a      	bne.n	8006d4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	430a      	orrs	r2, r1
 8006d48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00a      	beq.n	8006d6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	430a      	orrs	r2, r1
 8006d6a:	605a      	str	r2, [r3, #4]
  }
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b098      	sub	sp, #96	; 0x60
 8006d7c:	af02      	add	r7, sp, #8
 8006d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d88:	f7fa fb90 	bl	80014ac <HAL_GetTick>
 8006d8c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0308 	and.w	r3, r3, #8
 8006d98:	2b08      	cmp	r3, #8
 8006d9a:	d12f      	bne.n	8006dfc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006da4:	2200      	movs	r2, #0
 8006da6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f88e 	bl	8006ecc <UART_WaitOnFlagUntilTimeout>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d022      	beq.n	8006dfc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbe:	e853 3f00 	ldrex	r3, [r3]
 8006dc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dca:	653b      	str	r3, [r7, #80]	; 0x50
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dd4:	647b      	str	r3, [r7, #68]	; 0x44
 8006dd6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006dda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ddc:	e841 2300 	strex	r3, r2, [r1]
 8006de0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1e6      	bne.n	8006db6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2220      	movs	r2, #32
 8006dec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e063      	b.n	8006ec4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0304 	and.w	r3, r3, #4
 8006e06:	2b04      	cmp	r3, #4
 8006e08:	d149      	bne.n	8006e9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e0a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e12:	2200      	movs	r2, #0
 8006e14:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f857 	bl	8006ecc <UART_WaitOnFlagUntilTimeout>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d03c      	beq.n	8006e9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2c:	e853 3f00 	ldrex	r3, [r3]
 8006e30:	623b      	str	r3, [r7, #32]
   return(result);
 8006e32:	6a3b      	ldr	r3, [r7, #32]
 8006e34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	461a      	mov	r2, r3
 8006e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e42:	633b      	str	r3, [r7, #48]	; 0x30
 8006e44:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e4a:	e841 2300 	strex	r3, r2, [r1]
 8006e4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1e6      	bne.n	8006e24 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	3308      	adds	r3, #8
 8006e5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	e853 3f00 	ldrex	r3, [r3]
 8006e64:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f023 0301 	bic.w	r3, r3, #1
 8006e6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	3308      	adds	r3, #8
 8006e74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e76:	61fa      	str	r2, [r7, #28]
 8006e78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7a:	69b9      	ldr	r1, [r7, #24]
 8006e7c:	69fa      	ldr	r2, [r7, #28]
 8006e7e:	e841 2300 	strex	r3, r2, [r1]
 8006e82:	617b      	str	r3, [r7, #20]
   return(result);
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1e5      	bne.n	8006e56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2220      	movs	r2, #32
 8006e8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e012      	b.n	8006ec4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2220      	movs	r2, #32
 8006ea2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2220      	movs	r2, #32
 8006eaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3758      	adds	r7, #88	; 0x58
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	603b      	str	r3, [r7, #0]
 8006ed8:	4613      	mov	r3, r2
 8006eda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006edc:	e04f      	b.n	8006f7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee4:	d04b      	beq.n	8006f7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ee6:	f7fa fae1 	bl	80014ac <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	69ba      	ldr	r2, [r7, #24]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d302      	bcc.n	8006efc <UART_WaitOnFlagUntilTimeout+0x30>
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d101      	bne.n	8006f00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e04e      	b.n	8006f9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0304 	and.w	r3, r3, #4
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d037      	beq.n	8006f7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	2b80      	cmp	r3, #128	; 0x80
 8006f12:	d034      	beq.n	8006f7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	2b40      	cmp	r3, #64	; 0x40
 8006f18:	d031      	beq.n	8006f7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	69db      	ldr	r3, [r3, #28]
 8006f20:	f003 0308 	and.w	r3, r3, #8
 8006f24:	2b08      	cmp	r3, #8
 8006f26:	d110      	bne.n	8006f4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2208      	movs	r2, #8
 8006f2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f000 f838 	bl	8006fa6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2208      	movs	r2, #8
 8006f3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e029      	b.n	8006f9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	69db      	ldr	r3, [r3, #28]
 8006f50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f58:	d111      	bne.n	8006f7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f000 f81e 	bl	8006fa6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2220      	movs	r2, #32
 8006f6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e00f      	b.n	8006f9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	69da      	ldr	r2, [r3, #28]
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	4013      	ands	r3, r2
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	bf0c      	ite	eq
 8006f8e:	2301      	moveq	r3, #1
 8006f90:	2300      	movne	r3, #0
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	461a      	mov	r2, r3
 8006f96:	79fb      	ldrb	r3, [r7, #7]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d0a0      	beq.n	8006ede <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fa6:	b480      	push	{r7}
 8006fa8:	b095      	sub	sp, #84	; 0x54
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb6:	e853 3f00 	ldrex	r3, [r3]
 8006fba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	461a      	mov	r2, r3
 8006fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fcc:	643b      	str	r3, [r7, #64]	; 0x40
 8006fce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006fd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fd4:	e841 2300 	strex	r3, r2, [r1]
 8006fd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1e6      	bne.n	8006fae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	3308      	adds	r3, #8
 8006fe6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe8:	6a3b      	ldr	r3, [r7, #32]
 8006fea:	e853 3f00 	ldrex	r3, [r3]
 8006fee:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ff6:	f023 0301 	bic.w	r3, r3, #1
 8006ffa:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	3308      	adds	r3, #8
 8007002:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007004:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007006:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007008:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800700a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800700c:	e841 2300 	strex	r3, r2, [r1]
 8007010:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1e3      	bne.n	8006fe0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800701c:	2b01      	cmp	r3, #1
 800701e:	d118      	bne.n	8007052 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	e853 3f00 	ldrex	r3, [r3]
 800702c:	60bb      	str	r3, [r7, #8]
   return(result);
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	f023 0310 	bic.w	r3, r3, #16
 8007034:	647b      	str	r3, [r7, #68]	; 0x44
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	461a      	mov	r2, r3
 800703c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800703e:	61bb      	str	r3, [r7, #24]
 8007040:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007042:	6979      	ldr	r1, [r7, #20]
 8007044:	69ba      	ldr	r2, [r7, #24]
 8007046:	e841 2300 	strex	r3, r2, [r1]
 800704a:	613b      	str	r3, [r7, #16]
   return(result);
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1e6      	bne.n	8007020 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2220      	movs	r2, #32
 8007056:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007066:	bf00      	nop
 8007068:	3754      	adds	r7, #84	; 0x54
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr

08007072 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007072:	b480      	push	{r7}
 8007074:	b085      	sub	sp, #20
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007080:	2b01      	cmp	r3, #1
 8007082:	d101      	bne.n	8007088 <HAL_UARTEx_DisableFifoMode+0x16>
 8007084:	2302      	movs	r3, #2
 8007086:	e027      	b.n	80070d8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2224      	movs	r2, #36	; 0x24
 8007094:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f022 0201 	bic.w	r2, r2, #1
 80070ae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80070b6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2220      	movs	r2, #32
 80070ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3714      	adds	r7, #20
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d101      	bne.n	80070fc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80070f8:	2302      	movs	r3, #2
 80070fa:	e02d      	b.n	8007158 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2224      	movs	r2, #36	; 0x24
 8007108:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f022 0201 	bic.w	r2, r2, #1
 8007122:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	683a      	ldr	r2, [r7, #0]
 8007134:	430a      	orrs	r2, r1
 8007136:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f84f 	bl	80071dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2220      	movs	r2, #32
 800714a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007170:	2b01      	cmp	r3, #1
 8007172:	d101      	bne.n	8007178 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007174:	2302      	movs	r3, #2
 8007176:	e02d      	b.n	80071d4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2224      	movs	r2, #36	; 0x24
 8007184:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f022 0201 	bic.w	r2, r2, #1
 800719e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	683a      	ldr	r2, [r7, #0]
 80071b0:	430a      	orrs	r2, r1
 80071b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f811 	bl	80071dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2220      	movs	r2, #32
 80071c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d108      	bne.n	80071fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80071fc:	e031      	b.n	8007262 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80071fe:	2308      	movs	r3, #8
 8007200:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007202:	2308      	movs	r3, #8
 8007204:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	0e5b      	lsrs	r3, r3, #25
 800720e:	b2db      	uxtb	r3, r3
 8007210:	f003 0307 	and.w	r3, r3, #7
 8007214:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	0f5b      	lsrs	r3, r3, #29
 800721e:	b2db      	uxtb	r3, r3
 8007220:	f003 0307 	and.w	r3, r3, #7
 8007224:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007226:	7bbb      	ldrb	r3, [r7, #14]
 8007228:	7b3a      	ldrb	r2, [r7, #12]
 800722a:	4911      	ldr	r1, [pc, #68]	; (8007270 <UARTEx_SetNbDataToProcess+0x94>)
 800722c:	5c8a      	ldrb	r2, [r1, r2]
 800722e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007232:	7b3a      	ldrb	r2, [r7, #12]
 8007234:	490f      	ldr	r1, [pc, #60]	; (8007274 <UARTEx_SetNbDataToProcess+0x98>)
 8007236:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007238:	fb93 f3f2 	sdiv	r3, r3, r2
 800723c:	b29a      	uxth	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007244:	7bfb      	ldrb	r3, [r7, #15]
 8007246:	7b7a      	ldrb	r2, [r7, #13]
 8007248:	4909      	ldr	r1, [pc, #36]	; (8007270 <UARTEx_SetNbDataToProcess+0x94>)
 800724a:	5c8a      	ldrb	r2, [r1, r2]
 800724c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007250:	7b7a      	ldrb	r2, [r7, #13]
 8007252:	4908      	ldr	r1, [pc, #32]	; (8007274 <UARTEx_SetNbDataToProcess+0x98>)
 8007254:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007256:	fb93 f3f2 	sdiv	r3, r3, r2
 800725a:	b29a      	uxth	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007262:	bf00      	nop
 8007264:	3714      	adds	r7, #20
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop
 8007270:	08007318 	.word	0x08007318
 8007274:	08007320 	.word	0x08007320

08007278 <memset>:
 8007278:	4402      	add	r2, r0
 800727a:	4603      	mov	r3, r0
 800727c:	4293      	cmp	r3, r2
 800727e:	d100      	bne.n	8007282 <memset+0xa>
 8007280:	4770      	bx	lr
 8007282:	f803 1b01 	strb.w	r1, [r3], #1
 8007286:	e7f9      	b.n	800727c <memset+0x4>

08007288 <__libc_init_array>:
 8007288:	b570      	push	{r4, r5, r6, lr}
 800728a:	4d0d      	ldr	r5, [pc, #52]	; (80072c0 <__libc_init_array+0x38>)
 800728c:	4c0d      	ldr	r4, [pc, #52]	; (80072c4 <__libc_init_array+0x3c>)
 800728e:	1b64      	subs	r4, r4, r5
 8007290:	10a4      	asrs	r4, r4, #2
 8007292:	2600      	movs	r6, #0
 8007294:	42a6      	cmp	r6, r4
 8007296:	d109      	bne.n	80072ac <__libc_init_array+0x24>
 8007298:	4d0b      	ldr	r5, [pc, #44]	; (80072c8 <__libc_init_array+0x40>)
 800729a:	4c0c      	ldr	r4, [pc, #48]	; (80072cc <__libc_init_array+0x44>)
 800729c:	f000 f818 	bl	80072d0 <_init>
 80072a0:	1b64      	subs	r4, r4, r5
 80072a2:	10a4      	asrs	r4, r4, #2
 80072a4:	2600      	movs	r6, #0
 80072a6:	42a6      	cmp	r6, r4
 80072a8:	d105      	bne.n	80072b6 <__libc_init_array+0x2e>
 80072aa:	bd70      	pop	{r4, r5, r6, pc}
 80072ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80072b0:	4798      	blx	r3
 80072b2:	3601      	adds	r6, #1
 80072b4:	e7ee      	b.n	8007294 <__libc_init_array+0xc>
 80072b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80072ba:	4798      	blx	r3
 80072bc:	3601      	adds	r6, #1
 80072be:	e7f2      	b.n	80072a6 <__libc_init_array+0x1e>
 80072c0:	08007330 	.word	0x08007330
 80072c4:	08007330 	.word	0x08007330
 80072c8:	08007330 	.word	0x08007330
 80072cc:	08007334 	.word	0x08007334

080072d0 <_init>:
 80072d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072d2:	bf00      	nop
 80072d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072d6:	bc08      	pop	{r3}
 80072d8:	469e      	mov	lr, r3
 80072da:	4770      	bx	lr

080072dc <_fini>:
 80072dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072de:	bf00      	nop
 80072e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072e2:	bc08      	pop	{r3}
 80072e4:	469e      	mov	lr, r3
 80072e6:	4770      	bx	lr
