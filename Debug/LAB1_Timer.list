
LAB1_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007be0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007db8  08007db8  00017db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007df8  08007df8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08007df8  08007df8  00017df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e00  08007e00  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e00  08007e00  00017e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e04  08007e04  00017e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007e08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  20000018  08007e1c  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000594  08007e1c  00020594  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017a76  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a9f  00000000  00000000  00037afd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c8  00000000  00000000  0003a5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001045  00000000  00000000  0003ba68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a28  00000000  00000000  0003caad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017748  00000000  00000000  000644d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010ea16  00000000  00000000  0007bc1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a68  00000000  00000000  0018a634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0019009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007da0 	.word	0x08007da0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	08007da0 	.word	0x08007da0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f001 f887 	bl	800162a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f84e 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 fbc2 	bl	8000ca8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 fb96 	bl	8000c54 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000528:	f000 f92e 	bl	8000788 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 800052c:	f000 f9fc 	bl	8000928 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000530:	f000 f890 	bl	8000654 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000534:	f000 fa46 	bl	80009c4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000538:	f000 fa92 	bl	8000a60 <MX_TIM4_Init>
  MX_TIM5_Init();
 800053c:	f000 fb08 	bl	8000b50 <MX_TIM5_Init>
  MX_TIM1_Init();
 8000540:	f000 f96c 	bl	800081c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2); //Interrupt
 8000544:	4816      	ldr	r0, [pc, #88]	; (80005a0 <main+0x8c>)
 8000546:	f004 fe43 	bl	80051d0 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800054a:	217f      	movs	r1, #127	; 0x7f
 800054c:	4815      	ldr	r0, [pc, #84]	; (80005a4 <main+0x90>)
 800054e:	f002 fe77 	bl	8003240 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 300);
 8000552:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000556:	4914      	ldr	r1, [pc, #80]	; (80005a8 <main+0x94>)
 8000558:	4812      	ldr	r0, [pc, #72]	; (80005a4 <main+0x90>)
 800055a:	f001 fcf9 	bl	8001f50 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 800055e:	4813      	ldr	r0, [pc, #76]	; (80005ac <main+0x98>)
 8000560:	f004 fdc6 	bl	80050f0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 8000564:	4812      	ldr	r0, [pc, #72]	; (80005b0 <main+0x9c>)
 8000566:	f004 fdc3 	bl	80050f0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800056a:	2100      	movs	r1, #0
 800056c:	4810      	ldr	r0, [pc, #64]	; (80005b0 <main+0x9c>)
 800056e:	f004 ff09 	bl	8005384 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim5);
 8000572:	4810      	ldr	r0, [pc, #64]	; (80005b4 <main+0xa0>)
 8000574:	f004 fdbc 	bl	80050f0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000578:	2100      	movs	r1, #0
 800057a:	480e      	ldr	r0, [pc, #56]	; (80005b4 <main+0xa0>)
 800057c:	f004 ff02 	bl	8005384 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8000580:	2104      	movs	r1, #4
 8000582:	480c      	ldr	r0, [pc, #48]	; (80005b4 <main+0xa0>)
 8000584:	f004 fefe 	bl	8005384 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 8000588:	2104      	movs	r1, #4
 800058a:	480b      	ldr	r0, [pc, #44]	; (80005b8 <main+0xa4>)
 800058c:	f005 f864 	bl	8005658 <HAL_TIM_IC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  micros();
 8000590:	f000 fc10 	bl	8000db4 <micros>
	  avg();
 8000594:	f000 fc54 	bl	8000e40 <avg>
	  pot();
 8000598:	f000 fcba 	bl	8000f10 <pot>
	  micros();
 800059c:	e7f8      	b.n	8000590 <main+0x7c>
 800059e:	bf00      	nop
 80005a0:	200001e0 	.word	0x200001e0
 80005a4:	20000034 	.word	0x20000034
 80005a8:	20000318 	.word	0x20000318
 80005ac:	2000022c 	.word	0x2000022c
 80005b0:	20000278 	.word	0x20000278
 80005b4:	200002c4 	.word	0x200002c4
 80005b8:	20000194 	.word	0x20000194

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0318 	add.w	r3, r7, #24
 80005c6:	2238      	movs	r2, #56	; 0x38
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f007 fbbc 	bl	8007d48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005de:	2000      	movs	r0, #0
 80005e0:	f003 fcfe 	bl	8003fe0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e4:	2302      	movs	r3, #2
 80005e6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ee:	2340      	movs	r3, #64	; 0x40
 80005f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f6:	2302      	movs	r3, #2
 80005f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005fa:	2304      	movs	r3, #4
 80005fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005fe:	2355      	movs	r3, #85	; 0x55
 8000600:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000602:	2302      	movs	r3, #2
 8000604:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000606:	2302      	movs	r3, #2
 8000608:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800060a:	2302      	movs	r3, #2
 800060c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060e:	f107 0318 	add.w	r3, r7, #24
 8000612:	4618      	mov	r0, r3
 8000614:	f003 fd98 	bl	8004148 <HAL_RCC_OscConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800061e:	f000 fd21 	bl	8001064 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	230f      	movs	r3, #15
 8000624:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2303      	movs	r3, #3
 8000628:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2104      	movs	r1, #4
 800063a:	4618      	mov	r0, r3
 800063c:	f004 f896 	bl	800476c <HAL_RCC_ClockConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000646:	f000 fd0d 	bl	8001064 <Error_Handler>
  }
}
 800064a:	bf00      	nop
 800064c:	3750      	adds	r7, #80	; 0x50
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08c      	sub	sp, #48	; 0x30
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800065a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	2220      	movs	r2, #32
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f007 fb6b 	bl	8007d48 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000672:	4b41      	ldr	r3, [pc, #260]	; (8000778 <MX_ADC1_Init+0x124>)
 8000674:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000678:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800067a:	4b3f      	ldr	r3, [pc, #252]	; (8000778 <MX_ADC1_Init+0x124>)
 800067c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000680:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000682:	4b3d      	ldr	r3, [pc, #244]	; (8000778 <MX_ADC1_Init+0x124>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000688:	4b3b      	ldr	r3, [pc, #236]	; (8000778 <MX_ADC1_Init+0x124>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800068e:	4b3a      	ldr	r3, [pc, #232]	; (8000778 <MX_ADC1_Init+0x124>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000694:	4b38      	ldr	r3, [pc, #224]	; (8000778 <MX_ADC1_Init+0x124>)
 8000696:	2201      	movs	r2, #1
 8000698:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800069a:	4b37      	ldr	r3, [pc, #220]	; (8000778 <MX_ADC1_Init+0x124>)
 800069c:	2204      	movs	r2, #4
 800069e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006a0:	4b35      	ldr	r3, [pc, #212]	; (8000778 <MX_ADC1_Init+0x124>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006a6:	4b34      	ldr	r3, [pc, #208]	; (8000778 <MX_ADC1_Init+0x124>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 80006ac:	4b32      	ldr	r3, [pc, #200]	; (8000778 <MX_ADC1_Init+0x124>)
 80006ae:	2203      	movs	r2, #3
 80006b0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006b2:	4b31      	ldr	r3, [pc, #196]	; (8000778 <MX_ADC1_Init+0x124>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80006ba:	4b2f      	ldr	r3, [pc, #188]	; (8000778 <MX_ADC1_Init+0x124>)
 80006bc:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80006c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006c2:	4b2d      	ldr	r3, [pc, #180]	; (8000778 <MX_ADC1_Init+0x124>)
 80006c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006c8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006ca:	4b2b      	ldr	r3, [pc, #172]	; (8000778 <MX_ADC1_Init+0x124>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006d2:	4b29      	ldr	r3, [pc, #164]	; (8000778 <MX_ADC1_Init+0x124>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80006d8:	4b27      	ldr	r3, [pc, #156]	; (8000778 <MX_ADC1_Init+0x124>)
 80006da:	2200      	movs	r2, #0
 80006dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006e0:	4825      	ldr	r0, [pc, #148]	; (8000778 <MX_ADC1_Init+0x124>)
 80006e2:	f001 fa79 	bl	8001bd8 <HAL_ADC_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80006ec:	f000 fcba 	bl	8001064 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006f0:	2300      	movs	r3, #0
 80006f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f8:	4619      	mov	r1, r3
 80006fa:	481f      	ldr	r0, [pc, #124]	; (8000778 <MX_ADC1_Init+0x124>)
 80006fc:	f002 fe34 	bl	8003368 <HAL_ADCEx_MultiModeConfigChannel>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000706:	f000 fcad 	bl	8001064 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800070a:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_ADC1_Init+0x128>)
 800070c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800070e:	2306      	movs	r3, #6
 8000710:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000712:	2307      	movs	r3, #7
 8000714:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000716:	237f      	movs	r3, #127	; 0x7f
 8000718:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800071a:	2304      	movs	r3, #4
 800071c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	4619      	mov	r1, r3
 8000726:	4814      	ldr	r0, [pc, #80]	; (8000778 <MX_ADC1_Init+0x124>)
 8000728:	f001 ff6e 	bl	8002608 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000732:	f000 fc97 	bl	8001064 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000736:	4b12      	ldr	r3, [pc, #72]	; (8000780 <MX_ADC1_Init+0x12c>)
 8000738:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800073a:	230c      	movs	r3, #12
 800073c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	4619      	mov	r1, r3
 8000742:	480d      	ldr	r0, [pc, #52]	; (8000778 <MX_ADC1_Init+0x124>)
 8000744:	f001 ff60 	bl	8002608 <HAL_ADC_ConfigChannel>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800074e:	f000 fc89 	bl	8001064 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_ADC1_Init+0x130>)
 8000754:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000756:	2312      	movs	r3, #18
 8000758:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	4619      	mov	r1, r3
 800075e:	4806      	ldr	r0, [pc, #24]	; (8000778 <MX_ADC1_Init+0x124>)
 8000760:	f001 ff52 	bl	8002608 <HAL_ADC_ConfigChannel>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 800076a:	f000 fc7b 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	3730      	adds	r7, #48	; 0x30
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000034 	.word	0x20000034
 800077c:	04300002 	.word	0x04300002
 8000780:	08600004 	.word	0x08600004
 8000784:	3ef08000 	.word	0x3ef08000

08000788 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800078c:	4b21      	ldr	r3, [pc, #132]	; (8000814 <MX_LPUART1_UART_Init+0x8c>)
 800078e:	4a22      	ldr	r2, [pc, #136]	; (8000818 <MX_LPUART1_UART_Init+0x90>)
 8000790:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000792:	4b20      	ldr	r3, [pc, #128]	; (8000814 <MX_LPUART1_UART_Init+0x8c>)
 8000794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000798:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b1e      	ldr	r3, [pc, #120]	; (8000814 <MX_LPUART1_UART_Init+0x8c>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <MX_LPUART1_UART_Init+0x8c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <MX_LPUART1_UART_Init+0x8c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b19      	ldr	r3, [pc, #100]	; (8000814 <MX_LPUART1_UART_Init+0x8c>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b18      	ldr	r3, [pc, #96]	; (8000814 <MX_LPUART1_UART_Init+0x8c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b8:	4b16      	ldr	r3, [pc, #88]	; (8000814 <MX_LPUART1_UART_Init+0x8c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <MX_LPUART1_UART_Init+0x8c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c4:	4b13      	ldr	r3, [pc, #76]	; (8000814 <MX_LPUART1_UART_Init+0x8c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007ca:	4812      	ldr	r0, [pc, #72]	; (8000814 <MX_LPUART1_UART_Init+0x8c>)
 80007cc:	f006 fc4e 	bl	800706c <HAL_UART_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80007d6:	f000 fc45 	bl	8001064 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007da:	2100      	movs	r1, #0
 80007dc:	480d      	ldr	r0, [pc, #52]	; (8000814 <MX_LPUART1_UART_Init+0x8c>)
 80007de:	f007 f9e9 	bl	8007bb4 <HAL_UARTEx_SetTxFifoThreshold>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80007e8:	f000 fc3c 	bl	8001064 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ec:	2100      	movs	r1, #0
 80007ee:	4809      	ldr	r0, [pc, #36]	; (8000814 <MX_LPUART1_UART_Init+0x8c>)
 80007f0:	f007 fa1e 	bl	8007c30 <HAL_UARTEx_SetRxFifoThreshold>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80007fa:	f000 fc33 	bl	8001064 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_LPUART1_UART_Init+0x8c>)
 8000800:	f007 f99f 	bl	8007b42 <HAL_UARTEx_DisableFifoMode>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800080a:	f000 fc2b 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000100 	.word	0x20000100
 8000818:	40008000 	.word	0x40008000

0800081c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08c      	sub	sp, #48	; 0x30
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000840:	463b      	mov	r3, r7
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800084a:	4b35      	ldr	r3, [pc, #212]	; (8000920 <MX_TIM1_Init+0x104>)
 800084c:	4a35      	ldr	r2, [pc, #212]	; (8000924 <MX_TIM1_Init+0x108>)
 800084e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8000850:	4b33      	ldr	r3, [pc, #204]	; (8000920 <MX_TIM1_Init+0x104>)
 8000852:	22a9      	movs	r2, #169	; 0xa9
 8000854:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000856:	4b32      	ldr	r3, [pc, #200]	; (8000920 <MX_TIM1_Init+0x104>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 800085c:	4b30      	ldr	r3, [pc, #192]	; (8000920 <MX_TIM1_Init+0x104>)
 800085e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000862:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000864:	4b2e      	ldr	r3, [pc, #184]	; (8000920 <MX_TIM1_Init+0x104>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800086a:	4b2d      	ldr	r3, [pc, #180]	; (8000920 <MX_TIM1_Init+0x104>)
 800086c:	2200      	movs	r2, #0
 800086e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000870:	4b2b      	ldr	r3, [pc, #172]	; (8000920 <MX_TIM1_Init+0x104>)
 8000872:	2200      	movs	r2, #0
 8000874:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000876:	482a      	ldr	r0, [pc, #168]	; (8000920 <MX_TIM1_Init+0x104>)
 8000878:	f004 fe96 	bl	80055a8 <HAL_TIM_IC_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000882:	f000 fbef 	bl	8001064 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000886:	2304      	movs	r3, #4
 8000888:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800088a:	2350      	movs	r3, #80	; 0x50
 800088c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	481f      	ldr	r0, [pc, #124]	; (8000920 <MX_TIM1_Init+0x104>)
 80008a2:	f005 fbf3 	bl	800608c <HAL_TIM_SlaveConfigSynchro>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80008ac:	f000 fbda 	bl	8001064 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80008b4:	2301      	movs	r3, #1
 80008b6:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	2200      	movs	r2, #0
 80008c6:	4619      	mov	r1, r3
 80008c8:	4815      	ldr	r0, [pc, #84]	; (8000920 <MX_TIM1_Init+0x104>)
 80008ca:	f005 f918 	bl	8005afe <HAL_TIM_IC_ConfigChannel>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80008d4:	f000 fbc6 	bl	8001064 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80008d8:	2302      	movs	r3, #2
 80008da:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80008dc:	2302      	movs	r3, #2
 80008de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	2204      	movs	r2, #4
 80008e6:	4619      	mov	r1, r3
 80008e8:	480d      	ldr	r0, [pc, #52]	; (8000920 <MX_TIM1_Init+0x104>)
 80008ea:	f005 f908 	bl	8005afe <HAL_TIM_IC_ConfigChannel>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80008f4:	f000 fbb6 	bl	8001064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f8:	2300      	movs	r3, #0
 80008fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008fc:	2300      	movs	r3, #0
 80008fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000900:	2300      	movs	r3, #0
 8000902:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000904:	463b      	mov	r3, r7
 8000906:	4619      	mov	r1, r3
 8000908:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_TIM1_Init+0x104>)
 800090a:	f006 fad3 	bl	8006eb4 <HAL_TIMEx_MasterConfigSynchronization>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000914:	f000 fba6 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000918:	bf00      	nop
 800091a:	3730      	adds	r7, #48	; 0x30
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000194 	.word	0x20000194
 8000924:	40012c00 	.word	0x40012c00

08000928 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800092e:	f107 0310 	add.w	r3, r7, #16
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000946:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <MX_TIM2_Init+0x98>)
 8000948:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800094c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800094e:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <MX_TIM2_Init+0x98>)
 8000950:	22a9      	movs	r2, #169	; 0xa9
 8000952:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000954:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <MX_TIM2_Init+0x98>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 800095a:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <MX_TIM2_Init+0x98>)
 800095c:	f04f 32ff 	mov.w	r2, #4294967295
 8000960:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000962:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <MX_TIM2_Init+0x98>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000968:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <MX_TIM2_Init+0x98>)
 800096a:	2200      	movs	r2, #0
 800096c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800096e:	4814      	ldr	r0, [pc, #80]	; (80009c0 <MX_TIM2_Init+0x98>)
 8000970:	f004 fb66 	bl	8005040 <HAL_TIM_Base_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800097a:	f000 fb73 	bl	8001064 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800097e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000982:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000984:	f107 0310 	add.w	r3, r7, #16
 8000988:	4619      	mov	r1, r3
 800098a:	480d      	ldr	r0, [pc, #52]	; (80009c0 <MX_TIM2_Init+0x98>)
 800098c:	f005 fa68 	bl	8005e60 <HAL_TIM_ConfigClockSource>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000996:	f000 fb65 	bl	8001064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	4619      	mov	r1, r3
 80009a6:	4806      	ldr	r0, [pc, #24]	; (80009c0 <MX_TIM2_Init+0x98>)
 80009a8:	f006 fa84 	bl	8006eb4 <HAL_TIMEx_MasterConfigSynchronization>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80009b2:	f000 fb57 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	3720      	adds	r7, #32
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200001e0 	.word	0x200001e0

080009c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b088      	sub	sp, #32
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ca:	f107 0310 	add.w	r3, r7, #16
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009e2:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <MX_TIM3_Init+0x94>)
 80009e4:	4a1d      	ldr	r2, [pc, #116]	; (8000a5c <MX_TIM3_Init+0x98>)
 80009e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 56666;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <MX_TIM3_Init+0x94>)
 80009ea:	f64d 525a 	movw	r2, #56666	; 0xdd5a
 80009ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f0:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <MX_TIM3_Init+0x94>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 80009f6:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <MX_TIM3_Init+0x94>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fc:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <MX_TIM3_Init+0x94>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <MX_TIM3_Init+0x94>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a08:	4813      	ldr	r0, [pc, #76]	; (8000a58 <MX_TIM3_Init+0x94>)
 8000a0a:	f004 fb19 	bl	8005040 <HAL_TIM_Base_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000a14:	f000 fb26 	bl	8001064 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a1e:	f107 0310 	add.w	r3, r7, #16
 8000a22:	4619      	mov	r1, r3
 8000a24:	480c      	ldr	r0, [pc, #48]	; (8000a58 <MX_TIM3_Init+0x94>)
 8000a26:	f005 fa1b 	bl	8005e60 <HAL_TIM_ConfigClockSource>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000a30:	f000 fb18 	bl	8001064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a34:	2320      	movs	r3, #32
 8000a36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_TIM3_Init+0x94>)
 8000a42:	f006 fa37 	bl	8006eb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000a4c:	f000 fb0a 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	3720      	adds	r7, #32
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	2000022c 	.word	0x2000022c
 8000a5c:	40000400 	.word	0x40000400

08000a60 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08e      	sub	sp, #56	; 0x38
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a80:	463b      	mov	r3, r7
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]
 8000a8e:	615a      	str	r2, [r3, #20]
 8000a90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a92:	4b2d      	ldr	r3, [pc, #180]	; (8000b48 <MX_TIM4_Init+0xe8>)
 8000a94:	4a2d      	ldr	r2, [pc, #180]	; (8000b4c <MX_TIM4_Init+0xec>)
 8000a96:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8000a98:	4b2b      	ldr	r3, [pc, #172]	; (8000b48 <MX_TIM4_Init+0xe8>)
 8000a9a:	22a9      	movs	r2, #169	; 0xa9
 8000a9c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9e:	4b2a      	ldr	r3, [pc, #168]	; (8000b48 <MX_TIM4_Init+0xe8>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8000aa4:	4b28      	ldr	r3, [pc, #160]	; (8000b48 <MX_TIM4_Init+0xe8>)
 8000aa6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000aaa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aac:	4b26      	ldr	r3, [pc, #152]	; (8000b48 <MX_TIM4_Init+0xe8>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab2:	4b25      	ldr	r3, [pc, #148]	; (8000b48 <MX_TIM4_Init+0xe8>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ab8:	4823      	ldr	r0, [pc, #140]	; (8000b48 <MX_TIM4_Init+0xe8>)
 8000aba:	f004 fac1 	bl	8005040 <HAL_TIM_Base_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000ac4:	f000 face 	bl	8001064 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ace:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	481c      	ldr	r0, [pc, #112]	; (8000b48 <MX_TIM4_Init+0xe8>)
 8000ad6:	f005 f9c3 	bl	8005e60 <HAL_TIM_ConfigClockSource>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000ae0:	f000 fac0 	bl	8001064 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ae4:	4818      	ldr	r0, [pc, #96]	; (8000b48 <MX_TIM4_Init+0xe8>)
 8000ae6:	f004 fbeb 	bl	80052c0 <HAL_TIM_PWM_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000af0:	f000 fab8 	bl	8001064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	4619      	mov	r1, r3
 8000b02:	4811      	ldr	r0, [pc, #68]	; (8000b48 <MX_TIM4_Init+0xe8>)
 8000b04:	f006 f9d6 	bl	8006eb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000b0e:	f000 faa9 	bl	8001064 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b12:	2360      	movs	r3, #96	; 0x60
 8000b14:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 8000b16:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b1a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b24:	463b      	mov	r3, r7
 8000b26:	2200      	movs	r2, #0
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4807      	ldr	r0, [pc, #28]	; (8000b48 <MX_TIM4_Init+0xe8>)
 8000b2c:	f005 f884 	bl	8005c38 <HAL_TIM_PWM_ConfigChannel>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000b36:	f000 fa95 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b3a:	4803      	ldr	r0, [pc, #12]	; (8000b48 <MX_TIM4_Init+0xe8>)
 8000b3c:	f000 fc64 	bl	8001408 <HAL_TIM_MspPostInit>

}
 8000b40:	bf00      	nop
 8000b42:	3738      	adds	r7, #56	; 0x38
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000278 	.word	0x20000278
 8000b4c:	40000800 	.word	0x40000800

08000b50 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08e      	sub	sp, #56	; 0x38
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b70:	463b      	mov	r3, r7
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]
 8000b7e:	615a      	str	r2, [r3, #20]
 8000b80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b82:	4b32      	ldr	r3, [pc, #200]	; (8000c4c <MX_TIM5_Init+0xfc>)
 8000b84:	4a32      	ldr	r2, [pc, #200]	; (8000c50 <MX_TIM5_Init+0x100>)
 8000b86:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8000b88:	4b30      	ldr	r3, [pc, #192]	; (8000c4c <MX_TIM5_Init+0xfc>)
 8000b8a:	22a9      	movs	r2, #169	; 0xa9
 8000b8c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8e:	4b2f      	ldr	r3, [pc, #188]	; (8000c4c <MX_TIM5_Init+0xfc>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19999;
 8000b94:	4b2d      	ldr	r3, [pc, #180]	; (8000c4c <MX_TIM5_Init+0xfc>)
 8000b96:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000b9a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b9c:	4b2b      	ldr	r3, [pc, #172]	; (8000c4c <MX_TIM5_Init+0xfc>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba2:	4b2a      	ldr	r3, [pc, #168]	; (8000c4c <MX_TIM5_Init+0xfc>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000ba8:	4828      	ldr	r0, [pc, #160]	; (8000c4c <MX_TIM5_Init+0xfc>)
 8000baa:	f004 fa49 	bl	8005040 <HAL_TIM_Base_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8000bb4:	f000 fa56 	bl	8001064 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000bbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4821      	ldr	r0, [pc, #132]	; (8000c4c <MX_TIM5_Init+0xfc>)
 8000bc6:	f005 f94b 	bl	8005e60 <HAL_TIM_ConfigClockSource>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8000bd0:	f000 fa48 	bl	8001064 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000bd4:	481d      	ldr	r0, [pc, #116]	; (8000c4c <MX_TIM5_Init+0xfc>)
 8000bd6:	f004 fb73 	bl	80052c0 <HAL_TIM_PWM_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8000be0:	f000 fa40 	bl	8001064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4816      	ldr	r0, [pc, #88]	; (8000c4c <MX_TIM5_Init+0xfc>)
 8000bf4:	f006 f95e 	bl	8006eb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8000bfe:	f000 fa31 	bl	8001064 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c02:	2360      	movs	r3, #96	; 0x60
 8000c04:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c12:	463b      	mov	r3, r7
 8000c14:	2200      	movs	r2, #0
 8000c16:	4619      	mov	r1, r3
 8000c18:	480c      	ldr	r0, [pc, #48]	; (8000c4c <MX_TIM5_Init+0xfc>)
 8000c1a:	f005 f80d 	bl	8005c38 <HAL_TIM_PWM_ConfigChannel>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8000c24:	f000 fa1e 	bl	8001064 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c28:	463b      	mov	r3, r7
 8000c2a:	2204      	movs	r2, #4
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4807      	ldr	r0, [pc, #28]	; (8000c4c <MX_TIM5_Init+0xfc>)
 8000c30:	f005 f802 	bl	8005c38 <HAL_TIM_PWM_ConfigChannel>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 8000c3a:	f000 fa13 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000c3e:	4803      	ldr	r0, [pc, #12]	; (8000c4c <MX_TIM5_Init+0xfc>)
 8000c40:	f000 fbe2 	bl	8001408 <HAL_TIM_MspPostInit>

}
 8000c44:	bf00      	nop
 8000c46:	3738      	adds	r7, #56	; 0x38
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	200002c4 	.word	0x200002c4
 8000c50:	40000c00 	.word	0x40000c00

08000c54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000c5a:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <MX_DMA_Init+0x50>)
 8000c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c5e:	4a11      	ldr	r2, [pc, #68]	; (8000ca4 <MX_DMA_Init+0x50>)
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	6493      	str	r3, [r2, #72]	; 0x48
 8000c66:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <MX_DMA_Init+0x50>)
 8000c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c72:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <MX_DMA_Init+0x50>)
 8000c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c76:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <MX_DMA_Init+0x50>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6493      	str	r3, [r2, #72]	; 0x48
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <MX_DMA_Init+0x50>)
 8000c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	200b      	movs	r0, #11
 8000c90:	f002 fd4d 	bl	800372e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c94:	200b      	movs	r0, #11
 8000c96:	f002 fd64 	bl	8003762 <HAL_NVIC_EnableIRQ>

}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40021000 	.word	0x40021000

08000ca8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbe:	4b2f      	ldr	r3, [pc, #188]	; (8000d7c <MX_GPIO_Init+0xd4>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	4a2e      	ldr	r2, [pc, #184]	; (8000d7c <MX_GPIO_Init+0xd4>)
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cca:	4b2c      	ldr	r3, [pc, #176]	; (8000d7c <MX_GPIO_Init+0xd4>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	f003 0304 	and.w	r3, r3, #4
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cd6:	4b29      	ldr	r3, [pc, #164]	; (8000d7c <MX_GPIO_Init+0xd4>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	4a28      	ldr	r2, [pc, #160]	; (8000d7c <MX_GPIO_Init+0xd4>)
 8000cdc:	f043 0320 	orr.w	r3, r3, #32
 8000ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce2:	4b26      	ldr	r3, [pc, #152]	; (8000d7c <MX_GPIO_Init+0xd4>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	f003 0320 	and.w	r3, r3, #32
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	4b23      	ldr	r3, [pc, #140]	; (8000d7c <MX_GPIO_Init+0xd4>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	4a22      	ldr	r2, [pc, #136]	; (8000d7c <MX_GPIO_Init+0xd4>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfa:	4b20      	ldr	r3, [pc, #128]	; (8000d7c <MX_GPIO_Init+0xd4>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d06:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <MX_GPIO_Init+0xd4>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0a:	4a1c      	ldr	r2, [pc, #112]	; (8000d7c <MX_GPIO_Init+0xd4>)
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d12:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <MX_GPIO_Init+0xd4>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2120      	movs	r1, #32
 8000d22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d26:	f003 f92b 	bl	8003f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d30:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	480f      	ldr	r0, [pc, #60]	; (8000d80 <MX_GPIO_Init+0xd8>)
 8000d42:	f002 ff9b 	bl	8003c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d46:	2320      	movs	r3, #32
 8000d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d60:	f002 ff8c 	bl	8003c7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2100      	movs	r1, #0
 8000d68:	2028      	movs	r0, #40	; 0x28
 8000d6a:	f002 fce0 	bl	800372e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d6e:	2028      	movs	r0, #40	; 0x28
 8000d70:	f002 fcf7 	bl	8003762 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d74:	bf00      	nop
 8000d76:	3728      	adds	r7, #40	; 0x28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	48000800 	.word	0x48000800

08000d84 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a07      	ldr	r2, [pc, #28]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d104      	bne.n	8000d9e <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		counter++;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000d9c:	6013      	str	r3, [r2, #0]
	}
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	200001e0 	.word	0x200001e0
 8000db0:	20000000 	.word	0x20000000

08000db4 <micros>:
void micros()
{
 8000db4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000db8:	b087      	sub	sp, #28
 8000dba:	af00      	add	r7, sp, #0
	timestamp = counter*(4294967295) + __HAL_TIM_GET_COUNTER(&htim2);
 8000dbc:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <micros+0x80>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	4698      	mov	r8, r3
 8000dc4:	4691      	mov	r9, r2
 8000dc6:	4642      	mov	r2, r8
 8000dc8:	464b      	mov	r3, r9
 8000dca:	f04f 0400 	mov.w	r4, #0
 8000dce:	f04f 0500 	mov.w	r5, #0
 8000dd2:	07dd      	lsls	r5, r3, #31
 8000dd4:	ea45 0552 	orr.w	r5, r5, r2, lsr #1
 8000dd8:	07d4      	lsls	r4, r2, #31
 8000dda:	4622      	mov	r2, r4
 8000ddc:	462b      	mov	r3, r5
 8000dde:	ebb2 0008 	subs.w	r0, r2, r8
 8000de2:	eb63 0109 	sbc.w	r1, r3, r9
 8000de6:	1803      	adds	r3, r0, r0
 8000de8:	603b      	str	r3, [r7, #0]
 8000dea:	eb41 0301 	adc.w	r3, r1, r1
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000df4:	eb10 0a08 	adds.w	sl, r0, r8
 8000df8:	eb41 0b09 	adc.w	fp, r1, r9
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <micros+0x84>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e02:	2200      	movs	r2, #0
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	617a      	str	r2, [r7, #20]
 8000e08:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	eb1a 0303 	adds.w	r3, sl, r3
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	4613      	mov	r3, r2
 8000e16:	eb4b 0303 	adc.w	r3, fp, r3
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000e20:	4906      	ldr	r1, [pc, #24]	; (8000e3c <micros+0x88>)
 8000e22:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000e26:	bf00      	nop
 8000e28:	371c      	adds	r7, #28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	20000000 	.word	0x20000000
 8000e38:	200001e0 	.word	0x200001e0
 8000e3c:	20000310 	.word	0x20000310

08000e40 <avg>:
void avg()
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
	for (int i = 0; i < 100; i++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	e028      	b.n	8000e9e <avg+0x5e>
	{
		sum[0] += ADC_RawRead[(3*i)];
 8000e4c:	4b2c      	ldr	r3, [pc, #176]	; (8000f00 <avg+0xc0>)
 8000e4e:	6819      	ldr	r1, [r3, #0]
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	4613      	mov	r3, r2
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	4413      	add	r3, r2
 8000e58:	4a2a      	ldr	r2, [pc, #168]	; (8000f04 <avg+0xc4>)
 8000e5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e5e:	440b      	add	r3, r1
 8000e60:	4a27      	ldr	r2, [pc, #156]	; (8000f00 <avg+0xc0>)
 8000e62:	6013      	str	r3, [r2, #0]
		sum[1] += ADC_RawRead[(3*i) + 1];
 8000e64:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <avg+0xc0>)
 8000e66:	6859      	ldr	r1, [r3, #4]
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	4413      	add	r3, r2
 8000e70:	3301      	adds	r3, #1
 8000e72:	4a24      	ldr	r2, [pc, #144]	; (8000f04 <avg+0xc4>)
 8000e74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e78:	440b      	add	r3, r1
 8000e7a:	4a21      	ldr	r2, [pc, #132]	; (8000f00 <avg+0xc0>)
 8000e7c:	6053      	str	r3, [r2, #4]
		sum[2] += ADC_RawRead[(3*i) + 2];
 8000e7e:	4b20      	ldr	r3, [pc, #128]	; (8000f00 <avg+0xc0>)
 8000e80:	6899      	ldr	r1, [r3, #8]
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	4613      	mov	r3, r2
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	4413      	add	r3, r2
 8000e8a:	3302      	adds	r3, #2
 8000e8c:	4a1d      	ldr	r2, [pc, #116]	; (8000f04 <avg+0xc4>)
 8000e8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e92:	440b      	add	r3, r1
 8000e94:	4a1a      	ldr	r2, [pc, #104]	; (8000f00 <avg+0xc0>)
 8000e96:	6093      	str	r3, [r2, #8]
	for (int i = 0; i < 100; i++)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b63      	cmp	r3, #99	; 0x63
 8000ea2:	ddd3      	ble.n	8000e4c <avg+0xc>
	}
		Avg[0] = sum[0]/100;
 8000ea4:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <avg+0xc0>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a17      	ldr	r2, [pc, #92]	; (8000f08 <avg+0xc8>)
 8000eaa:	fb82 1203 	smull	r1, r2, r2, r3
 8000eae:	1152      	asrs	r2, r2, #5
 8000eb0:	17db      	asrs	r3, r3, #31
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	4a15      	ldr	r2, [pc, #84]	; (8000f0c <avg+0xcc>)
 8000eb6:	6013      	str	r3, [r2, #0]
		Avg[1] = sum[1]/100;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <avg+0xc0>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <avg+0xc8>)
 8000ebe:	fb82 1203 	smull	r1, r2, r2, r3
 8000ec2:	1152      	asrs	r2, r2, #5
 8000ec4:	17db      	asrs	r3, r3, #31
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	4a10      	ldr	r2, [pc, #64]	; (8000f0c <avg+0xcc>)
 8000eca:	6053      	str	r3, [r2, #4]
		Avg[2] = sum[2]/100;
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <avg+0xc0>)
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <avg+0xc8>)
 8000ed2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ed6:	1152      	asrs	r2, r2, #5
 8000ed8:	17db      	asrs	r3, r3, #31
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <avg+0xcc>)
 8000ede:	6093      	str	r3, [r2, #8]
		//return 0
		sum[0] = 0;
 8000ee0:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <avg+0xc0>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
		sum[1] = 0;
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <avg+0xc0>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	605a      	str	r2, [r3, #4]
		sum[2] = 0;
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <avg+0xc0>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000570 	.word	0x20000570
 8000f04:	20000318 	.word	0x20000318
 8000f08:	51eb851f 	.word	0x51eb851f
 8000f0c:	2000057c 	.word	0x2000057c

08000f10 <pot>:
void pot()
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
	if (mode == 1)
 8000f14:	4b3b      	ldr	r3, [pc, #236]	; (8001004 <pot+0xf4>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d14c      	bne.n	8000fb6 <pot+0xa6>
	{
		if (Avg[0] < 1024)
 8000f1c:	4b3a      	ldr	r3, [pc, #232]	; (8001008 <pot+0xf8>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f24:	da08      	bge.n	8000f38 <pot+0x28>
		{
			state = 1;
 8000f26:	4b39      	ldr	r3, [pc, #228]	; (800100c <pot+0xfc>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 500);
 8000f2c:	4b38      	ldr	r3, [pc, #224]	; (8001010 <pot+0x100>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f34:	635a      	str	r2, [r3, #52]	; 0x34
		//Servo = ((Avg[1]  * 1100)/4095) + 900;
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, ((Avg[1]  * 1100)/4095) + 900);
		ServoTester = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_2);
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2,ServoTester);
	}
}
 8000f36:	e05f      	b.n	8000ff8 <pot+0xe8>
		else if (Avg[0] < 2048)
 8000f38:	4b33      	ldr	r3, [pc, #204]	; (8001008 <pot+0xf8>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f40:	da15      	bge.n	8000f6e <pot+0x5e>
			state = 2;
 8000f42:	4b32      	ldr	r3, [pc, #200]	; (800100c <pot+0xfc>)
 8000f44:	2202      	movs	r2, #2
 8000f46:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ((Avg[1]  * 2000)/4095) + 500);
 8000f48:	4b2f      	ldr	r3, [pc, #188]	; (8001008 <pot+0xf8>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f50:	fb02 f303 	mul.w	r3, r2, r3
 8000f54:	4a2f      	ldr	r2, [pc, #188]	; (8001014 <pot+0x104>)
 8000f56:	fb82 1203 	smull	r1, r2, r2, r3
 8000f5a:	441a      	add	r2, r3
 8000f5c:	12d2      	asrs	r2, r2, #11
 8000f5e:	17db      	asrs	r3, r3, #31
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8000f66:	4b2a      	ldr	r3, [pc, #168]	; (8001010 <pot+0x100>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f6c:	e044      	b.n	8000ff8 <pot+0xe8>
		else if (Avg[0] < 3072)
 8000f6e:	4b26      	ldr	r3, [pc, #152]	; (8001008 <pot+0xf8>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8000f76:	da15      	bge.n	8000fa4 <pot+0x94>
			state = 3;
 8000f78:	4b24      	ldr	r3, [pc, #144]	; (800100c <pot+0xfc>)
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ((Avg[2]  * 2000)/4095) + 500);
 8000f7e:	4b22      	ldr	r3, [pc, #136]	; (8001008 <pot+0xf8>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f86:	fb02 f303 	mul.w	r3, r2, r3
 8000f8a:	4a22      	ldr	r2, [pc, #136]	; (8001014 <pot+0x104>)
 8000f8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f90:	441a      	add	r2, r3
 8000f92:	12d2      	asrs	r2, r2, #11
 8000f94:	17db      	asrs	r3, r3, #31
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8000f9c:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <pot+0x100>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000fa2:	e029      	b.n	8000ff8 <pot+0xe8>
			state = 4;
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <pot+0xfc>)
 8000fa6:	2204      	movs	r2, #4
 8000fa8:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 2500);
 8000faa:	4b19      	ldr	r3, [pc, #100]	; (8001010 <pot+0x100>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000fb2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000fb4:	e020      	b.n	8000ff8 <pot+0xe8>
	else if (mode == 2)
 8000fb6:	4b13      	ldr	r3, [pc, #76]	; (8001004 <pot+0xf4>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d11c      	bne.n	8000ff8 <pot+0xe8>
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, ((Avg[1]  * 1100)/4095) + 900);
 8000fbe:	4b12      	ldr	r3, [pc, #72]	; (8001008 <pot+0xf8>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f240 424c 	movw	r2, #1100	; 0x44c
 8000fc6:	fb02 f303 	mul.w	r3, r2, r3
 8000fca:	4a12      	ldr	r2, [pc, #72]	; (8001014 <pot+0x104>)
 8000fcc:	fb82 1203 	smull	r1, r2, r2, r3
 8000fd0:	441a      	add	r2, r3
 8000fd2:	12d2      	asrs	r2, r2, #11
 8000fd4:	17db      	asrs	r3, r3, #31
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	f503 7261 	add.w	r2, r3, #900	; 0x384
 8000fdc:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <pot+0x108>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	635a      	str	r2, [r3, #52]	; 0x34
		ServoTester = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_2);
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	; (800101c <pot+0x10c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b0d      	ldr	r3, [pc, #52]	; (8001020 <pot+0x110>)
 8000fec:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2,ServoTester);
 8000fee:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <pot+0x110>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <pot+0x108>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000004 	.word	0x20000004
 8001008:	2000057c 	.word	0x2000057c
 800100c:	20000588 	.word	0x20000588
 8001010:	20000278 	.word	0x20000278
 8001014:	80080081 	.word	0x80080081
 8001018:	200002c4 	.word	0x200002c4
 800101c:	20000194 	.word	0x20000194
 8001020:	2000058c 	.word	0x2000058c

08001024 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_13)
 800102e:	88fb      	ldrh	r3, [r7, #6]
 8001030:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001034:	d10e      	bne.n	8001054 <HAL_GPIO_EXTI_Callback+0x30>
    {
        if(mode==1){mode=2;}
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d103      	bne.n	8001046 <HAL_GPIO_EXTI_Callback+0x22>
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001040:	2202      	movs	r2, #2
 8001042:	601a      	str	r2, [r3, #0]
        else if(mode==2){mode=1;}
    }
}
 8001044:	e006      	b.n	8001054 <HAL_GPIO_EXTI_Callback+0x30>
        else if(mode==2){mode=1;}
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b02      	cmp	r3, #2
 800104c:	d102      	bne.n	8001054 <HAL_GPIO_EXTI_Callback+0x30>
 800104e:	4b04      	ldr	r3, [pc, #16]	; (8001060 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001050:	2201      	movs	r2, #1
 8001052:	601a      	str	r2, [r3, #0]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	20000004 	.word	0x20000004

08001064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001068:	b672      	cpsid	i
}
 800106a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800106c:	e7fe      	b.n	800106c <Error_Handler+0x8>
	...

08001070 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <HAL_MspInit+0x44>)
 8001078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107a:	4a0e      	ldr	r2, [pc, #56]	; (80010b4 <HAL_MspInit+0x44>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6613      	str	r3, [r2, #96]	; 0x60
 8001082:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <HAL_MspInit+0x44>)
 8001084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <HAL_MspInit+0x44>)
 8001090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001092:	4a08      	ldr	r2, [pc, #32]	; (80010b4 <HAL_MspInit+0x44>)
 8001094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001098:	6593      	str	r3, [r2, #88]	; 0x58
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_MspInit+0x44>)
 800109c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80010a6:	f003 f83f 	bl	8004128 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40021000 	.word	0x40021000

080010b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b0a0      	sub	sp, #128	; 0x80
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010d0:	f107 0318 	add.w	r3, r7, #24
 80010d4:	2254      	movs	r2, #84	; 0x54
 80010d6:	2100      	movs	r1, #0
 80010d8:	4618      	mov	r0, r3
 80010da:	f006 fe35 	bl	8007d48 <memset>
  if(hadc->Instance==ADC1)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010e6:	d17f      	bne.n	80011e8 <HAL_ADC_MspInit+0x130>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80010e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80010ee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80010f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010f4:	f107 0318 	add.w	r3, r7, #24
 80010f8:	4618      	mov	r0, r3
 80010fa:	f003 fd53 	bl	8004ba4 <HAL_RCCEx_PeriphCLKConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001104:	f7ff ffae 	bl	8001064 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001108:	4b39      	ldr	r3, [pc, #228]	; (80011f0 <HAL_ADC_MspInit+0x138>)
 800110a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110c:	4a38      	ldr	r2, [pc, #224]	; (80011f0 <HAL_ADC_MspInit+0x138>)
 800110e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001112:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001114:	4b36      	ldr	r3, [pc, #216]	; (80011f0 <HAL_ADC_MspInit+0x138>)
 8001116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001118:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001120:	4b33      	ldr	r3, [pc, #204]	; (80011f0 <HAL_ADC_MspInit+0x138>)
 8001122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001124:	4a32      	ldr	r2, [pc, #200]	; (80011f0 <HAL_ADC_MspInit+0x138>)
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112c:	4b30      	ldr	r3, [pc, #192]	; (80011f0 <HAL_ADC_MspInit+0x138>)
 800112e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001138:	4b2d      	ldr	r3, [pc, #180]	; (80011f0 <HAL_ADC_MspInit+0x138>)
 800113a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113c:	4a2c      	ldr	r2, [pc, #176]	; (80011f0 <HAL_ADC_MspInit+0x138>)
 800113e:	f043 0302 	orr.w	r3, r3, #2
 8001142:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001144:	4b2a      	ldr	r3, [pc, #168]	; (80011f0 <HAL_ADC_MspInit+0x138>)
 8001146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001148:	f003 0302 	and.w	r3, r3, #2
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001150:	2303      	movs	r3, #3
 8001152:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001154:	2303      	movs	r3, #3
 8001156:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001160:	4619      	mov	r1, r3
 8001162:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001166:	f002 fd89 	bl	8003c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800116a:	2301      	movs	r3, #1
 800116c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800116e:	2303      	movs	r3, #3
 8001170:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001176:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800117a:	4619      	mov	r1, r3
 800117c:	481d      	ldr	r0, [pc, #116]	; (80011f4 <HAL_ADC_MspInit+0x13c>)
 800117e:	f002 fd7d 	bl	8003c7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001182:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <HAL_ADC_MspInit+0x140>)
 8001184:	4a1d      	ldr	r2, [pc, #116]	; (80011fc <HAL_ADC_MspInit+0x144>)
 8001186:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <HAL_ADC_MspInit+0x140>)
 800118a:	2205      	movs	r2, #5
 800118c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <HAL_ADC_MspInit+0x140>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001194:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <HAL_ADC_MspInit+0x140>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800119a:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <HAL_ADC_MspInit+0x140>)
 800119c:	2280      	movs	r2, #128	; 0x80
 800119e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011a0:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <HAL_ADC_MspInit+0x140>)
 80011a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011a6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011a8:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <HAL_ADC_MspInit+0x140>)
 80011aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ae:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <HAL_ADC_MspInit+0x140>)
 80011b2:	2220      	movs	r2, #32
 80011b4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <HAL_ADC_MspInit+0x140>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011bc:	480e      	ldr	r0, [pc, #56]	; (80011f8 <HAL_ADC_MspInit+0x140>)
 80011be:	f002 faeb 	bl	8003798 <HAL_DMA_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 80011c8:	f7ff ff4c 	bl	8001064 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <HAL_ADC_MspInit+0x140>)
 80011d0:	655a      	str	r2, [r3, #84]	; 0x54
 80011d2:	4a09      	ldr	r2, [pc, #36]	; (80011f8 <HAL_ADC_MspInit+0x140>)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	2100      	movs	r1, #0
 80011dc:	2012      	movs	r0, #18
 80011de:	f002 faa6 	bl	800372e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80011e2:	2012      	movs	r0, #18
 80011e4:	f002 fabd 	bl	8003762 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011e8:	bf00      	nop
 80011ea:	3780      	adds	r7, #128	; 0x80
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40021000 	.word	0x40021000
 80011f4:	48000400 	.word	0x48000400
 80011f8:	200000a0 	.word	0x200000a0
 80011fc:	40020008 	.word	0x40020008

08001200 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b09e      	sub	sp, #120	; 0x78
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001218:	f107 0310 	add.w	r3, r7, #16
 800121c:	2254      	movs	r2, #84	; 0x54
 800121e:	2100      	movs	r1, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f006 fd91 	bl	8007d48 <memset>
  if(huart->Instance==LPUART1)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a1f      	ldr	r2, [pc, #124]	; (80012a8 <HAL_UART_MspInit+0xa8>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d136      	bne.n	800129e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001230:	2320      	movs	r3, #32
 8001232:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001234:	2300      	movs	r3, #0
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001238:	f107 0310 	add.w	r3, r7, #16
 800123c:	4618      	mov	r0, r3
 800123e:	f003 fcb1 	bl	8004ba4 <HAL_RCCEx_PeriphCLKConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001248:	f7ff ff0c 	bl	8001064 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800124c:	4b17      	ldr	r3, [pc, #92]	; (80012ac <HAL_UART_MspInit+0xac>)
 800124e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001250:	4a16      	ldr	r2, [pc, #88]	; (80012ac <HAL_UART_MspInit+0xac>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001258:	4b14      	ldr	r3, [pc, #80]	; (80012ac <HAL_UART_MspInit+0xac>)
 800125a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <HAL_UART_MspInit+0xac>)
 8001266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001268:	4a10      	ldr	r2, [pc, #64]	; (80012ac <HAL_UART_MspInit+0xac>)
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001270:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <HAL_UART_MspInit+0xac>)
 8001272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800127c:	230c      	movs	r3, #12
 800127e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800128c:	230c      	movs	r3, #12
 800128e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001290:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001294:	4619      	mov	r1, r3
 8001296:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129a:	f002 fcef 	bl	8003c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800129e:	bf00      	nop
 80012a0:	3778      	adds	r7, #120	; 0x78
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40008000 	.word	0x40008000
 80012ac:	40021000 	.word	0x40021000

080012b0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a17      	ldr	r2, [pc, #92]	; (800132c <HAL_TIM_IC_MspInit+0x7c>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d127      	bne.n	8001322 <HAL_TIM_IC_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012d2:	4b17      	ldr	r3, [pc, #92]	; (8001330 <HAL_TIM_IC_MspInit+0x80>)
 80012d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012d6:	4a16      	ldr	r2, [pc, #88]	; (8001330 <HAL_TIM_IC_MspInit+0x80>)
 80012d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012dc:	6613      	str	r3, [r2, #96]	; 0x60
 80012de:	4b14      	ldr	r3, [pc, #80]	; (8001330 <HAL_TIM_IC_MspInit+0x80>)
 80012e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <HAL_TIM_IC_MspInit+0x80>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	4a10      	ldr	r2, [pc, #64]	; (8001330 <HAL_TIM_IC_MspInit+0x80>)
 80012f0:	f043 0304 	orr.w	r3, r3, #4
 80012f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <HAL_TIM_IC_MspInit+0x80>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001302:	2301      	movs	r3, #1
 8001304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	2300      	movs	r3, #0
 8001310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001312:	2302      	movs	r3, #2
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	4619      	mov	r1, r3
 800131c:	4805      	ldr	r0, [pc, #20]	; (8001334 <HAL_TIM_IC_MspInit+0x84>)
 800131e:	f002 fcad 	bl	8003c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001322:	bf00      	nop
 8001324:	3728      	adds	r7, #40	; 0x28
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40012c00 	.word	0x40012c00
 8001330:	40021000 	.word	0x40021000
 8001334:	48000800 	.word	0x48000800

08001338 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001348:	d114      	bne.n	8001374 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800134a:	4b2b      	ldr	r3, [pc, #172]	; (80013f8 <HAL_TIM_Base_MspInit+0xc0>)
 800134c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134e:	4a2a      	ldr	r2, [pc, #168]	; (80013f8 <HAL_TIM_Base_MspInit+0xc0>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6593      	str	r3, [r2, #88]	; 0x58
 8001356:	4b28      	ldr	r3, [pc, #160]	; (80013f8 <HAL_TIM_Base_MspInit+0xc0>)
 8001358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2100      	movs	r1, #0
 8001366:	201c      	movs	r0, #28
 8001368:	f002 f9e1 	bl	800372e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800136c:	201c      	movs	r0, #28
 800136e:	f002 f9f8 	bl	8003762 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001372:	e03c      	b.n	80013ee <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a20      	ldr	r2, [pc, #128]	; (80013fc <HAL_TIM_Base_MspInit+0xc4>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d10c      	bne.n	8001398 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800137e:	4b1e      	ldr	r3, [pc, #120]	; (80013f8 <HAL_TIM_Base_MspInit+0xc0>)
 8001380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001382:	4a1d      	ldr	r2, [pc, #116]	; (80013f8 <HAL_TIM_Base_MspInit+0xc0>)
 8001384:	f043 0302 	orr.w	r3, r3, #2
 8001388:	6593      	str	r3, [r2, #88]	; 0x58
 800138a:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <HAL_TIM_Base_MspInit+0xc0>)
 800138c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]
}
 8001396:	e02a      	b.n	80013ee <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a18      	ldr	r2, [pc, #96]	; (8001400 <HAL_TIM_Base_MspInit+0xc8>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d114      	bne.n	80013cc <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <HAL_TIM_Base_MspInit+0xc0>)
 80013a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a6:	4a14      	ldr	r2, [pc, #80]	; (80013f8 <HAL_TIM_Base_MspInit+0xc0>)
 80013a8:	f043 0304 	orr.w	r3, r3, #4
 80013ac:	6593      	str	r3, [r2, #88]	; 0x58
 80013ae:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <HAL_TIM_Base_MspInit+0xc0>)
 80013b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b2:	f003 0304 	and.w	r3, r3, #4
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2100      	movs	r1, #0
 80013be:	201e      	movs	r0, #30
 80013c0:	f002 f9b5 	bl	800372e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013c4:	201e      	movs	r0, #30
 80013c6:	f002 f9cc 	bl	8003762 <HAL_NVIC_EnableIRQ>
}
 80013ca:	e010      	b.n	80013ee <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0c      	ldr	r2, [pc, #48]	; (8001404 <HAL_TIM_Base_MspInit+0xcc>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d10b      	bne.n	80013ee <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <HAL_TIM_Base_MspInit+0xc0>)
 80013d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013da:	4a07      	ldr	r2, [pc, #28]	; (80013f8 <HAL_TIM_Base_MspInit+0xc0>)
 80013dc:	f043 0308 	orr.w	r3, r3, #8
 80013e0:	6593      	str	r3, [r2, #88]	; 0x58
 80013e2:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <HAL_TIM_Base_MspInit+0xc0>)
 80013e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e6:	f003 0308 	and.w	r3, r3, #8
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
}
 80013ee:	bf00      	nop
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40000400 	.word	0x40000400
 8001400:	40000800 	.word	0x40000800
 8001404:	40000c00 	.word	0x40000c00

08001408 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a31      	ldr	r2, [pc, #196]	; (80014ec <HAL_TIM_MspPostInit+0xe4>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d11e      	bne.n	8001468 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	4b31      	ldr	r3, [pc, #196]	; (80014f0 <HAL_TIM_MspPostInit+0xe8>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142e:	4a30      	ldr	r2, [pc, #192]	; (80014f0 <HAL_TIM_MspPostInit+0xe8>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001436:	4b2e      	ldr	r3, [pc, #184]	; (80014f0 <HAL_TIM_MspPostInit+0xe8>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001442:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001448:	2302      	movs	r3, #2
 800144a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	2300      	movs	r3, #0
 8001452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001454:	230a      	movs	r3, #10
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	4619      	mov	r1, r3
 800145e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001462:	f002 fc0b 	bl	8003c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001466:	e03d      	b.n	80014e4 <HAL_TIM_MspPostInit+0xdc>
  else if(htim->Instance==TIM5)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a21      	ldr	r2, [pc, #132]	; (80014f4 <HAL_TIM_MspPostInit+0xec>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d138      	bne.n	80014e4 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001472:	4b1f      	ldr	r3, [pc, #124]	; (80014f0 <HAL_TIM_MspPostInit+0xe8>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001476:	4a1e      	ldr	r2, [pc, #120]	; (80014f0 <HAL_TIM_MspPostInit+0xe8>)
 8001478:	f043 0302 	orr.w	r3, r3, #2
 800147c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800147e:	4b1c      	ldr	r3, [pc, #112]	; (80014f0 <HAL_TIM_MspPostInit+0xe8>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800148a:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <HAL_TIM_MspPostInit+0xe8>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148e:	4a18      	ldr	r2, [pc, #96]	; (80014f0 <HAL_TIM_MspPostInit+0xe8>)
 8001490:	f043 0304 	orr.w	r3, r3, #4
 8001494:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001496:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <HAL_TIM_MspPostInit+0xe8>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014a2:	2304      	movs	r3, #4
 80014a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	2300      	movs	r3, #0
 80014b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80014b2:	2302      	movs	r3, #2
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	480e      	ldr	r0, [pc, #56]	; (80014f8 <HAL_TIM_MspPostInit+0xf0>)
 80014be:	f002 fbdd 	bl	8003c7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80014c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 80014d4:	2301      	movs	r3, #1
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4619      	mov	r1, r3
 80014de:	4807      	ldr	r0, [pc, #28]	; (80014fc <HAL_TIM_MspPostInit+0xf4>)
 80014e0:	f002 fbcc 	bl	8003c7c <HAL_GPIO_Init>
}
 80014e4:	bf00      	nop
 80014e6:	3728      	adds	r7, #40	; 0x28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40000800 	.word	0x40000800
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40000c00 	.word	0x40000c00
 80014f8:	48000400 	.word	0x48000400
 80014fc:	48000800 	.word	0x48000800

08001500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001504:	e7fe      	b.n	8001504 <NMI_Handler+0x4>

08001506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <HardFault_Handler+0x4>

0800150c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <MemManage_Handler+0x4>

08001512 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001516:	e7fe      	b.n	8001516 <BusFault_Handler+0x4>

08001518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800151c:	e7fe      	b.n	800151c <UsageFault_Handler+0x4>

0800151e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800154c:	f000 f8c0 	bl	80016d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}

08001554 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001558:	4802      	ldr	r0, [pc, #8]	; (8001564 <DMA1_Channel1_IRQHandler+0x10>)
 800155a:	f002 fa40 	bl	80039de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200000a0 	.word	0x200000a0

08001568 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800156c:	4802      	ldr	r0, [pc, #8]	; (8001578 <ADC1_2_IRQHandler+0x10>)
 800156e:	f000 fdc3 	bl	80020f8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000034 	.word	0x20000034

0800157c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001580:	4802      	ldr	r0, [pc, #8]	; (800158c <TIM2_IRQHandler+0x10>)
 8001582:	f004 f96d 	bl	8005860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200001e0 	.word	0x200001e0

08001590 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <TIM4_IRQHandler+0x10>)
 8001596:	f004 f963 	bl	8005860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000278 	.word	0x20000278

080015a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80015a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015ac:	f002 fd00 	bl	8003fb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <SystemInit+0x20>)
 80015ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015be:	4a05      	ldr	r2, [pc, #20]	; (80015d4 <SystemInit+0x20>)
 80015c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015d8:	480d      	ldr	r0, [pc, #52]	; (8001610 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015da:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015dc:	f7ff ffea 	bl	80015b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015e0:	480c      	ldr	r0, [pc, #48]	; (8001614 <LoopForever+0x6>)
  ldr r1, =_edata
 80015e2:	490d      	ldr	r1, [pc, #52]	; (8001618 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015e4:	4a0d      	ldr	r2, [pc, #52]	; (800161c <LoopForever+0xe>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80015e8:	e002      	b.n	80015f0 <LoopCopyDataInit>

080015ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ee:	3304      	adds	r3, #4

080015f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f4:	d3f9      	bcc.n	80015ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015f6:	4a0a      	ldr	r2, [pc, #40]	; (8001620 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015f8:	4c0a      	ldr	r4, [pc, #40]	; (8001624 <LoopForever+0x16>)
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015fc:	e001      	b.n	8001602 <LoopFillZerobss>

080015fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001600:	3204      	adds	r2, #4

08001602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001604:	d3fb      	bcc.n	80015fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001606:	f006 fba7 	bl	8007d58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800160a:	f7fe ff83 	bl	8000514 <main>

0800160e <LoopForever>:

LoopForever:
    b LoopForever
 800160e:	e7fe      	b.n	800160e <LoopForever>
  ldr   r0, =_estack
 8001610:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001618:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800161c:	08007e08 	.word	0x08007e08
  ldr r2, =_sbss
 8001620:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001624:	20000594 	.word	0x20000594

08001628 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001628:	e7fe      	b.n	8001628 <ADC3_IRQHandler>

0800162a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001630:	2300      	movs	r3, #0
 8001632:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001634:	2003      	movs	r0, #3
 8001636:	f002 f86f 	bl	8003718 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800163a:	2000      	movs	r0, #0
 800163c:	f000 f80e 	bl	800165c <HAL_InitTick>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d002      	beq.n	800164c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	71fb      	strb	r3, [r7, #7]
 800164a:	e001      	b.n	8001650 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800164c:	f7ff fd10 	bl	8001070 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001650:	79fb      	ldrb	r3, [r7, #7]

}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001664:	2300      	movs	r3, #0
 8001666:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001668:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <HAL_InitTick+0x68>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d022      	beq.n	80016b6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001670:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <HAL_InitTick+0x6c>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <HAL_InitTick+0x68>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800167c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001680:	fbb2 f3f3 	udiv	r3, r2, r3
 8001684:	4618      	mov	r0, r3
 8001686:	f002 f87a 	bl	800377e <HAL_SYSTICK_Config>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d10f      	bne.n	80016b0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b0f      	cmp	r3, #15
 8001694:	d809      	bhi.n	80016aa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001696:	2200      	movs	r2, #0
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	f04f 30ff 	mov.w	r0, #4294967295
 800169e:	f002 f846 	bl	800372e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016a2:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <HAL_InitTick+0x70>)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	e007      	b.n	80016ba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	73fb      	strb	r3, [r7, #15]
 80016ae:	e004      	b.n	80016ba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	73fb      	strb	r3, [r7, #15]
 80016b4:	e001      	b.n	80016ba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000010 	.word	0x20000010
 80016c8:	20000008 	.word	0x20000008
 80016cc:	2000000c 	.word	0x2000000c

080016d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d4:	4b05      	ldr	r3, [pc, #20]	; (80016ec <HAL_IncTick+0x1c>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <HAL_IncTick+0x20>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4413      	add	r3, r2
 80016de:	4a03      	ldr	r2, [pc, #12]	; (80016ec <HAL_IncTick+0x1c>)
 80016e0:	6013      	str	r3, [r2, #0]
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	20000590 	.word	0x20000590
 80016f0:	20000010 	.word	0x20000010

080016f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return uwTick;
 80016f8:	4b03      	ldr	r3, [pc, #12]	; (8001708 <HAL_GetTick+0x14>)
 80016fa:	681b      	ldr	r3, [r3, #0]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000590 	.word	0x20000590

0800170c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	431a      	orrs	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	609a      	str	r2, [r3, #8]
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	609a      	str	r2, [r3, #8]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001768:	4618      	mov	r0, r3
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001774:	b480      	push	{r7}
 8001776:	b087      	sub	sp, #28
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
 8001780:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	3360      	adds	r3, #96	; 0x60
 8001786:	461a      	mov	r2, r3
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <LL_ADC_SetOffset+0x44>)
 8001796:	4013      	ands	r3, r2
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	4313      	orrs	r3, r2
 80017a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80017ac:	bf00      	nop
 80017ae:	371c      	adds	r7, #28
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	03fff000 	.word	0x03fff000

080017bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3360      	adds	r3, #96	; 0x60
 80017ca:	461a      	mov	r2, r3
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b087      	sub	sp, #28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	3360      	adds	r3, #96	; 0x60
 80017f8:	461a      	mov	r2, r3
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	431a      	orrs	r2, r3
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001812:	bf00      	nop
 8001814:	371c      	adds	r7, #28
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800181e:	b480      	push	{r7}
 8001820:	b087      	sub	sp, #28
 8001822:	af00      	add	r7, sp, #0
 8001824:	60f8      	str	r0, [r7, #12]
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	3360      	adds	r3, #96	; 0x60
 800182e:	461a      	mov	r2, r3
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	431a      	orrs	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001848:	bf00      	nop
 800184a:	371c      	adds	r7, #28
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001854:	b480      	push	{r7}
 8001856:	b087      	sub	sp, #28
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	3360      	adds	r3, #96	; 0x60
 8001864:	461a      	mov	r2, r3
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	431a      	orrs	r2, r3
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800187e:	bf00      	nop
 8001880:	371c      	adds	r7, #28
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	695b      	ldr	r3, [r3, #20]
 8001898:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	615a      	str	r2, [r3, #20]
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80018c4:	2301      	movs	r3, #1
 80018c6:	e000      	b.n	80018ca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b087      	sub	sp, #28
 80018da:	af00      	add	r7, sp, #0
 80018dc:	60f8      	str	r0, [r7, #12]
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	3330      	adds	r3, #48	; 0x30
 80018e6:	461a      	mov	r2, r3
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	0a1b      	lsrs	r3, r3, #8
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	f003 030c 	and.w	r3, r3, #12
 80018f2:	4413      	add	r3, r2
 80018f4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	f003 031f 	and.w	r3, r3, #31
 8001900:	211f      	movs	r1, #31
 8001902:	fa01 f303 	lsl.w	r3, r1, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	401a      	ands	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	0e9b      	lsrs	r3, r3, #26
 800190e:	f003 011f 	and.w	r1, r3, #31
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	f003 031f 	and.w	r3, r3, #31
 8001918:	fa01 f303 	lsl.w	r3, r1, r3
 800191c:	431a      	orrs	r2, r3
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001922:	bf00      	nop
 8001924:	371c      	adds	r7, #28
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001954:	b480      	push	{r7}
 8001956:	b087      	sub	sp, #28
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	3314      	adds	r3, #20
 8001964:	461a      	mov	r2, r3
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	0e5b      	lsrs	r3, r3, #25
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	4413      	add	r3, r2
 8001972:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	0d1b      	lsrs	r3, r3, #20
 800197c:	f003 031f 	and.w	r3, r3, #31
 8001980:	2107      	movs	r1, #7
 8001982:	fa01 f303 	lsl.w	r3, r1, r3
 8001986:	43db      	mvns	r3, r3
 8001988:	401a      	ands	r2, r3
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	0d1b      	lsrs	r3, r3, #20
 800198e:	f003 031f 	and.w	r3, r3, #31
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	fa01 f303 	lsl.w	r3, r1, r3
 8001998:	431a      	orrs	r2, r3
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800199e:	bf00      	nop
 80019a0:	371c      	adds	r7, #28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019c4:	43db      	mvns	r3, r3
 80019c6:	401a      	ands	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f003 0318 	and.w	r3, r3, #24
 80019ce:	4908      	ldr	r1, [pc, #32]	; (80019f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80019d0:	40d9      	lsrs	r1, r3
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	400b      	ands	r3, r1
 80019d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019da:	431a      	orrs	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80019e2:	bf00      	nop
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	0007ffff 	.word	0x0007ffff

080019f4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 031f 	and.w	r3, r3, #31
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6093      	str	r3, [r2, #8]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a64:	d101      	bne.n	8001a6a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a66:	2301      	movs	r3, #1
 8001a68:	e000      	b.n	8001a6c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ab4:	d101      	bne.n	8001aba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e000      	b.n	8001abc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ad8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001adc:	f043 0201 	orr.w	r2, r3, #1
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b04:	f043 0202 	orr.w	r2, r3, #2
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d101      	bne.n	8001b30 <LL_ADC_IsEnabled+0x18>
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e000      	b.n	8001b32 <LL_ADC_IsEnabled+0x1a>
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d101      	bne.n	8001b56 <LL_ADC_IsDisableOngoing+0x18>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <LL_ADC_IsDisableOngoing+0x1a>
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b78:	f043 0204 	orr.w	r2, r3, #4
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d101      	bne.n	8001ba4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e000      	b.n	8001ba6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	2b08      	cmp	r3, #8
 8001bc4:	d101      	bne.n	8001bca <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bd8:	b590      	push	{r4, r7, lr}
 8001bda:	b089      	sub	sp, #36	; 0x24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e1a9      	b.n	8001f46 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d109      	bne.n	8001c14 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff fa59 	bl	80010b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ff19 	bl	8001a50 <LL_ADC_IsDeepPowerDownEnabled>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d004      	beq.n	8001c2e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff feff 	bl	8001a2c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff ff34 	bl	8001aa0 <LL_ADC_IsInternalRegulatorEnabled>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d115      	bne.n	8001c6a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff ff18 	bl	8001a78 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c48:	4b9c      	ldr	r3, [pc, #624]	; (8001ebc <HAL_ADC_Init+0x2e4>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	099b      	lsrs	r3, r3, #6
 8001c4e:	4a9c      	ldr	r2, [pc, #624]	; (8001ec0 <HAL_ADC_Init+0x2e8>)
 8001c50:	fba2 2303 	umull	r2, r3, r2, r3
 8001c54:	099b      	lsrs	r3, r3, #6
 8001c56:	3301      	adds	r3, #1
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c5c:	e002      	b.n	8001c64 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	3b01      	subs	r3, #1
 8001c62:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f9      	bne.n	8001c5e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff ff16 	bl	8001aa0 <LL_ADC_IsInternalRegulatorEnabled>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10d      	bne.n	8001c96 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7e:	f043 0210 	orr.w	r2, r3, #16
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c8a:	f043 0201 	orr.w	r2, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff ff76 	bl	8001b8c <LL_ADC_REG_IsConversionOngoing>
 8001ca0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca6:	f003 0310 	and.w	r3, r3, #16
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f040 8142 	bne.w	8001f34 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f040 813e 	bne.w	8001f34 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cbc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001cc0:	f043 0202 	orr.w	r2, r3, #2
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff23 	bl	8001b18 <LL_ADC_IsEnabled>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d141      	bne.n	8001d5c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ce0:	d004      	beq.n	8001cec <HAL_ADC_Init+0x114>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a77      	ldr	r2, [pc, #476]	; (8001ec4 <HAL_ADC_Init+0x2ec>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d10f      	bne.n	8001d0c <HAL_ADC_Init+0x134>
 8001cec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001cf0:	f7ff ff12 	bl	8001b18 <LL_ADC_IsEnabled>
 8001cf4:	4604      	mov	r4, r0
 8001cf6:	4873      	ldr	r0, [pc, #460]	; (8001ec4 <HAL_ADC_Init+0x2ec>)
 8001cf8:	f7ff ff0e 	bl	8001b18 <LL_ADC_IsEnabled>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	4323      	orrs	r3, r4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	bf0c      	ite	eq
 8001d04:	2301      	moveq	r3, #1
 8001d06:	2300      	movne	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	e012      	b.n	8001d32 <HAL_ADC_Init+0x15a>
 8001d0c:	486e      	ldr	r0, [pc, #440]	; (8001ec8 <HAL_ADC_Init+0x2f0>)
 8001d0e:	f7ff ff03 	bl	8001b18 <LL_ADC_IsEnabled>
 8001d12:	4604      	mov	r4, r0
 8001d14:	486d      	ldr	r0, [pc, #436]	; (8001ecc <HAL_ADC_Init+0x2f4>)
 8001d16:	f7ff feff 	bl	8001b18 <LL_ADC_IsEnabled>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	431c      	orrs	r4, r3
 8001d1e:	486c      	ldr	r0, [pc, #432]	; (8001ed0 <HAL_ADC_Init+0x2f8>)
 8001d20:	f7ff fefa 	bl	8001b18 <LL_ADC_IsEnabled>
 8001d24:	4603      	mov	r3, r0
 8001d26:	4323      	orrs	r3, r4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	bf0c      	ite	eq
 8001d2c:	2301      	moveq	r3, #1
 8001d2e:	2300      	movne	r3, #0
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d012      	beq.n	8001d5c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d3e:	d004      	beq.n	8001d4a <HAL_ADC_Init+0x172>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a5f      	ldr	r2, [pc, #380]	; (8001ec4 <HAL_ADC_Init+0x2ec>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d101      	bne.n	8001d4e <HAL_ADC_Init+0x176>
 8001d4a:	4a62      	ldr	r2, [pc, #392]	; (8001ed4 <HAL_ADC_Init+0x2fc>)
 8001d4c:	e000      	b.n	8001d50 <HAL_ADC_Init+0x178>
 8001d4e:	4a62      	ldr	r2, [pc, #392]	; (8001ed8 <HAL_ADC_Init+0x300>)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	4619      	mov	r1, r3
 8001d56:	4610      	mov	r0, r2
 8001d58:	f7ff fcd8 	bl	800170c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	7f5b      	ldrb	r3, [r3, #29]
 8001d60:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d66:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001d6c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001d72:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d7a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d106      	bne.n	8001d98 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	045b      	lsls	r3, r3, #17
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d009      	beq.n	8001db4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dac:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	4b48      	ldr	r3, [pc, #288]	; (8001edc <HAL_ADC_Init+0x304>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6812      	ldr	r2, [r2, #0]
 8001dc2:	69b9      	ldr	r1, [r7, #24]
 8001dc4:	430b      	orrs	r3, r1
 8001dc6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff fee5 	bl	8001bb2 <LL_ADC_INJ_IsConversionOngoing>
 8001de8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d17f      	bne.n	8001ef0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d17c      	bne.n	8001ef0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001dfa:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e02:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e12:	f023 0302 	bic.w	r3, r3, #2
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6812      	ldr	r2, [r2, #0]
 8001e1a:	69b9      	ldr	r1, [r7, #24]
 8001e1c:	430b      	orrs	r3, r1
 8001e1e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d017      	beq.n	8001e58 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	691a      	ldr	r2, [r3, #16]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e36:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e40:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6911      	ldr	r1, [r2, #16]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6812      	ldr	r2, [r2, #0]
 8001e50:	430b      	orrs	r3, r1
 8001e52:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001e56:	e013      	b.n	8001e80 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	691a      	ldr	r2, [r3, #16]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e66:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e7c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d12a      	bne.n	8001ee0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001e94:	f023 0304 	bic.w	r3, r3, #4
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ea0:	4311      	orrs	r1, r2
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001ea6:	4311      	orrs	r1, r2
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001eac:	430a      	orrs	r2, r1
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 0201 	orr.w	r2, r2, #1
 8001eb8:	611a      	str	r2, [r3, #16]
 8001eba:	e019      	b.n	8001ef0 <HAL_ADC_Init+0x318>
 8001ebc:	20000008 	.word	0x20000008
 8001ec0:	053e2d63 	.word	0x053e2d63
 8001ec4:	50000100 	.word	0x50000100
 8001ec8:	50000400 	.word	0x50000400
 8001ecc:	50000500 	.word	0x50000500
 8001ed0:	50000600 	.word	0x50000600
 8001ed4:	50000300 	.word	0x50000300
 8001ed8:	50000700 	.word	0x50000700
 8001edc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691a      	ldr	r2, [r3, #16]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 0201 	bic.w	r2, r2, #1
 8001eee:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d10c      	bne.n	8001f12 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	f023 010f 	bic.w	r1, r3, #15
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	1e5a      	subs	r2, r3, #1
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	631a      	str	r2, [r3, #48]	; 0x30
 8001f10:	e007      	b.n	8001f22 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 020f 	bic.w	r2, r2, #15
 8001f20:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f26:	f023 0303 	bic.w	r3, r3, #3
 8001f2a:	f043 0201 	orr.w	r2, r3, #1
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f32:	e007      	b.n	8001f44 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f38:	f043 0210 	orr.w	r2, r3, #16
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f44:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3724      	adds	r7, #36	; 0x24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd90      	pop	{r4, r7, pc}
 8001f4e:	bf00      	nop

08001f50 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f64:	d004      	beq.n	8001f70 <HAL_ADC_Start_DMA+0x20>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a5a      	ldr	r2, [pc, #360]	; (80020d4 <HAL_ADC_Start_DMA+0x184>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d101      	bne.n	8001f74 <HAL_ADC_Start_DMA+0x24>
 8001f70:	4b59      	ldr	r3, [pc, #356]	; (80020d8 <HAL_ADC_Start_DMA+0x188>)
 8001f72:	e000      	b.n	8001f76 <HAL_ADC_Start_DMA+0x26>
 8001f74:	4b59      	ldr	r3, [pc, #356]	; (80020dc <HAL_ADC_Start_DMA+0x18c>)
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fd3c 	bl	80019f4 <LL_ADC_GetMultimode>
 8001f7c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff fe02 	bl	8001b8c <LL_ADC_REG_IsConversionOngoing>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f040 809b 	bne.w	80020c6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d101      	bne.n	8001f9e <HAL_ADC_Start_DMA+0x4e>
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	e096      	b.n	80020cc <HAL_ADC_Start_DMA+0x17c>
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a4d      	ldr	r2, [pc, #308]	; (80020e0 <HAL_ADC_Start_DMA+0x190>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d008      	beq.n	8001fc2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d005      	beq.n	8001fc2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	2b05      	cmp	r3, #5
 8001fba:	d002      	beq.n	8001fc2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	2b09      	cmp	r3, #9
 8001fc0:	d17a      	bne.n	80020b8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f000 ff60 	bl	8002e88 <ADC_Enable>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001fcc:	7dfb      	ldrb	r3, [r7, #23]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d16d      	bne.n	80020ae <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001fda:	f023 0301 	bic.w	r3, r3, #1
 8001fde:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a3a      	ldr	r2, [pc, #232]	; (80020d4 <HAL_ADC_Start_DMA+0x184>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d009      	beq.n	8002004 <HAL_ADC_Start_DMA+0xb4>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a3b      	ldr	r2, [pc, #236]	; (80020e4 <HAL_ADC_Start_DMA+0x194>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d002      	beq.n	8002000 <HAL_ADC_Start_DMA+0xb0>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	e003      	b.n	8002008 <HAL_ADC_Start_DMA+0xb8>
 8002000:	4b39      	ldr	r3, [pc, #228]	; (80020e8 <HAL_ADC_Start_DMA+0x198>)
 8002002:	e001      	b.n	8002008 <HAL_ADC_Start_DMA+0xb8>
 8002004:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	6812      	ldr	r2, [r2, #0]
 800200c:	4293      	cmp	r3, r2
 800200e:	d002      	beq.n	8002016 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d105      	bne.n	8002022 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002026:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d006      	beq.n	800203c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002032:	f023 0206 	bic.w	r2, r3, #6
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	661a      	str	r2, [r3, #96]	; 0x60
 800203a:	e002      	b.n	8002042 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002046:	4a29      	ldr	r2, [pc, #164]	; (80020ec <HAL_ADC_Start_DMA+0x19c>)
 8002048:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204e:	4a28      	ldr	r2, [pc, #160]	; (80020f0 <HAL_ADC_Start_DMA+0x1a0>)
 8002050:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002056:	4a27      	ldr	r2, [pc, #156]	; (80020f4 <HAL_ADC_Start_DMA+0x1a4>)
 8002058:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	221c      	movs	r2, #28
 8002060:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f042 0210 	orr.w	r2, r2, #16
 8002078:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f042 0201 	orr.w	r2, r2, #1
 8002088:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	3340      	adds	r3, #64	; 0x40
 8002094:	4619      	mov	r1, r3
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f001 fc25 	bl	80038e8 <HAL_DMA_Start_IT>
 800209e:	4603      	mov	r3, r0
 80020a0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff fd5c 	bl	8001b64 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80020ac:	e00d      	b.n	80020ca <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80020b6:	e008      	b.n	80020ca <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80020c4:	e001      	b.n	80020ca <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80020c6:	2302      	movs	r3, #2
 80020c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80020ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	50000100 	.word	0x50000100
 80020d8:	50000300 	.word	0x50000300
 80020dc:	50000700 	.word	0x50000700
 80020e0:	50000600 	.word	0x50000600
 80020e4:	50000500 	.word	0x50000500
 80020e8:	50000400 	.word	0x50000400
 80020ec:	08003073 	.word	0x08003073
 80020f0:	0800314b 	.word	0x0800314b
 80020f4:	08003167 	.word	0x08003167

080020f8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08a      	sub	sp, #40	; 0x28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002100:	2300      	movs	r3, #0
 8002102:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800211c:	d004      	beq.n	8002128 <HAL_ADC_IRQHandler+0x30>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a8e      	ldr	r2, [pc, #568]	; (800235c <HAL_ADC_IRQHandler+0x264>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d101      	bne.n	800212c <HAL_ADC_IRQHandler+0x34>
 8002128:	4b8d      	ldr	r3, [pc, #564]	; (8002360 <HAL_ADC_IRQHandler+0x268>)
 800212a:	e000      	b.n	800212e <HAL_ADC_IRQHandler+0x36>
 800212c:	4b8d      	ldr	r3, [pc, #564]	; (8002364 <HAL_ADC_IRQHandler+0x26c>)
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff fc60 	bl	80019f4 <LL_ADC_GetMultimode>
 8002134:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d017      	beq.n	8002170 <HAL_ADC_IRQHandler+0x78>
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d012      	beq.n	8002170 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214e:	f003 0310 	and.w	r3, r3, #16
 8002152:	2b00      	cmp	r3, #0
 8002154:	d105      	bne.n	8002162 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f001 f8f6 	bl	8003354 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2202      	movs	r2, #2
 800216e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f003 0304 	and.w	r3, r3, #4
 8002176:	2b00      	cmp	r3, #0
 8002178:	d004      	beq.n	8002184 <HAL_ADC_IRQHandler+0x8c>
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10b      	bne.n	800219c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 8094 	beq.w	80022b8 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 808e 	beq.w	80022b8 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d105      	bne.n	80021b4 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff fb79 	bl	80018b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d072      	beq.n	80022aa <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a64      	ldr	r2, [pc, #400]	; (800235c <HAL_ADC_IRQHandler+0x264>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d009      	beq.n	80021e2 <HAL_ADC_IRQHandler+0xea>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a65      	ldr	r2, [pc, #404]	; (8002368 <HAL_ADC_IRQHandler+0x270>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d002      	beq.n	80021de <HAL_ADC_IRQHandler+0xe6>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	e003      	b.n	80021e6 <HAL_ADC_IRQHandler+0xee>
 80021de:	4b63      	ldr	r3, [pc, #396]	; (800236c <HAL_ADC_IRQHandler+0x274>)
 80021e0:	e001      	b.n	80021e6 <HAL_ADC_IRQHandler+0xee>
 80021e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6812      	ldr	r2, [r2, #0]
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d008      	beq.n	8002200 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d005      	beq.n	8002200 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2b05      	cmp	r3, #5
 80021f8:	d002      	beq.n	8002200 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2b09      	cmp	r3, #9
 80021fe:	d104      	bne.n	800220a <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	623b      	str	r3, [r7, #32]
 8002208:	e014      	b.n	8002234 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a53      	ldr	r2, [pc, #332]	; (800235c <HAL_ADC_IRQHandler+0x264>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d009      	beq.n	8002228 <HAL_ADC_IRQHandler+0x130>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a53      	ldr	r2, [pc, #332]	; (8002368 <HAL_ADC_IRQHandler+0x270>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d002      	beq.n	8002224 <HAL_ADC_IRQHandler+0x12c>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	e003      	b.n	800222c <HAL_ADC_IRQHandler+0x134>
 8002224:	4b51      	ldr	r3, [pc, #324]	; (800236c <HAL_ADC_IRQHandler+0x274>)
 8002226:	e001      	b.n	800222c <HAL_ADC_IRQHandler+0x134>
 8002228:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800222c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002234:	6a3b      	ldr	r3, [r7, #32]
 8002236:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d135      	bne.n	80022aa <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	2b08      	cmp	r3, #8
 800224a:	d12e      	bne.n	80022aa <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff fc9b 	bl	8001b8c <LL_ADC_REG_IsConversionOngoing>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d11a      	bne.n	8002292 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 020c 	bic.w	r2, r2, #12
 800226a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002270:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d112      	bne.n	80022aa <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002288:	f043 0201 	orr.w	r2, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002290:	e00b      	b.n	80022aa <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002296:	f043 0210 	orr.w	r2, r3, #16
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a2:	f043 0201 	orr.w	r2, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f984 	bl	80025b8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	220c      	movs	r2, #12
 80022b6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f003 0320 	and.w	r3, r3, #32
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d004      	beq.n	80022cc <HAL_ADC_IRQHandler+0x1d4>
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	f003 0320 	and.w	r3, r3, #32
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10b      	bne.n	80022e4 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f000 80b3 	beq.w	800243e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 80ad 	beq.w	800243e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e8:	f003 0310 	and.w	r3, r3, #16
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d105      	bne.n	80022fc <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff fb14 	bl	800192e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002306:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff facf 	bl	80018b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002312:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a10      	ldr	r2, [pc, #64]	; (800235c <HAL_ADC_IRQHandler+0x264>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d009      	beq.n	8002332 <HAL_ADC_IRQHandler+0x23a>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a11      	ldr	r2, [pc, #68]	; (8002368 <HAL_ADC_IRQHandler+0x270>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d002      	beq.n	800232e <HAL_ADC_IRQHandler+0x236>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	e003      	b.n	8002336 <HAL_ADC_IRQHandler+0x23e>
 800232e:	4b0f      	ldr	r3, [pc, #60]	; (800236c <HAL_ADC_IRQHandler+0x274>)
 8002330:	e001      	b.n	8002336 <HAL_ADC_IRQHandler+0x23e>
 8002332:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6812      	ldr	r2, [r2, #0]
 800233a:	4293      	cmp	r3, r2
 800233c:	d008      	beq.n	8002350 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	2b06      	cmp	r3, #6
 8002348:	d002      	beq.n	8002350 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2b07      	cmp	r3, #7
 800234e:	d10f      	bne.n	8002370 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	623b      	str	r3, [r7, #32]
 8002358:	e01f      	b.n	800239a <HAL_ADC_IRQHandler+0x2a2>
 800235a:	bf00      	nop
 800235c:	50000100 	.word	0x50000100
 8002360:	50000300 	.word	0x50000300
 8002364:	50000700 	.word	0x50000700
 8002368:	50000500 	.word	0x50000500
 800236c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a8b      	ldr	r2, [pc, #556]	; (80025a4 <HAL_ADC_IRQHandler+0x4ac>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d009      	beq.n	800238e <HAL_ADC_IRQHandler+0x296>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a8a      	ldr	r2, [pc, #552]	; (80025a8 <HAL_ADC_IRQHandler+0x4b0>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d002      	beq.n	800238a <HAL_ADC_IRQHandler+0x292>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	e003      	b.n	8002392 <HAL_ADC_IRQHandler+0x29a>
 800238a:	4b88      	ldr	r3, [pc, #544]	; (80025ac <HAL_ADC_IRQHandler+0x4b4>)
 800238c:	e001      	b.n	8002392 <HAL_ADC_IRQHandler+0x29a>
 800238e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002392:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d047      	beq.n	8002430 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d007      	beq.n	80023ba <HAL_ADC_IRQHandler+0x2c2>
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d03f      	beq.n	8002430 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80023b0:	6a3b      	ldr	r3, [r7, #32]
 80023b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d13a      	bne.n	8002430 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c4:	2b40      	cmp	r3, #64	; 0x40
 80023c6:	d133      	bne.n	8002430 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80023c8:	6a3b      	ldr	r3, [r7, #32]
 80023ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d12e      	bne.n	8002430 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fbeb 	bl	8001bb2 <LL_ADC_INJ_IsConversionOngoing>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d11a      	bne.n	8002418 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80023f0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002406:	2b00      	cmp	r3, #0
 8002408:	d112      	bne.n	8002430 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240e:	f043 0201 	orr.w	r2, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	65da      	str	r2, [r3, #92]	; 0x5c
 8002416:	e00b      	b.n	8002430 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241c:	f043 0210 	orr.w	r2, r3, #16
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002428:	f043 0201 	orr.w	r2, r3, #1
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 ff67 	bl	8003304 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2260      	movs	r2, #96	; 0x60
 800243c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002444:	2b00      	cmp	r3, #0
 8002446:	d011      	beq.n	800246c <HAL_ADC_IRQHandler+0x374>
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00c      	beq.n	800246c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002456:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f8be 	bl	80025e0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2280      	movs	r2, #128	; 0x80
 800246a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002472:	2b00      	cmp	r3, #0
 8002474:	d012      	beq.n	800249c <HAL_ADC_IRQHandler+0x3a4>
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00d      	beq.n	800249c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002484:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 ff4d 	bl	800332c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f44f 7280 	mov.w	r2, #256	; 0x100
 800249a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d012      	beq.n	80024cc <HAL_ADC_IRQHandler+0x3d4>
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00d      	beq.n	80024cc <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 ff3f 	bl	8003340 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024ca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f003 0310 	and.w	r3, r3, #16
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d043      	beq.n	800255e <HAL_ADC_IRQHandler+0x466>
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	f003 0310 	and.w	r3, r3, #16
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d03e      	beq.n	800255e <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d102      	bne.n	80024ee <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80024e8:	2301      	movs	r3, #1
 80024ea:	627b      	str	r3, [r7, #36]	; 0x24
 80024ec:	e021      	b.n	8002532 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d015      	beq.n	8002520 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024fc:	d004      	beq.n	8002508 <HAL_ADC_IRQHandler+0x410>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a28      	ldr	r2, [pc, #160]	; (80025a4 <HAL_ADC_IRQHandler+0x4ac>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d101      	bne.n	800250c <HAL_ADC_IRQHandler+0x414>
 8002508:	4b29      	ldr	r3, [pc, #164]	; (80025b0 <HAL_ADC_IRQHandler+0x4b8>)
 800250a:	e000      	b.n	800250e <HAL_ADC_IRQHandler+0x416>
 800250c:	4b29      	ldr	r3, [pc, #164]	; (80025b4 <HAL_ADC_IRQHandler+0x4bc>)
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fa7e 	bl	8001a10 <LL_ADC_GetMultiDMATransfer>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00b      	beq.n	8002532 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800251a:	2301      	movs	r3, #1
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
 800251e:	e008      	b.n	8002532 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800252e:	2301      	movs	r3, #1
 8002530:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	2b01      	cmp	r3, #1
 8002536:	d10e      	bne.n	8002556 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002548:	f043 0202 	orr.w	r2, r3, #2
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 f84f 	bl	80025f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2210      	movs	r2, #16
 800255c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002564:	2b00      	cmp	r3, #0
 8002566:	d018      	beq.n	800259a <HAL_ADC_IRQHandler+0x4a2>
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800256e:	2b00      	cmp	r3, #0
 8002570:	d013      	beq.n	800259a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002576:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002582:	f043 0208 	orr.w	r2, r3, #8
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002592:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 febf 	bl	8003318 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800259a:	bf00      	nop
 800259c:	3728      	adds	r7, #40	; 0x28
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	50000100 	.word	0x50000100
 80025a8:	50000500 	.word	0x50000500
 80025ac:	50000400 	.word	0x50000400
 80025b0:	50000300 	.word	0x50000300
 80025b4:	50000700 	.word	0x50000700

080025b8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b0b6      	sub	sp, #216	; 0xd8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002618:	2300      	movs	r3, #0
 800261a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002622:	2b01      	cmp	r3, #1
 8002624:	d102      	bne.n	800262c <HAL_ADC_ConfigChannel+0x24>
 8002626:	2302      	movs	r3, #2
 8002628:	f000 bc13 	b.w	8002e52 <HAL_ADC_ConfigChannel+0x84a>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff faa7 	bl	8001b8c <LL_ADC_REG_IsConversionOngoing>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	f040 83f3 	bne.w	8002e2c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6818      	ldr	r0, [r3, #0]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	6859      	ldr	r1, [r3, #4]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	f7ff f93f 	bl	80018d6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff fa95 	bl	8001b8c <LL_ADC_REG_IsConversionOngoing>
 8002662:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff faa1 	bl	8001bb2 <LL_ADC_INJ_IsConversionOngoing>
 8002670:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002674:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002678:	2b00      	cmp	r3, #0
 800267a:	f040 81d9 	bne.w	8002a30 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800267e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002682:	2b00      	cmp	r3, #0
 8002684:	f040 81d4 	bne.w	8002a30 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002690:	d10f      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6818      	ldr	r0, [r3, #0]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2200      	movs	r2, #0
 800269c:	4619      	mov	r1, r3
 800269e:	f7ff f959 	bl	8001954 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff f8ed 	bl	800188a <LL_ADC_SetSamplingTimeCommonConfig>
 80026b0:	e00e      	b.n	80026d0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6818      	ldr	r0, [r3, #0]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	6819      	ldr	r1, [r3, #0]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	461a      	mov	r2, r3
 80026c0:	f7ff f948 	bl	8001954 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2100      	movs	r1, #0
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff f8dd 	bl	800188a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	695a      	ldr	r2, [r3, #20]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	08db      	lsrs	r3, r3, #3
 80026dc:	f003 0303 	and.w	r3, r3, #3
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d022      	beq.n	8002738 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6818      	ldr	r0, [r3, #0]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	6919      	ldr	r1, [r3, #16]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002702:	f7ff f837 	bl	8001774 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6818      	ldr	r0, [r3, #0]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	6919      	ldr	r1, [r3, #16]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	461a      	mov	r2, r3
 8002714:	f7ff f883 	bl	800181e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6818      	ldr	r0, [r3, #0]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002724:	2b01      	cmp	r3, #1
 8002726:	d102      	bne.n	800272e <HAL_ADC_ConfigChannel+0x126>
 8002728:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800272c:	e000      	b.n	8002730 <HAL_ADC_ConfigChannel+0x128>
 800272e:	2300      	movs	r3, #0
 8002730:	461a      	mov	r2, r3
 8002732:	f7ff f88f 	bl	8001854 <LL_ADC_SetOffsetSaturation>
 8002736:	e17b      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2100      	movs	r1, #0
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff f83c 	bl	80017bc <LL_ADC_GetOffsetChannel>
 8002744:	4603      	mov	r3, r0
 8002746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10a      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x15c>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2100      	movs	r1, #0
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff f831 	bl	80017bc <LL_ADC_GetOffsetChannel>
 800275a:	4603      	mov	r3, r0
 800275c:	0e9b      	lsrs	r3, r3, #26
 800275e:	f003 021f 	and.w	r2, r3, #31
 8002762:	e01e      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x19a>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2100      	movs	r1, #0
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff f826 	bl	80017bc <LL_ADC_GetOffsetChannel>
 8002770:	4603      	mov	r3, r0
 8002772:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002776:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800277a:	fa93 f3a3 	rbit	r3, r3
 800277e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002782:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002786:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800278a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002792:	2320      	movs	r3, #32
 8002794:	e004      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002796:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800279a:	fab3 f383 	clz	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d105      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x1b2>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	0e9b      	lsrs	r3, r3, #26
 80027b4:	f003 031f 	and.w	r3, r3, #31
 80027b8:	e018      	b.n	80027ec <HAL_ADC_ConfigChannel+0x1e4>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80027c6:	fa93 f3a3 	rbit	r3, r3
 80027ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80027ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80027d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80027de:	2320      	movs	r3, #32
 80027e0:	e004      	b.n	80027ec <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80027e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027e6:	fab3 f383 	clz	r3, r3
 80027ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d106      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2200      	movs	r2, #0
 80027f6:	2100      	movs	r1, #0
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fe fff5 	bl	80017e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2101      	movs	r1, #1
 8002804:	4618      	mov	r0, r3
 8002806:	f7fe ffd9 	bl	80017bc <LL_ADC_GetOffsetChannel>
 800280a:	4603      	mov	r3, r0
 800280c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10a      	bne.n	800282a <HAL_ADC_ConfigChannel+0x222>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2101      	movs	r1, #1
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe ffce 	bl	80017bc <LL_ADC_GetOffsetChannel>
 8002820:	4603      	mov	r3, r0
 8002822:	0e9b      	lsrs	r3, r3, #26
 8002824:	f003 021f 	and.w	r2, r3, #31
 8002828:	e01e      	b.n	8002868 <HAL_ADC_ConfigChannel+0x260>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2101      	movs	r1, #1
 8002830:	4618      	mov	r0, r3
 8002832:	f7fe ffc3 	bl	80017bc <LL_ADC_GetOffsetChannel>
 8002836:	4603      	mov	r3, r0
 8002838:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002840:	fa93 f3a3 	rbit	r3, r3
 8002844:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002848:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800284c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002850:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002858:	2320      	movs	r3, #32
 800285a:	e004      	b.n	8002866 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800285c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002860:	fab3 f383 	clz	r3, r3
 8002864:	b2db      	uxtb	r3, r3
 8002866:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002870:	2b00      	cmp	r3, #0
 8002872:	d105      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x278>
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	0e9b      	lsrs	r3, r3, #26
 800287a:	f003 031f 	and.w	r3, r3, #31
 800287e:	e018      	b.n	80028b2 <HAL_ADC_ConfigChannel+0x2aa>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002888:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800288c:	fa93 f3a3 	rbit	r3, r3
 8002890:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002894:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002898:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800289c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80028a4:	2320      	movs	r3, #32
 80028a6:	e004      	b.n	80028b2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80028a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028ac:	fab3 f383 	clz	r3, r3
 80028b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d106      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2200      	movs	r2, #0
 80028bc:	2101      	movs	r1, #1
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fe ff92 	bl	80017e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2102      	movs	r1, #2
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fe ff76 	bl	80017bc <LL_ADC_GetOffsetChannel>
 80028d0:	4603      	mov	r3, r0
 80028d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10a      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x2e8>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2102      	movs	r1, #2
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7fe ff6b 	bl	80017bc <LL_ADC_GetOffsetChannel>
 80028e6:	4603      	mov	r3, r0
 80028e8:	0e9b      	lsrs	r3, r3, #26
 80028ea:	f003 021f 	and.w	r2, r3, #31
 80028ee:	e01e      	b.n	800292e <HAL_ADC_ConfigChannel+0x326>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2102      	movs	r1, #2
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fe ff60 	bl	80017bc <LL_ADC_GetOffsetChannel>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002902:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002906:	fa93 f3a3 	rbit	r3, r3
 800290a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800290e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002912:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002916:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800291e:	2320      	movs	r3, #32
 8002920:	e004      	b.n	800292c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002922:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002926:	fab3 f383 	clz	r3, r3
 800292a:	b2db      	uxtb	r3, r3
 800292c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002936:	2b00      	cmp	r3, #0
 8002938:	d105      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x33e>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	0e9b      	lsrs	r3, r3, #26
 8002940:	f003 031f 	and.w	r3, r3, #31
 8002944:	e016      	b.n	8002974 <HAL_ADC_ConfigChannel+0x36c>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002952:	fa93 f3a3 	rbit	r3, r3
 8002956:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002958:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800295a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800295e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002966:	2320      	movs	r3, #32
 8002968:	e004      	b.n	8002974 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800296a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800296e:	fab3 f383 	clz	r3, r3
 8002972:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002974:	429a      	cmp	r2, r3
 8002976:	d106      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2200      	movs	r2, #0
 800297e:	2102      	movs	r1, #2
 8002980:	4618      	mov	r0, r3
 8002982:	f7fe ff31 	bl	80017e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2103      	movs	r1, #3
 800298c:	4618      	mov	r0, r3
 800298e:	f7fe ff15 	bl	80017bc <LL_ADC_GetOffsetChannel>
 8002992:	4603      	mov	r3, r0
 8002994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10a      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x3aa>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2103      	movs	r1, #3
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fe ff0a 	bl	80017bc <LL_ADC_GetOffsetChannel>
 80029a8:	4603      	mov	r3, r0
 80029aa:	0e9b      	lsrs	r3, r3, #26
 80029ac:	f003 021f 	and.w	r2, r3, #31
 80029b0:	e017      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x3da>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2103      	movs	r1, #3
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fe feff 	bl	80017bc <LL_ADC_GetOffsetChannel>
 80029be:	4603      	mov	r3, r0
 80029c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029c4:	fa93 f3a3 	rbit	r3, r3
 80029c8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80029ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029cc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80029ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80029d4:	2320      	movs	r3, #32
 80029d6:	e003      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80029d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029da:	fab3 f383 	clz	r3, r3
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d105      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x3f2>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	0e9b      	lsrs	r3, r3, #26
 80029f4:	f003 031f 	and.w	r3, r3, #31
 80029f8:	e011      	b.n	8002a1e <HAL_ADC_ConfigChannel+0x416>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a02:	fa93 f3a3 	rbit	r3, r3
 8002a06:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002a08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a0a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002a12:	2320      	movs	r3, #32
 8002a14:	e003      	b.n	8002a1e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a18:	fab3 f383 	clz	r3, r3
 8002a1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d106      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2200      	movs	r2, #0
 8002a28:	2103      	movs	r1, #3
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fe fedc 	bl	80017e8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff f86f 	bl	8001b18 <LL_ADC_IsEnabled>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f040 813d 	bne.w	8002cbc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6818      	ldr	r0, [r3, #0]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	6819      	ldr	r1, [r3, #0]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	f7fe ffac 	bl	80019ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	4aa2      	ldr	r2, [pc, #648]	; (8002ce4 <HAL_ADC_ConfigChannel+0x6dc>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	f040 812e 	bne.w	8002cbc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10b      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x480>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	0e9b      	lsrs	r3, r3, #26
 8002a76:	3301      	adds	r3, #1
 8002a78:	f003 031f 	and.w	r3, r3, #31
 8002a7c:	2b09      	cmp	r3, #9
 8002a7e:	bf94      	ite	ls
 8002a80:	2301      	movls	r3, #1
 8002a82:	2300      	movhi	r3, #0
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	e019      	b.n	8002abc <HAL_ADC_ConfigChannel+0x4b4>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a90:	fa93 f3a3 	rbit	r3, r3
 8002a94:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002a96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a98:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002a9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002aa0:	2320      	movs	r3, #32
 8002aa2:	e003      	b.n	8002aac <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002aa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002aa6:	fab3 f383 	clz	r3, r3
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	3301      	adds	r3, #1
 8002aae:	f003 031f 	and.w	r3, r3, #31
 8002ab2:	2b09      	cmp	r3, #9
 8002ab4:	bf94      	ite	ls
 8002ab6:	2301      	movls	r3, #1
 8002ab8:	2300      	movhi	r3, #0
 8002aba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d079      	beq.n	8002bb4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d107      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x4d4>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	0e9b      	lsrs	r3, r3, #26
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	069b      	lsls	r3, r3, #26
 8002ad6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ada:	e015      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x500>
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ae4:	fa93 f3a3 	rbit	r3, r3
 8002ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aec:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002af4:	2320      	movs	r3, #32
 8002af6:	e003      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002af8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002afa:	fab3 f383 	clz	r3, r3
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	3301      	adds	r3, #1
 8002b02:	069b      	lsls	r3, r3, #26
 8002b04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d109      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x520>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	0e9b      	lsrs	r3, r3, #26
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	2101      	movs	r1, #1
 8002b22:	fa01 f303 	lsl.w	r3, r1, r3
 8002b26:	e017      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x550>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b30:	fa93 f3a3 	rbit	r3, r3
 8002b34:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002b36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b38:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002b40:	2320      	movs	r3, #32
 8002b42:	e003      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b46:	fab3 f383 	clz	r3, r3
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	f003 031f 	and.w	r3, r3, #31
 8002b52:	2101      	movs	r1, #1
 8002b54:	fa01 f303 	lsl.w	r3, r1, r3
 8002b58:	ea42 0103 	orr.w	r1, r2, r3
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10a      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x576>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	0e9b      	lsrs	r3, r3, #26
 8002b6e:	3301      	adds	r3, #1
 8002b70:	f003 021f 	and.w	r2, r3, #31
 8002b74:	4613      	mov	r3, r2
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	4413      	add	r3, r2
 8002b7a:	051b      	lsls	r3, r3, #20
 8002b7c:	e018      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x5a8>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b86:	fa93 f3a3 	rbit	r3, r3
 8002b8a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002b96:	2320      	movs	r3, #32
 8002b98:	e003      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b9c:	fab3 f383 	clz	r3, r3
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	f003 021f 	and.w	r2, r3, #31
 8002ba8:	4613      	mov	r3, r2
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	4413      	add	r3, r2
 8002bae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bb0:	430b      	orrs	r3, r1
 8002bb2:	e07e      	b.n	8002cb2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d107      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x5c8>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	0e9b      	lsrs	r3, r3, #26
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	069b      	lsls	r3, r3, #26
 8002bca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bce:	e015      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x5f4>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd8:	fa93 f3a3 	rbit	r3, r3
 8002bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002be8:	2320      	movs	r3, #32
 8002bea:	e003      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bee:	fab3 f383 	clz	r3, r3
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	069b      	lsls	r3, r3, #26
 8002bf8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d109      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x614>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	0e9b      	lsrs	r3, r3, #26
 8002c0e:	3301      	adds	r3, #1
 8002c10:	f003 031f 	and.w	r3, r3, #31
 8002c14:	2101      	movs	r1, #1
 8002c16:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1a:	e017      	b.n	8002c4c <HAL_ADC_ConfigChannel+0x644>
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	fa93 f3a3 	rbit	r3, r3
 8002c28:	61fb      	str	r3, [r7, #28]
  return result;
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002c34:	2320      	movs	r3, #32
 8002c36:	e003      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	fab3 f383 	clz	r3, r3
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	3301      	adds	r3, #1
 8002c42:	f003 031f 	and.w	r3, r3, #31
 8002c46:	2101      	movs	r1, #1
 8002c48:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4c:	ea42 0103 	orr.w	r1, r2, r3
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10d      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x670>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	0e9b      	lsrs	r3, r3, #26
 8002c62:	3301      	adds	r3, #1
 8002c64:	f003 021f 	and.w	r2, r3, #31
 8002c68:	4613      	mov	r3, r2
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3b1e      	subs	r3, #30
 8002c70:	051b      	lsls	r3, r3, #20
 8002c72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c76:	e01b      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x6a8>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	fa93 f3a3 	rbit	r3, r3
 8002c84:	613b      	str	r3, [r7, #16]
  return result;
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002c90:	2320      	movs	r3, #32
 8002c92:	e003      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	fab3 f383 	clz	r3, r3
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	f003 021f 	and.w	r2, r3, #31
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3b1e      	subs	r3, #30
 8002caa:	051b      	lsls	r3, r3, #20
 8002cac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cb0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	f7fe fe4c 	bl	8001954 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	4b09      	ldr	r3, [pc, #36]	; (8002ce8 <HAL_ADC_ConfigChannel+0x6e0>)
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 80be 	beq.w	8002e46 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cd2:	d004      	beq.n	8002cde <HAL_ADC_ConfigChannel+0x6d6>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a04      	ldr	r2, [pc, #16]	; (8002cec <HAL_ADC_ConfigChannel+0x6e4>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d10a      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x6ec>
 8002cde:	4b04      	ldr	r3, [pc, #16]	; (8002cf0 <HAL_ADC_ConfigChannel+0x6e8>)
 8002ce0:	e009      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x6ee>
 8002ce2:	bf00      	nop
 8002ce4:	407f0000 	.word	0x407f0000
 8002ce8:	80080000 	.word	0x80080000
 8002cec:	50000100 	.word	0x50000100
 8002cf0:	50000300 	.word	0x50000300
 8002cf4:	4b59      	ldr	r3, [pc, #356]	; (8002e5c <HAL_ADC_ConfigChannel+0x854>)
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe fd2e 	bl	8001758 <LL_ADC_GetCommonPathInternalCh>
 8002cfc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a56      	ldr	r2, [pc, #344]	; (8002e60 <HAL_ADC_ConfigChannel+0x858>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d004      	beq.n	8002d14 <HAL_ADC_ConfigChannel+0x70c>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a55      	ldr	r2, [pc, #340]	; (8002e64 <HAL_ADC_ConfigChannel+0x85c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d13a      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d134      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d28:	d005      	beq.n	8002d36 <HAL_ADC_ConfigChannel+0x72e>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a4e      	ldr	r2, [pc, #312]	; (8002e68 <HAL_ADC_ConfigChannel+0x860>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	f040 8085 	bne.w	8002e40 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d3e:	d004      	beq.n	8002d4a <HAL_ADC_ConfigChannel+0x742>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a49      	ldr	r2, [pc, #292]	; (8002e6c <HAL_ADC_ConfigChannel+0x864>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d101      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x746>
 8002d4a:	4a49      	ldr	r2, [pc, #292]	; (8002e70 <HAL_ADC_ConfigChannel+0x868>)
 8002d4c:	e000      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x748>
 8002d4e:	4a43      	ldr	r2, [pc, #268]	; (8002e5c <HAL_ADC_ConfigChannel+0x854>)
 8002d50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	f7fe fce9 	bl	8001732 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d60:	4b44      	ldr	r3, [pc, #272]	; (8002e74 <HAL_ADC_ConfigChannel+0x86c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	099b      	lsrs	r3, r3, #6
 8002d66:	4a44      	ldr	r2, [pc, #272]	; (8002e78 <HAL_ADC_ConfigChannel+0x870>)
 8002d68:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6c:	099b      	lsrs	r3, r3, #6
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	4613      	mov	r3, r2
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	4413      	add	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d7a:	e002      	b.n	8002d82 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1f9      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d88:	e05a      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a3b      	ldr	r2, [pc, #236]	; (8002e7c <HAL_ADC_ConfigChannel+0x874>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d125      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d11f      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a31      	ldr	r2, [pc, #196]	; (8002e6c <HAL_ADC_ConfigChannel+0x864>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d104      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x7ac>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a34      	ldr	r2, [pc, #208]	; (8002e80 <HAL_ADC_ConfigChannel+0x878>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d047      	beq.n	8002e44 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dbc:	d004      	beq.n	8002dc8 <HAL_ADC_ConfigChannel+0x7c0>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a2a      	ldr	r2, [pc, #168]	; (8002e6c <HAL_ADC_ConfigChannel+0x864>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d101      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x7c4>
 8002dc8:	4a29      	ldr	r2, [pc, #164]	; (8002e70 <HAL_ADC_ConfigChannel+0x868>)
 8002dca:	e000      	b.n	8002dce <HAL_ADC_ConfigChannel+0x7c6>
 8002dcc:	4a23      	ldr	r2, [pc, #140]	; (8002e5c <HAL_ADC_ConfigChannel+0x854>)
 8002dce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4610      	mov	r0, r2
 8002dda:	f7fe fcaa 	bl	8001732 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dde:	e031      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a27      	ldr	r2, [pc, #156]	; (8002e84 <HAL_ADC_ConfigChannel+0x87c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d12d      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002dea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d127      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a1c      	ldr	r2, [pc, #112]	; (8002e6c <HAL_ADC_ConfigChannel+0x864>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d022      	beq.n	8002e46 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e08:	d004      	beq.n	8002e14 <HAL_ADC_ConfigChannel+0x80c>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a17      	ldr	r2, [pc, #92]	; (8002e6c <HAL_ADC_ConfigChannel+0x864>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d101      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x810>
 8002e14:	4a16      	ldr	r2, [pc, #88]	; (8002e70 <HAL_ADC_ConfigChannel+0x868>)
 8002e16:	e000      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x812>
 8002e18:	4a10      	ldr	r2, [pc, #64]	; (8002e5c <HAL_ADC_ConfigChannel+0x854>)
 8002e1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e22:	4619      	mov	r1, r3
 8002e24:	4610      	mov	r0, r2
 8002e26:	f7fe fc84 	bl	8001732 <LL_ADC_SetCommonPathInternalCh>
 8002e2a:	e00c      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e30:	f043 0220 	orr.w	r2, r3, #32
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002e3e:	e002      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e40:	bf00      	nop
 8002e42:	e000      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e44:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e4e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	37d8      	adds	r7, #216	; 0xd8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	50000700 	.word	0x50000700
 8002e60:	c3210000 	.word	0xc3210000
 8002e64:	90c00010 	.word	0x90c00010
 8002e68:	50000600 	.word	0x50000600
 8002e6c:	50000100 	.word	0x50000100
 8002e70:	50000300 	.word	0x50000300
 8002e74:	20000008 	.word	0x20000008
 8002e78:	053e2d63 	.word	0x053e2d63
 8002e7c:	c7520000 	.word	0xc7520000
 8002e80:	50000500 	.word	0x50000500
 8002e84:	cb840000 	.word	0xcb840000

08002e88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fe fe3d 	bl	8001b18 <LL_ADC_IsEnabled>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d176      	bne.n	8002f92 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	4b3c      	ldr	r3, [pc, #240]	; (8002f9c <ADC_Enable+0x114>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00d      	beq.n	8002ece <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb6:	f043 0210 	orr.w	r2, r3, #16
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec2:	f043 0201 	orr.w	r2, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e062      	b.n	8002f94 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fe fdf8 	bl	8001ac8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ee0:	d004      	beq.n	8002eec <ADC_Enable+0x64>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a2e      	ldr	r2, [pc, #184]	; (8002fa0 <ADC_Enable+0x118>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d101      	bne.n	8002ef0 <ADC_Enable+0x68>
 8002eec:	4b2d      	ldr	r3, [pc, #180]	; (8002fa4 <ADC_Enable+0x11c>)
 8002eee:	e000      	b.n	8002ef2 <ADC_Enable+0x6a>
 8002ef0:	4b2d      	ldr	r3, [pc, #180]	; (8002fa8 <ADC_Enable+0x120>)
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fe fc30 	bl	8001758 <LL_ADC_GetCommonPathInternalCh>
 8002ef8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002efa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d013      	beq.n	8002f2a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f02:	4b2a      	ldr	r3, [pc, #168]	; (8002fac <ADC_Enable+0x124>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	099b      	lsrs	r3, r3, #6
 8002f08:	4a29      	ldr	r2, [pc, #164]	; (8002fb0 <ADC_Enable+0x128>)
 8002f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0e:	099b      	lsrs	r3, r3, #6
 8002f10:	1c5a      	adds	r2, r3, #1
 8002f12:	4613      	mov	r3, r2
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	4413      	add	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f1c:	e002      	b.n	8002f24 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	3b01      	subs	r3, #1
 8002f22:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f9      	bne.n	8002f1e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f2a:	f7fe fbe3 	bl	80016f4 <HAL_GetTick>
 8002f2e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f30:	e028      	b.n	8002f84 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fe fdee 	bl	8001b18 <LL_ADC_IsEnabled>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d104      	bne.n	8002f4c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fe fdbe 	bl	8001ac8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f4c:	f7fe fbd2 	bl	80016f4 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d914      	bls.n	8002f84 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d00d      	beq.n	8002f84 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6c:	f043 0210 	orr.w	r2, r3, #16
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f78:	f043 0201 	orr.w	r2, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e007      	b.n	8002f94 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d1cf      	bne.n	8002f32 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	8000003f 	.word	0x8000003f
 8002fa0:	50000100 	.word	0x50000100
 8002fa4:	50000300 	.word	0x50000300
 8002fa8:	50000700 	.word	0x50000700
 8002fac:	20000008 	.word	0x20000008
 8002fb0:	053e2d63 	.word	0x053e2d63

08002fb4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fe fdbc 	bl	8001b3e <LL_ADC_IsDisableOngoing>
 8002fc6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7fe fda3 	bl	8001b18 <LL_ADC_IsEnabled>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d047      	beq.n	8003068 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d144      	bne.n	8003068 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 030d 	and.w	r3, r3, #13
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d10c      	bne.n	8003006 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7fe fd7d 	bl	8001af0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2203      	movs	r2, #3
 8002ffc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ffe:	f7fe fb79 	bl	80016f4 <HAL_GetTick>
 8003002:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003004:	e029      	b.n	800305a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300a:	f043 0210 	orr.w	r2, r3, #16
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003016:	f043 0201 	orr.w	r2, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e023      	b.n	800306a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003022:	f7fe fb67 	bl	80016f4 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d914      	bls.n	800305a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00d      	beq.n	800305a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003042:	f043 0210 	orr.w	r2, r3, #16
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800304e:	f043 0201 	orr.w	r2, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e007      	b.n	800306a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1dc      	bne.n	8003022 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b084      	sub	sp, #16
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003084:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003088:	2b00      	cmp	r3, #0
 800308a:	d14b      	bne.n	8003124 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003090:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d021      	beq.n	80030ea <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fe fc00 	bl	80018b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d032      	beq.n	800311c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d12b      	bne.n	800311c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d11f      	bne.n	800311c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e0:	f043 0201 	orr.w	r2, r3, #1
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80030e8:	e018      	b.n	800311c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d111      	bne.n	800311c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003108:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d105      	bne.n	800311c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003114:	f043 0201 	orr.w	r2, r3, #1
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f7ff fa4b 	bl	80025b8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003122:	e00e      	b.n	8003142 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003128:	f003 0310 	and.w	r3, r3, #16
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f7ff fa5f 	bl	80025f4 <HAL_ADC_ErrorCallback>
}
 8003136:	e004      	b.n	8003142 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	4798      	blx	r3
}
 8003142:	bf00      	nop
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b084      	sub	sp, #16
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003156:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f7ff fa37 	bl	80025cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800315e:	bf00      	nop
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b084      	sub	sp, #16
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003172:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003178:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003184:	f043 0204 	orr.w	r2, r3, #4
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f7ff fa31 	bl	80025f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003192:	bf00      	nop
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <LL_ADC_IsEnabled>:
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <LL_ADC_IsEnabled+0x18>
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <LL_ADC_IsEnabled+0x1a>
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <LL_ADC_StartCalibration>:
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80031d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80031dc:	4313      	orrs	r3, r2
 80031de:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	609a      	str	r2, [r3, #8]
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <LL_ADC_IsCalibrationOnGoing>:
{
 80031f2:	b480      	push	{r7}
 80031f4:	b083      	sub	sp, #12
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003202:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003206:	d101      	bne.n	800320c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003208:	2301      	movs	r3, #1
 800320a:	e000      	b.n	800320e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <LL_ADC_REG_IsConversionOngoing>:
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b04      	cmp	r3, #4
 800322c:	d101      	bne.n	8003232 <LL_ADC_REG_IsConversionOngoing+0x18>
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800324a:	2300      	movs	r3, #0
 800324c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003254:	2b01      	cmp	r3, #1
 8003256:	d101      	bne.n	800325c <HAL_ADCEx_Calibration_Start+0x1c>
 8003258:	2302      	movs	r3, #2
 800325a:	e04d      	b.n	80032f8 <HAL_ADCEx_Calibration_Start+0xb8>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7ff fea5 	bl	8002fb4 <ADC_Disable>
 800326a:	4603      	mov	r3, r0
 800326c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800326e:	7bfb      	ldrb	r3, [r7, #15]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d136      	bne.n	80032e2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003278:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800327c:	f023 0302 	bic.w	r3, r3, #2
 8003280:	f043 0202 	orr.w	r2, r3, #2
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6839      	ldr	r1, [r7, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff ff96 	bl	80031c0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003294:	e014      	b.n	80032c0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	3301      	adds	r3, #1
 800329a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	4a18      	ldr	r2, [pc, #96]	; (8003300 <HAL_ADCEx_Calibration_Start+0xc0>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d90d      	bls.n	80032c0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a8:	f023 0312 	bic.w	r3, r3, #18
 80032ac:	f043 0210 	orr.w	r2, r3, #16
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e01b      	b.n	80032f8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff ff94 	bl	80031f2 <LL_ADC_IsCalibrationOnGoing>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1e2      	bne.n	8003296 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d4:	f023 0303 	bic.w	r3, r3, #3
 80032d8:	f043 0201 	orr.w	r2, r3, #1
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	65da      	str	r2, [r3, #92]	; 0x5c
 80032e0:	e005      	b.n	80032ee <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e6:	f043 0210 	orr.w	r2, r3, #16
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	0004de01 	.word	0x0004de01

08003304 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003368:	b590      	push	{r4, r7, lr}
 800336a:	b0a1      	sub	sp, #132	; 0x84
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003372:	2300      	movs	r3, #0
 8003374:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800337e:	2b01      	cmp	r3, #1
 8003380:	d101      	bne.n	8003386 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003382:	2302      	movs	r3, #2
 8003384:	e0e7      	b.n	8003556 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800338e:	2300      	movs	r3, #0
 8003390:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003392:	2300      	movs	r3, #0
 8003394:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800339e:	d102      	bne.n	80033a6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80033a0:	4b6f      	ldr	r3, [pc, #444]	; (8003560 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80033a2:	60bb      	str	r3, [r7, #8]
 80033a4:	e009      	b.n	80033ba <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a6e      	ldr	r2, [pc, #440]	; (8003564 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d102      	bne.n	80033b6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80033b0:	4b6d      	ldr	r3, [pc, #436]	; (8003568 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80033b2:	60bb      	str	r3, [r7, #8]
 80033b4:	e001      	b.n	80033ba <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80033b6:	2300      	movs	r3, #0
 80033b8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10b      	bne.n	80033d8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c4:	f043 0220 	orr.w	r2, r3, #32
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e0be      	b.n	8003556 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	4618      	mov	r0, r3
 80033dc:	f7ff ff1d 	bl	800321a <LL_ADC_REG_IsConversionOngoing>
 80033e0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff ff17 	bl	800321a <LL_ADC_REG_IsConversionOngoing>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f040 80a0 	bne.w	8003534 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80033f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f040 809c 	bne.w	8003534 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003404:	d004      	beq.n	8003410 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a55      	ldr	r2, [pc, #340]	; (8003560 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d101      	bne.n	8003414 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003410:	4b56      	ldr	r3, [pc, #344]	; (800356c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003412:	e000      	b.n	8003416 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003414:	4b56      	ldr	r3, [pc, #344]	; (8003570 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003416:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d04b      	beq.n	80034b8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003420:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	6859      	ldr	r1, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003432:	035b      	lsls	r3, r3, #13
 8003434:	430b      	orrs	r3, r1
 8003436:	431a      	orrs	r2, r3
 8003438:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800343a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003444:	d004      	beq.n	8003450 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a45      	ldr	r2, [pc, #276]	; (8003560 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d10f      	bne.n	8003470 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003450:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003454:	f7ff fea1 	bl	800319a <LL_ADC_IsEnabled>
 8003458:	4604      	mov	r4, r0
 800345a:	4841      	ldr	r0, [pc, #260]	; (8003560 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800345c:	f7ff fe9d 	bl	800319a <LL_ADC_IsEnabled>
 8003460:	4603      	mov	r3, r0
 8003462:	4323      	orrs	r3, r4
 8003464:	2b00      	cmp	r3, #0
 8003466:	bf0c      	ite	eq
 8003468:	2301      	moveq	r3, #1
 800346a:	2300      	movne	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	e012      	b.n	8003496 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003470:	483c      	ldr	r0, [pc, #240]	; (8003564 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003472:	f7ff fe92 	bl	800319a <LL_ADC_IsEnabled>
 8003476:	4604      	mov	r4, r0
 8003478:	483b      	ldr	r0, [pc, #236]	; (8003568 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800347a:	f7ff fe8e 	bl	800319a <LL_ADC_IsEnabled>
 800347e:	4603      	mov	r3, r0
 8003480:	431c      	orrs	r4, r3
 8003482:	483c      	ldr	r0, [pc, #240]	; (8003574 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003484:	f7ff fe89 	bl	800319a <LL_ADC_IsEnabled>
 8003488:	4603      	mov	r3, r0
 800348a:	4323      	orrs	r3, r4
 800348c:	2b00      	cmp	r3, #0
 800348e:	bf0c      	ite	eq
 8003490:	2301      	moveq	r3, #1
 8003492:	2300      	movne	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d056      	beq.n	8003548 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800349a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80034a2:	f023 030f 	bic.w	r3, r3, #15
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	6811      	ldr	r1, [r2, #0]
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	6892      	ldr	r2, [r2, #8]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	431a      	orrs	r2, r3
 80034b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034b4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034b6:	e047      	b.n	8003548 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80034b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034c2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034cc:	d004      	beq.n	80034d8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a23      	ldr	r2, [pc, #140]	; (8003560 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d10f      	bne.n	80034f8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80034d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80034dc:	f7ff fe5d 	bl	800319a <LL_ADC_IsEnabled>
 80034e0:	4604      	mov	r4, r0
 80034e2:	481f      	ldr	r0, [pc, #124]	; (8003560 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80034e4:	f7ff fe59 	bl	800319a <LL_ADC_IsEnabled>
 80034e8:	4603      	mov	r3, r0
 80034ea:	4323      	orrs	r3, r4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	bf0c      	ite	eq
 80034f0:	2301      	moveq	r3, #1
 80034f2:	2300      	movne	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	e012      	b.n	800351e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80034f8:	481a      	ldr	r0, [pc, #104]	; (8003564 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80034fa:	f7ff fe4e 	bl	800319a <LL_ADC_IsEnabled>
 80034fe:	4604      	mov	r4, r0
 8003500:	4819      	ldr	r0, [pc, #100]	; (8003568 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003502:	f7ff fe4a 	bl	800319a <LL_ADC_IsEnabled>
 8003506:	4603      	mov	r3, r0
 8003508:	431c      	orrs	r4, r3
 800350a:	481a      	ldr	r0, [pc, #104]	; (8003574 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800350c:	f7ff fe45 	bl	800319a <LL_ADC_IsEnabled>
 8003510:	4603      	mov	r3, r0
 8003512:	4323      	orrs	r3, r4
 8003514:	2b00      	cmp	r3, #0
 8003516:	bf0c      	ite	eq
 8003518:	2301      	moveq	r3, #1
 800351a:	2300      	movne	r3, #0
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d012      	beq.n	8003548 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003522:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800352a:	f023 030f 	bic.w	r3, r3, #15
 800352e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003530:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003532:	e009      	b.n	8003548 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003538:	f043 0220 	orr.w	r2, r3, #32
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003546:	e000      	b.n	800354a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003548:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003552:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003556:	4618      	mov	r0, r3
 8003558:	3784      	adds	r7, #132	; 0x84
 800355a:	46bd      	mov	sp, r7
 800355c:	bd90      	pop	{r4, r7, pc}
 800355e:	bf00      	nop
 8003560:	50000100 	.word	0x50000100
 8003564:	50000400 	.word	0x50000400
 8003568:	50000500 	.word	0x50000500
 800356c:	50000300 	.word	0x50000300
 8003570:	50000700 	.word	0x50000700
 8003574:	50000600 	.word	0x50000600

08003578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003588:	4b0c      	ldr	r3, [pc, #48]	; (80035bc <__NVIC_SetPriorityGrouping+0x44>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003594:	4013      	ands	r3, r2
 8003596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035aa:	4a04      	ldr	r2, [pc, #16]	; (80035bc <__NVIC_SetPriorityGrouping+0x44>)
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	60d3      	str	r3, [r2, #12]
}
 80035b0:	bf00      	nop
 80035b2:	3714      	adds	r7, #20
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	e000ed00 	.word	0xe000ed00

080035c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035c4:	4b04      	ldr	r3, [pc, #16]	; (80035d8 <__NVIC_GetPriorityGrouping+0x18>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	0a1b      	lsrs	r3, r3, #8
 80035ca:	f003 0307 	and.w	r3, r3, #7
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	e000ed00 	.word	0xe000ed00

080035dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	4603      	mov	r3, r0
 80035e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	db0b      	blt.n	8003606 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ee:	79fb      	ldrb	r3, [r7, #7]
 80035f0:	f003 021f 	and.w	r2, r3, #31
 80035f4:	4907      	ldr	r1, [pc, #28]	; (8003614 <__NVIC_EnableIRQ+0x38>)
 80035f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fa:	095b      	lsrs	r3, r3, #5
 80035fc:	2001      	movs	r0, #1
 80035fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	e000e100 	.word	0xe000e100

08003618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	4603      	mov	r3, r0
 8003620:	6039      	str	r1, [r7, #0]
 8003622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003628:	2b00      	cmp	r3, #0
 800362a:	db0a      	blt.n	8003642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	b2da      	uxtb	r2, r3
 8003630:	490c      	ldr	r1, [pc, #48]	; (8003664 <__NVIC_SetPriority+0x4c>)
 8003632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003636:	0112      	lsls	r2, r2, #4
 8003638:	b2d2      	uxtb	r2, r2
 800363a:	440b      	add	r3, r1
 800363c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003640:	e00a      	b.n	8003658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	b2da      	uxtb	r2, r3
 8003646:	4908      	ldr	r1, [pc, #32]	; (8003668 <__NVIC_SetPriority+0x50>)
 8003648:	79fb      	ldrb	r3, [r7, #7]
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	3b04      	subs	r3, #4
 8003650:	0112      	lsls	r2, r2, #4
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	440b      	add	r3, r1
 8003656:	761a      	strb	r2, [r3, #24]
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	e000e100 	.word	0xe000e100
 8003668:	e000ed00 	.word	0xe000ed00

0800366c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800366c:	b480      	push	{r7}
 800366e:	b089      	sub	sp, #36	; 0x24
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f1c3 0307 	rsb	r3, r3, #7
 8003686:	2b04      	cmp	r3, #4
 8003688:	bf28      	it	cs
 800368a:	2304      	movcs	r3, #4
 800368c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	3304      	adds	r3, #4
 8003692:	2b06      	cmp	r3, #6
 8003694:	d902      	bls.n	800369c <NVIC_EncodePriority+0x30>
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	3b03      	subs	r3, #3
 800369a:	e000      	b.n	800369e <NVIC_EncodePriority+0x32>
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a0:	f04f 32ff 	mov.w	r2, #4294967295
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	43da      	mvns	r2, r3
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	401a      	ands	r2, r3
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036b4:	f04f 31ff 	mov.w	r1, #4294967295
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	fa01 f303 	lsl.w	r3, r1, r3
 80036be:	43d9      	mvns	r1, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c4:	4313      	orrs	r3, r2
         );
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3724      	adds	r7, #36	; 0x24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
	...

080036d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3b01      	subs	r3, #1
 80036e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036e4:	d301      	bcc.n	80036ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036e6:	2301      	movs	r3, #1
 80036e8:	e00f      	b.n	800370a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ea:	4a0a      	ldr	r2, [pc, #40]	; (8003714 <SysTick_Config+0x40>)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036f2:	210f      	movs	r1, #15
 80036f4:	f04f 30ff 	mov.w	r0, #4294967295
 80036f8:	f7ff ff8e 	bl	8003618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036fc:	4b05      	ldr	r3, [pc, #20]	; (8003714 <SysTick_Config+0x40>)
 80036fe:	2200      	movs	r2, #0
 8003700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003702:	4b04      	ldr	r3, [pc, #16]	; (8003714 <SysTick_Config+0x40>)
 8003704:	2207      	movs	r2, #7
 8003706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	e000e010 	.word	0xe000e010

08003718 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7ff ff29 	bl	8003578 <__NVIC_SetPriorityGrouping>
}
 8003726:	bf00      	nop
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b086      	sub	sp, #24
 8003732:	af00      	add	r7, sp, #0
 8003734:	4603      	mov	r3, r0
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	607a      	str	r2, [r7, #4]
 800373a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800373c:	f7ff ff40 	bl	80035c0 <__NVIC_GetPriorityGrouping>
 8003740:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	68b9      	ldr	r1, [r7, #8]
 8003746:	6978      	ldr	r0, [r7, #20]
 8003748:	f7ff ff90 	bl	800366c <NVIC_EncodePriority>
 800374c:	4602      	mov	r2, r0
 800374e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003752:	4611      	mov	r1, r2
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff ff5f 	bl	8003618 <__NVIC_SetPriority>
}
 800375a:	bf00      	nop
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b082      	sub	sp, #8
 8003766:	af00      	add	r7, sp, #0
 8003768:	4603      	mov	r3, r0
 800376a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800376c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff ff33 	bl	80035dc <__NVIC_EnableIRQ>
}
 8003776:	bf00      	nop
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7ff ffa4 	bl	80036d4 <SysTick_Config>
 800378c:	4603      	mov	r3, r0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
	...

08003798 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e08d      	b.n	80038c6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	461a      	mov	r2, r3
 80037b0:	4b47      	ldr	r3, [pc, #284]	; (80038d0 <HAL_DMA_Init+0x138>)
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d80f      	bhi.n	80037d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	461a      	mov	r2, r3
 80037bc:	4b45      	ldr	r3, [pc, #276]	; (80038d4 <HAL_DMA_Init+0x13c>)
 80037be:	4413      	add	r3, r2
 80037c0:	4a45      	ldr	r2, [pc, #276]	; (80038d8 <HAL_DMA_Init+0x140>)
 80037c2:	fba2 2303 	umull	r2, r3, r2, r3
 80037c6:	091b      	lsrs	r3, r3, #4
 80037c8:	009a      	lsls	r2, r3, #2
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a42      	ldr	r2, [pc, #264]	; (80038dc <HAL_DMA_Init+0x144>)
 80037d2:	641a      	str	r2, [r3, #64]	; 0x40
 80037d4:	e00e      	b.n	80037f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	461a      	mov	r2, r3
 80037dc:	4b40      	ldr	r3, [pc, #256]	; (80038e0 <HAL_DMA_Init+0x148>)
 80037de:	4413      	add	r3, r2
 80037e0:	4a3d      	ldr	r2, [pc, #244]	; (80038d8 <HAL_DMA_Init+0x140>)
 80037e2:	fba2 2303 	umull	r2, r3, r2, r3
 80037e6:	091b      	lsrs	r3, r3, #4
 80037e8:	009a      	lsls	r2, r3, #2
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a3c      	ldr	r2, [pc, #240]	; (80038e4 <HAL_DMA_Init+0x14c>)
 80037f2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2202      	movs	r2, #2
 80037f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800380a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003818:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003824:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003830:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	4313      	orrs	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f9b6 	bl	8003bb8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003854:	d102      	bne.n	800385c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003864:	b2d2      	uxtb	r2, r2
 8003866:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003870:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d010      	beq.n	800389c <HAL_DMA_Init+0x104>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b04      	cmp	r3, #4
 8003880:	d80c      	bhi.n	800389c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f9d6 	bl	8003c34 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003898:	605a      	str	r2, [r3, #4]
 800389a:	e008      	b.n	80038ae <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40020407 	.word	0x40020407
 80038d4:	bffdfff8 	.word	0xbffdfff8
 80038d8:	cccccccd 	.word	0xcccccccd
 80038dc:	40020000 	.word	0x40020000
 80038e0:	bffdfbf8 	.word	0xbffdfbf8
 80038e4:	40020400 	.word	0x40020400

080038e8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
 80038f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038f6:	2300      	movs	r3, #0
 80038f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003900:	2b01      	cmp	r3, #1
 8003902:	d101      	bne.n	8003908 <HAL_DMA_Start_IT+0x20>
 8003904:	2302      	movs	r3, #2
 8003906:	e066      	b.n	80039d6 <HAL_DMA_Start_IT+0xee>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b01      	cmp	r3, #1
 800391a:	d155      	bne.n	80039c8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0201 	bic.w	r2, r2, #1
 8003938:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	68b9      	ldr	r1, [r7, #8]
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 f8fb 	bl	8003b3c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	2b00      	cmp	r3, #0
 800394c:	d008      	beq.n	8003960 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f042 020e 	orr.w	r2, r2, #14
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	e00f      	b.n	8003980 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0204 	bic.w	r2, r2, #4
 800396e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 020a 	orr.w	r2, r2, #10
 800397e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d007      	beq.n	800399e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003998:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800399c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d007      	beq.n	80039b6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f042 0201 	orr.w	r2, r2, #1
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	e005      	b.n	80039d4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80039d0:	2302      	movs	r3, #2
 80039d2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80039d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b084      	sub	sp, #16
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fa:	f003 031f 	and.w	r3, r3, #31
 80039fe:	2204      	movs	r2, #4
 8003a00:	409a      	lsls	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4013      	ands	r3, r2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d026      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x7a>
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d021      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0320 	and.w	r3, r3, #32
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d107      	bne.n	8003a32 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0204 	bic.w	r2, r2, #4
 8003a30:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a36:	f003 021f 	and.w	r2, r3, #31
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	2104      	movs	r1, #4
 8003a40:	fa01 f202 	lsl.w	r2, r1, r2
 8003a44:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d071      	beq.n	8003b32 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003a56:	e06c      	b.n	8003b32 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5c:	f003 031f 	and.w	r3, r3, #31
 8003a60:	2202      	movs	r2, #2
 8003a62:	409a      	lsls	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4013      	ands	r3, r2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d02e      	beq.n	8003aca <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d029      	beq.n	8003aca <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0320 	and.w	r3, r3, #32
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10b      	bne.n	8003a9c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 020a 	bic.w	r2, r2, #10
 8003a92:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa0:	f003 021f 	and.w	r2, r3, #31
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa8:	2102      	movs	r1, #2
 8003aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8003aae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d038      	beq.n	8003b32 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003ac8:	e033      	b.n	8003b32 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	f003 031f 	and.w	r3, r3, #31
 8003ad2:	2208      	movs	r2, #8
 8003ad4:	409a      	lsls	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d02a      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d025      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 020e 	bic.w	r2, r2, #14
 8003af6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afc:	f003 021f 	and.w	r2, r3, #31
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b04:	2101      	movs	r1, #1
 8003b06:	fa01 f202 	lsl.w	r2, r1, r2
 8003b0a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d004      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b32:	bf00      	nop
 8003b34:	bf00      	nop
}
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
 8003b48:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b52:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d004      	beq.n	8003b66 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b64:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6a:	f003 021f 	and.w	r2, r3, #31
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	2101      	movs	r1, #1
 8003b74:	fa01 f202 	lsl.w	r2, r1, r2
 8003b78:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	2b10      	cmp	r3, #16
 8003b88:	d108      	bne.n	8003b9c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b9a:	e007      	b.n	8003bac <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	60da      	str	r2, [r3, #12]
}
 8003bac:	bf00      	nop
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4b16      	ldr	r3, [pc, #88]	; (8003c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d802      	bhi.n	8003bd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003bcc:	4b15      	ldr	r3, [pc, #84]	; (8003c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003bce:	617b      	str	r3, [r7, #20]
 8003bd0:	e001      	b.n	8003bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003bd2:	4b15      	ldr	r3, [pc, #84]	; (8003c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003bd4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	3b08      	subs	r3, #8
 8003be2:	4a12      	ldr	r2, [pc, #72]	; (8003c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003be4:	fba2 2303 	umull	r2, r3, r2, r3
 8003be8:	091b      	lsrs	r3, r3, #4
 8003bea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf0:	089b      	lsrs	r3, r3, #2
 8003bf2:	009a      	lsls	r2, r3, #2
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a0b      	ldr	r2, [pc, #44]	; (8003c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003c02:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f003 031f 	and.w	r3, r3, #31
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	409a      	lsls	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c12:	bf00      	nop
 8003c14:	371c      	adds	r7, #28
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	40020407 	.word	0x40020407
 8003c24:	40020800 	.word	0x40020800
 8003c28:	40020820 	.word	0x40020820
 8003c2c:	cccccccd 	.word	0xcccccccd
 8003c30:	40020880 	.word	0x40020880

08003c34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003c48:	4413      	add	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a08      	ldr	r2, [pc, #32]	; (8003c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003c56:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	f003 031f 	and.w	r3, r3, #31
 8003c60:	2201      	movs	r2, #1
 8003c62:	409a      	lsls	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003c68:	bf00      	nop
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	1000823f 	.word	0x1000823f
 8003c78:	40020940 	.word	0x40020940

08003c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c8a:	e15a      	b.n	8003f42 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	2101      	movs	r1, #1
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	fa01 f303 	lsl.w	r3, r1, r3
 8003c98:	4013      	ands	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 814c 	beq.w	8003f3c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 0303 	and.w	r3, r3, #3
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d005      	beq.n	8003cbc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d130      	bne.n	8003d1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	2203      	movs	r2, #3
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	091b      	lsrs	r3, r3, #4
 8003d08:	f003 0201 	and.w	r2, r3, #1
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f003 0303 	and.w	r3, r3, #3
 8003d26:	2b03      	cmp	r3, #3
 8003d28:	d017      	beq.n	8003d5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	2203      	movs	r2, #3
 8003d36:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3a:	43db      	mvns	r3, r3
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d123      	bne.n	8003dae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	08da      	lsrs	r2, r3, #3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	3208      	adds	r2, #8
 8003d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	220f      	movs	r2, #15
 8003d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d82:	43db      	mvns	r3, r3
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	4013      	ands	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	691a      	ldr	r2, [r3, #16]
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	08da      	lsrs	r2, r3, #3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3208      	adds	r2, #8
 8003da8:	6939      	ldr	r1, [r7, #16]
 8003daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	2203      	movs	r2, #3
 8003dba:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbe:	43db      	mvns	r3, r3
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f003 0203 	and.w	r2, r3, #3
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 80a6 	beq.w	8003f3c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003df0:	4b5b      	ldr	r3, [pc, #364]	; (8003f60 <HAL_GPIO_Init+0x2e4>)
 8003df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003df4:	4a5a      	ldr	r2, [pc, #360]	; (8003f60 <HAL_GPIO_Init+0x2e4>)
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	6613      	str	r3, [r2, #96]	; 0x60
 8003dfc:	4b58      	ldr	r3, [pc, #352]	; (8003f60 <HAL_GPIO_Init+0x2e4>)
 8003dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e08:	4a56      	ldr	r2, [pc, #344]	; (8003f64 <HAL_GPIO_Init+0x2e8>)
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	089b      	lsrs	r3, r3, #2
 8003e0e:	3302      	adds	r3, #2
 8003e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f003 0303 	and.w	r3, r3, #3
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	220f      	movs	r2, #15
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	43db      	mvns	r3, r3
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e32:	d01f      	beq.n	8003e74 <HAL_GPIO_Init+0x1f8>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a4c      	ldr	r2, [pc, #304]	; (8003f68 <HAL_GPIO_Init+0x2ec>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d019      	beq.n	8003e70 <HAL_GPIO_Init+0x1f4>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a4b      	ldr	r2, [pc, #300]	; (8003f6c <HAL_GPIO_Init+0x2f0>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d013      	beq.n	8003e6c <HAL_GPIO_Init+0x1f0>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a4a      	ldr	r2, [pc, #296]	; (8003f70 <HAL_GPIO_Init+0x2f4>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d00d      	beq.n	8003e68 <HAL_GPIO_Init+0x1ec>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a49      	ldr	r2, [pc, #292]	; (8003f74 <HAL_GPIO_Init+0x2f8>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d007      	beq.n	8003e64 <HAL_GPIO_Init+0x1e8>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a48      	ldr	r2, [pc, #288]	; (8003f78 <HAL_GPIO_Init+0x2fc>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d101      	bne.n	8003e60 <HAL_GPIO_Init+0x1e4>
 8003e5c:	2305      	movs	r3, #5
 8003e5e:	e00a      	b.n	8003e76 <HAL_GPIO_Init+0x1fa>
 8003e60:	2306      	movs	r3, #6
 8003e62:	e008      	b.n	8003e76 <HAL_GPIO_Init+0x1fa>
 8003e64:	2304      	movs	r3, #4
 8003e66:	e006      	b.n	8003e76 <HAL_GPIO_Init+0x1fa>
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e004      	b.n	8003e76 <HAL_GPIO_Init+0x1fa>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	e002      	b.n	8003e76 <HAL_GPIO_Init+0x1fa>
 8003e70:	2301      	movs	r3, #1
 8003e72:	e000      	b.n	8003e76 <HAL_GPIO_Init+0x1fa>
 8003e74:	2300      	movs	r3, #0
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	f002 0203 	and.w	r2, r2, #3
 8003e7c:	0092      	lsls	r2, r2, #2
 8003e7e:	4093      	lsls	r3, r2
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e86:	4937      	ldr	r1, [pc, #220]	; (8003f64 <HAL_GPIO_Init+0x2e8>)
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	089b      	lsrs	r3, r3, #2
 8003e8c:	3302      	adds	r3, #2
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e94:	4b39      	ldr	r3, [pc, #228]	; (8003f7c <HAL_GPIO_Init+0x300>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	43db      	mvns	r3, r3
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003eb8:	4a30      	ldr	r2, [pc, #192]	; (8003f7c <HAL_GPIO_Init+0x300>)
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ebe:	4b2f      	ldr	r3, [pc, #188]	; (8003f7c <HAL_GPIO_Init+0x300>)
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ee2:	4a26      	ldr	r2, [pc, #152]	; (8003f7c <HAL_GPIO_Init+0x300>)
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003ee8:	4b24      	ldr	r3, [pc, #144]	; (8003f7c <HAL_GPIO_Init+0x300>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f0c:	4a1b      	ldr	r2, [pc, #108]	; (8003f7c <HAL_GPIO_Init+0x300>)
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003f12:	4b1a      	ldr	r3, [pc, #104]	; (8003f7c <HAL_GPIO_Init+0x300>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	43db      	mvns	r3, r3
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f36:	4a11      	ldr	r2, [pc, #68]	; (8003f7c <HAL_GPIO_Init+0x300>)
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	fa22 f303 	lsr.w	r3, r2, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f47f ae9d 	bne.w	8003c8c <HAL_GPIO_Init+0x10>
  }
}
 8003f52:	bf00      	nop
 8003f54:	bf00      	nop
 8003f56:	371c      	adds	r7, #28
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	40021000 	.word	0x40021000
 8003f64:	40010000 	.word	0x40010000
 8003f68:	48000400 	.word	0x48000400
 8003f6c:	48000800 	.word	0x48000800
 8003f70:	48000c00 	.word	0x48000c00
 8003f74:	48001000 	.word	0x48001000
 8003f78:	48001400 	.word	0x48001400
 8003f7c:	40010400 	.word	0x40010400

08003f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	460b      	mov	r3, r1
 8003f8a:	807b      	strh	r3, [r7, #2]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f90:	787b      	ldrb	r3, [r7, #1]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f96:	887a      	ldrh	r2, [r7, #2]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f9c:	e002      	b.n	8003fa4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f9e:	887a      	ldrh	r2, [r7, #2]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003fba:	4b08      	ldr	r3, [pc, #32]	; (8003fdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fbc:	695a      	ldr	r2, [r3, #20]
 8003fbe:	88fb      	ldrh	r3, [r7, #6]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d006      	beq.n	8003fd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fc6:	4a05      	ldr	r2, [pc, #20]	; (8003fdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fc8:	88fb      	ldrh	r3, [r7, #6]
 8003fca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fcc:	88fb      	ldrh	r3, [r7, #6]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fd f828 	bl	8001024 <HAL_GPIO_EXTI_Callback>
  }
}
 8003fd4:	bf00      	nop
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40010400 	.word	0x40010400

08003fe0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d141      	bne.n	8004072 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fee:	4b4b      	ldr	r3, [pc, #300]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ffa:	d131      	bne.n	8004060 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ffc:	4b47      	ldr	r3, [pc, #284]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004002:	4a46      	ldr	r2, [pc, #280]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004008:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800400c:	4b43      	ldr	r3, [pc, #268]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004014:	4a41      	ldr	r2, [pc, #260]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004016:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800401a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800401c:	4b40      	ldr	r3, [pc, #256]	; (8004120 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2232      	movs	r2, #50	; 0x32
 8004022:	fb02 f303 	mul.w	r3, r2, r3
 8004026:	4a3f      	ldr	r2, [pc, #252]	; (8004124 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004028:	fba2 2303 	umull	r2, r3, r2, r3
 800402c:	0c9b      	lsrs	r3, r3, #18
 800402e:	3301      	adds	r3, #1
 8004030:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004032:	e002      	b.n	800403a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	3b01      	subs	r3, #1
 8004038:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800403a:	4b38      	ldr	r3, [pc, #224]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004046:	d102      	bne.n	800404e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f2      	bne.n	8004034 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800404e:	4b33      	ldr	r3, [pc, #204]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800405a:	d158      	bne.n	800410e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e057      	b.n	8004110 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004060:	4b2e      	ldr	r3, [pc, #184]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004066:	4a2d      	ldr	r2, [pc, #180]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800406c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004070:	e04d      	b.n	800410e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004078:	d141      	bne.n	80040fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800407a:	4b28      	ldr	r3, [pc, #160]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004086:	d131      	bne.n	80040ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004088:	4b24      	ldr	r3, [pc, #144]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800408a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800408e:	4a23      	ldr	r2, [pc, #140]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004094:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004098:	4b20      	ldr	r3, [pc, #128]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040a0:	4a1e      	ldr	r2, [pc, #120]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040a8:	4b1d      	ldr	r3, [pc, #116]	; (8004120 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2232      	movs	r2, #50	; 0x32
 80040ae:	fb02 f303 	mul.w	r3, r2, r3
 80040b2:	4a1c      	ldr	r2, [pc, #112]	; (8004124 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80040b4:	fba2 2303 	umull	r2, r3, r2, r3
 80040b8:	0c9b      	lsrs	r3, r3, #18
 80040ba:	3301      	adds	r3, #1
 80040bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040be:	e002      	b.n	80040c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040c6:	4b15      	ldr	r3, [pc, #84]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d2:	d102      	bne.n	80040da <HAL_PWREx_ControlVoltageScaling+0xfa>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f2      	bne.n	80040c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040da:	4b10      	ldr	r3, [pc, #64]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040e6:	d112      	bne.n	800410e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e011      	b.n	8004110 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040ec:	4b0b      	ldr	r3, [pc, #44]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040f2:	4a0a      	ldr	r2, [pc, #40]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80040fc:	e007      	b.n	800410e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040fe:	4b07      	ldr	r3, [pc, #28]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004106:	4a05      	ldr	r2, [pc, #20]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004108:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800410c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	40007000 	.word	0x40007000
 8004120:	20000008 	.word	0x20000008
 8004124:	431bde83 	.word	0x431bde83

08004128 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800412c:	4b05      	ldr	r3, [pc, #20]	; (8004144 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	4a04      	ldr	r2, [pc, #16]	; (8004144 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004132:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004136:	6093      	str	r3, [r2, #8]
}
 8004138:	bf00      	nop
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	40007000 	.word	0x40007000

08004148 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b088      	sub	sp, #32
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e2fe      	b.n	8004758 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d075      	beq.n	8004252 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004166:	4b97      	ldr	r3, [pc, #604]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 030c 	and.w	r3, r3, #12
 800416e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004170:	4b94      	ldr	r3, [pc, #592]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f003 0303 	and.w	r3, r3, #3
 8004178:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	2b0c      	cmp	r3, #12
 800417e:	d102      	bne.n	8004186 <HAL_RCC_OscConfig+0x3e>
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	2b03      	cmp	r3, #3
 8004184:	d002      	beq.n	800418c <HAL_RCC_OscConfig+0x44>
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	2b08      	cmp	r3, #8
 800418a:	d10b      	bne.n	80041a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800418c:	4b8d      	ldr	r3, [pc, #564]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d05b      	beq.n	8004250 <HAL_RCC_OscConfig+0x108>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d157      	bne.n	8004250 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e2d9      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ac:	d106      	bne.n	80041bc <HAL_RCC_OscConfig+0x74>
 80041ae:	4b85      	ldr	r3, [pc, #532]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a84      	ldr	r2, [pc, #528]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80041b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	e01d      	b.n	80041f8 <HAL_RCC_OscConfig+0xb0>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041c4:	d10c      	bne.n	80041e0 <HAL_RCC_OscConfig+0x98>
 80041c6:	4b7f      	ldr	r3, [pc, #508]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a7e      	ldr	r2, [pc, #504]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80041cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	4b7c      	ldr	r3, [pc, #496]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a7b      	ldr	r2, [pc, #492]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80041d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	e00b      	b.n	80041f8 <HAL_RCC_OscConfig+0xb0>
 80041e0:	4b78      	ldr	r3, [pc, #480]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a77      	ldr	r2, [pc, #476]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80041e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ea:	6013      	str	r3, [r2, #0]
 80041ec:	4b75      	ldr	r3, [pc, #468]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a74      	ldr	r2, [pc, #464]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80041f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d013      	beq.n	8004228 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004200:	f7fd fa78 	bl	80016f4 <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004208:	f7fd fa74 	bl	80016f4 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b64      	cmp	r3, #100	; 0x64
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e29e      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800421a:	4b6a      	ldr	r3, [pc, #424]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0f0      	beq.n	8004208 <HAL_RCC_OscConfig+0xc0>
 8004226:	e014      	b.n	8004252 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004228:	f7fd fa64 	bl	80016f4 <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004230:	f7fd fa60 	bl	80016f4 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b64      	cmp	r3, #100	; 0x64
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e28a      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004242:	4b60      	ldr	r3, [pc, #384]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1f0      	bne.n	8004230 <HAL_RCC_OscConfig+0xe8>
 800424e:	e000      	b.n	8004252 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d075      	beq.n	800434a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800425e:	4b59      	ldr	r3, [pc, #356]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 030c 	and.w	r3, r3, #12
 8004266:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004268:	4b56      	ldr	r3, [pc, #344]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f003 0303 	and.w	r3, r3, #3
 8004270:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	2b0c      	cmp	r3, #12
 8004276:	d102      	bne.n	800427e <HAL_RCC_OscConfig+0x136>
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	2b02      	cmp	r3, #2
 800427c:	d002      	beq.n	8004284 <HAL_RCC_OscConfig+0x13c>
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	2b04      	cmp	r3, #4
 8004282:	d11f      	bne.n	80042c4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004284:	4b4f      	ldr	r3, [pc, #316]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800428c:	2b00      	cmp	r3, #0
 800428e:	d005      	beq.n	800429c <HAL_RCC_OscConfig+0x154>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e25d      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800429c:	4b49      	ldr	r3, [pc, #292]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	061b      	lsls	r3, r3, #24
 80042aa:	4946      	ldr	r1, [pc, #280]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80042b0:	4b45      	ldr	r3, [pc, #276]	; (80043c8 <HAL_RCC_OscConfig+0x280>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7fd f9d1 	bl	800165c <HAL_InitTick>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d043      	beq.n	8004348 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e249      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d023      	beq.n	8004314 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042cc:	4b3d      	ldr	r3, [pc, #244]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a3c      	ldr	r2, [pc, #240]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80042d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d8:	f7fd fa0c 	bl	80016f4 <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042de:	e008      	b.n	80042f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042e0:	f7fd fa08 	bl	80016f4 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e232      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042f2:	4b34      	ldr	r3, [pc, #208]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0f0      	beq.n	80042e0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042fe:	4b31      	ldr	r3, [pc, #196]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	061b      	lsls	r3, r3, #24
 800430c:	492d      	ldr	r1, [pc, #180]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 800430e:	4313      	orrs	r3, r2
 8004310:	604b      	str	r3, [r1, #4]
 8004312:	e01a      	b.n	800434a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004314:	4b2b      	ldr	r3, [pc, #172]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a2a      	ldr	r2, [pc, #168]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 800431a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800431e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004320:	f7fd f9e8 	bl	80016f4 <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004328:	f7fd f9e4 	bl	80016f4 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e20e      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800433a:	4b22      	ldr	r3, [pc, #136]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1f0      	bne.n	8004328 <HAL_RCC_OscConfig+0x1e0>
 8004346:	e000      	b.n	800434a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004348:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d041      	beq.n	80043da <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d01c      	beq.n	8004398 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800435e:	4b19      	ldr	r3, [pc, #100]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 8004360:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004364:	4a17      	ldr	r2, [pc, #92]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 8004366:	f043 0301 	orr.w	r3, r3, #1
 800436a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800436e:	f7fd f9c1 	bl	80016f4 <HAL_GetTick>
 8004372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004374:	e008      	b.n	8004388 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004376:	f7fd f9bd 	bl	80016f4 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d901      	bls.n	8004388 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e1e7      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004388:	4b0e      	ldr	r3, [pc, #56]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 800438a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0ef      	beq.n	8004376 <HAL_RCC_OscConfig+0x22e>
 8004396:	e020      	b.n	80043da <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004398:	4b0a      	ldr	r3, [pc, #40]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 800439a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800439e:	4a09      	ldr	r2, [pc, #36]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80043a0:	f023 0301 	bic.w	r3, r3, #1
 80043a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a8:	f7fd f9a4 	bl	80016f4 <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043ae:	e00d      	b.n	80043cc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043b0:	f7fd f9a0 	bl	80016f4 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d906      	bls.n	80043cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e1ca      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
 80043c2:	bf00      	nop
 80043c4:	40021000 	.word	0x40021000
 80043c8:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043cc:	4b8c      	ldr	r3, [pc, #560]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 80043ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1ea      	bne.n	80043b0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0304 	and.w	r3, r3, #4
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 80a6 	beq.w	8004534 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043e8:	2300      	movs	r3, #0
 80043ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043ec:	4b84      	ldr	r3, [pc, #528]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 80043ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d101      	bne.n	80043fc <HAL_RCC_OscConfig+0x2b4>
 80043f8:	2301      	movs	r3, #1
 80043fa:	e000      	b.n	80043fe <HAL_RCC_OscConfig+0x2b6>
 80043fc:	2300      	movs	r3, #0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00d      	beq.n	800441e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004402:	4b7f      	ldr	r3, [pc, #508]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004406:	4a7e      	ldr	r2, [pc, #504]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800440c:	6593      	str	r3, [r2, #88]	; 0x58
 800440e:	4b7c      	ldr	r3, [pc, #496]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800441a:	2301      	movs	r3, #1
 800441c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800441e:	4b79      	ldr	r3, [pc, #484]	; (8004604 <HAL_RCC_OscConfig+0x4bc>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004426:	2b00      	cmp	r3, #0
 8004428:	d118      	bne.n	800445c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800442a:	4b76      	ldr	r3, [pc, #472]	; (8004604 <HAL_RCC_OscConfig+0x4bc>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a75      	ldr	r2, [pc, #468]	; (8004604 <HAL_RCC_OscConfig+0x4bc>)
 8004430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004434:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004436:	f7fd f95d 	bl	80016f4 <HAL_GetTick>
 800443a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800443c:	e008      	b.n	8004450 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800443e:	f7fd f959 	bl	80016f4 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e183      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004450:	4b6c      	ldr	r3, [pc, #432]	; (8004604 <HAL_RCC_OscConfig+0x4bc>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0f0      	beq.n	800443e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d108      	bne.n	8004476 <HAL_RCC_OscConfig+0x32e>
 8004464:	4b66      	ldr	r3, [pc, #408]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446a:	4a65      	ldr	r2, [pc, #404]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 800446c:	f043 0301 	orr.w	r3, r3, #1
 8004470:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004474:	e024      	b.n	80044c0 <HAL_RCC_OscConfig+0x378>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2b05      	cmp	r3, #5
 800447c:	d110      	bne.n	80044a0 <HAL_RCC_OscConfig+0x358>
 800447e:	4b60      	ldr	r3, [pc, #384]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004484:	4a5e      	ldr	r2, [pc, #376]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004486:	f043 0304 	orr.w	r3, r3, #4
 800448a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800448e:	4b5c      	ldr	r3, [pc, #368]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004494:	4a5a      	ldr	r2, [pc, #360]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004496:	f043 0301 	orr.w	r3, r3, #1
 800449a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800449e:	e00f      	b.n	80044c0 <HAL_RCC_OscConfig+0x378>
 80044a0:	4b57      	ldr	r3, [pc, #348]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 80044a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a6:	4a56      	ldr	r2, [pc, #344]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 80044a8:	f023 0301 	bic.w	r3, r3, #1
 80044ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044b0:	4b53      	ldr	r3, [pc, #332]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 80044b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b6:	4a52      	ldr	r2, [pc, #328]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 80044b8:	f023 0304 	bic.w	r3, r3, #4
 80044bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d016      	beq.n	80044f6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c8:	f7fd f914 	bl	80016f4 <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044ce:	e00a      	b.n	80044e6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044d0:	f7fd f910 	bl	80016f4 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	f241 3288 	movw	r2, #5000	; 0x1388
 80044de:	4293      	cmp	r3, r2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e138      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044e6:	4b46      	ldr	r3, [pc, #280]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 80044e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0ed      	beq.n	80044d0 <HAL_RCC_OscConfig+0x388>
 80044f4:	e015      	b.n	8004522 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f6:	f7fd f8fd 	bl	80016f4 <HAL_GetTick>
 80044fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044fc:	e00a      	b.n	8004514 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044fe:	f7fd f8f9 	bl	80016f4 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	f241 3288 	movw	r2, #5000	; 0x1388
 800450c:	4293      	cmp	r3, r2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e121      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004514:	4b3a      	ldr	r3, [pc, #232]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1ed      	bne.n	80044fe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004522:	7ffb      	ldrb	r3, [r7, #31]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d105      	bne.n	8004534 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004528:	4b35      	ldr	r3, [pc, #212]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 800452a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452c:	4a34      	ldr	r2, [pc, #208]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 800452e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004532:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0320 	and.w	r3, r3, #32
 800453c:	2b00      	cmp	r3, #0
 800453e:	d03c      	beq.n	80045ba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d01c      	beq.n	8004582 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004548:	4b2d      	ldr	r3, [pc, #180]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 800454a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800454e:	4a2c      	ldr	r2, [pc, #176]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004550:	f043 0301 	orr.w	r3, r3, #1
 8004554:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004558:	f7fd f8cc 	bl	80016f4 <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004560:	f7fd f8c8 	bl	80016f4 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e0f2      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004572:	4b23      	ldr	r3, [pc, #140]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004574:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0ef      	beq.n	8004560 <HAL_RCC_OscConfig+0x418>
 8004580:	e01b      	b.n	80045ba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004582:	4b1f      	ldr	r3, [pc, #124]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004584:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004588:	4a1d      	ldr	r2, [pc, #116]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 800458a:	f023 0301 	bic.w	r3, r3, #1
 800458e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004592:	f7fd f8af 	bl	80016f4 <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800459a:	f7fd f8ab 	bl	80016f4 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e0d5      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045ac:	4b14      	ldr	r3, [pc, #80]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 80045ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1ef      	bne.n	800459a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 80c9 	beq.w	8004756 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045c4:	4b0e      	ldr	r3, [pc, #56]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f003 030c 	and.w	r3, r3, #12
 80045cc:	2b0c      	cmp	r3, #12
 80045ce:	f000 8083 	beq.w	80046d8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d15e      	bne.n	8004698 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045da:	4b09      	ldr	r3, [pc, #36]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a08      	ldr	r2, [pc, #32]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 80045e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e6:	f7fd f885 	bl	80016f4 <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045ec:	e00c      	b.n	8004608 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ee:	f7fd f881 	bl	80016f4 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d905      	bls.n	8004608 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e0ab      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
 8004600:	40021000 	.word	0x40021000
 8004604:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004608:	4b55      	ldr	r3, [pc, #340]	; (8004760 <HAL_RCC_OscConfig+0x618>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1ec      	bne.n	80045ee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004614:	4b52      	ldr	r3, [pc, #328]	; (8004760 <HAL_RCC_OscConfig+0x618>)
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	4b52      	ldr	r3, [pc, #328]	; (8004764 <HAL_RCC_OscConfig+0x61c>)
 800461a:	4013      	ands	r3, r2
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6a11      	ldr	r1, [r2, #32]
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004624:	3a01      	subs	r2, #1
 8004626:	0112      	lsls	r2, r2, #4
 8004628:	4311      	orrs	r1, r2
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800462e:	0212      	lsls	r2, r2, #8
 8004630:	4311      	orrs	r1, r2
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004636:	0852      	lsrs	r2, r2, #1
 8004638:	3a01      	subs	r2, #1
 800463a:	0552      	lsls	r2, r2, #21
 800463c:	4311      	orrs	r1, r2
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004642:	0852      	lsrs	r2, r2, #1
 8004644:	3a01      	subs	r2, #1
 8004646:	0652      	lsls	r2, r2, #25
 8004648:	4311      	orrs	r1, r2
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800464e:	06d2      	lsls	r2, r2, #27
 8004650:	430a      	orrs	r2, r1
 8004652:	4943      	ldr	r1, [pc, #268]	; (8004760 <HAL_RCC_OscConfig+0x618>)
 8004654:	4313      	orrs	r3, r2
 8004656:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004658:	4b41      	ldr	r3, [pc, #260]	; (8004760 <HAL_RCC_OscConfig+0x618>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a40      	ldr	r2, [pc, #256]	; (8004760 <HAL_RCC_OscConfig+0x618>)
 800465e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004662:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004664:	4b3e      	ldr	r3, [pc, #248]	; (8004760 <HAL_RCC_OscConfig+0x618>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	4a3d      	ldr	r2, [pc, #244]	; (8004760 <HAL_RCC_OscConfig+0x618>)
 800466a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800466e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004670:	f7fd f840 	bl	80016f4 <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004678:	f7fd f83c 	bl	80016f4 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e066      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800468a:	4b35      	ldr	r3, [pc, #212]	; (8004760 <HAL_RCC_OscConfig+0x618>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0f0      	beq.n	8004678 <HAL_RCC_OscConfig+0x530>
 8004696:	e05e      	b.n	8004756 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004698:	4b31      	ldr	r3, [pc, #196]	; (8004760 <HAL_RCC_OscConfig+0x618>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a30      	ldr	r2, [pc, #192]	; (8004760 <HAL_RCC_OscConfig+0x618>)
 800469e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a4:	f7fd f826 	bl	80016f4 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ac:	f7fd f822 	bl	80016f4 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e04c      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046be:	4b28      	ldr	r3, [pc, #160]	; (8004760 <HAL_RCC_OscConfig+0x618>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f0      	bne.n	80046ac <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80046ca:	4b25      	ldr	r3, [pc, #148]	; (8004760 <HAL_RCC_OscConfig+0x618>)
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	4924      	ldr	r1, [pc, #144]	; (8004760 <HAL_RCC_OscConfig+0x618>)
 80046d0:	4b25      	ldr	r3, [pc, #148]	; (8004768 <HAL_RCC_OscConfig+0x620>)
 80046d2:	4013      	ands	r3, r2
 80046d4:	60cb      	str	r3, [r1, #12]
 80046d6:	e03e      	b.n	8004756 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d101      	bne.n	80046e4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e039      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80046e4:	4b1e      	ldr	r3, [pc, #120]	; (8004760 <HAL_RCC_OscConfig+0x618>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f003 0203 	and.w	r2, r3, #3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d12c      	bne.n	8004752 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004702:	3b01      	subs	r3, #1
 8004704:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004706:	429a      	cmp	r2, r3
 8004708:	d123      	bne.n	8004752 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004714:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004716:	429a      	cmp	r2, r3
 8004718:	d11b      	bne.n	8004752 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004724:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004726:	429a      	cmp	r2, r3
 8004728:	d113      	bne.n	8004752 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004734:	085b      	lsrs	r3, r3, #1
 8004736:	3b01      	subs	r3, #1
 8004738:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800473a:	429a      	cmp	r2, r3
 800473c:	d109      	bne.n	8004752 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004748:	085b      	lsrs	r3, r3, #1
 800474a:	3b01      	subs	r3, #1
 800474c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800474e:	429a      	cmp	r2, r3
 8004750:	d001      	beq.n	8004756 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e000      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3720      	adds	r7, #32
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	40021000 	.word	0x40021000
 8004764:	019f800c 	.word	0x019f800c
 8004768:	feeefffc 	.word	0xfeeefffc

0800476c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004776:	2300      	movs	r3, #0
 8004778:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e11e      	b.n	80049c2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004784:	4b91      	ldr	r3, [pc, #580]	; (80049cc <HAL_RCC_ClockConfig+0x260>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 030f 	and.w	r3, r3, #15
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	429a      	cmp	r2, r3
 8004790:	d910      	bls.n	80047b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004792:	4b8e      	ldr	r3, [pc, #568]	; (80049cc <HAL_RCC_ClockConfig+0x260>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f023 020f 	bic.w	r2, r3, #15
 800479a:	498c      	ldr	r1, [pc, #560]	; (80049cc <HAL_RCC_ClockConfig+0x260>)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	4313      	orrs	r3, r2
 80047a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a2:	4b8a      	ldr	r3, [pc, #552]	; (80049cc <HAL_RCC_ClockConfig+0x260>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 030f 	and.w	r3, r3, #15
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d001      	beq.n	80047b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e106      	b.n	80049c2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d073      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	2b03      	cmp	r3, #3
 80047c6:	d129      	bne.n	800481c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047c8:	4b81      	ldr	r3, [pc, #516]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e0f4      	b.n	80049c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80047d8:	f000 f99e 	bl	8004b18 <RCC_GetSysClockFreqFromPLLSource>
 80047dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	4a7c      	ldr	r2, [pc, #496]	; (80049d4 <HAL_RCC_ClockConfig+0x268>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d93f      	bls.n	8004866 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80047e6:	4b7a      	ldr	r3, [pc, #488]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d009      	beq.n	8004806 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d033      	beq.n	8004866 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004802:	2b00      	cmp	r3, #0
 8004804:	d12f      	bne.n	8004866 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004806:	4b72      	ldr	r3, [pc, #456]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800480e:	4a70      	ldr	r2, [pc, #448]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004814:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004816:	2380      	movs	r3, #128	; 0x80
 8004818:	617b      	str	r3, [r7, #20]
 800481a:	e024      	b.n	8004866 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	2b02      	cmp	r3, #2
 8004822:	d107      	bne.n	8004834 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004824:	4b6a      	ldr	r3, [pc, #424]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d109      	bne.n	8004844 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e0c6      	b.n	80049c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004834:	4b66      	ldr	r3, [pc, #408]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e0be      	b.n	80049c2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004844:	f000 f8ce 	bl	80049e4 <HAL_RCC_GetSysClockFreq>
 8004848:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	4a61      	ldr	r2, [pc, #388]	; (80049d4 <HAL_RCC_ClockConfig+0x268>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d909      	bls.n	8004866 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004852:	4b5f      	ldr	r3, [pc, #380]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800485a:	4a5d      	ldr	r2, [pc, #372]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 800485c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004860:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004862:	2380      	movs	r3, #128	; 0x80
 8004864:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004866:	4b5a      	ldr	r3, [pc, #360]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f023 0203 	bic.w	r2, r3, #3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	4957      	ldr	r1, [pc, #348]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004874:	4313      	orrs	r3, r2
 8004876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004878:	f7fc ff3c 	bl	80016f4 <HAL_GetTick>
 800487c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800487e:	e00a      	b.n	8004896 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004880:	f7fc ff38 	bl	80016f4 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	f241 3288 	movw	r2, #5000	; 0x1388
 800488e:	4293      	cmp	r3, r2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e095      	b.n	80049c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004896:	4b4e      	ldr	r3, [pc, #312]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 020c 	and.w	r2, r3, #12
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d1eb      	bne.n	8004880 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d023      	beq.n	80048fc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d005      	beq.n	80048cc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048c0:	4b43      	ldr	r3, [pc, #268]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	4a42      	ldr	r2, [pc, #264]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 80048c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80048ca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0308 	and.w	r3, r3, #8
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d007      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80048d8:	4b3d      	ldr	r3, [pc, #244]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80048e0:	4a3b      	ldr	r2, [pc, #236]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 80048e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80048e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048e8:	4b39      	ldr	r3, [pc, #228]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	4936      	ldr	r1, [pc, #216]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	608b      	str	r3, [r1, #8]
 80048fa:	e008      	b.n	800490e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	2b80      	cmp	r3, #128	; 0x80
 8004900:	d105      	bne.n	800490e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004902:	4b33      	ldr	r3, [pc, #204]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	4a32      	ldr	r2, [pc, #200]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004908:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800490c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800490e:	4b2f      	ldr	r3, [pc, #188]	; (80049cc <HAL_RCC_ClockConfig+0x260>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 030f 	and.w	r3, r3, #15
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	429a      	cmp	r2, r3
 800491a:	d21d      	bcs.n	8004958 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800491c:	4b2b      	ldr	r3, [pc, #172]	; (80049cc <HAL_RCC_ClockConfig+0x260>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f023 020f 	bic.w	r2, r3, #15
 8004924:	4929      	ldr	r1, [pc, #164]	; (80049cc <HAL_RCC_ClockConfig+0x260>)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	4313      	orrs	r3, r2
 800492a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800492c:	f7fc fee2 	bl	80016f4 <HAL_GetTick>
 8004930:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004932:	e00a      	b.n	800494a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004934:	f7fc fede 	bl	80016f4 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004942:	4293      	cmp	r3, r2
 8004944:	d901      	bls.n	800494a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e03b      	b.n	80049c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800494a:	4b20      	ldr	r3, [pc, #128]	; (80049cc <HAL_RCC_ClockConfig+0x260>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 030f 	and.w	r3, r3, #15
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	429a      	cmp	r2, r3
 8004956:	d1ed      	bne.n	8004934 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b00      	cmp	r3, #0
 8004962:	d008      	beq.n	8004976 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004964:	4b1a      	ldr	r3, [pc, #104]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	4917      	ldr	r1, [pc, #92]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004972:	4313      	orrs	r3, r2
 8004974:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0308 	and.w	r3, r3, #8
 800497e:	2b00      	cmp	r3, #0
 8004980:	d009      	beq.n	8004996 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004982:	4b13      	ldr	r3, [pc, #76]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	490f      	ldr	r1, [pc, #60]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004992:	4313      	orrs	r3, r2
 8004994:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004996:	f000 f825 	bl	80049e4 <HAL_RCC_GetSysClockFreq>
 800499a:	4602      	mov	r2, r0
 800499c:	4b0c      	ldr	r3, [pc, #48]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	091b      	lsrs	r3, r3, #4
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	490c      	ldr	r1, [pc, #48]	; (80049d8 <HAL_RCC_ClockConfig+0x26c>)
 80049a8:	5ccb      	ldrb	r3, [r1, r3]
 80049aa:	f003 031f 	and.w	r3, r3, #31
 80049ae:	fa22 f303 	lsr.w	r3, r2, r3
 80049b2:	4a0a      	ldr	r2, [pc, #40]	; (80049dc <HAL_RCC_ClockConfig+0x270>)
 80049b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80049b6:	4b0a      	ldr	r3, [pc, #40]	; (80049e0 <HAL_RCC_ClockConfig+0x274>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fc fe4e 	bl	800165c <HAL_InitTick>
 80049c0:	4603      	mov	r3, r0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3718      	adds	r7, #24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	40022000 	.word	0x40022000
 80049d0:	40021000 	.word	0x40021000
 80049d4:	04c4b400 	.word	0x04c4b400
 80049d8:	08007db8 	.word	0x08007db8
 80049dc:	20000008 	.word	0x20000008
 80049e0:	2000000c 	.word	0x2000000c

080049e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80049ea:	4b2c      	ldr	r3, [pc, #176]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 030c 	and.w	r3, r3, #12
 80049f2:	2b04      	cmp	r3, #4
 80049f4:	d102      	bne.n	80049fc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049f6:	4b2a      	ldr	r3, [pc, #168]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80049f8:	613b      	str	r3, [r7, #16]
 80049fa:	e047      	b.n	8004a8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80049fc:	4b27      	ldr	r3, [pc, #156]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f003 030c 	and.w	r3, r3, #12
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d102      	bne.n	8004a0e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a08:	4b26      	ldr	r3, [pc, #152]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a0a:	613b      	str	r3, [r7, #16]
 8004a0c:	e03e      	b.n	8004a8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004a0e:	4b23      	ldr	r3, [pc, #140]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 030c 	and.w	r3, r3, #12
 8004a16:	2b0c      	cmp	r3, #12
 8004a18:	d136      	bne.n	8004a88 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a1a:	4b20      	ldr	r3, [pc, #128]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f003 0303 	and.w	r3, r3, #3
 8004a22:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a24:	4b1d      	ldr	r3, [pc, #116]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	091b      	lsrs	r3, r3, #4
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	3301      	adds	r3, #1
 8004a30:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2b03      	cmp	r3, #3
 8004a36:	d10c      	bne.n	8004a52 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a38:	4a1a      	ldr	r2, [pc, #104]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a40:	4a16      	ldr	r2, [pc, #88]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a42:	68d2      	ldr	r2, [r2, #12]
 8004a44:	0a12      	lsrs	r2, r2, #8
 8004a46:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a4a:	fb02 f303 	mul.w	r3, r2, r3
 8004a4e:	617b      	str	r3, [r7, #20]
      break;
 8004a50:	e00c      	b.n	8004a6c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a52:	4a13      	ldr	r2, [pc, #76]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5a:	4a10      	ldr	r2, [pc, #64]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a5c:	68d2      	ldr	r2, [r2, #12]
 8004a5e:	0a12      	lsrs	r2, r2, #8
 8004a60:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a64:	fb02 f303 	mul.w	r3, r2, r3
 8004a68:	617b      	str	r3, [r7, #20]
      break;
 8004a6a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a6c:	4b0b      	ldr	r3, [pc, #44]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	0e5b      	lsrs	r3, r3, #25
 8004a72:	f003 0303 	and.w	r3, r3, #3
 8004a76:	3301      	adds	r3, #1
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a84:	613b      	str	r3, [r7, #16]
 8004a86:	e001      	b.n	8004a8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004a8c:	693b      	ldr	r3, [r7, #16]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	371c      	adds	r7, #28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	00f42400 	.word	0x00f42400
 8004aa4:	016e3600 	.word	0x016e3600

08004aa8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004aac:	4b03      	ldr	r3, [pc, #12]	; (8004abc <HAL_RCC_GetHCLKFreq+0x14>)
 8004aae:	681b      	ldr	r3, [r3, #0]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	20000008 	.word	0x20000008

08004ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ac4:	f7ff fff0 	bl	8004aa8 <HAL_RCC_GetHCLKFreq>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	4b06      	ldr	r3, [pc, #24]	; (8004ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	0a1b      	lsrs	r3, r3, #8
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	4904      	ldr	r1, [pc, #16]	; (8004ae8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ad6:	5ccb      	ldrb	r3, [r1, r3]
 8004ad8:	f003 031f 	and.w	r3, r3, #31
 8004adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	08007dc8 	.word	0x08007dc8

08004aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004af0:	f7ff ffda 	bl	8004aa8 <HAL_RCC_GetHCLKFreq>
 8004af4:	4602      	mov	r2, r0
 8004af6:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	0adb      	lsrs	r3, r3, #11
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	4904      	ldr	r1, [pc, #16]	; (8004b14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b02:	5ccb      	ldrb	r3, [r1, r3]
 8004b04:	f003 031f 	and.w	r3, r3, #31
 8004b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40021000 	.word	0x40021000
 8004b14:	08007dc8 	.word	0x08007dc8

08004b18 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b1e:	4b1e      	ldr	r3, [pc, #120]	; (8004b98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b28:	4b1b      	ldr	r3, [pc, #108]	; (8004b98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	091b      	lsrs	r3, r3, #4
 8004b2e:	f003 030f 	and.w	r3, r3, #15
 8004b32:	3301      	adds	r3, #1
 8004b34:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	2b03      	cmp	r3, #3
 8004b3a:	d10c      	bne.n	8004b56 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b3c:	4a17      	ldr	r2, [pc, #92]	; (8004b9c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b44:	4a14      	ldr	r2, [pc, #80]	; (8004b98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b46:	68d2      	ldr	r2, [r2, #12]
 8004b48:	0a12      	lsrs	r2, r2, #8
 8004b4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b4e:	fb02 f303 	mul.w	r3, r2, r3
 8004b52:	617b      	str	r3, [r7, #20]
    break;
 8004b54:	e00c      	b.n	8004b70 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b56:	4a12      	ldr	r2, [pc, #72]	; (8004ba0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5e:	4a0e      	ldr	r2, [pc, #56]	; (8004b98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b60:	68d2      	ldr	r2, [r2, #12]
 8004b62:	0a12      	lsrs	r2, r2, #8
 8004b64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b68:	fb02 f303 	mul.w	r3, r2, r3
 8004b6c:	617b      	str	r3, [r7, #20]
    break;
 8004b6e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b70:	4b09      	ldr	r3, [pc, #36]	; (8004b98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	0e5b      	lsrs	r3, r3, #25
 8004b76:	f003 0303 	and.w	r3, r3, #3
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b88:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004b8a:	687b      	ldr	r3, [r7, #4]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	371c      	adds	r7, #28
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	016e3600 	.word	0x016e3600
 8004ba0:	00f42400 	.word	0x00f42400

08004ba4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bac:	2300      	movs	r3, #0
 8004bae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 8098 	beq.w	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bc6:	4b43      	ldr	r3, [pc, #268]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10d      	bne.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bd2:	4b40      	ldr	r3, [pc, #256]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd6:	4a3f      	ldr	r2, [pc, #252]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bdc:	6593      	str	r3, [r2, #88]	; 0x58
 8004bde:	4b3d      	ldr	r3, [pc, #244]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be6:	60bb      	str	r3, [r7, #8]
 8004be8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bea:	2301      	movs	r3, #1
 8004bec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bee:	4b3a      	ldr	r3, [pc, #232]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a39      	ldr	r2, [pc, #228]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bfa:	f7fc fd7b 	bl	80016f4 <HAL_GetTick>
 8004bfe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c00:	e009      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c02:	f7fc fd77 	bl	80016f4 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d902      	bls.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	74fb      	strb	r3, [r7, #19]
        break;
 8004c14:	e005      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c16:	4b30      	ldr	r3, [pc, #192]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0ef      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004c22:	7cfb      	ldrb	r3, [r7, #19]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d159      	bne.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c28:	4b2a      	ldr	r3, [pc, #168]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c32:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d01e      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d019      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c44:	4b23      	ldr	r3, [pc, #140]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c50:	4b20      	ldr	r3, [pc, #128]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c56:	4a1f      	ldr	r2, [pc, #124]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c60:	4b1c      	ldr	r3, [pc, #112]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c66:	4a1b      	ldr	r2, [pc, #108]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c70:	4a18      	ldr	r2, [pc, #96]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d016      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c82:	f7fc fd37 	bl	80016f4 <HAL_GetTick>
 8004c86:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c88:	e00b      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c8a:	f7fc fd33 	bl	80016f4 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d902      	bls.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	74fb      	strb	r3, [r7, #19]
            break;
 8004ca0:	e006      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ca2:	4b0c      	ldr	r3, [pc, #48]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0ec      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004cb0:	7cfb      	ldrb	r3, [r7, #19]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10b      	bne.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cb6:	4b07      	ldr	r3, [pc, #28]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc4:	4903      	ldr	r1, [pc, #12]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004ccc:	e008      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cce:	7cfb      	ldrb	r3, [r7, #19]
 8004cd0:	74bb      	strb	r3, [r7, #18]
 8004cd2:	e005      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004cd4:	40021000 	.word	0x40021000
 8004cd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cdc:	7cfb      	ldrb	r3, [r7, #19]
 8004cde:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ce0:	7c7b      	ldrb	r3, [r7, #17]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d105      	bne.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ce6:	4ba7      	ldr	r3, [pc, #668]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cea:	4aa6      	ldr	r2, [pc, #664]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cf0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cfe:	4ba1      	ldr	r3, [pc, #644]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d04:	f023 0203 	bic.w	r2, r3, #3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	499d      	ldr	r1, [pc, #628]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00a      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d20:	4b98      	ldr	r3, [pc, #608]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d26:	f023 020c 	bic.w	r2, r3, #12
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	4995      	ldr	r1, [pc, #596]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0304 	and.w	r3, r3, #4
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d42:	4b90      	ldr	r3, [pc, #576]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	498c      	ldr	r1, [pc, #560]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0308 	and.w	r3, r3, #8
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d64:	4b87      	ldr	r3, [pc, #540]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	4984      	ldr	r1, [pc, #528]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0310 	and.w	r3, r3, #16
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00a      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d86:	4b7f      	ldr	r3, [pc, #508]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	497b      	ldr	r1, [pc, #492]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0320 	and.w	r3, r3, #32
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00a      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004da8:	4b76      	ldr	r3, [pc, #472]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	4973      	ldr	r1, [pc, #460]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dca:	4b6e      	ldr	r3, [pc, #440]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	496a      	ldr	r1, [pc, #424]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00a      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004dec:	4b65      	ldr	r3, [pc, #404]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	4962      	ldr	r1, [pc, #392]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00a      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e0e:	4b5d      	ldr	r3, [pc, #372]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	4959      	ldr	r1, [pc, #356]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00a      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e30:	4b54      	ldr	r3, [pc, #336]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e36:	f023 0203 	bic.w	r2, r3, #3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3e:	4951      	ldr	r1, [pc, #324]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e52:	4b4c      	ldr	r3, [pc, #304]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e60:	4948      	ldr	r1, [pc, #288]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d015      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e74:	4b43      	ldr	r3, [pc, #268]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e82:	4940      	ldr	r1, [pc, #256]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e92:	d105      	bne.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e94:	4b3b      	ldr	r3, [pc, #236]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	4a3a      	ldr	r2, [pc, #232]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e9e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d015      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004eac:	4b35      	ldr	r3, [pc, #212]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eba:	4932      	ldr	r1, [pc, #200]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eca:	d105      	bne.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ecc:	4b2d      	ldr	r3, [pc, #180]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	4a2c      	ldr	r2, [pc, #176]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ed2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ed6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d015      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ee4:	4b27      	ldr	r3, [pc, #156]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef2:	4924      	ldr	r1, [pc, #144]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f02:	d105      	bne.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f04:	4b1f      	ldr	r3, [pc, #124]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	4a1e      	ldr	r2, [pc, #120]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f0e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d015      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f1c:	4b19      	ldr	r3, [pc, #100]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2a:	4916      	ldr	r1, [pc, #88]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f3a:	d105      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f3c:	4b11      	ldr	r3, [pc, #68]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	4a10      	ldr	r2, [pc, #64]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f46:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d019      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f54:	4b0b      	ldr	r3, [pc, #44]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f62:	4908      	ldr	r1, [pc, #32]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f72:	d109      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f74:	4b03      	ldr	r3, [pc, #12]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	4a02      	ldr	r2, [pc, #8]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f7e:	60d3      	str	r3, [r2, #12]
 8004f80:	e002      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004f82:	bf00      	nop
 8004f84:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d015      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004f94:	4b29      	ldr	r3, [pc, #164]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa2:	4926      	ldr	r1, [pc, #152]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fb2:	d105      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004fb4:	4b21      	ldr	r3, [pc, #132]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	4a20      	ldr	r2, [pc, #128]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fbe:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d015      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004fcc:	4b1b      	ldr	r3, [pc, #108]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fda:	4918      	ldr	r1, [pc, #96]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fea:	d105      	bne.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004fec:	4b13      	ldr	r3, [pc, #76]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	4a12      	ldr	r2, [pc, #72]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ff6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d015      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005004:	4b0d      	ldr	r3, [pc, #52]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005006:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800500a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005012:	490a      	ldr	r1, [pc, #40]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005014:	4313      	orrs	r3, r2
 8005016:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800501e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005022:	d105      	bne.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005024:	4b05      	ldr	r3, [pc, #20]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	4a04      	ldr	r2, [pc, #16]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800502a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800502e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005030:	7cbb      	ldrb	r3, [r7, #18]
}
 8005032:	4618      	mov	r0, r3
 8005034:	3718      	adds	r7, #24
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	40021000 	.word	0x40021000

08005040 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e049      	b.n	80050e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d106      	bne.n	800506c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7fc f966 	bl	8001338 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3304      	adds	r3, #4
 800507c:	4619      	mov	r1, r3
 800507e:	4610      	mov	r0, r2
 8005080:	f001 f86e 	bl	8006160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
	...

080050f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b01      	cmp	r3, #1
 8005102:	d001      	beq.n	8005108 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e04c      	b.n	80051a2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a26      	ldr	r2, [pc, #152]	; (80051b0 <HAL_TIM_Base_Start+0xc0>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d022      	beq.n	8005160 <HAL_TIM_Base_Start+0x70>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005122:	d01d      	beq.n	8005160 <HAL_TIM_Base_Start+0x70>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a22      	ldr	r2, [pc, #136]	; (80051b4 <HAL_TIM_Base_Start+0xc4>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d018      	beq.n	8005160 <HAL_TIM_Base_Start+0x70>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a21      	ldr	r2, [pc, #132]	; (80051b8 <HAL_TIM_Base_Start+0xc8>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d013      	beq.n	8005160 <HAL_TIM_Base_Start+0x70>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a1f      	ldr	r2, [pc, #124]	; (80051bc <HAL_TIM_Base_Start+0xcc>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d00e      	beq.n	8005160 <HAL_TIM_Base_Start+0x70>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a1e      	ldr	r2, [pc, #120]	; (80051c0 <HAL_TIM_Base_Start+0xd0>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d009      	beq.n	8005160 <HAL_TIM_Base_Start+0x70>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a1c      	ldr	r2, [pc, #112]	; (80051c4 <HAL_TIM_Base_Start+0xd4>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d004      	beq.n	8005160 <HAL_TIM_Base_Start+0x70>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a1b      	ldr	r2, [pc, #108]	; (80051c8 <HAL_TIM_Base_Start+0xd8>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d115      	bne.n	800518c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689a      	ldr	r2, [r3, #8]
 8005166:	4b19      	ldr	r3, [pc, #100]	; (80051cc <HAL_TIM_Base_Start+0xdc>)
 8005168:	4013      	ands	r3, r2
 800516a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2b06      	cmp	r3, #6
 8005170:	d015      	beq.n	800519e <HAL_TIM_Base_Start+0xae>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005178:	d011      	beq.n	800519e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f042 0201 	orr.w	r2, r2, #1
 8005188:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800518a:	e008      	b.n	800519e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f042 0201 	orr.w	r2, r2, #1
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	e000      	b.n	80051a0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800519e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	40012c00 	.word	0x40012c00
 80051b4:	40000400 	.word	0x40000400
 80051b8:	40000800 	.word	0x40000800
 80051bc:	40000c00 	.word	0x40000c00
 80051c0:	40013400 	.word	0x40013400
 80051c4:	40014000 	.word	0x40014000
 80051c8:	40015000 	.word	0x40015000
 80051cc:	00010007 	.word	0x00010007

080051d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d001      	beq.n	80051e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e054      	b.n	8005292 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f042 0201 	orr.w	r2, r2, #1
 80051fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a26      	ldr	r2, [pc, #152]	; (80052a0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d022      	beq.n	8005250 <HAL_TIM_Base_Start_IT+0x80>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005212:	d01d      	beq.n	8005250 <HAL_TIM_Base_Start_IT+0x80>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a22      	ldr	r2, [pc, #136]	; (80052a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d018      	beq.n	8005250 <HAL_TIM_Base_Start_IT+0x80>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a21      	ldr	r2, [pc, #132]	; (80052a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d013      	beq.n	8005250 <HAL_TIM_Base_Start_IT+0x80>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a1f      	ldr	r2, [pc, #124]	; (80052ac <HAL_TIM_Base_Start_IT+0xdc>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d00e      	beq.n	8005250 <HAL_TIM_Base_Start_IT+0x80>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a1e      	ldr	r2, [pc, #120]	; (80052b0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d009      	beq.n	8005250 <HAL_TIM_Base_Start_IT+0x80>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a1c      	ldr	r2, [pc, #112]	; (80052b4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d004      	beq.n	8005250 <HAL_TIM_Base_Start_IT+0x80>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a1b      	ldr	r2, [pc, #108]	; (80052b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d115      	bne.n	800527c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	689a      	ldr	r2, [r3, #8]
 8005256:	4b19      	ldr	r3, [pc, #100]	; (80052bc <HAL_TIM_Base_Start_IT+0xec>)
 8005258:	4013      	ands	r3, r2
 800525a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2b06      	cmp	r3, #6
 8005260:	d015      	beq.n	800528e <HAL_TIM_Base_Start_IT+0xbe>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005268:	d011      	beq.n	800528e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f042 0201 	orr.w	r2, r2, #1
 8005278:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800527a:	e008      	b.n	800528e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f042 0201 	orr.w	r2, r2, #1
 800528a:	601a      	str	r2, [r3, #0]
 800528c:	e000      	b.n	8005290 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800528e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	40012c00 	.word	0x40012c00
 80052a4:	40000400 	.word	0x40000400
 80052a8:	40000800 	.word	0x40000800
 80052ac:	40000c00 	.word	0x40000c00
 80052b0:	40013400 	.word	0x40013400
 80052b4:	40014000 	.word	0x40014000
 80052b8:	40015000 	.word	0x40015000
 80052bc:	00010007 	.word	0x00010007

080052c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e049      	b.n	8005366 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d106      	bne.n	80052ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f841 	bl	800536e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3304      	adds	r3, #4
 80052fc:	4619      	mov	r1, r3
 80052fe:	4610      	mov	r0, r2
 8005300:	f000 ff2e 	bl	8006160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800536e:	b480      	push	{r7}
 8005370:	b083      	sub	sp, #12
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005376:	bf00      	nop
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
	...

08005384 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d109      	bne.n	80053a8 <HAL_TIM_PWM_Start+0x24>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2b01      	cmp	r3, #1
 800539e:	bf14      	ite	ne
 80053a0:	2301      	movne	r3, #1
 80053a2:	2300      	moveq	r3, #0
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	e03c      	b.n	8005422 <HAL_TIM_PWM_Start+0x9e>
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	d109      	bne.n	80053c2 <HAL_TIM_PWM_Start+0x3e>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	bf14      	ite	ne
 80053ba:	2301      	movne	r3, #1
 80053bc:	2300      	moveq	r3, #0
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	e02f      	b.n	8005422 <HAL_TIM_PWM_Start+0x9e>
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2b08      	cmp	r3, #8
 80053c6:	d109      	bne.n	80053dc <HAL_TIM_PWM_Start+0x58>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	bf14      	ite	ne
 80053d4:	2301      	movne	r3, #1
 80053d6:	2300      	moveq	r3, #0
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	e022      	b.n	8005422 <HAL_TIM_PWM_Start+0x9e>
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	2b0c      	cmp	r3, #12
 80053e0:	d109      	bne.n	80053f6 <HAL_TIM_PWM_Start+0x72>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	bf14      	ite	ne
 80053ee:	2301      	movne	r3, #1
 80053f0:	2300      	moveq	r3, #0
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	e015      	b.n	8005422 <HAL_TIM_PWM_Start+0x9e>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b10      	cmp	r3, #16
 80053fa:	d109      	bne.n	8005410 <HAL_TIM_PWM_Start+0x8c>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b01      	cmp	r3, #1
 8005406:	bf14      	ite	ne
 8005408:	2301      	movne	r3, #1
 800540a:	2300      	moveq	r3, #0
 800540c:	b2db      	uxtb	r3, r3
 800540e:	e008      	b.n	8005422 <HAL_TIM_PWM_Start+0x9e>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b01      	cmp	r3, #1
 800541a:	bf14      	ite	ne
 800541c:	2301      	movne	r3, #1
 800541e:	2300      	moveq	r3, #0
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e0a6      	b.n	8005578 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d104      	bne.n	800543a <HAL_TIM_PWM_Start+0xb6>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2202      	movs	r2, #2
 8005434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005438:	e023      	b.n	8005482 <HAL_TIM_PWM_Start+0xfe>
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b04      	cmp	r3, #4
 800543e:	d104      	bne.n	800544a <HAL_TIM_PWM_Start+0xc6>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005448:	e01b      	b.n	8005482 <HAL_TIM_PWM_Start+0xfe>
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	2b08      	cmp	r3, #8
 800544e:	d104      	bne.n	800545a <HAL_TIM_PWM_Start+0xd6>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2202      	movs	r2, #2
 8005454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005458:	e013      	b.n	8005482 <HAL_TIM_PWM_Start+0xfe>
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	2b0c      	cmp	r3, #12
 800545e:	d104      	bne.n	800546a <HAL_TIM_PWM_Start+0xe6>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2202      	movs	r2, #2
 8005464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005468:	e00b      	b.n	8005482 <HAL_TIM_PWM_Start+0xfe>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b10      	cmp	r3, #16
 800546e:	d104      	bne.n	800547a <HAL_TIM_PWM_Start+0xf6>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005478:	e003      	b.n	8005482 <HAL_TIM_PWM_Start+0xfe>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2202      	movs	r2, #2
 800547e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2201      	movs	r2, #1
 8005488:	6839      	ldr	r1, [r7, #0]
 800548a:	4618      	mov	r0, r3
 800548c:	f001 fcec 	bl	8006e68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a3a      	ldr	r2, [pc, #232]	; (8005580 <HAL_TIM_PWM_Start+0x1fc>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d018      	beq.n	80054cc <HAL_TIM_PWM_Start+0x148>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a39      	ldr	r2, [pc, #228]	; (8005584 <HAL_TIM_PWM_Start+0x200>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d013      	beq.n	80054cc <HAL_TIM_PWM_Start+0x148>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a37      	ldr	r2, [pc, #220]	; (8005588 <HAL_TIM_PWM_Start+0x204>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d00e      	beq.n	80054cc <HAL_TIM_PWM_Start+0x148>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a36      	ldr	r2, [pc, #216]	; (800558c <HAL_TIM_PWM_Start+0x208>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d009      	beq.n	80054cc <HAL_TIM_PWM_Start+0x148>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a34      	ldr	r2, [pc, #208]	; (8005590 <HAL_TIM_PWM_Start+0x20c>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d004      	beq.n	80054cc <HAL_TIM_PWM_Start+0x148>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a33      	ldr	r2, [pc, #204]	; (8005594 <HAL_TIM_PWM_Start+0x210>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d101      	bne.n	80054d0 <HAL_TIM_PWM_Start+0x14c>
 80054cc:	2301      	movs	r3, #1
 80054ce:	e000      	b.n	80054d2 <HAL_TIM_PWM_Start+0x14e>
 80054d0:	2300      	movs	r3, #0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d007      	beq.n	80054e6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a25      	ldr	r2, [pc, #148]	; (8005580 <HAL_TIM_PWM_Start+0x1fc>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d022      	beq.n	8005536 <HAL_TIM_PWM_Start+0x1b2>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054f8:	d01d      	beq.n	8005536 <HAL_TIM_PWM_Start+0x1b2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a26      	ldr	r2, [pc, #152]	; (8005598 <HAL_TIM_PWM_Start+0x214>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d018      	beq.n	8005536 <HAL_TIM_PWM_Start+0x1b2>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a24      	ldr	r2, [pc, #144]	; (800559c <HAL_TIM_PWM_Start+0x218>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d013      	beq.n	8005536 <HAL_TIM_PWM_Start+0x1b2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a23      	ldr	r2, [pc, #140]	; (80055a0 <HAL_TIM_PWM_Start+0x21c>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d00e      	beq.n	8005536 <HAL_TIM_PWM_Start+0x1b2>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a19      	ldr	r2, [pc, #100]	; (8005584 <HAL_TIM_PWM_Start+0x200>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d009      	beq.n	8005536 <HAL_TIM_PWM_Start+0x1b2>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a18      	ldr	r2, [pc, #96]	; (8005588 <HAL_TIM_PWM_Start+0x204>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d004      	beq.n	8005536 <HAL_TIM_PWM_Start+0x1b2>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a18      	ldr	r2, [pc, #96]	; (8005594 <HAL_TIM_PWM_Start+0x210>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d115      	bne.n	8005562 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	689a      	ldr	r2, [r3, #8]
 800553c:	4b19      	ldr	r3, [pc, #100]	; (80055a4 <HAL_TIM_PWM_Start+0x220>)
 800553e:	4013      	ands	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2b06      	cmp	r3, #6
 8005546:	d015      	beq.n	8005574 <HAL_TIM_PWM_Start+0x1f0>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800554e:	d011      	beq.n	8005574 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f042 0201 	orr.w	r2, r2, #1
 800555e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005560:	e008      	b.n	8005574 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f042 0201 	orr.w	r2, r2, #1
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	e000      	b.n	8005576 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005574:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	40012c00 	.word	0x40012c00
 8005584:	40013400 	.word	0x40013400
 8005588:	40014000 	.word	0x40014000
 800558c:	40014400 	.word	0x40014400
 8005590:	40014800 	.word	0x40014800
 8005594:	40015000 	.word	0x40015000
 8005598:	40000400 	.word	0x40000400
 800559c:	40000800 	.word	0x40000800
 80055a0:	40000c00 	.word	0x40000c00
 80055a4:	00010007 	.word	0x00010007

080055a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e049      	b.n	800564e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d106      	bne.n	80055d4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7fb fe6e 	bl	80012b0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2202      	movs	r2, #2
 80055d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	3304      	adds	r3, #4
 80055e4:	4619      	mov	r1, r3
 80055e6:	4610      	mov	r0, r2
 80055e8:	f000 fdba 	bl	8006160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
	...

08005658 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d104      	bne.n	8005672 <HAL_TIM_IC_Start+0x1a>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800566e:	b2db      	uxtb	r3, r3
 8005670:	e023      	b.n	80056ba <HAL_TIM_IC_Start+0x62>
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2b04      	cmp	r3, #4
 8005676:	d104      	bne.n	8005682 <HAL_TIM_IC_Start+0x2a>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800567e:	b2db      	uxtb	r3, r3
 8005680:	e01b      	b.n	80056ba <HAL_TIM_IC_Start+0x62>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b08      	cmp	r3, #8
 8005686:	d104      	bne.n	8005692 <HAL_TIM_IC_Start+0x3a>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800568e:	b2db      	uxtb	r3, r3
 8005690:	e013      	b.n	80056ba <HAL_TIM_IC_Start+0x62>
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	2b0c      	cmp	r3, #12
 8005696:	d104      	bne.n	80056a2 <HAL_TIM_IC_Start+0x4a>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	e00b      	b.n	80056ba <HAL_TIM_IC_Start+0x62>
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	2b10      	cmp	r3, #16
 80056a6:	d104      	bne.n	80056b2 <HAL_TIM_IC_Start+0x5a>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	e003      	b.n	80056ba <HAL_TIM_IC_Start+0x62>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d104      	bne.n	80056cc <HAL_TIM_IC_Start+0x74>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	e013      	b.n	80056f4 <HAL_TIM_IC_Start+0x9c>
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	2b04      	cmp	r3, #4
 80056d0:	d104      	bne.n	80056dc <HAL_TIM_IC_Start+0x84>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	e00b      	b.n	80056f4 <HAL_TIM_IC_Start+0x9c>
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	2b08      	cmp	r3, #8
 80056e0:	d104      	bne.n	80056ec <HAL_TIM_IC_Start+0x94>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	e003      	b.n	80056f4 <HAL_TIM_IC_Start+0x9c>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80056f6:	7bfb      	ldrb	r3, [r7, #15]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d102      	bne.n	8005702 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80056fc:	7bbb      	ldrb	r3, [r7, #14]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d001      	beq.n	8005706 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e097      	b.n	8005836 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d104      	bne.n	8005716 <HAL_TIM_IC_Start+0xbe>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005714:	e023      	b.n	800575e <HAL_TIM_IC_Start+0x106>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b04      	cmp	r3, #4
 800571a:	d104      	bne.n	8005726 <HAL_TIM_IC_Start+0xce>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2202      	movs	r2, #2
 8005720:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005724:	e01b      	b.n	800575e <HAL_TIM_IC_Start+0x106>
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	2b08      	cmp	r3, #8
 800572a:	d104      	bne.n	8005736 <HAL_TIM_IC_Start+0xde>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2202      	movs	r2, #2
 8005730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005734:	e013      	b.n	800575e <HAL_TIM_IC_Start+0x106>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b0c      	cmp	r3, #12
 800573a:	d104      	bne.n	8005746 <HAL_TIM_IC_Start+0xee>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2202      	movs	r2, #2
 8005740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005744:	e00b      	b.n	800575e <HAL_TIM_IC_Start+0x106>
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b10      	cmp	r3, #16
 800574a:	d104      	bne.n	8005756 <HAL_TIM_IC_Start+0xfe>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2202      	movs	r2, #2
 8005750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005754:	e003      	b.n	800575e <HAL_TIM_IC_Start+0x106>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2202      	movs	r2, #2
 800575a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d104      	bne.n	800576e <HAL_TIM_IC_Start+0x116>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2202      	movs	r2, #2
 8005768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800576c:	e013      	b.n	8005796 <HAL_TIM_IC_Start+0x13e>
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	2b04      	cmp	r3, #4
 8005772:	d104      	bne.n	800577e <HAL_TIM_IC_Start+0x126>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800577c:	e00b      	b.n	8005796 <HAL_TIM_IC_Start+0x13e>
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2b08      	cmp	r3, #8
 8005782:	d104      	bne.n	800578e <HAL_TIM_IC_Start+0x136>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800578c:	e003      	b.n	8005796 <HAL_TIM_IC_Start+0x13e>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2202      	movs	r2, #2
 8005792:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2201      	movs	r2, #1
 800579c:	6839      	ldr	r1, [r7, #0]
 800579e:	4618      	mov	r0, r3
 80057a0:	f001 fb62 	bl	8006e68 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a25      	ldr	r2, [pc, #148]	; (8005840 <HAL_TIM_IC_Start+0x1e8>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d022      	beq.n	80057f4 <HAL_TIM_IC_Start+0x19c>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b6:	d01d      	beq.n	80057f4 <HAL_TIM_IC_Start+0x19c>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a21      	ldr	r2, [pc, #132]	; (8005844 <HAL_TIM_IC_Start+0x1ec>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d018      	beq.n	80057f4 <HAL_TIM_IC_Start+0x19c>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a20      	ldr	r2, [pc, #128]	; (8005848 <HAL_TIM_IC_Start+0x1f0>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d013      	beq.n	80057f4 <HAL_TIM_IC_Start+0x19c>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a1e      	ldr	r2, [pc, #120]	; (800584c <HAL_TIM_IC_Start+0x1f4>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d00e      	beq.n	80057f4 <HAL_TIM_IC_Start+0x19c>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a1d      	ldr	r2, [pc, #116]	; (8005850 <HAL_TIM_IC_Start+0x1f8>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d009      	beq.n	80057f4 <HAL_TIM_IC_Start+0x19c>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a1b      	ldr	r2, [pc, #108]	; (8005854 <HAL_TIM_IC_Start+0x1fc>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d004      	beq.n	80057f4 <HAL_TIM_IC_Start+0x19c>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a1a      	ldr	r2, [pc, #104]	; (8005858 <HAL_TIM_IC_Start+0x200>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d115      	bne.n	8005820 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689a      	ldr	r2, [r3, #8]
 80057fa:	4b18      	ldr	r3, [pc, #96]	; (800585c <HAL_TIM_IC_Start+0x204>)
 80057fc:	4013      	ands	r3, r2
 80057fe:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	2b06      	cmp	r3, #6
 8005804:	d015      	beq.n	8005832 <HAL_TIM_IC_Start+0x1da>
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800580c:	d011      	beq.n	8005832 <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f042 0201 	orr.w	r2, r2, #1
 800581c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800581e:	e008      	b.n	8005832 <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 0201 	orr.w	r2, r2, #1
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	e000      	b.n	8005834 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005832:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	40012c00 	.word	0x40012c00
 8005844:	40000400 	.word	0x40000400
 8005848:	40000800 	.word	0x40000800
 800584c:	40000c00 	.word	0x40000c00
 8005850:	40013400 	.word	0x40013400
 8005854:	40014000 	.word	0x40014000
 8005858:	40015000 	.word	0x40015000
 800585c:	00010007 	.word	0x00010007

08005860 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d020      	beq.n	80058c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d01b      	beq.n	80058c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f06f 0202 	mvn.w	r2, #2
 8005894:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	f003 0303 	and.w	r3, r3, #3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 fc3a 	bl	8006124 <HAL_TIM_IC_CaptureCallback>
 80058b0:	e005      	b.n	80058be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 fc2c 	bl	8006110 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 fc3d 	bl	8006138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f003 0304 	and.w	r3, r3, #4
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d020      	beq.n	8005910 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f003 0304 	and.w	r3, r3, #4
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d01b      	beq.n	8005910 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f06f 0204 	mvn.w	r2, #4
 80058e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2202      	movs	r2, #2
 80058e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 fc14 	bl	8006124 <HAL_TIM_IC_CaptureCallback>
 80058fc:	e005      	b.n	800590a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 fc06 	bl	8006110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 fc17 	bl	8006138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	f003 0308 	and.w	r3, r3, #8
 8005916:	2b00      	cmp	r3, #0
 8005918:	d020      	beq.n	800595c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f003 0308 	and.w	r3, r3, #8
 8005920:	2b00      	cmp	r3, #0
 8005922:	d01b      	beq.n	800595c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f06f 0208 	mvn.w	r2, #8
 800592c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2204      	movs	r2, #4
 8005932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	f003 0303 	and.w	r3, r3, #3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 fbee 	bl	8006124 <HAL_TIM_IC_CaptureCallback>
 8005948:	e005      	b.n	8005956 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 fbe0 	bl	8006110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 fbf1 	bl	8006138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f003 0310 	and.w	r3, r3, #16
 8005962:	2b00      	cmp	r3, #0
 8005964:	d020      	beq.n	80059a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f003 0310 	and.w	r3, r3, #16
 800596c:	2b00      	cmp	r3, #0
 800596e:	d01b      	beq.n	80059a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f06f 0210 	mvn.w	r2, #16
 8005978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2208      	movs	r2, #8
 800597e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fbc8 	bl	8006124 <HAL_TIM_IC_CaptureCallback>
 8005994:	e005      	b.n	80059a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fbba 	bl	8006110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 fbcb 	bl	8006138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00c      	beq.n	80059cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d007      	beq.n	80059cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f06f 0201 	mvn.w	r2, #1
 80059c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7fb f9dc 	bl	8000d84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d104      	bne.n	80059e0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00c      	beq.n	80059fa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d007      	beq.n	80059fa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80059f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f001 fafd 	bl	8006ff4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00c      	beq.n	8005a1e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d007      	beq.n	8005a1e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f001 faf5 	bl	8007008 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00c      	beq.n	8005a42 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d007      	beq.n	8005a42 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 fb85 	bl	800614c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	f003 0320 	and.w	r3, r3, #32
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00c      	beq.n	8005a66 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f003 0320 	and.w	r3, r3, #32
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d007      	beq.n	8005a66 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f06f 0220 	mvn.w	r2, #32
 8005a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f001 fabd 	bl	8006fe0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00c      	beq.n	8005a8a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d007      	beq.n	8005a8a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f001 fac9 	bl	800701c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00c      	beq.n	8005aae <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d007      	beq.n	8005aae <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f001 fac1 	bl	8007030 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00c      	beq.n	8005ad2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d007      	beq.n	8005ad2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f001 fab9 	bl	8007044 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00c      	beq.n	8005af6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d007      	beq.n	8005af6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f001 fab1 	bl	8007058 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005af6:	bf00      	nop
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b086      	sub	sp, #24
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	60f8      	str	r0, [r7, #12]
 8005b06:	60b9      	str	r1, [r7, #8]
 8005b08:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d101      	bne.n	8005b1c <HAL_TIM_IC_ConfigChannel+0x1e>
 8005b18:	2302      	movs	r3, #2
 8005b1a:	e088      	b.n	8005c2e <HAL_TIM_IC_ConfigChannel+0x130>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d11b      	bne.n	8005b62 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005b3a:	f000 ffcf 	bl	8006adc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	699a      	ldr	r2, [r3, #24]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f022 020c 	bic.w	r2, r2, #12
 8005b4c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	6999      	ldr	r1, [r3, #24]
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	619a      	str	r2, [r3, #24]
 8005b60:	e060      	b.n	8005c24 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b04      	cmp	r3, #4
 8005b66:	d11c      	bne.n	8005ba2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005b78:	f001 f853 	bl	8006c22 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	699a      	ldr	r2, [r3, #24]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005b8a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6999      	ldr	r1, [r3, #24]
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	021a      	lsls	r2, r3, #8
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	619a      	str	r2, [r3, #24]
 8005ba0:	e040      	b.n	8005c24 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2b08      	cmp	r3, #8
 8005ba6:	d11b      	bne.n	8005be0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005bb8:	f001 f8a0 	bl	8006cfc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	69da      	ldr	r2, [r3, #28]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 020c 	bic.w	r2, r2, #12
 8005bca:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	69d9      	ldr	r1, [r3, #28]
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	689a      	ldr	r2, [r3, #8]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	61da      	str	r2, [r3, #28]
 8005bde:	e021      	b.n	8005c24 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b0c      	cmp	r3, #12
 8005be4:	d11c      	bne.n	8005c20 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005bf6:	f001 f8bd 	bl	8006d74 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	69da      	ldr	r2, [r3, #28]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005c08:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	69d9      	ldr	r1, [r3, #28]
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	021a      	lsls	r2, r3, #8
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	61da      	str	r2, [r3, #28]
 8005c1e:	e001      	b.n	8005c24 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3718      	adds	r7, #24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
	...

08005c38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c44:	2300      	movs	r3, #0
 8005c46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d101      	bne.n	8005c56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c52:	2302      	movs	r3, #2
 8005c54:	e0ff      	b.n	8005e56 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b14      	cmp	r3, #20
 8005c62:	f200 80f0 	bhi.w	8005e46 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005c66:	a201      	add	r2, pc, #4	; (adr r2, 8005c6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6c:	08005cc1 	.word	0x08005cc1
 8005c70:	08005e47 	.word	0x08005e47
 8005c74:	08005e47 	.word	0x08005e47
 8005c78:	08005e47 	.word	0x08005e47
 8005c7c:	08005d01 	.word	0x08005d01
 8005c80:	08005e47 	.word	0x08005e47
 8005c84:	08005e47 	.word	0x08005e47
 8005c88:	08005e47 	.word	0x08005e47
 8005c8c:	08005d43 	.word	0x08005d43
 8005c90:	08005e47 	.word	0x08005e47
 8005c94:	08005e47 	.word	0x08005e47
 8005c98:	08005e47 	.word	0x08005e47
 8005c9c:	08005d83 	.word	0x08005d83
 8005ca0:	08005e47 	.word	0x08005e47
 8005ca4:	08005e47 	.word	0x08005e47
 8005ca8:	08005e47 	.word	0x08005e47
 8005cac:	08005dc5 	.word	0x08005dc5
 8005cb0:	08005e47 	.word	0x08005e47
 8005cb4:	08005e47 	.word	0x08005e47
 8005cb8:	08005e47 	.word	0x08005e47
 8005cbc:	08005e05 	.word	0x08005e05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68b9      	ldr	r1, [r7, #8]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 fafe 	bl	80062c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	699a      	ldr	r2, [r3, #24]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f042 0208 	orr.w	r2, r2, #8
 8005cda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	699a      	ldr	r2, [r3, #24]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 0204 	bic.w	r2, r2, #4
 8005cea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6999      	ldr	r1, [r3, #24]
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	691a      	ldr	r2, [r3, #16]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	619a      	str	r2, [r3, #24]
      break;
 8005cfe:	e0a5      	b.n	8005e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68b9      	ldr	r1, [r7, #8]
 8005d06:	4618      	mov	r0, r3
 8005d08:	f000 fb78 	bl	80063fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	699a      	ldr	r2, [r3, #24]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	699a      	ldr	r2, [r3, #24]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6999      	ldr	r1, [r3, #24]
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	021a      	lsls	r2, r3, #8
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	619a      	str	r2, [r3, #24]
      break;
 8005d40:	e084      	b.n	8005e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68b9      	ldr	r1, [r7, #8]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f000 fbeb 	bl	8006524 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	69da      	ldr	r2, [r3, #28]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f042 0208 	orr.w	r2, r2, #8
 8005d5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	69da      	ldr	r2, [r3, #28]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 0204 	bic.w	r2, r2, #4
 8005d6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	69d9      	ldr	r1, [r3, #28]
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	691a      	ldr	r2, [r3, #16]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	61da      	str	r2, [r3, #28]
      break;
 8005d80:	e064      	b.n	8005e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68b9      	ldr	r1, [r7, #8]
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f000 fc5d 	bl	8006648 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	69da      	ldr	r2, [r3, #28]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	69da      	ldr	r2, [r3, #28]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	69d9      	ldr	r1, [r3, #28]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	021a      	lsls	r2, r3, #8
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	61da      	str	r2, [r3, #28]
      break;
 8005dc2:	e043      	b.n	8005e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68b9      	ldr	r1, [r7, #8]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 fcd0 	bl	8006770 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f042 0208 	orr.w	r2, r2, #8
 8005dde:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f022 0204 	bic.w	r2, r2, #4
 8005dee:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	691a      	ldr	r2, [r3, #16]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005e02:	e023      	b.n	8005e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68b9      	ldr	r1, [r7, #8]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f000 fd1a 	bl	8006844 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e1e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e2e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	021a      	lsls	r2, r3, #8
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	430a      	orrs	r2, r1
 8005e42:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005e44:	e002      	b.n	8005e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	75fb      	strb	r3, [r7, #23]
      break;
 8005e4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3718      	adds	r7, #24
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop

08005e60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d101      	bne.n	8005e7c <HAL_TIM_ConfigClockSource+0x1c>
 8005e78:	2302      	movs	r3, #2
 8005e7a:	e0f6      	b.n	800606a <HAL_TIM_ConfigClockSource+0x20a>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2202      	movs	r2, #2
 8005e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005e9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ea6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a6f      	ldr	r2, [pc, #444]	; (8006074 <HAL_TIM_ConfigClockSource+0x214>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	f000 80c1 	beq.w	800603e <HAL_TIM_ConfigClockSource+0x1de>
 8005ebc:	4a6d      	ldr	r2, [pc, #436]	; (8006074 <HAL_TIM_ConfigClockSource+0x214>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	f200 80c6 	bhi.w	8006050 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ec4:	4a6c      	ldr	r2, [pc, #432]	; (8006078 <HAL_TIM_ConfigClockSource+0x218>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	f000 80b9 	beq.w	800603e <HAL_TIM_ConfigClockSource+0x1de>
 8005ecc:	4a6a      	ldr	r2, [pc, #424]	; (8006078 <HAL_TIM_ConfigClockSource+0x218>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	f200 80be 	bhi.w	8006050 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ed4:	4a69      	ldr	r2, [pc, #420]	; (800607c <HAL_TIM_ConfigClockSource+0x21c>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	f000 80b1 	beq.w	800603e <HAL_TIM_ConfigClockSource+0x1de>
 8005edc:	4a67      	ldr	r2, [pc, #412]	; (800607c <HAL_TIM_ConfigClockSource+0x21c>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	f200 80b6 	bhi.w	8006050 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ee4:	4a66      	ldr	r2, [pc, #408]	; (8006080 <HAL_TIM_ConfigClockSource+0x220>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	f000 80a9 	beq.w	800603e <HAL_TIM_ConfigClockSource+0x1de>
 8005eec:	4a64      	ldr	r2, [pc, #400]	; (8006080 <HAL_TIM_ConfigClockSource+0x220>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	f200 80ae 	bhi.w	8006050 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ef4:	4a63      	ldr	r2, [pc, #396]	; (8006084 <HAL_TIM_ConfigClockSource+0x224>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	f000 80a1 	beq.w	800603e <HAL_TIM_ConfigClockSource+0x1de>
 8005efc:	4a61      	ldr	r2, [pc, #388]	; (8006084 <HAL_TIM_ConfigClockSource+0x224>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	f200 80a6 	bhi.w	8006050 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f04:	4a60      	ldr	r2, [pc, #384]	; (8006088 <HAL_TIM_ConfigClockSource+0x228>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	f000 8099 	beq.w	800603e <HAL_TIM_ConfigClockSource+0x1de>
 8005f0c:	4a5e      	ldr	r2, [pc, #376]	; (8006088 <HAL_TIM_ConfigClockSource+0x228>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	f200 809e 	bhi.w	8006050 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f14:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005f18:	f000 8091 	beq.w	800603e <HAL_TIM_ConfigClockSource+0x1de>
 8005f1c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005f20:	f200 8096 	bhi.w	8006050 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f28:	f000 8089 	beq.w	800603e <HAL_TIM_ConfigClockSource+0x1de>
 8005f2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f30:	f200 808e 	bhi.w	8006050 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f38:	d03e      	beq.n	8005fb8 <HAL_TIM_ConfigClockSource+0x158>
 8005f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f3e:	f200 8087 	bhi.w	8006050 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f46:	f000 8086 	beq.w	8006056 <HAL_TIM_ConfigClockSource+0x1f6>
 8005f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f4e:	d87f      	bhi.n	8006050 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f50:	2b70      	cmp	r3, #112	; 0x70
 8005f52:	d01a      	beq.n	8005f8a <HAL_TIM_ConfigClockSource+0x12a>
 8005f54:	2b70      	cmp	r3, #112	; 0x70
 8005f56:	d87b      	bhi.n	8006050 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f58:	2b60      	cmp	r3, #96	; 0x60
 8005f5a:	d050      	beq.n	8005ffe <HAL_TIM_ConfigClockSource+0x19e>
 8005f5c:	2b60      	cmp	r3, #96	; 0x60
 8005f5e:	d877      	bhi.n	8006050 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f60:	2b50      	cmp	r3, #80	; 0x50
 8005f62:	d03c      	beq.n	8005fde <HAL_TIM_ConfigClockSource+0x17e>
 8005f64:	2b50      	cmp	r3, #80	; 0x50
 8005f66:	d873      	bhi.n	8006050 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f68:	2b40      	cmp	r3, #64	; 0x40
 8005f6a:	d058      	beq.n	800601e <HAL_TIM_ConfigClockSource+0x1be>
 8005f6c:	2b40      	cmp	r3, #64	; 0x40
 8005f6e:	d86f      	bhi.n	8006050 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f70:	2b30      	cmp	r3, #48	; 0x30
 8005f72:	d064      	beq.n	800603e <HAL_TIM_ConfigClockSource+0x1de>
 8005f74:	2b30      	cmp	r3, #48	; 0x30
 8005f76:	d86b      	bhi.n	8006050 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f78:	2b20      	cmp	r3, #32
 8005f7a:	d060      	beq.n	800603e <HAL_TIM_ConfigClockSource+0x1de>
 8005f7c:	2b20      	cmp	r3, #32
 8005f7e:	d867      	bhi.n	8006050 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d05c      	beq.n	800603e <HAL_TIM_ConfigClockSource+0x1de>
 8005f84:	2b10      	cmp	r3, #16
 8005f86:	d05a      	beq.n	800603e <HAL_TIM_ConfigClockSource+0x1de>
 8005f88:	e062      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f9a:	f000 ff45 	bl	8006e28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	609a      	str	r2, [r3, #8]
      break;
 8005fb6:	e04f      	b.n	8006058 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fc8:	f000 ff2e 	bl	8006e28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689a      	ldr	r2, [r3, #8]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fda:	609a      	str	r2, [r3, #8]
      break;
 8005fdc:	e03c      	b.n	8006058 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fea:	461a      	mov	r2, r3
 8005fec:	f000 fdea 	bl	8006bc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2150      	movs	r1, #80	; 0x50
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f000 fef9 	bl	8006dee <TIM_ITRx_SetConfig>
      break;
 8005ffc:	e02c      	b.n	8006058 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800600a:	461a      	mov	r2, r3
 800600c:	f000 fe46 	bl	8006c9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2160      	movs	r1, #96	; 0x60
 8006016:	4618      	mov	r0, r3
 8006018:	f000 fee9 	bl	8006dee <TIM_ITRx_SetConfig>
      break;
 800601c:	e01c      	b.n	8006058 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800602a:	461a      	mov	r2, r3
 800602c:	f000 fdca 	bl	8006bc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2140      	movs	r1, #64	; 0x40
 8006036:	4618      	mov	r0, r3
 8006038:	f000 fed9 	bl	8006dee <TIM_ITRx_SetConfig>
      break;
 800603c:	e00c      	b.n	8006058 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4619      	mov	r1, r3
 8006048:	4610      	mov	r0, r2
 800604a:	f000 fed0 	bl	8006dee <TIM_ITRx_SetConfig>
      break;
 800604e:	e003      	b.n	8006058 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	73fb      	strb	r3, [r7, #15]
      break;
 8006054:	e000      	b.n	8006058 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006056:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006068:	7bfb      	ldrb	r3, [r7, #15]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	00100070 	.word	0x00100070
 8006078:	00100060 	.word	0x00100060
 800607c:	00100050 	.word	0x00100050
 8006080:	00100040 	.word	0x00100040
 8006084:	00100030 	.word	0x00100030
 8006088:	00100020 	.word	0x00100020

0800608c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800609c:	2b01      	cmp	r3, #1
 800609e:	d101      	bne.n	80060a4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80060a0:	2302      	movs	r3, #2
 80060a2:	e031      	b.n	8006108 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2202      	movs	r2, #2
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80060b4:	6839      	ldr	r1, [r7, #0]
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 fc30 	bl	800691c <TIM_SlaveTimer_SetConfig>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d009      	beq.n	80060d6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e018      	b.n	8006108 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68da      	ldr	r2, [r3, #12]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060e4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68da      	ldr	r2, [r3, #12]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80060f4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3708      	adds	r7, #8
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a4c      	ldr	r2, [pc, #304]	; (80062a4 <TIM_Base_SetConfig+0x144>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d017      	beq.n	80061a8 <TIM_Base_SetConfig+0x48>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800617e:	d013      	beq.n	80061a8 <TIM_Base_SetConfig+0x48>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a49      	ldr	r2, [pc, #292]	; (80062a8 <TIM_Base_SetConfig+0x148>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d00f      	beq.n	80061a8 <TIM_Base_SetConfig+0x48>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a48      	ldr	r2, [pc, #288]	; (80062ac <TIM_Base_SetConfig+0x14c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d00b      	beq.n	80061a8 <TIM_Base_SetConfig+0x48>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a47      	ldr	r2, [pc, #284]	; (80062b0 <TIM_Base_SetConfig+0x150>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d007      	beq.n	80061a8 <TIM_Base_SetConfig+0x48>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a46      	ldr	r2, [pc, #280]	; (80062b4 <TIM_Base_SetConfig+0x154>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d003      	beq.n	80061a8 <TIM_Base_SetConfig+0x48>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a45      	ldr	r2, [pc, #276]	; (80062b8 <TIM_Base_SetConfig+0x158>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d108      	bne.n	80061ba <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a39      	ldr	r2, [pc, #228]	; (80062a4 <TIM_Base_SetConfig+0x144>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d023      	beq.n	800620a <TIM_Base_SetConfig+0xaa>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061c8:	d01f      	beq.n	800620a <TIM_Base_SetConfig+0xaa>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a36      	ldr	r2, [pc, #216]	; (80062a8 <TIM_Base_SetConfig+0x148>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d01b      	beq.n	800620a <TIM_Base_SetConfig+0xaa>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a35      	ldr	r2, [pc, #212]	; (80062ac <TIM_Base_SetConfig+0x14c>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d017      	beq.n	800620a <TIM_Base_SetConfig+0xaa>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a34      	ldr	r2, [pc, #208]	; (80062b0 <TIM_Base_SetConfig+0x150>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d013      	beq.n	800620a <TIM_Base_SetConfig+0xaa>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a33      	ldr	r2, [pc, #204]	; (80062b4 <TIM_Base_SetConfig+0x154>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d00f      	beq.n	800620a <TIM_Base_SetConfig+0xaa>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a33      	ldr	r2, [pc, #204]	; (80062bc <TIM_Base_SetConfig+0x15c>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d00b      	beq.n	800620a <TIM_Base_SetConfig+0xaa>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a32      	ldr	r2, [pc, #200]	; (80062c0 <TIM_Base_SetConfig+0x160>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d007      	beq.n	800620a <TIM_Base_SetConfig+0xaa>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a31      	ldr	r2, [pc, #196]	; (80062c4 <TIM_Base_SetConfig+0x164>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d003      	beq.n	800620a <TIM_Base_SetConfig+0xaa>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a2c      	ldr	r2, [pc, #176]	; (80062b8 <TIM_Base_SetConfig+0x158>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d108      	bne.n	800621c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	4313      	orrs	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	689a      	ldr	r2, [r3, #8]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a18      	ldr	r2, [pc, #96]	; (80062a4 <TIM_Base_SetConfig+0x144>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d013      	beq.n	8006270 <TIM_Base_SetConfig+0x110>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a1a      	ldr	r2, [pc, #104]	; (80062b4 <TIM_Base_SetConfig+0x154>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d00f      	beq.n	8006270 <TIM_Base_SetConfig+0x110>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a1a      	ldr	r2, [pc, #104]	; (80062bc <TIM_Base_SetConfig+0x15c>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d00b      	beq.n	8006270 <TIM_Base_SetConfig+0x110>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a19      	ldr	r2, [pc, #100]	; (80062c0 <TIM_Base_SetConfig+0x160>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d007      	beq.n	8006270 <TIM_Base_SetConfig+0x110>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a18      	ldr	r2, [pc, #96]	; (80062c4 <TIM_Base_SetConfig+0x164>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d003      	beq.n	8006270 <TIM_Base_SetConfig+0x110>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a13      	ldr	r2, [pc, #76]	; (80062b8 <TIM_Base_SetConfig+0x158>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d103      	bne.n	8006278 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	691a      	ldr	r2, [r3, #16]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b01      	cmp	r3, #1
 8006288:	d105      	bne.n	8006296 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	f023 0201 	bic.w	r2, r3, #1
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	611a      	str	r2, [r3, #16]
  }
}
 8006296:	bf00      	nop
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	40012c00 	.word	0x40012c00
 80062a8:	40000400 	.word	0x40000400
 80062ac:	40000800 	.word	0x40000800
 80062b0:	40000c00 	.word	0x40000c00
 80062b4:	40013400 	.word	0x40013400
 80062b8:	40015000 	.word	0x40015000
 80062bc:	40014000 	.word	0x40014000
 80062c0:	40014400 	.word	0x40014400
 80062c4:	40014800 	.word	0x40014800

080062c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b087      	sub	sp, #28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	f023 0201 	bic.w	r2, r3, #1
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f023 0303 	bic.w	r3, r3, #3
 8006302:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	4313      	orrs	r3, r2
 800630c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f023 0302 	bic.w	r3, r3, #2
 8006314:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	4313      	orrs	r3, r2
 800631e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a30      	ldr	r2, [pc, #192]	; (80063e4 <TIM_OC1_SetConfig+0x11c>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d013      	beq.n	8006350 <TIM_OC1_SetConfig+0x88>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a2f      	ldr	r2, [pc, #188]	; (80063e8 <TIM_OC1_SetConfig+0x120>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d00f      	beq.n	8006350 <TIM_OC1_SetConfig+0x88>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a2e      	ldr	r2, [pc, #184]	; (80063ec <TIM_OC1_SetConfig+0x124>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d00b      	beq.n	8006350 <TIM_OC1_SetConfig+0x88>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a2d      	ldr	r2, [pc, #180]	; (80063f0 <TIM_OC1_SetConfig+0x128>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d007      	beq.n	8006350 <TIM_OC1_SetConfig+0x88>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a2c      	ldr	r2, [pc, #176]	; (80063f4 <TIM_OC1_SetConfig+0x12c>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d003      	beq.n	8006350 <TIM_OC1_SetConfig+0x88>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a2b      	ldr	r2, [pc, #172]	; (80063f8 <TIM_OC1_SetConfig+0x130>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d10c      	bne.n	800636a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	f023 0308 	bic.w	r3, r3, #8
 8006356:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	4313      	orrs	r3, r2
 8006360:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f023 0304 	bic.w	r3, r3, #4
 8006368:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a1d      	ldr	r2, [pc, #116]	; (80063e4 <TIM_OC1_SetConfig+0x11c>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d013      	beq.n	800639a <TIM_OC1_SetConfig+0xd2>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a1c      	ldr	r2, [pc, #112]	; (80063e8 <TIM_OC1_SetConfig+0x120>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d00f      	beq.n	800639a <TIM_OC1_SetConfig+0xd2>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a1b      	ldr	r2, [pc, #108]	; (80063ec <TIM_OC1_SetConfig+0x124>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d00b      	beq.n	800639a <TIM_OC1_SetConfig+0xd2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a1a      	ldr	r2, [pc, #104]	; (80063f0 <TIM_OC1_SetConfig+0x128>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d007      	beq.n	800639a <TIM_OC1_SetConfig+0xd2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a19      	ldr	r2, [pc, #100]	; (80063f4 <TIM_OC1_SetConfig+0x12c>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d003      	beq.n	800639a <TIM_OC1_SetConfig+0xd2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a18      	ldr	r2, [pc, #96]	; (80063f8 <TIM_OC1_SetConfig+0x130>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d111      	bne.n	80063be <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685a      	ldr	r2, [r3, #4]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	621a      	str	r2, [r3, #32]
}
 80063d8:	bf00      	nop
 80063da:	371c      	adds	r7, #28
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	40012c00 	.word	0x40012c00
 80063e8:	40013400 	.word	0x40013400
 80063ec:	40014000 	.word	0x40014000
 80063f0:	40014400 	.word	0x40014400
 80063f4:	40014800 	.word	0x40014800
 80063f8:	40015000 	.word	0x40015000

080063fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b087      	sub	sp, #28
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a1b      	ldr	r3, [r3, #32]
 8006410:	f023 0210 	bic.w	r2, r3, #16
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800642a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800642e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	021b      	lsls	r3, r3, #8
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	4313      	orrs	r3, r2
 8006442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f023 0320 	bic.w	r3, r3, #32
 800644a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	011b      	lsls	r3, r3, #4
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	4313      	orrs	r3, r2
 8006456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a2c      	ldr	r2, [pc, #176]	; (800650c <TIM_OC2_SetConfig+0x110>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d007      	beq.n	8006470 <TIM_OC2_SetConfig+0x74>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a2b      	ldr	r2, [pc, #172]	; (8006510 <TIM_OC2_SetConfig+0x114>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d003      	beq.n	8006470 <TIM_OC2_SetConfig+0x74>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a2a      	ldr	r2, [pc, #168]	; (8006514 <TIM_OC2_SetConfig+0x118>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d10d      	bne.n	800648c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006476:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	011b      	lsls	r3, r3, #4
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	4313      	orrs	r3, r2
 8006482:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800648a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a1f      	ldr	r2, [pc, #124]	; (800650c <TIM_OC2_SetConfig+0x110>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d013      	beq.n	80064bc <TIM_OC2_SetConfig+0xc0>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a1e      	ldr	r2, [pc, #120]	; (8006510 <TIM_OC2_SetConfig+0x114>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d00f      	beq.n	80064bc <TIM_OC2_SetConfig+0xc0>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a1e      	ldr	r2, [pc, #120]	; (8006518 <TIM_OC2_SetConfig+0x11c>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d00b      	beq.n	80064bc <TIM_OC2_SetConfig+0xc0>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a1d      	ldr	r2, [pc, #116]	; (800651c <TIM_OC2_SetConfig+0x120>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d007      	beq.n	80064bc <TIM_OC2_SetConfig+0xc0>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a1c      	ldr	r2, [pc, #112]	; (8006520 <TIM_OC2_SetConfig+0x124>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d003      	beq.n	80064bc <TIM_OC2_SetConfig+0xc0>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a17      	ldr	r2, [pc, #92]	; (8006514 <TIM_OC2_SetConfig+0x118>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d113      	bne.n	80064e4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	621a      	str	r2, [r3, #32]
}
 80064fe:	bf00      	nop
 8006500:	371c      	adds	r7, #28
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	40012c00 	.word	0x40012c00
 8006510:	40013400 	.word	0x40013400
 8006514:	40015000 	.word	0x40015000
 8006518:	40014000 	.word	0x40014000
 800651c:	40014400 	.word	0x40014400
 8006520:	40014800 	.word	0x40014800

08006524 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006524:	b480      	push	{r7}
 8006526:	b087      	sub	sp, #28
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a1b      	ldr	r3, [r3, #32]
 8006538:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f023 0303 	bic.w	r3, r3, #3
 800655e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	4313      	orrs	r3, r2
 8006568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006570:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	021b      	lsls	r3, r3, #8
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	4313      	orrs	r3, r2
 800657c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a2b      	ldr	r2, [pc, #172]	; (8006630 <TIM_OC3_SetConfig+0x10c>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d007      	beq.n	8006596 <TIM_OC3_SetConfig+0x72>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a2a      	ldr	r2, [pc, #168]	; (8006634 <TIM_OC3_SetConfig+0x110>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d003      	beq.n	8006596 <TIM_OC3_SetConfig+0x72>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a29      	ldr	r2, [pc, #164]	; (8006638 <TIM_OC3_SetConfig+0x114>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d10d      	bne.n	80065b2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800659c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	021b      	lsls	r3, r3, #8
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a1e      	ldr	r2, [pc, #120]	; (8006630 <TIM_OC3_SetConfig+0x10c>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d013      	beq.n	80065e2 <TIM_OC3_SetConfig+0xbe>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a1d      	ldr	r2, [pc, #116]	; (8006634 <TIM_OC3_SetConfig+0x110>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d00f      	beq.n	80065e2 <TIM_OC3_SetConfig+0xbe>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a1d      	ldr	r2, [pc, #116]	; (800663c <TIM_OC3_SetConfig+0x118>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d00b      	beq.n	80065e2 <TIM_OC3_SetConfig+0xbe>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a1c      	ldr	r2, [pc, #112]	; (8006640 <TIM_OC3_SetConfig+0x11c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d007      	beq.n	80065e2 <TIM_OC3_SetConfig+0xbe>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a1b      	ldr	r2, [pc, #108]	; (8006644 <TIM_OC3_SetConfig+0x120>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d003      	beq.n	80065e2 <TIM_OC3_SetConfig+0xbe>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a16      	ldr	r2, [pc, #88]	; (8006638 <TIM_OC3_SetConfig+0x114>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d113      	bne.n	800660a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	011b      	lsls	r3, r3, #4
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	011b      	lsls	r3, r3, #4
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	4313      	orrs	r3, r2
 8006608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	685a      	ldr	r2, [r3, #4]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	697a      	ldr	r2, [r7, #20]
 8006622:	621a      	str	r2, [r3, #32]
}
 8006624:	bf00      	nop
 8006626:	371c      	adds	r7, #28
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr
 8006630:	40012c00 	.word	0x40012c00
 8006634:	40013400 	.word	0x40013400
 8006638:	40015000 	.word	0x40015000
 800663c:	40014000 	.word	0x40014000
 8006640:	40014400 	.word	0x40014400
 8006644:	40014800 	.word	0x40014800

08006648 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006648:	b480      	push	{r7}
 800664a:	b087      	sub	sp, #28
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a1b      	ldr	r3, [r3, #32]
 800665c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	69db      	ldr	r3, [r3, #28]
 800666e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800667a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	021b      	lsls	r3, r3, #8
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	4313      	orrs	r3, r2
 800668e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006696:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	031b      	lsls	r3, r3, #12
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a2c      	ldr	r2, [pc, #176]	; (8006758 <TIM_OC4_SetConfig+0x110>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d007      	beq.n	80066bc <TIM_OC4_SetConfig+0x74>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a2b      	ldr	r2, [pc, #172]	; (800675c <TIM_OC4_SetConfig+0x114>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d003      	beq.n	80066bc <TIM_OC4_SetConfig+0x74>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a2a      	ldr	r2, [pc, #168]	; (8006760 <TIM_OC4_SetConfig+0x118>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d10d      	bne.n	80066d8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	031b      	lsls	r3, r3, #12
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a1f      	ldr	r2, [pc, #124]	; (8006758 <TIM_OC4_SetConfig+0x110>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d013      	beq.n	8006708 <TIM_OC4_SetConfig+0xc0>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a1e      	ldr	r2, [pc, #120]	; (800675c <TIM_OC4_SetConfig+0x114>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d00f      	beq.n	8006708 <TIM_OC4_SetConfig+0xc0>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a1e      	ldr	r2, [pc, #120]	; (8006764 <TIM_OC4_SetConfig+0x11c>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d00b      	beq.n	8006708 <TIM_OC4_SetConfig+0xc0>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a1d      	ldr	r2, [pc, #116]	; (8006768 <TIM_OC4_SetConfig+0x120>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d007      	beq.n	8006708 <TIM_OC4_SetConfig+0xc0>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a1c      	ldr	r2, [pc, #112]	; (800676c <TIM_OC4_SetConfig+0x124>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d003      	beq.n	8006708 <TIM_OC4_SetConfig+0xc0>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a17      	ldr	r2, [pc, #92]	; (8006760 <TIM_OC4_SetConfig+0x118>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d113      	bne.n	8006730 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800670e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006716:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	019b      	lsls	r3, r3, #6
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	4313      	orrs	r3, r2
 8006722:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	019b      	lsls	r3, r3, #6
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	4313      	orrs	r3, r2
 800672e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	685a      	ldr	r2, [r3, #4]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	621a      	str	r2, [r3, #32]
}
 800674a:	bf00      	nop
 800674c:	371c      	adds	r7, #28
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	40012c00 	.word	0x40012c00
 800675c:	40013400 	.word	0x40013400
 8006760:	40015000 	.word	0x40015000
 8006764:	40014000 	.word	0x40014000
 8006768:	40014400 	.word	0x40014400
 800676c:	40014800 	.word	0x40014800

08006770 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006770:	b480      	push	{r7}
 8006772:	b087      	sub	sp, #28
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a1b      	ldr	r3, [r3, #32]
 8006784:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800679e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80067b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	041b      	lsls	r3, r3, #16
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	4313      	orrs	r3, r2
 80067c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a19      	ldr	r2, [pc, #100]	; (800682c <TIM_OC5_SetConfig+0xbc>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d013      	beq.n	80067f2 <TIM_OC5_SetConfig+0x82>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a18      	ldr	r2, [pc, #96]	; (8006830 <TIM_OC5_SetConfig+0xc0>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d00f      	beq.n	80067f2 <TIM_OC5_SetConfig+0x82>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a17      	ldr	r2, [pc, #92]	; (8006834 <TIM_OC5_SetConfig+0xc4>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d00b      	beq.n	80067f2 <TIM_OC5_SetConfig+0x82>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a16      	ldr	r2, [pc, #88]	; (8006838 <TIM_OC5_SetConfig+0xc8>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d007      	beq.n	80067f2 <TIM_OC5_SetConfig+0x82>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a15      	ldr	r2, [pc, #84]	; (800683c <TIM_OC5_SetConfig+0xcc>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d003      	beq.n	80067f2 <TIM_OC5_SetConfig+0x82>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a14      	ldr	r2, [pc, #80]	; (8006840 <TIM_OC5_SetConfig+0xd0>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d109      	bne.n	8006806 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	021b      	lsls	r3, r3, #8
 8006800:	697a      	ldr	r2, [r7, #20]
 8006802:	4313      	orrs	r3, r2
 8006804:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	685a      	ldr	r2, [r3, #4]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	621a      	str	r2, [r3, #32]
}
 8006820:	bf00      	nop
 8006822:	371c      	adds	r7, #28
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	40012c00 	.word	0x40012c00
 8006830:	40013400 	.word	0x40013400
 8006834:	40014000 	.word	0x40014000
 8006838:	40014400 	.word	0x40014400
 800683c:	40014800 	.word	0x40014800
 8006840:	40015000 	.word	0x40015000

08006844 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006844:	b480      	push	{r7}
 8006846:	b087      	sub	sp, #28
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a1b      	ldr	r3, [r3, #32]
 8006858:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800686a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	021b      	lsls	r3, r3, #8
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	4313      	orrs	r3, r2
 8006882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800688a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	051b      	lsls	r3, r3, #20
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	4313      	orrs	r3, r2
 8006896:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a1a      	ldr	r2, [pc, #104]	; (8006904 <TIM_OC6_SetConfig+0xc0>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d013      	beq.n	80068c8 <TIM_OC6_SetConfig+0x84>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a19      	ldr	r2, [pc, #100]	; (8006908 <TIM_OC6_SetConfig+0xc4>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d00f      	beq.n	80068c8 <TIM_OC6_SetConfig+0x84>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a18      	ldr	r2, [pc, #96]	; (800690c <TIM_OC6_SetConfig+0xc8>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d00b      	beq.n	80068c8 <TIM_OC6_SetConfig+0x84>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a17      	ldr	r2, [pc, #92]	; (8006910 <TIM_OC6_SetConfig+0xcc>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d007      	beq.n	80068c8 <TIM_OC6_SetConfig+0x84>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a16      	ldr	r2, [pc, #88]	; (8006914 <TIM_OC6_SetConfig+0xd0>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d003      	beq.n	80068c8 <TIM_OC6_SetConfig+0x84>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a15      	ldr	r2, [pc, #84]	; (8006918 <TIM_OC6_SetConfig+0xd4>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d109      	bne.n	80068dc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	029b      	lsls	r3, r3, #10
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	4313      	orrs	r3, r2
 80068da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	621a      	str	r2, [r3, #32]
}
 80068f6:	bf00      	nop
 80068f8:	371c      	adds	r7, #28
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	40012c00 	.word	0x40012c00
 8006908:	40013400 	.word	0x40013400
 800690c:	40014000 	.word	0x40014000
 8006910:	40014400 	.word	0x40014400
 8006914:	40014800 	.word	0x40014800
 8006918:	40015000 	.word	0x40015000

0800691c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006926:	2300      	movs	r3, #0
 8006928:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800693c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	4313      	orrs	r3, r2
 8006946:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800694e:	f023 0307 	bic.w	r3, r3, #7
 8006952:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	4313      	orrs	r3, r2
 800695c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	4a56      	ldr	r2, [pc, #344]	; (8006ac4 <TIM_SlaveTimer_SetConfig+0x1a8>)
 800696c:	4293      	cmp	r3, r2
 800696e:	f000 80a2 	beq.w	8006ab6 <TIM_SlaveTimer_SetConfig+0x19a>
 8006972:	4a54      	ldr	r2, [pc, #336]	; (8006ac4 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8006974:	4293      	cmp	r3, r2
 8006976:	f200 809b 	bhi.w	8006ab0 <TIM_SlaveTimer_SetConfig+0x194>
 800697a:	4a53      	ldr	r2, [pc, #332]	; (8006ac8 <TIM_SlaveTimer_SetConfig+0x1ac>)
 800697c:	4293      	cmp	r3, r2
 800697e:	f000 809a 	beq.w	8006ab6 <TIM_SlaveTimer_SetConfig+0x19a>
 8006982:	4a51      	ldr	r2, [pc, #324]	; (8006ac8 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8006984:	4293      	cmp	r3, r2
 8006986:	f200 8093 	bhi.w	8006ab0 <TIM_SlaveTimer_SetConfig+0x194>
 800698a:	4a50      	ldr	r2, [pc, #320]	; (8006acc <TIM_SlaveTimer_SetConfig+0x1b0>)
 800698c:	4293      	cmp	r3, r2
 800698e:	f000 8092 	beq.w	8006ab6 <TIM_SlaveTimer_SetConfig+0x19a>
 8006992:	4a4e      	ldr	r2, [pc, #312]	; (8006acc <TIM_SlaveTimer_SetConfig+0x1b0>)
 8006994:	4293      	cmp	r3, r2
 8006996:	f200 808b 	bhi.w	8006ab0 <TIM_SlaveTimer_SetConfig+0x194>
 800699a:	4a4d      	ldr	r2, [pc, #308]	; (8006ad0 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800699c:	4293      	cmp	r3, r2
 800699e:	f000 808a 	beq.w	8006ab6 <TIM_SlaveTimer_SetConfig+0x19a>
 80069a2:	4a4b      	ldr	r2, [pc, #300]	; (8006ad0 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	f200 8083 	bhi.w	8006ab0 <TIM_SlaveTimer_SetConfig+0x194>
 80069aa:	4a4a      	ldr	r2, [pc, #296]	; (8006ad4 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	f000 8082 	beq.w	8006ab6 <TIM_SlaveTimer_SetConfig+0x19a>
 80069b2:	4a48      	ldr	r2, [pc, #288]	; (8006ad4 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d87b      	bhi.n	8006ab0 <TIM_SlaveTimer_SetConfig+0x194>
 80069b8:	4a47      	ldr	r2, [pc, #284]	; (8006ad8 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d07b      	beq.n	8006ab6 <TIM_SlaveTimer_SetConfig+0x19a>
 80069be:	4a46      	ldr	r2, [pc, #280]	; (8006ad8 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d875      	bhi.n	8006ab0 <TIM_SlaveTimer_SetConfig+0x194>
 80069c4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80069c8:	d075      	beq.n	8006ab6 <TIM_SlaveTimer_SetConfig+0x19a>
 80069ca:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80069ce:	d86f      	bhi.n	8006ab0 <TIM_SlaveTimer_SetConfig+0x194>
 80069d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069d4:	d06f      	beq.n	8006ab6 <TIM_SlaveTimer_SetConfig+0x19a>
 80069d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069da:	d869      	bhi.n	8006ab0 <TIM_SlaveTimer_SetConfig+0x194>
 80069dc:	2b70      	cmp	r3, #112	; 0x70
 80069de:	d01a      	beq.n	8006a16 <TIM_SlaveTimer_SetConfig+0xfa>
 80069e0:	2b70      	cmp	r3, #112	; 0x70
 80069e2:	d865      	bhi.n	8006ab0 <TIM_SlaveTimer_SetConfig+0x194>
 80069e4:	2b60      	cmp	r3, #96	; 0x60
 80069e6:	d059      	beq.n	8006a9c <TIM_SlaveTimer_SetConfig+0x180>
 80069e8:	2b60      	cmp	r3, #96	; 0x60
 80069ea:	d861      	bhi.n	8006ab0 <TIM_SlaveTimer_SetConfig+0x194>
 80069ec:	2b50      	cmp	r3, #80	; 0x50
 80069ee:	d04b      	beq.n	8006a88 <TIM_SlaveTimer_SetConfig+0x16c>
 80069f0:	2b50      	cmp	r3, #80	; 0x50
 80069f2:	d85d      	bhi.n	8006ab0 <TIM_SlaveTimer_SetConfig+0x194>
 80069f4:	2b40      	cmp	r3, #64	; 0x40
 80069f6:	d019      	beq.n	8006a2c <TIM_SlaveTimer_SetConfig+0x110>
 80069f8:	2b40      	cmp	r3, #64	; 0x40
 80069fa:	d859      	bhi.n	8006ab0 <TIM_SlaveTimer_SetConfig+0x194>
 80069fc:	2b30      	cmp	r3, #48	; 0x30
 80069fe:	d05a      	beq.n	8006ab6 <TIM_SlaveTimer_SetConfig+0x19a>
 8006a00:	2b30      	cmp	r3, #48	; 0x30
 8006a02:	d855      	bhi.n	8006ab0 <TIM_SlaveTimer_SetConfig+0x194>
 8006a04:	2b20      	cmp	r3, #32
 8006a06:	d056      	beq.n	8006ab6 <TIM_SlaveTimer_SetConfig+0x19a>
 8006a08:	2b20      	cmp	r3, #32
 8006a0a:	d851      	bhi.n	8006ab0 <TIM_SlaveTimer_SetConfig+0x194>
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d052      	beq.n	8006ab6 <TIM_SlaveTimer_SetConfig+0x19a>
 8006a10:	2b10      	cmp	r3, #16
 8006a12:	d050      	beq.n	8006ab6 <TIM_SlaveTimer_SetConfig+0x19a>
 8006a14:	e04c      	b.n	8006ab0 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8006a26:	f000 f9ff 	bl	8006e28 <TIM_ETR_SetConfig>
      break;
 8006a2a:	e045      	b.n	8006ab8 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2b05      	cmp	r3, #5
 8006a32:	d004      	beq.n	8006a3e <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8006a38:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8006a3c:	d101      	bne.n	8006a42 <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e03b      	b.n	8006aba <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	6a1b      	ldr	r3, [r3, #32]
 8006a48:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	6a1a      	ldr	r2, [r3, #32]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f022 0201 	bic.w	r2, r2, #1
 8006a58:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a68:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	011b      	lsls	r3, r3, #4
 8006a70:	68ba      	ldr	r2, [r7, #8]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	621a      	str	r2, [r3, #32]
      break;
 8006a86:	e017      	b.n	8006ab8 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a94:	461a      	mov	r2, r3
 8006a96:	f000 f895 	bl	8006bc4 <TIM_TI1_ConfigInputStage>
      break;
 8006a9a:	e00d      	b.n	8006ab8 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	f000 f8f7 	bl	8006c9c <TIM_TI2_ConfigInputStage>
      break;
 8006aae:	e003      	b.n	8006ab8 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ab4:	e000      	b.n	8006ab8 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 8006ab6:	bf00      	nop
  }

  return status;
 8006ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3718      	adds	r7, #24
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	00100070 	.word	0x00100070
 8006ac8:	00100060 	.word	0x00100060
 8006acc:	00100050 	.word	0x00100050
 8006ad0:	00100040 	.word	0x00100040
 8006ad4:	00100030 	.word	0x00100030
 8006ad8:	00100020 	.word	0x00100020

08006adc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b087      	sub	sp, #28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
 8006ae8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	f023 0201 	bic.w	r2, r3, #1
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	4a28      	ldr	r2, [pc, #160]	; (8006ba8 <TIM_TI1_SetConfig+0xcc>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d01b      	beq.n	8006b42 <TIM_TI1_SetConfig+0x66>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b10:	d017      	beq.n	8006b42 <TIM_TI1_SetConfig+0x66>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	4a25      	ldr	r2, [pc, #148]	; (8006bac <TIM_TI1_SetConfig+0xd0>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d013      	beq.n	8006b42 <TIM_TI1_SetConfig+0x66>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	4a24      	ldr	r2, [pc, #144]	; (8006bb0 <TIM_TI1_SetConfig+0xd4>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d00f      	beq.n	8006b42 <TIM_TI1_SetConfig+0x66>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	4a23      	ldr	r2, [pc, #140]	; (8006bb4 <TIM_TI1_SetConfig+0xd8>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d00b      	beq.n	8006b42 <TIM_TI1_SetConfig+0x66>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	4a22      	ldr	r2, [pc, #136]	; (8006bb8 <TIM_TI1_SetConfig+0xdc>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d007      	beq.n	8006b42 <TIM_TI1_SetConfig+0x66>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	4a21      	ldr	r2, [pc, #132]	; (8006bbc <TIM_TI1_SetConfig+0xe0>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d003      	beq.n	8006b42 <TIM_TI1_SetConfig+0x66>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	4a20      	ldr	r2, [pc, #128]	; (8006bc0 <TIM_TI1_SetConfig+0xe4>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d101      	bne.n	8006b46 <TIM_TI1_SetConfig+0x6a>
 8006b42:	2301      	movs	r3, #1
 8006b44:	e000      	b.n	8006b48 <TIM_TI1_SetConfig+0x6c>
 8006b46:	2300      	movs	r3, #0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d008      	beq.n	8006b5e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	f023 0303 	bic.w	r3, r3, #3
 8006b52:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	617b      	str	r3, [r7, #20]
 8006b5c:	e003      	b.n	8006b66 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f043 0301 	orr.w	r3, r3, #1
 8006b64:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	011b      	lsls	r3, r3, #4
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	f023 030a 	bic.w	r3, r3, #10
 8006b80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	f003 030a 	and.w	r3, r3, #10
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	621a      	str	r2, [r3, #32]
}
 8006b9a:	bf00      	nop
 8006b9c:	371c      	adds	r7, #28
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	40012c00 	.word	0x40012c00
 8006bac:	40000400 	.word	0x40000400
 8006bb0:	40000800 	.word	0x40000800
 8006bb4:	40000c00 	.word	0x40000c00
 8006bb8:	40013400 	.word	0x40013400
 8006bbc:	40014000 	.word	0x40014000
 8006bc0:	40015000 	.word	0x40015000

08006bc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b087      	sub	sp, #28
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6a1b      	ldr	r3, [r3, #32]
 8006bd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	f023 0201 	bic.w	r2, r3, #1
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	011b      	lsls	r3, r3, #4
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f023 030a 	bic.w	r3, r3, #10
 8006c00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c02:	697a      	ldr	r2, [r7, #20]
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	621a      	str	r2, [r3, #32]
}
 8006c16:	bf00      	nop
 8006c18:	371c      	adds	r7, #28
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b087      	sub	sp, #28
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	60f8      	str	r0, [r7, #12]
 8006c2a:	60b9      	str	r1, [r7, #8]
 8006c2c:	607a      	str	r2, [r7, #4]
 8006c2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6a1b      	ldr	r3, [r3, #32]
 8006c34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	f023 0210 	bic.w	r2, r3, #16
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	021b      	lsls	r3, r3, #8
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	031b      	lsls	r3, r3, #12
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c74:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	011b      	lsls	r3, r3, #4
 8006c7a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	621a      	str	r2, [r3, #32]
}
 8006c90:	bf00      	nop
 8006c92:	371c      	adds	r7, #28
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b087      	sub	sp, #28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6a1b      	ldr	r3, [r3, #32]
 8006cac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	f023 0210 	bic.w	r2, r3, #16
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	699b      	ldr	r3, [r3, #24]
 8006cbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	031b      	lsls	r3, r3, #12
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cd8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	011b      	lsls	r3, r3, #4
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	693a      	ldr	r2, [r7, #16]
 8006ce8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	621a      	str	r2, [r3, #32]
}
 8006cf0:	bf00      	nop
 8006cf2:	371c      	adds	r7, #28
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b087      	sub	sp, #28
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
 8006d08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	69db      	ldr	r3, [r3, #28]
 8006d20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	f023 0303 	bic.w	r3, r3, #3
 8006d28:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d38:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	011b      	lsls	r3, r3, #4
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006d4c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	021b      	lsls	r3, r3, #8
 8006d52:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	697a      	ldr	r2, [r7, #20]
 8006d66:	621a      	str	r2, [r3, #32]
}
 8006d68:	bf00      	nop
 8006d6a:	371c      	adds	r7, #28
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b087      	sub	sp, #28
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	607a      	str	r2, [r7, #4]
 8006d80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6a1b      	ldr	r3, [r3, #32]
 8006d86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6a1b      	ldr	r3, [r3, #32]
 8006d8c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	69db      	ldr	r3, [r3, #28]
 8006d98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006da0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	021b      	lsls	r3, r3, #8
 8006da6:	693a      	ldr	r2, [r7, #16]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006db2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	031b      	lsls	r3, r3, #12
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	693a      	ldr	r2, [r7, #16]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006dc6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	031b      	lsls	r3, r3, #12
 8006dcc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	621a      	str	r2, [r3, #32]
}
 8006de2:	bf00      	nop
 8006de4:	371c      	adds	r7, #28
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr

08006dee <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006dee:	b480      	push	{r7}
 8006df0:	b085      	sub	sp, #20
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
 8006df6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	f043 0307 	orr.w	r3, r3, #7
 8006e14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	609a      	str	r2, [r3, #8]
}
 8006e1c:	bf00      	nop
 8006e1e:	3714      	adds	r7, #20
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b087      	sub	sp, #28
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
 8006e34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	021a      	lsls	r2, r3, #8
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	609a      	str	r2, [r3, #8]
}
 8006e5c:	bf00      	nop
 8006e5e:	371c      	adds	r7, #28
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b087      	sub	sp, #28
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	f003 031f 	and.w	r3, r3, #31
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6a1a      	ldr	r2, [r3, #32]
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	43db      	mvns	r3, r3
 8006e8a:	401a      	ands	r2, r3
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6a1a      	ldr	r2, [r3, #32]
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	f003 031f 	and.w	r3, r3, #31
 8006e9a:	6879      	ldr	r1, [r7, #4]
 8006e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006ea0:	431a      	orrs	r2, r3
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	621a      	str	r2, [r3, #32]
}
 8006ea6:	bf00      	nop
 8006ea8:	371c      	adds	r7, #28
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
	...

08006eb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d101      	bne.n	8006ecc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ec8:	2302      	movs	r3, #2
 8006eca:	e074      	b.n	8006fb6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2202      	movs	r2, #2
 8006ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a34      	ldr	r2, [pc, #208]	; (8006fc4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d009      	beq.n	8006f0a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a33      	ldr	r2, [pc, #204]	; (8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d004      	beq.n	8006f0a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a31      	ldr	r2, [pc, #196]	; (8006fcc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d108      	bne.n	8006f1c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006f10:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a21      	ldr	r2, [pc, #132]	; (8006fc4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d022      	beq.n	8006f8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f4c:	d01d      	beq.n	8006f8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a1f      	ldr	r2, [pc, #124]	; (8006fd0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d018      	beq.n	8006f8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a1d      	ldr	r2, [pc, #116]	; (8006fd4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d013      	beq.n	8006f8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a1c      	ldr	r2, [pc, #112]	; (8006fd8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d00e      	beq.n	8006f8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a15      	ldr	r2, [pc, #84]	; (8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d009      	beq.n	8006f8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a18      	ldr	r2, [pc, #96]	; (8006fdc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d004      	beq.n	8006f8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a11      	ldr	r2, [pc, #68]	; (8006fcc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d10c      	bne.n	8006fa4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	68ba      	ldr	r2, [r7, #8]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68ba      	ldr	r2, [r7, #8]
 8006fa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3714      	adds	r7, #20
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	40012c00 	.word	0x40012c00
 8006fc8:	40013400 	.word	0x40013400
 8006fcc:	40015000 	.word	0x40015000
 8006fd0:	40000400 	.word	0x40000400
 8006fd4:	40000800 	.word	0x40000800
 8006fd8:	40000c00 	.word	0x40000c00
 8006fdc:	40014000 	.word	0x40014000

08006fe0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fe8:	bf00      	nop
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ffc:	bf00      	nop
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007010:	bf00      	nop
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007024:	bf00      	nop
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007038:	bf00      	nop
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800704c:	bf00      	nop
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d101      	bne.n	800707e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e042      	b.n	8007104 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007084:	2b00      	cmp	r3, #0
 8007086:	d106      	bne.n	8007096 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f7fa f8b5 	bl	8001200 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2224      	movs	r2, #36	; 0x24
 800709a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f022 0201 	bic.w	r2, r2, #1
 80070ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d002      	beq.n	80070bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 fb24 	bl	8007704 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 f825 	bl	800710c <UART_SetConfig>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d101      	bne.n	80070cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e01b      	b.n	8007104 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	689a      	ldr	r2, [r3, #8]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f042 0201 	orr.w	r2, r2, #1
 80070fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 fba3 	bl	8007848 <UART_CheckIdleState>
 8007102:	4603      	mov	r3, r0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800710c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007110:	b08c      	sub	sp, #48	; 0x30
 8007112:	af00      	add	r7, sp, #0
 8007114:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007116:	2300      	movs	r3, #0
 8007118:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	689a      	ldr	r2, [r3, #8]
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	431a      	orrs	r2, r3
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	695b      	ldr	r3, [r3, #20]
 800712a:	431a      	orrs	r2, r3
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	69db      	ldr	r3, [r3, #28]
 8007130:	4313      	orrs	r3, r2
 8007132:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	4baa      	ldr	r3, [pc, #680]	; (80073e4 <UART_SetConfig+0x2d8>)
 800713c:	4013      	ands	r3, r2
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	6812      	ldr	r2, [r2, #0]
 8007142:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007144:	430b      	orrs	r3, r1
 8007146:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	68da      	ldr	r2, [r3, #12]
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	430a      	orrs	r2, r1
 800715c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a9f      	ldr	r2, [pc, #636]	; (80073e8 <UART_SetConfig+0x2dc>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d004      	beq.n	8007178 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	6a1b      	ldr	r3, [r3, #32]
 8007172:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007174:	4313      	orrs	r3, r2
 8007176:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007182:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007186:	697a      	ldr	r2, [r7, #20]
 8007188:	6812      	ldr	r2, [r2, #0]
 800718a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800718c:	430b      	orrs	r3, r1
 800718e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007196:	f023 010f 	bic.w	r1, r3, #15
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	430a      	orrs	r2, r1
 80071a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a90      	ldr	r2, [pc, #576]	; (80073ec <UART_SetConfig+0x2e0>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d125      	bne.n	80071fc <UART_SetConfig+0xf0>
 80071b0:	4b8f      	ldr	r3, [pc, #572]	; (80073f0 <UART_SetConfig+0x2e4>)
 80071b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071b6:	f003 0303 	and.w	r3, r3, #3
 80071ba:	2b03      	cmp	r3, #3
 80071bc:	d81a      	bhi.n	80071f4 <UART_SetConfig+0xe8>
 80071be:	a201      	add	r2, pc, #4	; (adr r2, 80071c4 <UART_SetConfig+0xb8>)
 80071c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c4:	080071d5 	.word	0x080071d5
 80071c8:	080071e5 	.word	0x080071e5
 80071cc:	080071dd 	.word	0x080071dd
 80071d0:	080071ed 	.word	0x080071ed
 80071d4:	2301      	movs	r3, #1
 80071d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071da:	e116      	b.n	800740a <UART_SetConfig+0x2fe>
 80071dc:	2302      	movs	r3, #2
 80071de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071e2:	e112      	b.n	800740a <UART_SetConfig+0x2fe>
 80071e4:	2304      	movs	r3, #4
 80071e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071ea:	e10e      	b.n	800740a <UART_SetConfig+0x2fe>
 80071ec:	2308      	movs	r3, #8
 80071ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071f2:	e10a      	b.n	800740a <UART_SetConfig+0x2fe>
 80071f4:	2310      	movs	r3, #16
 80071f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071fa:	e106      	b.n	800740a <UART_SetConfig+0x2fe>
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a7c      	ldr	r2, [pc, #496]	; (80073f4 <UART_SetConfig+0x2e8>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d138      	bne.n	8007278 <UART_SetConfig+0x16c>
 8007206:	4b7a      	ldr	r3, [pc, #488]	; (80073f0 <UART_SetConfig+0x2e4>)
 8007208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800720c:	f003 030c 	and.w	r3, r3, #12
 8007210:	2b0c      	cmp	r3, #12
 8007212:	d82d      	bhi.n	8007270 <UART_SetConfig+0x164>
 8007214:	a201      	add	r2, pc, #4	; (adr r2, 800721c <UART_SetConfig+0x110>)
 8007216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800721a:	bf00      	nop
 800721c:	08007251 	.word	0x08007251
 8007220:	08007271 	.word	0x08007271
 8007224:	08007271 	.word	0x08007271
 8007228:	08007271 	.word	0x08007271
 800722c:	08007261 	.word	0x08007261
 8007230:	08007271 	.word	0x08007271
 8007234:	08007271 	.word	0x08007271
 8007238:	08007271 	.word	0x08007271
 800723c:	08007259 	.word	0x08007259
 8007240:	08007271 	.word	0x08007271
 8007244:	08007271 	.word	0x08007271
 8007248:	08007271 	.word	0x08007271
 800724c:	08007269 	.word	0x08007269
 8007250:	2300      	movs	r3, #0
 8007252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007256:	e0d8      	b.n	800740a <UART_SetConfig+0x2fe>
 8007258:	2302      	movs	r3, #2
 800725a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800725e:	e0d4      	b.n	800740a <UART_SetConfig+0x2fe>
 8007260:	2304      	movs	r3, #4
 8007262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007266:	e0d0      	b.n	800740a <UART_SetConfig+0x2fe>
 8007268:	2308      	movs	r3, #8
 800726a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800726e:	e0cc      	b.n	800740a <UART_SetConfig+0x2fe>
 8007270:	2310      	movs	r3, #16
 8007272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007276:	e0c8      	b.n	800740a <UART_SetConfig+0x2fe>
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a5e      	ldr	r2, [pc, #376]	; (80073f8 <UART_SetConfig+0x2ec>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d125      	bne.n	80072ce <UART_SetConfig+0x1c2>
 8007282:	4b5b      	ldr	r3, [pc, #364]	; (80073f0 <UART_SetConfig+0x2e4>)
 8007284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007288:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800728c:	2b30      	cmp	r3, #48	; 0x30
 800728e:	d016      	beq.n	80072be <UART_SetConfig+0x1b2>
 8007290:	2b30      	cmp	r3, #48	; 0x30
 8007292:	d818      	bhi.n	80072c6 <UART_SetConfig+0x1ba>
 8007294:	2b20      	cmp	r3, #32
 8007296:	d00a      	beq.n	80072ae <UART_SetConfig+0x1a2>
 8007298:	2b20      	cmp	r3, #32
 800729a:	d814      	bhi.n	80072c6 <UART_SetConfig+0x1ba>
 800729c:	2b00      	cmp	r3, #0
 800729e:	d002      	beq.n	80072a6 <UART_SetConfig+0x19a>
 80072a0:	2b10      	cmp	r3, #16
 80072a2:	d008      	beq.n	80072b6 <UART_SetConfig+0x1aa>
 80072a4:	e00f      	b.n	80072c6 <UART_SetConfig+0x1ba>
 80072a6:	2300      	movs	r3, #0
 80072a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ac:	e0ad      	b.n	800740a <UART_SetConfig+0x2fe>
 80072ae:	2302      	movs	r3, #2
 80072b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072b4:	e0a9      	b.n	800740a <UART_SetConfig+0x2fe>
 80072b6:	2304      	movs	r3, #4
 80072b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072bc:	e0a5      	b.n	800740a <UART_SetConfig+0x2fe>
 80072be:	2308      	movs	r3, #8
 80072c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072c4:	e0a1      	b.n	800740a <UART_SetConfig+0x2fe>
 80072c6:	2310      	movs	r3, #16
 80072c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072cc:	e09d      	b.n	800740a <UART_SetConfig+0x2fe>
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a4a      	ldr	r2, [pc, #296]	; (80073fc <UART_SetConfig+0x2f0>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d125      	bne.n	8007324 <UART_SetConfig+0x218>
 80072d8:	4b45      	ldr	r3, [pc, #276]	; (80073f0 <UART_SetConfig+0x2e4>)
 80072da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80072e2:	2bc0      	cmp	r3, #192	; 0xc0
 80072e4:	d016      	beq.n	8007314 <UART_SetConfig+0x208>
 80072e6:	2bc0      	cmp	r3, #192	; 0xc0
 80072e8:	d818      	bhi.n	800731c <UART_SetConfig+0x210>
 80072ea:	2b80      	cmp	r3, #128	; 0x80
 80072ec:	d00a      	beq.n	8007304 <UART_SetConfig+0x1f8>
 80072ee:	2b80      	cmp	r3, #128	; 0x80
 80072f0:	d814      	bhi.n	800731c <UART_SetConfig+0x210>
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d002      	beq.n	80072fc <UART_SetConfig+0x1f0>
 80072f6:	2b40      	cmp	r3, #64	; 0x40
 80072f8:	d008      	beq.n	800730c <UART_SetConfig+0x200>
 80072fa:	e00f      	b.n	800731c <UART_SetConfig+0x210>
 80072fc:	2300      	movs	r3, #0
 80072fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007302:	e082      	b.n	800740a <UART_SetConfig+0x2fe>
 8007304:	2302      	movs	r3, #2
 8007306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800730a:	e07e      	b.n	800740a <UART_SetConfig+0x2fe>
 800730c:	2304      	movs	r3, #4
 800730e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007312:	e07a      	b.n	800740a <UART_SetConfig+0x2fe>
 8007314:	2308      	movs	r3, #8
 8007316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800731a:	e076      	b.n	800740a <UART_SetConfig+0x2fe>
 800731c:	2310      	movs	r3, #16
 800731e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007322:	e072      	b.n	800740a <UART_SetConfig+0x2fe>
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a35      	ldr	r2, [pc, #212]	; (8007400 <UART_SetConfig+0x2f4>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d12a      	bne.n	8007384 <UART_SetConfig+0x278>
 800732e:	4b30      	ldr	r3, [pc, #192]	; (80073f0 <UART_SetConfig+0x2e4>)
 8007330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007334:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007338:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800733c:	d01a      	beq.n	8007374 <UART_SetConfig+0x268>
 800733e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007342:	d81b      	bhi.n	800737c <UART_SetConfig+0x270>
 8007344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007348:	d00c      	beq.n	8007364 <UART_SetConfig+0x258>
 800734a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800734e:	d815      	bhi.n	800737c <UART_SetConfig+0x270>
 8007350:	2b00      	cmp	r3, #0
 8007352:	d003      	beq.n	800735c <UART_SetConfig+0x250>
 8007354:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007358:	d008      	beq.n	800736c <UART_SetConfig+0x260>
 800735a:	e00f      	b.n	800737c <UART_SetConfig+0x270>
 800735c:	2300      	movs	r3, #0
 800735e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007362:	e052      	b.n	800740a <UART_SetConfig+0x2fe>
 8007364:	2302      	movs	r3, #2
 8007366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800736a:	e04e      	b.n	800740a <UART_SetConfig+0x2fe>
 800736c:	2304      	movs	r3, #4
 800736e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007372:	e04a      	b.n	800740a <UART_SetConfig+0x2fe>
 8007374:	2308      	movs	r3, #8
 8007376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800737a:	e046      	b.n	800740a <UART_SetConfig+0x2fe>
 800737c:	2310      	movs	r3, #16
 800737e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007382:	e042      	b.n	800740a <UART_SetConfig+0x2fe>
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a17      	ldr	r2, [pc, #92]	; (80073e8 <UART_SetConfig+0x2dc>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d13a      	bne.n	8007404 <UART_SetConfig+0x2f8>
 800738e:	4b18      	ldr	r3, [pc, #96]	; (80073f0 <UART_SetConfig+0x2e4>)
 8007390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007394:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007398:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800739c:	d01a      	beq.n	80073d4 <UART_SetConfig+0x2c8>
 800739e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073a2:	d81b      	bhi.n	80073dc <UART_SetConfig+0x2d0>
 80073a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073a8:	d00c      	beq.n	80073c4 <UART_SetConfig+0x2b8>
 80073aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073ae:	d815      	bhi.n	80073dc <UART_SetConfig+0x2d0>
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d003      	beq.n	80073bc <UART_SetConfig+0x2b0>
 80073b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073b8:	d008      	beq.n	80073cc <UART_SetConfig+0x2c0>
 80073ba:	e00f      	b.n	80073dc <UART_SetConfig+0x2d0>
 80073bc:	2300      	movs	r3, #0
 80073be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073c2:	e022      	b.n	800740a <UART_SetConfig+0x2fe>
 80073c4:	2302      	movs	r3, #2
 80073c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073ca:	e01e      	b.n	800740a <UART_SetConfig+0x2fe>
 80073cc:	2304      	movs	r3, #4
 80073ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073d2:	e01a      	b.n	800740a <UART_SetConfig+0x2fe>
 80073d4:	2308      	movs	r3, #8
 80073d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073da:	e016      	b.n	800740a <UART_SetConfig+0x2fe>
 80073dc:	2310      	movs	r3, #16
 80073de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073e2:	e012      	b.n	800740a <UART_SetConfig+0x2fe>
 80073e4:	cfff69f3 	.word	0xcfff69f3
 80073e8:	40008000 	.word	0x40008000
 80073ec:	40013800 	.word	0x40013800
 80073f0:	40021000 	.word	0x40021000
 80073f4:	40004400 	.word	0x40004400
 80073f8:	40004800 	.word	0x40004800
 80073fc:	40004c00 	.word	0x40004c00
 8007400:	40005000 	.word	0x40005000
 8007404:	2310      	movs	r3, #16
 8007406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4aae      	ldr	r2, [pc, #696]	; (80076c8 <UART_SetConfig+0x5bc>)
 8007410:	4293      	cmp	r3, r2
 8007412:	f040 8097 	bne.w	8007544 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007416:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800741a:	2b08      	cmp	r3, #8
 800741c:	d823      	bhi.n	8007466 <UART_SetConfig+0x35a>
 800741e:	a201      	add	r2, pc, #4	; (adr r2, 8007424 <UART_SetConfig+0x318>)
 8007420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007424:	08007449 	.word	0x08007449
 8007428:	08007467 	.word	0x08007467
 800742c:	08007451 	.word	0x08007451
 8007430:	08007467 	.word	0x08007467
 8007434:	08007457 	.word	0x08007457
 8007438:	08007467 	.word	0x08007467
 800743c:	08007467 	.word	0x08007467
 8007440:	08007467 	.word	0x08007467
 8007444:	0800745f 	.word	0x0800745f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007448:	f7fd fb3a 	bl	8004ac0 <HAL_RCC_GetPCLK1Freq>
 800744c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800744e:	e010      	b.n	8007472 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007450:	4b9e      	ldr	r3, [pc, #632]	; (80076cc <UART_SetConfig+0x5c0>)
 8007452:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007454:	e00d      	b.n	8007472 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007456:	f7fd fac5 	bl	80049e4 <HAL_RCC_GetSysClockFreq>
 800745a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800745c:	e009      	b.n	8007472 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800745e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007462:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007464:	e005      	b.n	8007472 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007466:	2300      	movs	r3, #0
 8007468:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007470:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007474:	2b00      	cmp	r3, #0
 8007476:	f000 8130 	beq.w	80076da <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747e:	4a94      	ldr	r2, [pc, #592]	; (80076d0 <UART_SetConfig+0x5c4>)
 8007480:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007484:	461a      	mov	r2, r3
 8007486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007488:	fbb3 f3f2 	udiv	r3, r3, r2
 800748c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	685a      	ldr	r2, [r3, #4]
 8007492:	4613      	mov	r3, r2
 8007494:	005b      	lsls	r3, r3, #1
 8007496:	4413      	add	r3, r2
 8007498:	69ba      	ldr	r2, [r7, #24]
 800749a:	429a      	cmp	r2, r3
 800749c:	d305      	bcc.n	80074aa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074a4:	69ba      	ldr	r2, [r7, #24]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d903      	bls.n	80074b2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80074b0:	e113      	b.n	80076da <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	2200      	movs	r2, #0
 80074b6:	60bb      	str	r3, [r7, #8]
 80074b8:	60fa      	str	r2, [r7, #12]
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074be:	4a84      	ldr	r2, [pc, #528]	; (80076d0 <UART_SetConfig+0x5c4>)
 80074c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	2200      	movs	r2, #0
 80074c8:	603b      	str	r3, [r7, #0]
 80074ca:	607a      	str	r2, [r7, #4]
 80074cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80074d4:	f7f8 fea0 	bl	8000218 <__aeabi_uldivmod>
 80074d8:	4602      	mov	r2, r0
 80074da:	460b      	mov	r3, r1
 80074dc:	4610      	mov	r0, r2
 80074de:	4619      	mov	r1, r3
 80074e0:	f04f 0200 	mov.w	r2, #0
 80074e4:	f04f 0300 	mov.w	r3, #0
 80074e8:	020b      	lsls	r3, r1, #8
 80074ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80074ee:	0202      	lsls	r2, r0, #8
 80074f0:	6979      	ldr	r1, [r7, #20]
 80074f2:	6849      	ldr	r1, [r1, #4]
 80074f4:	0849      	lsrs	r1, r1, #1
 80074f6:	2000      	movs	r0, #0
 80074f8:	460c      	mov	r4, r1
 80074fa:	4605      	mov	r5, r0
 80074fc:	eb12 0804 	adds.w	r8, r2, r4
 8007500:	eb43 0905 	adc.w	r9, r3, r5
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	469a      	mov	sl, r3
 800750c:	4693      	mov	fp, r2
 800750e:	4652      	mov	r2, sl
 8007510:	465b      	mov	r3, fp
 8007512:	4640      	mov	r0, r8
 8007514:	4649      	mov	r1, r9
 8007516:	f7f8 fe7f 	bl	8000218 <__aeabi_uldivmod>
 800751a:	4602      	mov	r2, r0
 800751c:	460b      	mov	r3, r1
 800751e:	4613      	mov	r3, r2
 8007520:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007522:	6a3b      	ldr	r3, [r7, #32]
 8007524:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007528:	d308      	bcc.n	800753c <UART_SetConfig+0x430>
 800752a:	6a3b      	ldr	r3, [r7, #32]
 800752c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007530:	d204      	bcs.n	800753c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6a3a      	ldr	r2, [r7, #32]
 8007538:	60da      	str	r2, [r3, #12]
 800753a:	e0ce      	b.n	80076da <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007542:	e0ca      	b.n	80076da <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	69db      	ldr	r3, [r3, #28]
 8007548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800754c:	d166      	bne.n	800761c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800754e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007552:	2b08      	cmp	r3, #8
 8007554:	d827      	bhi.n	80075a6 <UART_SetConfig+0x49a>
 8007556:	a201      	add	r2, pc, #4	; (adr r2, 800755c <UART_SetConfig+0x450>)
 8007558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755c:	08007581 	.word	0x08007581
 8007560:	08007589 	.word	0x08007589
 8007564:	08007591 	.word	0x08007591
 8007568:	080075a7 	.word	0x080075a7
 800756c:	08007597 	.word	0x08007597
 8007570:	080075a7 	.word	0x080075a7
 8007574:	080075a7 	.word	0x080075a7
 8007578:	080075a7 	.word	0x080075a7
 800757c:	0800759f 	.word	0x0800759f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007580:	f7fd fa9e 	bl	8004ac0 <HAL_RCC_GetPCLK1Freq>
 8007584:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007586:	e014      	b.n	80075b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007588:	f7fd fab0 	bl	8004aec <HAL_RCC_GetPCLK2Freq>
 800758c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800758e:	e010      	b.n	80075b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007590:	4b4e      	ldr	r3, [pc, #312]	; (80076cc <UART_SetConfig+0x5c0>)
 8007592:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007594:	e00d      	b.n	80075b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007596:	f7fd fa25 	bl	80049e4 <HAL_RCC_GetSysClockFreq>
 800759a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800759c:	e009      	b.n	80075b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800759e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80075a4:	e005      	b.n	80075b2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80075a6:	2300      	movs	r3, #0
 80075a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80075b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 8090 	beq.w	80076da <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075be:	4a44      	ldr	r2, [pc, #272]	; (80076d0 <UART_SetConfig+0x5c4>)
 80075c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075c4:	461a      	mov	r2, r3
 80075c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80075cc:	005a      	lsls	r2, r3, #1
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	085b      	lsrs	r3, r3, #1
 80075d4:	441a      	add	r2, r3
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	fbb2 f3f3 	udiv	r3, r2, r3
 80075de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075e0:	6a3b      	ldr	r3, [r7, #32]
 80075e2:	2b0f      	cmp	r3, #15
 80075e4:	d916      	bls.n	8007614 <UART_SetConfig+0x508>
 80075e6:	6a3b      	ldr	r3, [r7, #32]
 80075e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075ec:	d212      	bcs.n	8007614 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075ee:	6a3b      	ldr	r3, [r7, #32]
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	f023 030f 	bic.w	r3, r3, #15
 80075f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075f8:	6a3b      	ldr	r3, [r7, #32]
 80075fa:	085b      	lsrs	r3, r3, #1
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	f003 0307 	and.w	r3, r3, #7
 8007602:	b29a      	uxth	r2, r3
 8007604:	8bfb      	ldrh	r3, [r7, #30]
 8007606:	4313      	orrs	r3, r2
 8007608:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	8bfa      	ldrh	r2, [r7, #30]
 8007610:	60da      	str	r2, [r3, #12]
 8007612:	e062      	b.n	80076da <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800761a:	e05e      	b.n	80076da <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800761c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007620:	2b08      	cmp	r3, #8
 8007622:	d828      	bhi.n	8007676 <UART_SetConfig+0x56a>
 8007624:	a201      	add	r2, pc, #4	; (adr r2, 800762c <UART_SetConfig+0x520>)
 8007626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800762a:	bf00      	nop
 800762c:	08007651 	.word	0x08007651
 8007630:	08007659 	.word	0x08007659
 8007634:	08007661 	.word	0x08007661
 8007638:	08007677 	.word	0x08007677
 800763c:	08007667 	.word	0x08007667
 8007640:	08007677 	.word	0x08007677
 8007644:	08007677 	.word	0x08007677
 8007648:	08007677 	.word	0x08007677
 800764c:	0800766f 	.word	0x0800766f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007650:	f7fd fa36 	bl	8004ac0 <HAL_RCC_GetPCLK1Freq>
 8007654:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007656:	e014      	b.n	8007682 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007658:	f7fd fa48 	bl	8004aec <HAL_RCC_GetPCLK2Freq>
 800765c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800765e:	e010      	b.n	8007682 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007660:	4b1a      	ldr	r3, [pc, #104]	; (80076cc <UART_SetConfig+0x5c0>)
 8007662:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007664:	e00d      	b.n	8007682 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007666:	f7fd f9bd 	bl	80049e4 <HAL_RCC_GetSysClockFreq>
 800766a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800766c:	e009      	b.n	8007682 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800766e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007672:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007674:	e005      	b.n	8007682 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007676:	2300      	movs	r3, #0
 8007678:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007680:	bf00      	nop
    }

    if (pclk != 0U)
 8007682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007684:	2b00      	cmp	r3, #0
 8007686:	d028      	beq.n	80076da <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768c:	4a10      	ldr	r2, [pc, #64]	; (80076d0 <UART_SetConfig+0x5c4>)
 800768e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007692:	461a      	mov	r2, r3
 8007694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007696:	fbb3 f2f2 	udiv	r2, r3, r2
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	085b      	lsrs	r3, r3, #1
 80076a0:	441a      	add	r2, r3
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076ac:	6a3b      	ldr	r3, [r7, #32]
 80076ae:	2b0f      	cmp	r3, #15
 80076b0:	d910      	bls.n	80076d4 <UART_SetConfig+0x5c8>
 80076b2:	6a3b      	ldr	r3, [r7, #32]
 80076b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076b8:	d20c      	bcs.n	80076d4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076ba:	6a3b      	ldr	r3, [r7, #32]
 80076bc:	b29a      	uxth	r2, r3
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	60da      	str	r2, [r3, #12]
 80076c4:	e009      	b.n	80076da <UART_SetConfig+0x5ce>
 80076c6:	bf00      	nop
 80076c8:	40008000 	.word	0x40008000
 80076cc:	00f42400 	.word	0x00f42400
 80076d0:	08007dd0 	.word	0x08007dd0
      }
      else
      {
        ret = HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	2201      	movs	r2, #1
 80076de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	2200      	movs	r2, #0
 80076ee:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	2200      	movs	r2, #0
 80076f4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80076f6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3730      	adds	r7, #48	; 0x30
 80076fe:	46bd      	mov	sp, r7
 8007700:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007704 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007710:	f003 0308 	and.w	r3, r3, #8
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00a      	beq.n	800772e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	430a      	orrs	r2, r1
 800772c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007732:	f003 0301 	and.w	r3, r3, #1
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00a      	beq.n	8007750 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	430a      	orrs	r2, r1
 800774e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007754:	f003 0302 	and.w	r3, r3, #2
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00a      	beq.n	8007772 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	430a      	orrs	r2, r1
 8007770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007776:	f003 0304 	and.w	r3, r3, #4
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00a      	beq.n	8007794 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	430a      	orrs	r2, r1
 8007792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007798:	f003 0310 	and.w	r3, r3, #16
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00a      	beq.n	80077b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	430a      	orrs	r2, r1
 80077b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ba:	f003 0320 	and.w	r3, r3, #32
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00a      	beq.n	80077d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	430a      	orrs	r2, r1
 80077d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d01a      	beq.n	800781a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	430a      	orrs	r2, r1
 80077f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007802:	d10a      	bne.n	800781a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	430a      	orrs	r2, r1
 8007818:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00a      	beq.n	800783c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	430a      	orrs	r2, r1
 800783a:	605a      	str	r2, [r3, #4]
  }
}
 800783c:	bf00      	nop
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b098      	sub	sp, #96	; 0x60
 800784c:	af02      	add	r7, sp, #8
 800784e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007858:	f7f9 ff4c 	bl	80016f4 <HAL_GetTick>
 800785c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0308 	and.w	r3, r3, #8
 8007868:	2b08      	cmp	r3, #8
 800786a:	d12f      	bne.n	80078cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800786c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007874:	2200      	movs	r2, #0
 8007876:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f88e 	bl	800799c <UART_WaitOnFlagUntilTimeout>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d022      	beq.n	80078cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788e:	e853 3f00 	ldrex	r3, [r3]
 8007892:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007896:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800789a:	653b      	str	r3, [r7, #80]	; 0x50
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	461a      	mov	r2, r3
 80078a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078a4:	647b      	str	r3, [r7, #68]	; 0x44
 80078a6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078ac:	e841 2300 	strex	r3, r2, [r1]
 80078b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1e6      	bne.n	8007886 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2220      	movs	r2, #32
 80078bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078c8:	2303      	movs	r3, #3
 80078ca:	e063      	b.n	8007994 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 0304 	and.w	r3, r3, #4
 80078d6:	2b04      	cmp	r3, #4
 80078d8:	d149      	bne.n	800796e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078de:	9300      	str	r3, [sp, #0]
 80078e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078e2:	2200      	movs	r2, #0
 80078e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f857 	bl	800799c <UART_WaitOnFlagUntilTimeout>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d03c      	beq.n	800796e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fc:	e853 3f00 	ldrex	r3, [r3]
 8007900:	623b      	str	r3, [r7, #32]
   return(result);
 8007902:	6a3b      	ldr	r3, [r7, #32]
 8007904:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007908:	64fb      	str	r3, [r7, #76]	; 0x4c
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	461a      	mov	r2, r3
 8007910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007912:	633b      	str	r3, [r7, #48]	; 0x30
 8007914:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007916:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800791a:	e841 2300 	strex	r3, r2, [r1]
 800791e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1e6      	bne.n	80078f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	3308      	adds	r3, #8
 800792c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	e853 3f00 	ldrex	r3, [r3]
 8007934:	60fb      	str	r3, [r7, #12]
   return(result);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f023 0301 	bic.w	r3, r3, #1
 800793c:	64bb      	str	r3, [r7, #72]	; 0x48
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	3308      	adds	r3, #8
 8007944:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007946:	61fa      	str	r2, [r7, #28]
 8007948:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794a:	69b9      	ldr	r1, [r7, #24]
 800794c:	69fa      	ldr	r2, [r7, #28]
 800794e:	e841 2300 	strex	r3, r2, [r1]
 8007952:	617b      	str	r3, [r7, #20]
   return(result);
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1e5      	bne.n	8007926 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2220      	movs	r2, #32
 800795e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e012      	b.n	8007994 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2220      	movs	r2, #32
 8007972:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2220      	movs	r2, #32
 800797a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3758      	adds	r7, #88	; 0x58
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	603b      	str	r3, [r7, #0]
 80079a8:	4613      	mov	r3, r2
 80079aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079ac:	e04f      	b.n	8007a4e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b4:	d04b      	beq.n	8007a4e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079b6:	f7f9 fe9d 	bl	80016f4 <HAL_GetTick>
 80079ba:	4602      	mov	r2, r0
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	1ad3      	subs	r3, r2, r3
 80079c0:	69ba      	ldr	r2, [r7, #24]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d302      	bcc.n	80079cc <UART_WaitOnFlagUntilTimeout+0x30>
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d101      	bne.n	80079d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80079cc:	2303      	movs	r3, #3
 80079ce:	e04e      	b.n	8007a6e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 0304 	and.w	r3, r3, #4
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d037      	beq.n	8007a4e <UART_WaitOnFlagUntilTimeout+0xb2>
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	2b80      	cmp	r3, #128	; 0x80
 80079e2:	d034      	beq.n	8007a4e <UART_WaitOnFlagUntilTimeout+0xb2>
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	2b40      	cmp	r3, #64	; 0x40
 80079e8:	d031      	beq.n	8007a4e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	69db      	ldr	r3, [r3, #28]
 80079f0:	f003 0308 	and.w	r3, r3, #8
 80079f4:	2b08      	cmp	r3, #8
 80079f6:	d110      	bne.n	8007a1a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2208      	movs	r2, #8
 80079fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	f000 f838 	bl	8007a76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2208      	movs	r2, #8
 8007a0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e029      	b.n	8007a6e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	69db      	ldr	r3, [r3, #28]
 8007a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a28:	d111      	bne.n	8007a4e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f000 f81e 	bl	8007a76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2220      	movs	r2, #32
 8007a3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e00f      	b.n	8007a6e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	69da      	ldr	r2, [r3, #28]
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	4013      	ands	r3, r2
 8007a58:	68ba      	ldr	r2, [r7, #8]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	bf0c      	ite	eq
 8007a5e:	2301      	moveq	r3, #1
 8007a60:	2300      	movne	r3, #0
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	461a      	mov	r2, r3
 8007a66:	79fb      	ldrb	r3, [r7, #7]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d0a0      	beq.n	80079ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a76:	b480      	push	{r7}
 8007a78:	b095      	sub	sp, #84	; 0x54
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a86:	e853 3f00 	ldrex	r3, [r3]
 8007a8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	461a      	mov	r2, r3
 8007a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a9c:	643b      	str	r3, [r7, #64]	; 0x40
 8007a9e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007aa2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007aa4:	e841 2300 	strex	r3, r2, [r1]
 8007aa8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d1e6      	bne.n	8007a7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	3308      	adds	r3, #8
 8007ab6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab8:	6a3b      	ldr	r3, [r7, #32]
 8007aba:	e853 3f00 	ldrex	r3, [r3]
 8007abe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ac6:	f023 0301 	bic.w	r3, r3, #1
 8007aca:	64bb      	str	r3, [r7, #72]	; 0x48
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	3308      	adds	r3, #8
 8007ad2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ad4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ad6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ada:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007adc:	e841 2300 	strex	r3, r2, [r1]
 8007ae0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d1e3      	bne.n	8007ab0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d118      	bne.n	8007b22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	e853 3f00 	ldrex	r3, [r3]
 8007afc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	f023 0310 	bic.w	r3, r3, #16
 8007b04:	647b      	str	r3, [r7, #68]	; 0x44
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b0e:	61bb      	str	r3, [r7, #24]
 8007b10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b12:	6979      	ldr	r1, [r7, #20]
 8007b14:	69ba      	ldr	r2, [r7, #24]
 8007b16:	e841 2300 	strex	r3, r2, [r1]
 8007b1a:	613b      	str	r3, [r7, #16]
   return(result);
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d1e6      	bne.n	8007af0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2220      	movs	r2, #32
 8007b26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007b36:	bf00      	nop
 8007b38:	3754      	adds	r7, #84	; 0x54
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007b42:	b480      	push	{r7}
 8007b44:	b085      	sub	sp, #20
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d101      	bne.n	8007b58 <HAL_UARTEx_DisableFifoMode+0x16>
 8007b54:	2302      	movs	r3, #2
 8007b56:	e027      	b.n	8007ba8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2224      	movs	r2, #36	; 0x24
 8007b64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f022 0201 	bic.w	r2, r2, #1
 8007b7e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007b86:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2220      	movs	r2, #32
 8007b9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3714      	adds	r7, #20
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d101      	bne.n	8007bcc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007bc8:	2302      	movs	r3, #2
 8007bca:	e02d      	b.n	8007c28 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2224      	movs	r2, #36	; 0x24
 8007bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f022 0201 	bic.w	r2, r2, #1
 8007bf2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	430a      	orrs	r2, r1
 8007c06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f84f 	bl	8007cac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2220      	movs	r2, #32
 8007c1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d101      	bne.n	8007c48 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007c44:	2302      	movs	r3, #2
 8007c46:	e02d      	b.n	8007ca4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2224      	movs	r2, #36	; 0x24
 8007c54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f022 0201 	bic.w	r2, r2, #1
 8007c6e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	683a      	ldr	r2, [r7, #0]
 8007c80:	430a      	orrs	r2, r1
 8007c82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 f811 	bl	8007cac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2220      	movs	r2, #32
 8007c96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3710      	adds	r7, #16
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d108      	bne.n	8007cce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ccc:	e031      	b.n	8007d32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007cce:	2308      	movs	r3, #8
 8007cd0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007cd2:	2308      	movs	r3, #8
 8007cd4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	0e5b      	lsrs	r3, r3, #25
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	f003 0307 	and.w	r3, r3, #7
 8007ce4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	0f5b      	lsrs	r3, r3, #29
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	f003 0307 	and.w	r3, r3, #7
 8007cf4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007cf6:	7bbb      	ldrb	r3, [r7, #14]
 8007cf8:	7b3a      	ldrb	r2, [r7, #12]
 8007cfa:	4911      	ldr	r1, [pc, #68]	; (8007d40 <UARTEx_SetNbDataToProcess+0x94>)
 8007cfc:	5c8a      	ldrb	r2, [r1, r2]
 8007cfe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007d02:	7b3a      	ldrb	r2, [r7, #12]
 8007d04:	490f      	ldr	r1, [pc, #60]	; (8007d44 <UARTEx_SetNbDataToProcess+0x98>)
 8007d06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d08:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d14:	7bfb      	ldrb	r3, [r7, #15]
 8007d16:	7b7a      	ldrb	r2, [r7, #13]
 8007d18:	4909      	ldr	r1, [pc, #36]	; (8007d40 <UARTEx_SetNbDataToProcess+0x94>)
 8007d1a:	5c8a      	ldrb	r2, [r1, r2]
 8007d1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007d20:	7b7a      	ldrb	r2, [r7, #13]
 8007d22:	4908      	ldr	r1, [pc, #32]	; (8007d44 <UARTEx_SetNbDataToProcess+0x98>)
 8007d24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d26:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007d32:	bf00      	nop
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	08007de8 	.word	0x08007de8
 8007d44:	08007df0 	.word	0x08007df0

08007d48 <memset>:
 8007d48:	4402      	add	r2, r0
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d100      	bne.n	8007d52 <memset+0xa>
 8007d50:	4770      	bx	lr
 8007d52:	f803 1b01 	strb.w	r1, [r3], #1
 8007d56:	e7f9      	b.n	8007d4c <memset+0x4>

08007d58 <__libc_init_array>:
 8007d58:	b570      	push	{r4, r5, r6, lr}
 8007d5a:	4d0d      	ldr	r5, [pc, #52]	; (8007d90 <__libc_init_array+0x38>)
 8007d5c:	4c0d      	ldr	r4, [pc, #52]	; (8007d94 <__libc_init_array+0x3c>)
 8007d5e:	1b64      	subs	r4, r4, r5
 8007d60:	10a4      	asrs	r4, r4, #2
 8007d62:	2600      	movs	r6, #0
 8007d64:	42a6      	cmp	r6, r4
 8007d66:	d109      	bne.n	8007d7c <__libc_init_array+0x24>
 8007d68:	4d0b      	ldr	r5, [pc, #44]	; (8007d98 <__libc_init_array+0x40>)
 8007d6a:	4c0c      	ldr	r4, [pc, #48]	; (8007d9c <__libc_init_array+0x44>)
 8007d6c:	f000 f818 	bl	8007da0 <_init>
 8007d70:	1b64      	subs	r4, r4, r5
 8007d72:	10a4      	asrs	r4, r4, #2
 8007d74:	2600      	movs	r6, #0
 8007d76:	42a6      	cmp	r6, r4
 8007d78:	d105      	bne.n	8007d86 <__libc_init_array+0x2e>
 8007d7a:	bd70      	pop	{r4, r5, r6, pc}
 8007d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d80:	4798      	blx	r3
 8007d82:	3601      	adds	r6, #1
 8007d84:	e7ee      	b.n	8007d64 <__libc_init_array+0xc>
 8007d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d8a:	4798      	blx	r3
 8007d8c:	3601      	adds	r6, #1
 8007d8e:	e7f2      	b.n	8007d76 <__libc_init_array+0x1e>
 8007d90:	08007e00 	.word	0x08007e00
 8007d94:	08007e00 	.word	0x08007e00
 8007d98:	08007e00 	.word	0x08007e00
 8007d9c:	08007e04 	.word	0x08007e04

08007da0 <_init>:
 8007da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da2:	bf00      	nop
 8007da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007da6:	bc08      	pop	{r3}
 8007da8:	469e      	mov	lr, r3
 8007daa:	4770      	bx	lr

08007dac <_fini>:
 8007dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dae:	bf00      	nop
 8007db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007db2:	bc08      	pop	{r3}
 8007db4:	469e      	mov	lr, r3
 8007db6:	4770      	bx	lr
